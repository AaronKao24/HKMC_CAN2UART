
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:

void
cbor_nb_reader_init(struct cbor_nb_reader *cnr,
		    struct net_buf *nb)
{
	cnr->r.get8 = &cbor_nb_reader_get8;
   0:	20006500 	.word	0x20006500
	cnr->r.get16 = &cbor_nb_reader_get16;
   4:	00003f71 	.word	0x00003f71
	cnr->r.get32 = &cbor_nb_reader_get32;
   8:	0000bfa7 	.word	0x0000bfa7
	cnr->r.get64 = &cbor_nb_reader_get64;
   c:	00003f45 	.word	0x00003f45
	cnr->r.cmp = &cbor_nb_reader_cmp;
  10:	00003f45 	.word	0x00003f45
	cnr->r.cpy = &cbor_nb_reader_cpy;
  14:	00003f45 	.word	0x00003f45

	cnr->nb = nb;
	cnr->r.message_size = nb->len;
  18:	00003f45 	.word	0x00003f45
	...
}
  2c:	000039b5 	.word	0x000039b5
  30:	00003f45 	.word	0x00003f45
  34:	00000000 	.word	0x00000000
  38:	00003925 	.word	0x00003925
  3c:	00003f45 	.word	0x00003f45

00000040 <_irq_vector_table>:
  40:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  50:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  60:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  70:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  80:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  90:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  a0:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  b0:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  c0:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  d0:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  e0:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..
  f0:	00003b2d 00003b2d 00003b2d 00003b2d     -;..-;..-;..-;..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96e 	b.w	3f4 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	4604      	mov	r4, r0
     138:	468c      	mov	ip, r1
     13a:	2b00      	cmp	r3, #0
     13c:	f040 8083 	bne.w	246 <CONFIG_IMG_BLOCK_BUF_SIZE+0x46>
     140:	428a      	cmp	r2, r1
     142:	4617      	mov	r7, r2
     144:	d947      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     146:	fab2 f282 	clz	r2, r2
     14a:	b142      	cbz	r2, 15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     14c:	f1c2 0020 	rsb	r0, r2, #32
     150:	fa24 f000 	lsr.w	r0, r4, r0
     154:	4091      	lsls	r1, r2
     156:	4097      	lsls	r7, r2
     158:	ea40 0c01 	orr.w	ip, r0, r1
     15c:	4094      	lsls	r4, r2
     15e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     162:	0c23      	lsrs	r3, r4, #16
     164:	fbbc f6f8 	udiv	r6, ip, r8
     168:	fa1f fe87 	uxth.w	lr, r7
     16c:	fb08 c116 	mls	r1, r8, r6, ip
     170:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     174:	fb06 f10e 	mul.w	r1, r6, lr
     178:	4299      	cmp	r1, r3
     17a:	d909      	bls.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     17c:	18fb      	adds	r3, r7, r3
     17e:	f106 30ff 	add.w	r0, r6, #4294967295
     182:	f080 8119 	bcs.w	3b8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xb8>
     186:	4299      	cmp	r1, r3
     188:	f240 8116 	bls.w	3b8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xb8>
     18c:	3e02      	subs	r6, #2
     18e:	443b      	add	r3, r7
     190:	1a5b      	subs	r3, r3, r1
     192:	b2a4      	uxth	r4, r4
     194:	fbb3 f0f8 	udiv	r0, r3, r8
     198:	fb08 3310 	mls	r3, r8, r0, r3
     19c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a0:	fb00 fe0e 	mul.w	lr, r0, lr
     1a4:	45a6      	cmp	lr, r4
     1a6:	d909      	bls.n	1bc <CONFIG_IDLE_STACK_SIZE+0x7c>
     1a8:	193c      	adds	r4, r7, r4
     1aa:	f100 33ff 	add.w	r3, r0, #4294967295
     1ae:	f080 8105 	bcs.w	3bc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xbc>
     1b2:	45a6      	cmp	lr, r4
     1b4:	f240 8102 	bls.w	3bc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xbc>
     1b8:	3802      	subs	r0, #2
     1ba:	443c      	add	r4, r7
     1bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1c0:	eba4 040e 	sub.w	r4, r4, lr
     1c4:	2600      	movs	r6, #0
     1c6:	b11d      	cbz	r5, 1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     1c8:	40d4      	lsrs	r4, r2
     1ca:	2300      	movs	r3, #0
     1cc:	e9c5 4300 	strd	r4, r3, [r5]
     1d0:	4631      	mov	r1, r6
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d150      	bne.n	284 <CONFIG_IMG_BLOCK_BUF_SIZE+0x84>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2601      	movs	r6, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c21      	lsrs	r1, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	428b      	cmp	r3, r1
     202:	d907      	bls.n	214 <CONFIG_IMG_BLOCK_BUF_SIZE+0x14>
     204:	1879      	adds	r1, r7, r1
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IMG_BLOCK_BUF_SIZE+0x12>
     20c:	428b      	cmp	r3, r1
     20e:	f200 80e9 	bhi.w	3e4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe4>
     212:	4684      	mov	ip, r0
     214:	1ac9      	subs	r1, r1, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb1 f0fe 	udiv	r0, r1, lr
     21c:	fb0e 1110 	mls	r1, lr, r0, r1
     220:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IMG_BLOCK_BUF_SIZE+0x3c>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IMG_BLOCK_BUF_SIZE+0x3a>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d9 	bhi.w	3ec <CONFIG_USB_DFU_DETACH_TIMEOUT+0x4>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7bf      	b.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     246:	428b      	cmp	r3, r1
     248:	d909      	bls.n	25e <CONFIG_IMG_BLOCK_BUF_SIZE+0x5e>
     24a:	2d00      	cmp	r5, #0
     24c:	f000 80b1 	beq.w	3b2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xb2>
     250:	2600      	movs	r6, #0
     252:	e9c5 0100 	strd	r0, r1, [r5]
     256:	4630      	mov	r0, r6
     258:	4631      	mov	r1, r6
     25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25e:	fab3 f683 	clz	r6, r3
     262:	2e00      	cmp	r6, #0
     264:	d14a      	bne.n	2fc <CONFIG_IMG_BLOCK_BUF_SIZE+0xfc>
     266:	428b      	cmp	r3, r1
     268:	d302      	bcc.n	270 <CONFIG_IMG_BLOCK_BUF_SIZE+0x70>
     26a:	4282      	cmp	r2, r0
     26c:	f200 80b8 	bhi.w	3e0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe0>
     270:	1a84      	subs	r4, r0, r2
     272:	eb61 0103 	sbc.w	r1, r1, r3
     276:	2001      	movs	r0, #1
     278:	468c      	mov	ip, r1
     27a:	2d00      	cmp	r5, #0
     27c:	d0a8      	beq.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     27e:	e9c5 4c00 	strd	r4, ip, [r5]
     282:	e7a5      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     284:	f1c2 0320 	rsb	r3, r2, #32
     288:	fa20 f603 	lsr.w	r6, r0, r3
     28c:	4097      	lsls	r7, r2
     28e:	fa01 f002 	lsl.w	r0, r1, r2
     292:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     296:	40d9      	lsrs	r1, r3
     298:	4330      	orrs	r0, r6
     29a:	0c03      	lsrs	r3, r0, #16
     29c:	fbb1 f6fe 	udiv	r6, r1, lr
     2a0:	fa1f f887 	uxth.w	r8, r7
     2a4:	fb0e 1116 	mls	r1, lr, r6, r1
     2a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2ac:	fb06 f108 	mul.w	r1, r6, r8
     2b0:	4299      	cmp	r1, r3
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IMG_BLOCK_BUF_SIZE+0xcc>
     2b8:	18fb      	adds	r3, r7, r3
     2ba:	f106 3cff 	add.w	ip, r6, #4294967295
     2be:	f080 808d 	bcs.w	3dc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xdc>
     2c2:	4299      	cmp	r1, r3
     2c4:	f240 808a 	bls.w	3dc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xdc>
     2c8:	3e02      	subs	r6, #2
     2ca:	443b      	add	r3, r7
     2cc:	1a5b      	subs	r3, r3, r1
     2ce:	b281      	uxth	r1, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	428b      	cmp	r3, r1
     2e2:	d907      	bls.n	2f4 <CONFIG_IMG_BLOCK_BUF_SIZE+0xf4>
     2e4:	1879      	adds	r1, r7, r1
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d273      	bcs.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     2ec:	428b      	cmp	r3, r1
     2ee:	d971      	bls.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     2f0:	3802      	subs	r0, #2
     2f2:	4439      	add	r1, r7
     2f4:	1acb      	subs	r3, r1, r3
     2f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c6 0c20 	rsb	ip, r6, #32
     300:	fa03 f406 	lsl.w	r4, r3, r6
     304:	fa22 f30c 	lsr.w	r3, r2, ip
     308:	431c      	orrs	r4, r3
     30a:	fa20 f70c 	lsr.w	r7, r0, ip
     30e:	fa01 f306 	lsl.w	r3, r1, r6
     312:	ea4f 4e14 	mov.w	lr, r4, lsr #16
     316:	fa21 f10c 	lsr.w	r1, r1, ip
     31a:	431f      	orrs	r7, r3
     31c:	0c3b      	lsrs	r3, r7, #16
     31e:	fbb1 f9fe 	udiv	r9, r1, lr
     322:	fa1f f884 	uxth.w	r8, r4
     326:	fb0e 1119 	mls	r1, lr, r9, r1
     32a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     32e:	fb09 fa08 	mul.w	sl, r9, r8
     332:	458a      	cmp	sl, r1
     334:	fa02 f206 	lsl.w	r2, r2, r6
     338:	fa00 f306 	lsl.w	r3, r0, r6
     33c:	d908      	bls.n	350 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x50>
     33e:	1861      	adds	r1, r4, r1
     340:	f109 30ff 	add.w	r0, r9, #4294967295
     344:	d248      	bcs.n	3d8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd8>
     346:	458a      	cmp	sl, r1
     348:	d946      	bls.n	3d8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd8>
     34a:	f1a9 0902 	sub.w	r9, r9, #2
     34e:	4421      	add	r1, r4
     350:	eba1 010a 	sub.w	r1, r1, sl
     354:	b2bf      	uxth	r7, r7
     356:	fbb1 f0fe 	udiv	r0, r1, lr
     35a:	fb0e 1110 	mls	r1, lr, r0, r1
     35e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
     362:	fb00 f808 	mul.w	r8, r0, r8
     366:	45b8      	cmp	r8, r7
     368:	d907      	bls.n	37a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x7a>
     36a:	19e7      	adds	r7, r4, r7
     36c:	f100 31ff 	add.w	r1, r0, #4294967295
     370:	d22e      	bcs.n	3d0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd0>
     372:	45b8      	cmp	r8, r7
     374:	d92c      	bls.n	3d0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd0>
     376:	3802      	subs	r0, #2
     378:	4427      	add	r7, r4
     37a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37e:	eba7 0708 	sub.w	r7, r7, r8
     382:	fba0 8902 	umull	r8, r9, r0, r2
     386:	454f      	cmp	r7, r9
     388:	46c6      	mov	lr, r8
     38a:	4649      	mov	r1, r9
     38c:	d31a      	bcc.n	3c4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc4>
     38e:	d017      	beq.n	3c0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc0>
     390:	b15d      	cbz	r5, 3aa <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xaa>
     392:	ebb3 020e 	subs.w	r2, r3, lr
     396:	eb67 0701 	sbc.w	r7, r7, r1
     39a:	fa07 fc0c 	lsl.w	ip, r7, ip
     39e:	40f2      	lsrs	r2, r6
     3a0:	ea4c 0202 	orr.w	r2, ip, r2
     3a4:	40f7      	lsrs	r7, r6
     3a6:	e9c5 2700 	strd	r2, r7, [r5]
     3aa:	2600      	movs	r6, #0
     3ac:	4631      	mov	r1, r6
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	462e      	mov	r6, r5
     3b4:	4628      	mov	r0, r5
     3b6:	e70b      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     3b8:	4606      	mov	r6, r0
     3ba:	e6e9      	b.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     3bc:	4618      	mov	r0, r3
     3be:	e6fd      	b.n	1bc <CONFIG_IDLE_STACK_SIZE+0x7c>
     3c0:	4543      	cmp	r3, r8
     3c2:	d2e5      	bcs.n	390 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x90>
     3c4:	ebb8 0e02 	subs.w	lr, r8, r2
     3c8:	eb69 0104 	sbc.w	r1, r9, r4
     3cc:	3801      	subs	r0, #1
     3ce:	e7df      	b.n	390 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x90>
     3d0:	4608      	mov	r0, r1
     3d2:	e7d2      	b.n	37a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x7a>
     3d4:	4660      	mov	r0, ip
     3d6:	e78d      	b.n	2f4 <CONFIG_IMG_BLOCK_BUF_SIZE+0xf4>
     3d8:	4681      	mov	r9, r0
     3da:	e7b9      	b.n	350 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x50>
     3dc:	4666      	mov	r6, ip
     3de:	e775      	b.n	2cc <CONFIG_IMG_BLOCK_BUF_SIZE+0xcc>
     3e0:	4630      	mov	r0, r6
     3e2:	e74a      	b.n	27a <CONFIG_IMG_BLOCK_BUF_SIZE+0x7a>
     3e4:	f1ac 0c02 	sub.w	ip, ip, #2
     3e8:	4439      	add	r1, r7
     3ea:	e713      	b.n	214 <CONFIG_IMG_BLOCK_BUF_SIZE+0x14>
     3ec:	3802      	subs	r0, #2
     3ee:	443c      	add	r4, r7
     3f0:	e724      	b.n	23c <CONFIG_IMG_BLOCK_BUF_SIZE+0x3c>
     3f2:	bf00      	nop

000003f4 <__aeabi_idiv0>:
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     3f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     3fa:	4b3b      	ldr	r3, [pc, #236]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     3fc:	4a3b      	ldr	r2, [pc, #236]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     3fe:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     402:	483b      	ldr	r0, [pc, #236]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     404:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     408:	2149      	movs	r1, #73	; 0x49
     40a:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     40e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     412:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     416:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     41a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     41e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     422:	f00b fbda 	bl	bbda <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     426:	f00a fc84 	bl	ad32 <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     42a:	4832      	ldr	r0, [pc, #200]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     42c:	f000 f878 	bl	520 <flash_device_get_binding>
     430:	b928      	cbnz	r0, 43e <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x3e>
        BOOT_LOG_ERR("Flash device %s not found",
     432:	4a30      	ldr	r2, [pc, #192]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     434:	4830      	ldr	r0, [pc, #192]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     436:	2145      	movs	r1, #69	; 0x45
     438:	f00b fbcf 	bl	bbda <z_log_minimal_printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     43c:	e7fe      	b.n	43c <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x3c>
            wait_for_usb_dfu(K_FOREVER);
            BOOT_LOG_INF("USB DFU wait time elapsed");
        }
    }
#elif defined(CONFIG_BOOT_USB_DFU_WAIT)
    rc = usb_enable(NULL);
     43e:	2000      	movs	r0, #0
     440:	f001 fef4 	bl	222c <usb_enable>
    if (rc) {
     444:	b178      	cbz	r0, 466 <FIH_LABEL_FIH_CALL_END_296+0x12>
        BOOT_LOG_ERR("Cannot enable USB");
     446:	482d      	ldr	r0, [pc, #180]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     448:	2145      	movs	r1, #69	; 0x45
    } else {
        BOOT_LOG_INF("Waiting for USB DFU");
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
     44a:	f00b fbc6 	bl	bbda <z_log_minimal_printk>

0000044e <FIH_LABEL_FIH_CALL_START_283>:
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     44e:	a801      	add	r0, sp, #4
     450:	f000 fc82 	bl	d58 <boot_go>

00000454 <FIH_LABEL_FIH_CALL_END_296>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     454:	4b2a      	ldr	r3, [pc, #168]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     456:	681b      	ldr	r3, [r3, #0]
     458:	4283      	cmp	r3, r0
     45a:	d010      	beq.n	47e <FIH_LABEL_FIH_CALL_END_296+0x2a>
        BOOT_LOG_ERR("Unable to find bootable image");
     45c:	4829      	ldr	r0, [pc, #164]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     45e:	2145      	movs	r1, #69	; 0x45
     460:	f00b fbbb 	bl	bbda <z_log_minimal_printk>
        FIH_PANIC;
     464:	e7fe      	b.n	464 <FIH_LABEL_FIH_CALL_END_296+0x10>
        BOOT_LOG_INF("Waiting for USB DFU");
     466:	4828      	ldr	r0, [pc, #160]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     468:	2149      	movs	r1, #73	; 0x49
     46a:	f00b fbb6 	bl	bbda <z_log_minimal_printk>
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
     46e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     472:	2100      	movs	r1, #0
     474:	f002 fea4 	bl	31c0 <wait_for_usb_dfu>
        BOOT_LOG_INF("USB DFU wait time elapsed");
     478:	4824      	ldr	r0, [pc, #144]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     47a:	2149      	movs	r1, #73	; 0x49
     47c:	e7e5      	b.n	44a <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x4a>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     47e:	9a03      	ldr	r2, [sp, #12]
     480:	4823      	ldr	r0, [pc, #140]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     482:	2149      	movs	r1, #73	; 0x49
     484:	f00b fba9 	bl	bbda <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     488:	4822      	ldr	r0, [pc, #136]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     48a:	2149      	movs	r1, #73	; 0x49
     48c:	f00b fba5 	bl	bbda <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     490:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     494:	2000      	movs	r0, #0
     496:	f00c f928 	bl	c6ea <fprotect_area>

    if (rc != 0) {
     49a:	b120      	cbz	r0, 4a6 <__data_size+0x12>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     49c:	481e      	ldr	r0, [pc, #120]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     49e:	2145      	movs	r1, #69	; 0x45
     4a0:	f00b fb9b 	bl	bbda <z_log_minimal_printk>
        while (1)
     4a4:	e7fe      	b.n	4a4 <__data_size+0x10>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4a6:	4669      	mov	r1, sp
     4a8:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4ac:	f000 f844 	bl	538 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4b0:	9b00      	ldr	r3, [sp, #0]
     4b2:	9c03      	ldr	r4, [sp, #12]
     4b4:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     4b6:	9b01      	ldr	r3, [sp, #4]
     4b8:	891d      	ldrh	r5, [r3, #8]
    usb_disable();
     4ba:	f001 fd9b 	bl	1ff4 <usb_disable>
                                     rsp->br_image_off +
     4be:	1966      	adds	r6, r4, r5
    nrf_cleanup_peripheral();
     4c0:	f000 ff2e 	bl	1320 <nrf_cleanup_peripheral>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     4c4:	f04f 0220 	mov.w	r2, #32
     4c8:	f3ef 8311 	mrs	r3, BASEPRI
     4cc:	f382 8812 	msr	BASEPRI_MAX, r2
     4d0:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4d4:	5963      	ldr	r3, [r4, r5]
     4d6:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     4da:	6873      	ldr	r3, [r6, #4]
     4dc:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     4de:	480f      	ldr	r0, [pc, #60]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4e0:	2145      	movs	r1, #69	; 0x45
     4e2:	f00b fb7a 	bl	bbda <z_log_minimal_printk>
    while (1)
     4e6:	e7fe      	b.n	4e6 <__data_size+0x52>
     4e8:	40010000 	.word	0x40010000
     4ec:	6e524635 	.word	0x6e524635
     4f0:	0000dd34 	.word	0x0000dd34
     4f4:	0000dd4d 	.word	0x0000dd4d
     4f8:	0000dd60 	.word	0x0000dd60
     4fc:	0000dd7f 	.word	0x0000dd7f
     500:	20000be4 	.word	0x20000be4
     504:	0000ddce 	.word	0x0000ddce
     508:	0000dd96 	.word	0x0000dd96
     50c:	0000ddaf 	.word	0x0000ddaf
     510:	0000ddf1 	.word	0x0000ddf1
     514:	0000de20 	.word	0x0000de20
     518:	0000de45 	.word	0x0000de45
     51c:	0000de78 	.word	0x0000de78

00000520 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     520:	b510      	push	{r4, lr}
    if (!flash_dev) {
     522:	4c04      	ldr	r4, [pc, #16]	; (534 <flash_device_get_binding+0x14>)
     524:	6823      	ldr	r3, [r4, #0]
     526:	b913      	cbnz	r3, 52e <flash_device_get_binding+0xe>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     528:	f007 fcee 	bl	7f08 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     52c:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     52e:	6820      	ldr	r0, [r4, #0]
     530:	bd10      	pop	{r4, pc}
     532:	bf00      	nop
     534:	20000be0 	.word	0x20000be0

00000538 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     538:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     53a:	b140      	cbz	r0, 54e <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     53c:	4602      	mov	r2, r0
     53e:	2300      	movs	r3, #0
     540:	4804      	ldr	r0, [pc, #16]	; (554 <flash_device_base+0x1c>)
     542:	2145      	movs	r1, #69	; 0x45
     544:	f00b fb49 	bl	bbda <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     548:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     54c:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     54e:	6008      	str	r0, [r1, #0]
    return 0;
     550:	e7fc      	b.n	54c <flash_device_base+0x14>
     552:	bf00      	nop
     554:	0000de9b 	.word	0x0000de9b

00000558 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     55c:	f8df 921c 	ldr.w	r9, [pc, #540]	; 77c <FIH_LABEL_FIH_CALL_END_920+0x2e>
{
     560:	b0dd      	sub	sp, #372	; 0x174
     562:	4615      	mov	r5, r2
     564:	461e      	mov	r6, r3
     566:	e9dd 4868 	ldrd	r4, r8, [sp, #416]	; 0x1a0
     56a:	f8dd b198 	ldr.w	fp, [sp, #408]	; 0x198
    fih_int valid_signature = FIH_FAILURE;
     56e:	f8d9 7000 	ldr.w	r7, [r9]
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     572:	f000 fea3 	bl	12bc <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     576:	4b7f      	ldr	r3, [pc, #508]	; (774 <FIH_LABEL_FIH_CALL_END_920+0x26>)
     578:	2201      	movs	r2, #1
     57a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     57e:	a83c      	add	r0, sp, #240	; 0xf0
     580:	f009 fb0c 	bl	9b9c <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     584:	f8cd 9014 	str.w	r9, [sp, #20]
     588:	b13c      	cbz	r4, 59a <bootutil_img_validate+0x42>
     58a:	f1b8 0f00 	cmp.w	r8, #0
     58e:	dd04      	ble.n	59a <bootutil_img_validate+0x42>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     590:	4642      	mov	r2, r8
     592:	4621      	mov	r1, r4
     594:	a83c      	add	r0, sp, #240	; 0xf0
     596:	f00a ff24 	bl	b3e2 <cc310_sha256_update>
    size += hdr->ih_protect_tlv_size;
     59a:	896b      	ldrh	r3, [r5, #10]
    size = hdr_size = hdr->ih_hdr_size;
     59c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
     5a0:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     5a2:	68eb      	ldr	r3, [r5, #12]
    for (off = 0; off < size; off += blk_sz) {
     5a4:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     5a8:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     5aa:	45c8      	cmp	r8, r9
     5ac:	d84e      	bhi.n	64c <FIH_LABEL_FIH_CALL_END_383+0xe>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     5ae:	a90f      	add	r1, sp, #60	; 0x3c
     5b0:	a83c      	add	r0, sp, #240	; 0xf0
     5b2:	f009 fb65 	bl	9c80 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     5b6:	4b6f      	ldr	r3, [pc, #444]	; (774 <FIH_LABEL_FIH_CALL_END_920+0x26>)
     5b8:	2200      	movs	r2, #0
     5ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     5be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     5c2:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
     5c4:	b123      	cbz	r3, 5d0 <bootutil_img_validate+0x78>
        memcpy(out_hash, hash, 32);
     5c6:	2220      	movs	r2, #32
     5c8:	a90f      	add	r1, sp, #60	; 0x3c
     5ca:	4618      	mov	r0, r3
     5cc:	f00b fd1f 	bl	c00e <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     5d0:	2300      	movs	r3, #0
     5d2:	9300      	str	r3, [sp, #0]
     5d4:	4632      	mov	r2, r6
     5d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
     5da:	4629      	mov	r1, r5
     5dc:	a809      	add	r0, sp, #36	; 0x24
     5de:	f00a fba9 	bl	ad34 <bootutil_tlv_iter_begin>
    if (rc) {
     5e2:	4604      	mov	r4, r0
     5e4:	2800      	cmp	r0, #0
     5e6:	d144      	bne.n	672 <FIH_LABEL_FIH_CALL_END_383+0x34>
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     5e8:	f8df a194 	ldr.w	sl, [pc, #404]	; 780 <FIH_LABEL_FIH_CALL_END_920+0x32>
     5ec:	f8df 8184 	ldr.w	r8, [pc, #388]	; 774 <FIH_LABEL_FIH_CALL_END_920+0x26>
    int sha256_valid = 0;
     5f0:	9003      	str	r0, [sp, #12]
    int key_id = -1;
     5f2:	f04f 35ff 	mov.w	r5, #4294967295
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     5f6:	f10d 031e 	add.w	r3, sp, #30
     5fa:	aa07      	add	r2, sp, #28
     5fc:	a908      	add	r1, sp, #32
     5fe:	a809      	add	r0, sp, #36	; 0x24
     600:	f00a fbe4 	bl	adcc <bootutil_tlv_iter_next>
        if (rc < 0) {
     604:	1e04      	subs	r4, r0, #0
     606:	db34      	blt.n	672 <FIH_LABEL_FIH_CALL_END_383+0x34>
        } else if (rc > 0) {
     608:	f040 80a4 	bne.w	754 <FIH_LABEL_FIH_CALL_END_920+0x6>
        if (type == IMAGE_TLV_SHA256) {
     60c:	f8bd 901e 	ldrh.w	r9, [sp, #30]
     610:	f1b9 0f10 	cmp.w	r9, #16
     614:	d138      	bne.n	688 <FIH_LABEL_FIH_CALL_END_383+0x4a>
            if (len != sizeof(hash)) {
     616:	f8bd 901c 	ldrh.w	r9, [sp, #28]
     61a:	f1b9 0f20 	cmp.w	r9, #32
     61e:	f040 80a3 	bne.w	768 <FIH_LABEL_FIH_CALL_END_920+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     622:	9908      	ldr	r1, [sp, #32]
     624:	464b      	mov	r3, r9
     626:	aa3c      	add	r2, sp, #240	; 0xf0
     628:	4630      	mov	r0, r6
     62a:	f00b fbba 	bl	bda2 <flash_area_read>
            if (rc) {
     62e:	4604      	mov	r4, r0
     630:	b9f8      	cbnz	r0, 672 <FIH_LABEL_FIH_CALL_END_383+0x34>

00000632 <FIH_LABEL_FIH_CALL_START_364>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     632:	464a      	mov	r2, r9
     634:	a93c      	add	r1, sp, #240	; 0xf0
     636:	a80f      	add	r0, sp, #60	; 0x3c
     638:	f00a fc3f 	bl	aeba <boot_fih_memequal>
     63c:	4604      	mov	r4, r0

0000063e <FIH_LABEL_FIH_CALL_END_383>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     63e:	4b4e      	ldr	r3, [pc, #312]	; (778 <FIH_LABEL_FIH_CALL_END_920+0x2a>)
     640:	681b      	ldr	r3, [r3, #0]
     642:	4283      	cmp	r3, r0
     644:	d115      	bne.n	672 <FIH_LABEL_FIH_CALL_END_383+0x34>
            sha256_valid = 1;
     646:	2301      	movs	r3, #1
     648:	9303      	str	r3, [sp, #12]
     64a:	e7d4      	b.n	5f6 <bootutil_img_validate+0x9e>
        blk_sz = size - off;
     64c:	9a67      	ldr	r2, [sp, #412]	; 0x19c
     64e:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     652:	429a      	cmp	r2, r3
     654:	bf28      	it	cs
     656:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     658:	4613      	mov	r3, r2
     65a:	4692      	mov	sl, r2
     65c:	4649      	mov	r1, r9
     65e:	465a      	mov	r2, fp
     660:	4630      	mov	r0, r6
     662:	f00b fb9e 	bl	bda2 <flash_area_read>
        if (rc) {
     666:	4604      	mov	r4, r0
     668:	b138      	cbz	r0, 67a <FIH_LABEL_FIH_CALL_END_383+0x3c>
     66a:	4b42      	ldr	r3, [pc, #264]	; (774 <FIH_LABEL_FIH_CALL_END_920+0x26>)
     66c:	2200      	movs	r2, #0
     66e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     672:	4620      	mov	r0, r4
     674:	b05d      	add	sp, #372	; 0x174
     676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     67a:	4652      	mov	r2, sl
     67c:	4659      	mov	r1, fp
     67e:	a83c      	add	r0, sp, #240	; 0xf0
     680:	f00a feaf 	bl	b3e2 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     684:	44d1      	add	r9, sl
     686:	e790      	b.n	5aa <bootutil_img_validate+0x52>
        } else if (type == IMAGE_TLV_KEYHASH) {
     688:	f1b9 0f01 	cmp.w	r9, #1
     68c:	d13f      	bne.n	70e <FIH_LABEL_FIH_CALL_END_383+0xd0>
            if (len > 32) {
     68e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     692:	2b20      	cmp	r3, #32
     694:	d868      	bhi.n	768 <FIH_LABEL_FIH_CALL_END_920+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     696:	9908      	ldr	r1, [sp, #32]
     698:	aa3c      	add	r2, sp, #240	; 0xf0
     69a:	4630      	mov	r0, r6
     69c:	f00b fb81 	bl	bda2 <flash_area_read>
            if (rc) {
     6a0:	4604      	mov	r4, r0
     6a2:	2800      	cmp	r0, #0
     6a4:	d1e5      	bne.n	672 <FIH_LABEL_FIH_CALL_END_383+0x34>
            key_id = bootutil_find_key(buf, len);
     6a6:	f89d 501c 	ldrb.w	r5, [sp, #28]
    if (keyhash_len > 32) {
     6aa:	2d20      	cmp	r5, #32
     6ac:	d80a      	bhi.n	6c4 <FIH_LABEL_FIH_CALL_END_383+0x86>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6ae:	f8da 3000 	ldr.w	r3, [sl]
     6b2:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 784 <FIH_LABEL_FIH_CALL_END_920+0x36>
     6b6:	9304      	str	r3, [sp, #16]
     6b8:	9b04      	ldr	r3, [sp, #16]
     6ba:	429c      	cmp	r4, r3
     6bc:	db05      	blt.n	6ca <FIH_LABEL_FIH_CALL_END_383+0x8c>
     6be:	2300      	movs	r3, #0
     6c0:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
        return -1;
     6c4:	f04f 34ff 	mov.w	r4, #4294967295
     6c8:	e01d      	b.n	706 <FIH_LABEL_FIH_CALL_END_383+0xc8>
    cc310_init();
     6ca:	f000 fdf7 	bl	12bc <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     6ce:	f8c8 9500 	str.w	r9, [r8, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     6d2:	a81f      	add	r0, sp, #124	; 0x7c
     6d4:	f009 fa62 	bl	9b9c <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     6d8:	f8db 2004 	ldr.w	r2, [fp, #4]
     6dc:	f85b 1b08 	ldr.w	r1, [fp], #8
     6e0:	6812      	ldr	r2, [r2, #0]
     6e2:	a81f      	add	r0, sp, #124	; 0x7c
     6e4:	f00a fe7d 	bl	b3e2 <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     6e8:	a917      	add	r1, sp, #92	; 0x5c
     6ea:	a81f      	add	r0, sp, #124	; 0x7c
     6ec:	f009 fac8 	bl	9c80 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     6f0:	2200      	movs	r2, #0
     6f2:	f8c8 2500 	str.w	r2, [r8, #1280]	; 0x500
        if (!memcmp(hash, keyhash, keyhash_len)) {
     6f6:	a93c      	add	r1, sp, #240	; 0xf0
     6f8:	462a      	mov	r2, r5
     6fa:	a817      	add	r0, sp, #92	; 0x5c
     6fc:	f00b fc77 	bl	bfee <memcmp>
     700:	b918      	cbnz	r0, 70a <FIH_LABEL_FIH_CALL_END_383+0xcc>
     702:	f8c8 0500 	str.w	r0, [r8, #1280]	; 0x500
            key_id = bootutil_find_key(buf, len);
     706:	4625      	mov	r5, r4
     708:	e775      	b.n	5f6 <bootutil_img_validate+0x9e>
    for (i = 0; i < bootutil_key_cnt; i++) {
     70a:	3401      	adds	r4, #1
     70c:	e7d4      	b.n	6b8 <FIH_LABEL_FIH_CALL_END_383+0x7a>
        } else if (type == EXPECTED_SIG_TLV) {
     70e:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
     712:	f47f af70 	bne.w	5f6 <bootutil_img_validate+0x9e>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     716:	2d00      	cmp	r5, #0
     718:	db19      	blt.n	74e <FIH_LABEL_FIH_CALL_END_920>
     71a:	f8da 3000 	ldr.w	r3, [sl]
     71e:	42ab      	cmp	r3, r5
     720:	dd15      	ble.n	74e <FIH_LABEL_FIH_CALL_END_920>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     722:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     726:	2b80      	cmp	r3, #128	; 0x80
     728:	d81e      	bhi.n	768 <FIH_LABEL_FIH_CALL_END_920+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     72a:	9908      	ldr	r1, [sp, #32]
     72c:	aa3c      	add	r2, sp, #240	; 0xf0
     72e:	4630      	mov	r0, r6
     730:	f00b fb37 	bl	bda2 <flash_area_read>
            if (rc) {
     734:	4604      	mov	r4, r0
     736:	2800      	cmp	r0, #0
     738:	d19b      	bne.n	672 <FIH_LABEL_FIH_CALL_END_383+0x34>

0000073a <FIH_LABEL_FIH_CALL_START_898>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     73a:	b2ed      	uxtb	r5, r5
     73c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     740:	9500      	str	r5, [sp, #0]
     742:	aa3c      	add	r2, sp, #240	; 0xf0
     744:	2120      	movs	r1, #32
     746:	a80f      	add	r0, sp, #60	; 0x3c
     748:	f000 f81e 	bl	788 <bootutil_verify_sig>
     74c:	4607      	mov	r7, r0

0000074e <FIH_LABEL_FIH_CALL_END_920>:
                key_id = -1;
     74e:	f04f 35ff 	mov.w	r5, #4294967295
     752:	e750      	b.n	5f6 <bootutil_img_validate+0x9e>
    if (rc) {
     754:	9b03      	ldr	r3, [sp, #12]
     756:	b153      	cbz	r3, 76e <FIH_LABEL_FIH_CALL_END_920+0x20>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     758:	4b07      	ldr	r3, [pc, #28]	; (778 <FIH_LABEL_FIH_CALL_END_920+0x2a>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     75a:	681b      	ldr	r3, [r3, #0]
     75c:	42bb      	cmp	r3, r7
     75e:	d001      	beq.n	764 <FIH_LABEL_FIH_CALL_END_920+0x16>
        return FIH_FAILURE;
     760:	9b05      	ldr	r3, [sp, #20]
     762:	681f      	ldr	r7, [r3, #0]
                rc = -1;
     764:	463c      	mov	r4, r7
     766:	e784      	b.n	672 <FIH_LABEL_FIH_CALL_END_383+0x34>
     768:	f04f 34ff 	mov.w	r4, #4294967295
     76c:	e781      	b.n	672 <FIH_LABEL_FIH_CALL_END_383+0x34>
     76e:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     770:	e77f      	b.n	672 <FIH_LABEL_FIH_CALL_END_383+0x34>
     772:	bf00      	nop
     774:	5002a000 	.word	0x5002a000
     778:	20000be4 	.word	0x20000be4
     77c:	20000000 	.word	0x20000000
     780:	0000d888 	.word	0x0000d888
     784:	0000d88c 	.word	0x0000d88c

00000788 <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     78c:	b096      	sub	sp, #88	; 0x58
     78e:	4617      	mov	r7, r2
     790:	461d      	mov	r5, r3
     792:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     796:	4b35      	ldr	r3, [pc, #212]	; (86c <CONFIG_ISR_STACK_SIZE+0x6c>)
{
     798:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     79a:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
     79e:	9101      	str	r1, [sp, #4]
    end = pubkey + *bootutil_keys[key_id].len;
     7a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
{
     7a4:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     7a6:	685b      	ldr	r3, [r3, #4]
     7a8:	6818      	ldr	r0, [r3, #0]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     7aa:	aa02      	add	r2, sp, #8
     7ac:	4401      	add	r1, r0
     7ae:	2330      	movs	r3, #48	; 0x30
     7b0:	a801      	add	r0, sp, #4
     7b2:	f00a fda3 	bl	b2fc <mbedtls_asn1_get_tag>
     7b6:	b110      	cbz	r0, 7be <bootutil_verify_sig+0x36>
    }
    rc = mbedtls_ecdsa_read_signature(&ctx, hash, hlen, sig, slen);

#else /* CY_MBEDTLS_HW_ACCELERATION */
    if (hlen != NUM_ECC_BYTES) {
        return -1;
     7b8:	f04f 30ff 	mov.w	r0, #4294967295
     7bc:	e053      	b.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
    end = *cp + len;
     7be:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     7c2:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     7c4:	aa03      	add	r2, sp, #12
     7c6:	ab06      	add	r3, sp, #24
     7c8:	4621      	mov	r1, r4
     7ca:	a801      	add	r0, sp, #4
     7cc:	f00a fdbe 	bl	b34c <mbedtls_asn1_get_alg>
     7d0:	2800      	cmp	r0, #0
     7d2:	d1f1      	bne.n	7b8 <bootutil_verify_sig+0x30>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     7d4:	9a04      	ldr	r2, [sp, #16]
     7d6:	2a07      	cmp	r2, #7
     7d8:	d1ee      	bne.n	7b8 <bootutil_verify_sig+0x30>
        memcmp(alg.MBEDTLS_CONTEXT_MEMBER(p), ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     7da:	4925      	ldr	r1, [pc, #148]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     7dc:	9805      	ldr	r0, [sp, #20]
     7de:	f00b fc06 	bl	bfee <memcmp>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     7e2:	2800      	cmp	r0, #0
     7e4:	d1e8      	bne.n	7b8 <bootutil_verify_sig+0x30>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     7e6:	9a07      	ldr	r2, [sp, #28]
     7e8:	2a08      	cmp	r2, #8
     7ea:	d1e5      	bne.n	7b8 <bootutil_verify_sig+0x30>
        memcmp(param.MBEDTLS_CONTEXT_MEMBER(p), ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     7ec:	4921      	ldr	r1, [pc, #132]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     7ee:	9808      	ldr	r0, [sp, #32]
     7f0:	f00b fbfd 	bl	bfee <memcmp>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     7f4:	2800      	cmp	r0, #0
     7f6:	d1df      	bne.n	7b8 <bootutil_verify_sig+0x30>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     7f8:	aa02      	add	r2, sp, #8
     7fa:	4621      	mov	r1, r4
     7fc:	a801      	add	r0, sp, #4
     7fe:	f00a fd91 	bl	b324 <mbedtls_asn1_get_bitstring_null>
     802:	2800      	cmp	r0, #0
     804:	d1d8      	bne.n	7b8 <bootutil_verify_sig+0x30>
    if (*cp + len != end) {
     806:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
     80a:	4413      	add	r3, r2
     80c:	429c      	cmp	r4, r3
     80e:	d1d3      	bne.n	7b8 <bootutil_verify_sig+0x30>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     810:	2a41      	cmp	r2, #65	; 0x41
     812:	d1d1      	bne.n	7b8 <bootutil_verify_sig+0x30>
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     814:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     816:	2330      	movs	r3, #48	; 0x30
     818:	aa03      	add	r2, sp, #12
     81a:	4629      	mov	r1, r5
     81c:	a802      	add	r0, sp, #8
     81e:	9702      	str	r7, [sp, #8]
     820:	f00a fd6c 	bl	b2fc <mbedtls_asn1_get_tag>
    if (rc) {
     824:	2800      	cmp	r0, #0
     826:	d1c7      	bne.n	7b8 <bootutil_verify_sig+0x30>
    if (cp + len > end) {
     828:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     82c:	4413      	add	r3, r2
     82e:	429d      	cmp	r5, r3
     830:	d3c2      	bcc.n	7b8 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature, &cp, end);
     832:	462a      	mov	r2, r5
     834:	a902      	add	r1, sp, #8
     836:	a806      	add	r0, sp, #24
     838:	f00a fb13 	bl	ae62 <bootutil_read_bigint>
    if (rc) {
     83c:	2800      	cmp	r0, #0
     83e:	d1bb      	bne.n	7b8 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     840:	462a      	mov	r2, r5
     842:	a902      	add	r1, sp, #8
     844:	a80e      	add	r0, sp, #56	; 0x38
     846:	f00a fb0c 	bl	ae62 <bootutil_read_bigint>
    if (rc) {
     84a:	2800      	cmp	r0, #0
     84c:	d1b4      	bne.n	7b8 <bootutil_verify_sig+0x30>
    if (hlen != NUM_ECC_BYTES) {
     84e:	2e20      	cmp	r6, #32
     850:	d1b2      	bne.n	7b8 <bootutil_verify_sig+0x30>

    bootutil_ecdsa_p256_init(&ctx);
#ifdef MCUBOOT_ECDSA_NEED_ASN1_SIG
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, sig, slen);
#else
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     852:	9901      	ldr	r1, [sp, #4]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     854:	780b      	ldrb	r3, [r1, #0]
     856:	2b04      	cmp	r3, #4
     858:	d1ae      	bne.n	7b8 <bootutil_verify_sig+0x30>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, sig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     85a:	4633      	mov	r3, r6
     85c:	aa06      	add	r2, sp, #24
     85e:	3101      	adds	r1, #1
     860:	4640      	mov	r0, r8
     862:	f000 fd43 	bl	12ec <cc310_ecdsa_verify_secp256r1>
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     866:	b016      	add	sp, #88	; 0x58
     868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     86c:	0000d88c 	.word	0x0000d88c
     870:	0000dec1 	.word	0x0000dec1
     874:	0000dec9 	.word	0x0000dec9

00000878 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     87c:	b086      	sub	sp, #24
    uint8_t areas[2] = {
     87e:	2302      	movs	r3, #2
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     880:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8f0 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     884:	f8ad 3000 	strh.w	r3, [sp]
{
     888:	460d      	mov	r5, r1
     88a:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     88c:	2600      	movs	r6, #0
        rc = flash_area_open(areas[i], fap);
     88e:	f817 0b01 	ldrb.w	r0, [r7], #1
     892:	a901      	add	r1, sp, #4
     894:	f002 fce0 	bl	3258 <flash_area_open>
        if (rc != 0) {
     898:	4604      	mov	r4, r0
     89a:	b9a0      	cbnz	r0, 8c6 <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     89c:	9801      	ldr	r0, [sp, #4]
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     89e:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     8a0:	2310      	movs	r3, #16
     8a2:	aa02      	add	r2, sp, #8
     8a4:	3910      	subs	r1, #16
     8a6:	f00b fa7c 	bl	bda2 <flash_area_read>
     8aa:	4604      	mov	r4, r0
        flash_area_close(*fap);
     8ac:	9801      	ldr	r0, [sp, #4]
     8ae:	f00b fa77 	bl	bda0 <flash_area_close>
        if (rc != 0) {
     8b2:	b944      	cbnz	r4, 8c6 <boot_read_swap_size+0x4e>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     8b4:	2210      	movs	r2, #16
     8b6:	4641      	mov	r1, r8
     8b8:	a802      	add	r0, sp, #8
     8ba:	f00b fb98 	bl	bfee <memcmp>
     8be:	b140      	cbz	r0, 8d2 <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     8c0:	b12e      	cbz	r6, 8ce <boot_read_swap_size+0x56>
    return -1;
     8c2:	f04f 34ff 	mov.w	r4, #4294967295
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     8c6:	4620      	mov	r0, r4
     8c8:	b006      	add	sp, #24
     8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8ce:	2601      	movs	r6, #1
     8d0:	e7dd      	b.n	88e <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     8d2:	9801      	ldr	r0, [sp, #4]
     8d4:	f00b ff28 	bl	c728 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     8d8:	2304      	movs	r3, #4
     8da:	f1a0 0108 	sub.w	r1, r0, #8
     8de:	462a      	mov	r2, r5
     8e0:	9801      	ldr	r0, [sp, #4]
     8e2:	f00b fa5e 	bl	bda2 <flash_area_read>
     8e6:	4604      	mov	r4, r0
        flash_area_close(fap);
     8e8:	9801      	ldr	r0, [sp, #4]
     8ea:	f00b fa59 	bl	bda0 <flash_area_close>
     8ee:	e7ea      	b.n	8c6 <boot_read_swap_size+0x4e>
     8f0:	0000dafc 	.word	0x0000dafc

000008f4 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     8f8:	4b38      	ldr	r3, [pc, #224]	; (9dc <FIH_LABEL_FIH_CALL_END_477+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     8fa:	b088      	sub	sp, #32
     8fc:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8fe:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     900:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     902:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     904:	f00a fa0a 	bl	ad1c <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     908:	a906      	add	r1, sp, #24
     90a:	b2c0      	uxtb	r0, r0
     90c:	f002 fca4 	bl	3258 <flash_area_open>
    if (rc != 0) {
     910:	2800      	cmp	r0, #0
     912:	d157      	bne.n	9c4 <FIH_LABEL_FIH_CALL_END_477+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     914:	4629      	mov	r1, r5
     916:	f00a fa01 	bl	ad1c <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     91a:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     91c:	a907      	add	r1, sp, #28
     91e:	b2c0      	uxtb	r0, r0
     920:	fb04 6405 	mla	r4, r4, r5, r6
     924:	f002 fc98 	bl	3258 <flash_area_open>
    if (rc != 0) {
     928:	2800      	cmp	r0, #0
     92a:	d036      	beq.n	99a <FIH_LABEL_FIH_CALL_END_477+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     92c:	f04f 082c 	mov.w	r8, #44	; 0x2c
     930:	fb08 f805 	mul.w	r8, r8, r5
     934:	eb06 0708 	add.w	r7, r6, r8
     938:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     93a:	f011 0110 	ands.w	r1, r1, #16
     93e:	d137      	bne.n	9b0 <FIH_LABEL_FIH_CALL_END_477+0x54>

00000940 <FIH_LABEL_FIH_CALL_START_421>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     940:	f44f 7380 	mov.w	r3, #256	; 0x100
     944:	9301      	str	r3, [sp, #4]
     946:	4b26      	ldr	r3, [pc, #152]	; (9e0 <FIH_LABEL_FIH_CALL_END_477+0x84>)
     948:	9300      	str	r3, [sp, #0]
     94a:	4622      	mov	r2, r4
     94c:	e9cd 1103 	strd	r1, r1, [sp, #12]
     950:	9b06      	ldr	r3, [sp, #24]
     952:	9102      	str	r1, [sp, #8]
     954:	4608      	mov	r0, r1
     956:	f7ff fdff 	bl	558 <bootutil_img_validate>
     95a:	4604      	mov	r4, r0

0000095c <FIH_LABEL_FIH_CALL_END_477>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     95c:	4b21      	ldr	r3, [pc, #132]	; (9e4 <FIH_LABEL_FIH_CALL_END_477+0x88>)
     95e:	f856 2008 	ldr.w	r2, [r6, r8]
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     962:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     964:	429a      	cmp	r2, r3
     966:	d10c      	bne.n	982 <FIH_LABEL_FIH_CALL_END_477+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     968:	893a      	ldrh	r2, [r7, #8]
     96a:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     96c:	43d1      	mvns	r1, r2
     96e:	428b      	cmp	r3, r1
     970:	d807      	bhi.n	982 <FIH_LABEL_FIH_CALL_END_477+0x26>
        *dest = a + b;
     972:	4413      	add	r3, r2
    if (size >= flash_area_get_size(fap)) {
     974:	6882      	ldr	r2, [r0, #8]
     976:	4293      	cmp	r3, r2
     978:	d203      	bcs.n	982 <FIH_LABEL_FIH_CALL_END_477+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     97a:	4b1b      	ldr	r3, [pc, #108]	; (9e8 <FIH_LABEL_FIH_CALL_END_477+0x8c>)
     97c:	681b      	ldr	r3, [r3, #0]
     97e:	42a3      	cmp	r3, r4
     980:	d01d      	beq.n	9be <FIH_LABEL_FIH_CALL_END_477+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     982:	b345      	cbz	r5, 9d6 <FIH_LABEL_FIH_CALL_END_477+0x7a>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     984:	6882      	ldr	r2, [r0, #8]
     986:	2100      	movs	r1, #0
     988:	f00b fa55 	bl	be36 <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     98c:	4a17      	ldr	r2, [pc, #92]	; (9ec <FIH_LABEL_FIH_CALL_END_477+0x90>)
     98e:	4818      	ldr	r0, [pc, #96]	; (9f0 <FIH_LABEL_FIH_CALL_END_477+0x94>)
     990:	2145      	movs	r1, #69	; 0x45
     992:	f00b f922 	bl	bbda <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     996:	2401      	movs	r4, #1
     998:	e011      	b.n	9be <FIH_LABEL_FIH_CALL_END_477+0x62>
    erased_val = flash_area_erased_val(fap);
     99a:	9807      	ldr	r0, [sp, #28]
     99c:	f00b fa86 	bl	beac <flash_area_erased_val>
     9a0:	4607      	mov	r7, r0
    flash_area_close(fap);
     9a2:	9807      	ldr	r0, [sp, #28]
     9a4:	f00b f9fc 	bl	bda0 <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     9a8:	1e63      	subs	r3, r4, #1
     9aa:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     9ac:	4293      	cmp	r3, r2
     9ae:	d10d      	bne.n	9cc <FIH_LABEL_FIH_CALL_END_477+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     9b0:	2d00      	cmp	r5, #0
     9b2:	d0f0      	beq.n	996 <FIH_LABEL_FIH_CALL_END_477+0x3a>
            swap_erase_trailer_sectors(state, fap);
     9b4:	9906      	ldr	r1, [sp, #24]
     9b6:	4630      	mov	r0, r6
     9b8:	f00a fb7f 	bl	b0ba <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     9bc:	462c      	mov	r4, r5
        }
    }
#endif

out:
    flash_area_close(fap);
     9be:	9806      	ldr	r0, [sp, #24]
     9c0:	f00b f9ee 	bl	bda0 <flash_area_close>

    FIH_RET(fih_rc);
}
     9c4:	4620      	mov	r0, r4
     9c6:	b008      	add	sp, #32
     9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     9cc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     9d0:	42b9      	cmp	r1, r7
     9d2:	d0eb      	beq.n	9ac <FIH_LABEL_FIH_CALL_END_477+0x50>
     9d4:	e7aa      	b.n	92c <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     9d6:	4a07      	ldr	r2, [pc, #28]	; (9f4 <FIH_LABEL_FIH_CALL_END_477+0x98>)
     9d8:	e7d9      	b.n	98e <FIH_LABEL_FIH_CALL_END_477+0x32>
     9da:	bf00      	nop
     9dc:	20000000 	.word	0x20000000
     9e0:	20002cb0 	.word	0x20002cb0
     9e4:	96f3b83d 	.word	0x96f3b83d
     9e8:	20000be4 	.word	0x20000be4
     9ec:	0000ded2 	.word	0x0000ded2
     9f0:	0000dee4 	.word	0x0000dee4
     9f4:	0000dedc 	.word	0x0000dedc

000009f8 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     9f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
     9fa:	460d      	mov	r5, r1
     9fc:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     9fe:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     a00:	4628      	mov	r0, r5
    size = copy_size = 0;
     a02:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     a06:	f00a fb17 	bl	b038 <boot_status_is_reset>
     a0a:	b330      	cbz	r0, a5a <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a0c:	4e16      	ldr	r6, [pc, #88]	; (a68 <boot_swap_image+0x70>)
     a0e:	6822      	ldr	r2, [r4, #0]
     a10:	42b2      	cmp	r2, r6
     a12:	d103      	bne.n	a1c <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     a14:	aa01      	add	r2, sp, #4
     a16:	4620      	mov	r0, r4
     a18:	f00a fa83 	bl	af22 <boot_read_image_size>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a1e:	42b3      	cmp	r3, r6
     a20:	d104      	bne.n	a2c <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     a22:	466a      	mov	r2, sp
     a24:	2101      	movs	r1, #1
     a26:	4620      	mov	r0, r4
     a28:	f00a fa7b 	bl	af22 <boot_read_image_size>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     a2c:	e9dd 3200 	ldrd	r3, r2, [sp]
     a30:	4293      	cmp	r3, r2
            copy_size = size;
     a32:	bf88      	it	hi
     a34:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     a36:	9b01      	ldr	r3, [sp, #4]
     a38:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     a3a:	9a01      	ldr	r2, [sp, #4]
     a3c:	4629      	mov	r1, r5
     a3e:	4620      	mov	r0, r4
     a40:	f000 fb34 	bl	10ac <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     a44:	4b09      	ldr	r3, [pc, #36]	; (a6c <boot_swap_image+0x74>)
     a46:	681a      	ldr	r2, [r3, #0]
     a48:	2a00      	cmp	r2, #0
     a4a:	dd03      	ble.n	a54 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     a4c:	4808      	ldr	r0, [pc, #32]	; (a70 <boot_swap_image+0x78>)
     a4e:	2157      	movs	r1, #87	; 0x57
     a50:	f00b f8c3 	bl	bbda <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     a54:	2000      	movs	r0, #0
     a56:	b002      	add	sp, #8
     a58:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     a5a:	f105 0108 	add.w	r1, r5, #8
     a5e:	f7ff ff0b 	bl	878 <boot_read_swap_size>
        copy_size = bs->swap_size;
     a62:	68ab      	ldr	r3, [r5, #8]
     a64:	9301      	str	r3, [sp, #4]
     a66:	e7e8      	b.n	a3a <boot_swap_image+0x42>
     a68:	96f3b83d 	.word	0x96f3b83d
     a6c:	20001848 	.word	0x20001848
     a70:	0000df0c 	.word	0x0000df0c

00000a74 <boot_copy_region>:
{
     a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a78:	f8df b078 	ldr.w	fp, [pc, #120]	; af4 <boot_copy_region+0x80>
     a7c:	4c1b      	ldr	r4, [pc, #108]	; (aec <boot_copy_region+0x78>)
     a7e:	4d1c      	ldr	r5, [pc, #112]	; (af0 <boot_copy_region+0x7c>)
{
     a80:	468a      	mov	sl, r1
     a82:	4690      	mov	r8, r2
     a84:	4699      	mov	r9, r3
    bytes_copied = 0;
     a86:	2600      	movs	r6, #0
    while (bytes_copied < sz) {
     a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a8a:	429e      	cmp	r6, r3
     a8c:	d301      	bcc.n	a92 <boot_copy_region+0x1e>
    return 0;
     a8e:	2000      	movs	r0, #0
     a90:	e00f      	b.n	ab2 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a94:	4a17      	ldr	r2, [pc, #92]	; (af4 <boot_copy_region+0x80>)
        if (sz - bytes_copied > sizeof buf) {
     a96:	1b9f      	subs	r7, r3, r6
     a98:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     a9c:	bf28      	it	cs
     a9e:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     aa2:	463b      	mov	r3, r7
     aa4:	eb06 0109 	add.w	r1, r6, r9
     aa8:	4650      	mov	r0, sl
     aaa:	f00b f97a 	bl	bda2 <flash_area_read>
        if (rc != 0) {
     aae:	b110      	cbz	r0, ab6 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     ab0:	2001      	movs	r0, #1
}
     ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
     ab8:	463b      	mov	r3, r7
     aba:	465a      	mov	r2, fp
     abc:	1871      	adds	r1, r6, r1
     abe:	4640      	mov	r0, r8
     ac0:	f00b f98b 	bl	bdda <flash_area_write>
        if (rc != 0) {
     ac4:	2800      	cmp	r0, #0
     ac6:	d1f3      	bne.n	ab0 <boot_copy_region+0x3c>
     ac8:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     acc:	443e      	add	r6, r7
     ace:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     ad2:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     ad6:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     ada:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     ade:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     ae2:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     ae6:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     aea:	e7cd      	b.n	a88 <boot_copy_region+0x14>
     aec:	40010000 	.word	0x40010000
     af0:	6e524635 	.word	0x6e524635
     af4:	20000c48 	.word	0x20000c48

00000af8 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
     afc:	4b8e      	ldr	r3, [pc, #568]	; (d38 <FIH_LABEL_FIH_CALL_END_2436+0x46>)
     afe:	681e      	ldr	r6, [r3, #0]
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b00:	4b8e      	ldr	r3, [pc, #568]	; (d3c <FIH_LABEL_FIH_CALL_END_2436+0x4a>)
     b02:	6243      	str	r3, [r0, #36]	; 0x24
{
     b04:	460f      	mov	r7, r1
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     b06:	4b8e      	ldr	r3, [pc, #568]	; (d40 <FIH_LABEL_FIH_CALL_END_2436+0x4e>)
     b08:	6503      	str	r3, [r0, #80]	; 0x50

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b0a:	2100      	movs	r1, #0
{
     b0c:	b085      	sub	sp, #20
     b0e:	4604      	mov	r4, r0
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b10:	4608      	mov	r0, r1
     b12:	f00a f903 	bl	ad1c <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b16:	f104 0120 	add.w	r1, r4, #32
     b1a:	b2c0      	uxtb	r0, r0
     b1c:	f002 fb9c 	bl	3258 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b20:	2101      	movs	r1, #1
     b22:	2000      	movs	r0, #0
     b24:	f00a f8fa 	bl	ad1c <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b28:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     b2c:	b2c0      	uxtb	r0, r0
     b2e:	f002 fb93 	bl	3258 <flash_area_open>
     b32:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     b34:	4620      	mov	r0, r4
     b36:	f00a fa55 	bl	afe4 <boot_read_sectors>
    if (rc != 0) {
     b3a:	4680      	mov	r8, r0
     b3c:	b968      	cbnz	r0, b5a <context_boot_go+0x62>
    rc = boot_read_image_headers(state, false, NULL);
     b3e:	2200      	movs	r2, #0
     b40:	4611      	mov	r1, r2
     b42:	4620      	mov	r0, r4
     b44:	f00a fa35 	bl	afb2 <boot_read_image_headers>
    if (rc != 0) {
     b48:	4680      	mov	r8, r0
     b4a:	b300      	cbz	r0, b8e <context_boot_go+0x96>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     b4c:	487d      	ldr	r0, [pc, #500]	; (d44 <FIH_LABEL_FIH_CALL_END_2436+0x52>)
     b4e:	2200      	movs	r2, #0
     b50:	2157      	movs	r1, #87	; 0x57
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     b52:	f00b f842 	bl	bbda <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b56:	2301      	movs	r3, #1
     b58:	e091      	b.n	c7e <FIH_LABEL_FIH_CALL_END_2223+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     b5a:	487b      	ldr	r0, [pc, #492]	; (d48 <FIH_LABEL_FIH_CALL_END_2436+0x56>)
     b5c:	2280      	movs	r2, #128	; 0x80
     b5e:	2157      	movs	r1, #87	; 0x57
     b60:	f00b f83b 	bl	bbda <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b64:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     b66:	4598      	cmp	r8, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b68:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     b6c:	d1e7      	bne.n	b3e <context_boot_go+0x46>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     b6e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     b72:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     b76:	2b04      	cmp	r3, #4
     b78:	f200 8084 	bhi.w	c84 <FIH_LABEL_FIH_CALL_END_2223+0x14>
     b7c:	2b01      	cmp	r3, #1
     b7e:	f200 8088 	bhi.w	c92 <FIH_LABEL_FIH_CALL_END_2223+0x22>
     b82:	f000 809f 	beq.w	cc4 <FIH_LABEL_FIH_CALL_END_2223+0x54>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     b86:	23ff      	movs	r3, #255	; 0xff
     b88:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     b8c:	e09a      	b.n	cc4 <FIH_LABEL_FIH_CALL_END_2223+0x54>
    if (boot_slots_compatible(state)) {
     b8e:	4620      	mov	r0, r4
     b90:	f000 f9a4 	bl	edc <boot_slots_compatible>
     b94:	2800      	cmp	r0, #0
     b96:	d0de      	beq.n	b56 <context_boot_go+0x5e>
        boot_status_reset(bs);
     b98:	4668      	mov	r0, sp
     b9a:	f00a fa44 	bl	b026 <boot_status_reset>
        rc = swap_read_status(state, bs);
     b9e:	4669      	mov	r1, sp
     ba0:	4620      	mov	r0, r4
     ba2:	f00a fadf 	bl	b164 <swap_read_status>
        if (rc != 0) {
     ba6:	b118      	cbz	r0, bb0 <context_boot_go+0xb8>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     ba8:	4868      	ldr	r0, [pc, #416]	; (d4c <FIH_LABEL_FIH_CALL_END_2436+0x5a>)
     baa:	4642      	mov	r2, r8
     bac:	2157      	movs	r1, #87	; 0x57
     bae:	e7d0      	b.n	b52 <context_boot_go+0x5a>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     bb0:	4668      	mov	r0, sp
     bb2:	f00a fa41 	bl	b038 <boot_status_is_reset>
     bb6:	f080 0001 	eor.w	r0, r0, #1
     bba:	466a      	mov	r2, sp
     bbc:	b2c1      	uxtb	r1, r0
     bbe:	4620      	mov	r0, r4
     bc0:	f00a f9f7 	bl	afb2 <boot_read_image_headers>
        if (rc != 0) {
     bc4:	4602      	mov	r2, r0
     bc6:	2800      	cmp	r0, #0
     bc8:	d1c0      	bne.n	b4c <context_boot_go+0x54>
        if (!boot_status_is_reset(bs)) {
     bca:	4668      	mov	r0, sp
     bcc:	f00a fa34 	bl	b038 <boot_status_is_reset>
     bd0:	4680      	mov	r8, r0
     bd2:	bb60      	cbnz	r0, c2e <context_boot_go+0x136>
    rc = boot_swap_image(state, bs);
     bd4:	4669      	mov	r1, sp
     bd6:	4620      	mov	r0, r4
     bd8:	f7ff ff0e 	bl	9f8 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     bdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     be0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     be4:	3b03      	subs	r3, #3
     be6:	2b01      	cmp	r3, #1
     be8:	d806      	bhi.n	bf8 <context_boot_go+0x100>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     bea:	4640      	mov	r0, r8
     bec:	f00a fb08 	bl	b200 <swap_set_image_ok>
        if (rc != 0) {
     bf0:	b110      	cbz	r0, bf8 <context_boot_go+0x100>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bf2:	23ff      	movs	r3, #255	; 0xff
     bf4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bfc:	3b02      	subs	r3, #2
     bfe:	2b02      	cmp	r3, #2
     c00:	d80b      	bhi.n	c1a <context_boot_go+0x122>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c02:	2000      	movs	r0, #0
     c04:	f00a faea 	bl	b1dc <swap_set_copy_done>
        if (rc != 0) {
     c08:	b138      	cbz	r0, c1a <context_boot_go+0x122>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c0a:	23ff      	movs	r3, #255	; 0xff
     c0c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     c10:	484f      	ldr	r0, [pc, #316]	; (d50 <FIH_LABEL_FIH_CALL_END_2436+0x5e>)
     c12:	2145      	movs	r1, #69	; 0x45
     c14:	f00a ffe1 	bl	bbda <z_log_minimal_printk>
        while (1) {}
     c18:	e7fe      	b.n	c18 <context_boot_go+0x120>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c1a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c1e:	2bff      	cmp	r3, #255	; 0xff
     c20:	d0f6      	beq.n	c10 <context_boot_go+0x118>
            rc = boot_read_image_headers(state, false, bs);
     c22:	466a      	mov	r2, sp
     c24:	2100      	movs	r1, #0
     c26:	4620      	mov	r0, r4
     c28:	f00a f9c3 	bl	afb2 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c2c:	e793      	b.n	b56 <context_boot_go+0x5e>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     c2e:	f89d 9007 	ldrb.w	r9, [sp, #7]
     c32:	f1b9 0f01 	cmp.w	r9, #1
     c36:	d117      	bne.n	c68 <FIH_LABEL_FIH_CALL_START_2203>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c38:	4610      	mov	r0, r2
     c3a:	f005 fb01 	bl	6240 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c3e:	1e83      	subs	r3, r0, #2
     c40:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c42:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     c44:	d80d      	bhi.n	c62 <FIH_LABEL_FIH_CALL_END_2138+0x14>

00000c46 <FIH_LABEL_FIH_CALL_START_2114>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     c46:	4649      	mov	r1, r9
     c48:	4620      	mov	r0, r4
     c4a:	f7ff fe53 	bl	8f4 <boot_validate_slot.isra.0>

00000c4e <FIH_LABEL_FIH_CALL_END_2138>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c4e:	4b41      	ldr	r3, [pc, #260]	; (d54 <FIH_LABEL_FIH_CALL_END_2436+0x62>)
     c50:	681b      	ldr	r3, [r3, #0]
     c52:	4298      	cmp	r0, r3
     c54:	d005      	beq.n	c62 <FIH_LABEL_FIH_CALL_END_2138+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     c56:	2801      	cmp	r0, #1
     c58:	bf0c      	ite	eq
     c5a:	f04f 0801 	moveq.w	r8, #1
     c5e:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c62:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
     c66:	e782      	b.n	b6e <context_boot_go+0x76>

00000c68 <FIH_LABEL_FIH_CALL_START_2203>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c68:	2101      	movs	r1, #1
     c6a:	4620      	mov	r0, r4
     c6c:	f7ff fe42 	bl	8f4 <boot_validate_slot.isra.0>

00000c70 <FIH_LABEL_FIH_CALL_END_2223>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c70:	4b38      	ldr	r3, [pc, #224]	; (d54 <FIH_LABEL_FIH_CALL_END_2436+0x62>)
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c76:	bf0c      	ite	eq
     c78:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c7c:	2305      	movne	r3, #5
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c7e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c82:	e774      	b.n	b6e <context_boot_go+0x76>
        switch (BOOT_SWAP_TYPE(state)) {
     c84:	2b05      	cmp	r3, #5
     c86:	f47f af7e 	bne.w	b86 <context_boot_go+0x8e>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c8a:	2000      	movs	r0, #0
     c8c:	f00a fab8 	bl	b200 <swap_set_image_ok>
     c90:	e013      	b.n	cba <FIH_LABEL_FIH_CALL_END_2223+0x4a>
        rc = boot_swap_image(state, bs);
     c92:	4669      	mov	r1, sp
     c94:	4620      	mov	r0, r4
     c96:	f7ff feaf 	bl	9f8 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     c9a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     c9e:	1eda      	subs	r2, r3, #3
     ca0:	2a01      	cmp	r2, #1
        rc = boot_swap_image(state, bs);
     ca2:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     ca4:	d80c      	bhi.n	cc0 <FIH_LABEL_FIH_CALL_END_2223+0x50>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     ca6:	2000      	movs	r0, #0
     ca8:	f00a faaa 	bl	b200 <swap_set_image_ok>
        if (rc != 0) {
     cac:	4605      	mov	r5, r0
     cae:	2800      	cmp	r0, #0
     cb0:	f47f af69 	bne.w	b86 <context_boot_go+0x8e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cb4:	2000      	movs	r0, #0
     cb6:	f00a fa91 	bl	b1dc <swap_set_copy_done>
            if (rc != 0) {
     cba:	4605      	mov	r5, r0
     cbc:	b110      	cbz	r0, cc4 <FIH_LABEL_FIH_CALL_END_2223+0x54>
     cbe:	e762      	b.n	b86 <context_boot_go+0x8e>
    if (BOOT_IS_UPGRADE(swap_type)) {
     cc0:	2b02      	cmp	r3, #2
     cc2:	d0f7      	beq.n	cb4 <FIH_LABEL_FIH_CALL_END_2223+0x44>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     cc4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     cc8:	2bff      	cmp	r3, #255	; 0xff
     cca:	d104      	bne.n	cd6 <FIH_LABEL_FIH_CALL_END_2223+0x66>
            BOOT_LOG_ERR("panic!");
     ccc:	4820      	ldr	r0, [pc, #128]	; (d50 <FIH_LABEL_FIH_CALL_END_2436+0x5e>)
     cce:	2145      	movs	r1, #69	; 0x45
     cd0:	f00a ff83 	bl	bbda <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     cd4:	e7fe      	b.n	cd4 <FIH_LABEL_FIH_CALL_END_2223+0x64>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     cd6:	2b01      	cmp	r3, #1
     cd8:	d006      	beq.n	ce8 <FIH_LABEL_FIH_CALL_START_2420>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     cda:	466a      	mov	r2, sp
     cdc:	2100      	movs	r1, #0
     cde:	4620      	mov	r0, r4
     ce0:	f00a f967 	bl	afb2 <boot_read_image_headers>
            if (rc != 0) {
     ce4:	4605      	mov	r5, r0
     ce6:	b9d0      	cbnz	r0, d1e <FIH_LABEL_FIH_CALL_END_2436+0x2c>

00000ce8 <FIH_LABEL_FIH_CALL_START_2420>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     ce8:	2100      	movs	r1, #0
     cea:	4620      	mov	r0, r4
     cec:	f7ff fe02 	bl	8f4 <boot_validate_slot.isra.0>
     cf0:	4606      	mov	r6, r0

00000cf2 <FIH_LABEL_FIH_CALL_END_2436>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     cf2:	f8df 8060 	ldr.w	r8, [pc, #96]	; d54 <FIH_LABEL_FIH_CALL_END_2436+0x62>
     cf6:	f8d8 3000 	ldr.w	r3, [r8]
     cfa:	4298      	cmp	r0, r3
     cfc:	d10f      	bne.n	d1e <FIH_LABEL_FIH_CALL_END_2436+0x2c>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     cfe:	2210      	movs	r2, #16
     d00:	2100      	movs	r1, #0
     d02:	4668      	mov	r0, sp
     d04:	f00b f98e 	bl	c024 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     d08:	6a20      	ldr	r0, [r4, #32]
     d0a:	f00a f810 	bl	ad2e <flash_area_get_device_id>
     d0e:	7138      	strb	r0, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return flash_area_get_off(BOOT_IMG(state, slot).area);
     d10:	6a23      	ldr	r3, [r4, #32]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     d12:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     d16:	685b      	ldr	r3, [r3, #4]
     d18:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     d1a:	603c      	str	r4, [r7, #0]
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     d1c:	2500      	movs	r5, #0
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d1e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d20:	f00b f83e 	bl	bda0 <flash_area_close>
     d24:	6a20      	ldr	r0, [r4, #32]
     d26:	f00b f83b 	bl	bda0 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     d2a:	2d00      	cmp	r5, #0
     d2c:	bf14      	ite	ne
     d2e:	4628      	movne	r0, r5
     d30:	4630      	moveq	r0, r6
     d32:	b005      	add	sp, #20
     d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     d38:	20000000 	.word	0x20000000
     d3c:	20001048 	.word	0x20001048
     d40:	20001448 	.word	0x20001448
     d44:	0000df7d 	.word	0x0000df7d
     d48:	0000df3b 	.word	0x0000df3b
     d4c:	0000dfa9 	.word	0x0000dfa9
     d50:	0000dfd3 	.word	0x0000dfd3
     d54:	20000be4 	.word	0x20000be4

00000d58 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     d58:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d5a:	4d06      	ldr	r5, [pc, #24]	; (d74 <FIH_LABEL_FIH_CALL_END_3112+0x4>)
{
     d5c:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d5e:	2260      	movs	r2, #96	; 0x60
     d60:	2100      	movs	r1, #0
     d62:	4628      	mov	r0, r5
     d64:	f00b f95e 	bl	c024 <memset>

00000d68 <FIH_LABEL_FIH_CALL_START_3097>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     d68:	4621      	mov	r1, r4
     d6a:	4628      	mov	r0, r5
     d6c:	f7ff fec4 	bl	af8 <context_boot_go>

00000d70 <FIH_LABEL_FIH_CALL_END_3112>:
}
     d70:	bd38      	pop	{r3, r4, r5, pc}
     d72:	bf00      	nop
     d74:	20000be8 	.word	0x20000be8

00000d78 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     d78:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d7a:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     d7c:	461c      	mov	r4, r3
     d7e:	b333      	cbz	r3, dce <boot_read_image_header+0x56>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     d80:	6a43      	ldr	r3, [r0, #36]	; 0x24
     d82:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     d84:	7963      	ldrb	r3, [r4, #5]
     d86:	2b01      	cmp	r3, #1
     d88:	d115      	bne.n	db6 <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     d8a:	bb01      	cbnz	r1, dce <boot_read_image_header+0x56>
     d8c:	4b1f      	ldr	r3, [pc, #124]	; (e0c <boot_read_image_header+0x94>)
     d8e:	6822      	ldr	r2, [r4, #0]
     d90:	681b      	ldr	r3, [r3, #0]
    off = 0;
     d92:	429a      	cmp	r2, r3
     d94:	bf98      	it	ls
     d96:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     d98:	2000      	movs	r0, #0
     d9a:	f009 ffbf 	bl	ad1c <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     d9e:	a901      	add	r1, sp, #4
     da0:	b2c0      	uxtb	r0, r0
     da2:	f002 fa59 	bl	3258 <flash_area_open>
    if (rc != 0) {
     da6:	b1f0      	cbz	r0, de6 <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     da8:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     daa:	9801      	ldr	r0, [sp, #4]
     dac:	f00a fff8 	bl	bda0 <flash_area_close>
    return rc;
}
     db0:	4628      	mov	r0, r5
     db2:	b002      	add	sp, #8
     db4:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     db6:	2b02      	cmp	r3, #2
     db8:	d109      	bne.n	dce <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     dba:	6823      	ldr	r3, [r4, #0]
     dbc:	2b01      	cmp	r3, #1
     dbe:	d908      	bls.n	dd2 <boot_read_image_header+0x5a>
     dc0:	4a12      	ldr	r2, [pc, #72]	; (e0c <boot_read_image_header+0x94>)
     dc2:	6812      	ldr	r2, [r2, #0]
     dc4:	4293      	cmp	r3, r2
     dc6:	d802      	bhi.n	dce <boot_read_image_header+0x56>
                if (slot == 0) {
     dc8:	fab1 f181 	clz	r1, r1
     dcc:	0949      	lsrs	r1, r1, #5
    off = 0;
     dce:	2500      	movs	r5, #0
     dd0:	e7e2      	b.n	d98 <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     dd2:	d1fc      	bne.n	dce <boot_read_image_header+0x56>
                if (slot == 0) {
     dd4:	2900      	cmp	r1, #0
     dd6:	d0df      	beq.n	d98 <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     dd8:	2901      	cmp	r1, #1
     dda:	d1f8      	bne.n	dce <boot_read_image_header+0x56>
     ddc:	7921      	ldrb	r1, [r4, #4]
     dde:	3902      	subs	r1, #2
     de0:	bf18      	it	ne
     de2:	2101      	movne	r1, #1
     de4:	e7f3      	b.n	dce <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     de6:	4629      	mov	r1, r5
     de8:	9801      	ldr	r0, [sp, #4]
     dea:	2320      	movs	r3, #32
     dec:	4632      	mov	r2, r6
     dee:	f00a ffd8 	bl	bda2 <flash_area_read>
    if (rc != 0) {
     df2:	4605      	mov	r5, r0
     df4:	2800      	cmp	r0, #0
     df6:	d1d7      	bne.n	da8 <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     df8:	2c00      	cmp	r4, #0
     dfa:	d0d6      	beq.n	daa <boot_read_image_header+0x32>
     dfc:	6835      	ldr	r5, [r6, #0]
     dfe:	4804      	ldr	r0, [pc, #16]	; (e10 <boot_read_image_header+0x98>)
     e00:	1a2d      	subs	r5, r5, r0
     e02:	bf18      	it	ne
     e04:	f04f 35ff 	movne.w	r5, #4294967295
     e08:	e7cf      	b.n	daa <boot_read_image_header+0x32>
     e0a:	bf00      	nop
     e0c:	20000004 	.word	0x20000004
     e10:	96f3b83d 	.word	0x96f3b83d

00000e14 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e18:	4607      	mov	r7, r0
     e1a:	b085      	sub	sp, #20
     e1c:	460c      	mov	r4, r1
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e1e:	4601      	mov	r1, r0
     e20:	2000      	movs	r0, #0
{
     e22:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e24:	f00a f850 	bl	aec8 <boot_status_entries>
    if (max_entries < 0) {
     e28:	1e05      	subs	r5, r0, #0
     e2a:	db51      	blt.n	ed0 <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     e2c:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     e2e:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     e30:	f00a f857 	bl	aee2 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     e34:	fa5f f984 	uxtb.w	r9, r4
     e38:	f105 38ff 	add.w	r8, r5, #4294967295
     e3c:	fb09 0808 	mla	r8, r9, r8, r0
    erased_sections = 0;
     e40:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     e44:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     e48:	f04f 34ff 	mov.w	r4, #4294967295
    for (i = max_entries; i > 0; i--) {
     e4c:	b99d      	cbnz	r5, e76 <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     e4e:	f1ba 0f01 	cmp.w	sl, #1
     e52:	dd03      	ble.n	e5c <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     e54:	4820      	ldr	r0, [pc, #128]	; (ed8 <swap_read_status_bytes+0xc4>)
     e56:	2145      	movs	r1, #69	; 0x45
     e58:	f00a febf 	bl	bbda <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     e5c:	1c63      	adds	r3, r4, #1
     e5e:	d006      	beq.n	e6e <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     e60:	2c7f      	cmp	r4, #127	; 0x7f
     e62:	dc2a      	bgt.n	eba <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e64:	3401      	adds	r4, #1
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e66:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e6a:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e6c:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     e6e:	4628      	mov	r0, r5
     e70:	b005      	add	sp, #20
     e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     e76:	1e6b      	subs	r3, r5, #1
     e78:	9300      	str	r3, [sp, #0]
     e7a:	f10d 020f 	add.w	r2, sp, #15
     e7e:	2301      	movs	r3, #1
     e80:	4641      	mov	r1, r8
     e82:	4638      	mov	r0, r7
     e84:	f00a ff8d 	bl	bda2 <flash_area_read>
        if (rc < 0) {
     e88:	1e03      	subs	r3, r0, #0
     e8a:	9301      	str	r3, [sp, #4]
     e8c:	db22      	blt.n	ed4 <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     e8e:	2201      	movs	r2, #1
     e90:	f10d 010f 	add.w	r1, sp, #15
     e94:	4638      	mov	r0, r7
     e96:	f00b fc58 	bl	c74a <bootutil_buffer_is_erased>
     e9a:	9b01      	ldr	r3, [sp, #4]
     e9c:	b140      	cbz	r0, eb0 <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     e9e:	455b      	cmp	r3, fp
     ea0:	d001      	beq.n	ea6 <swap_read_status_bytes+0x92>
                erased_sections++;
     ea2:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     ea6:	9d00      	ldr	r5, [sp, #0]
     ea8:	eba8 0809 	sub.w	r8, r8, r9
     eac:	469b      	mov	fp, r3
     eae:	e7cd      	b.n	e4c <swap_read_status_bytes+0x38>
     eb0:	f1b4 3fff 	cmp.w	r4, #4294967295
     eb4:	bf08      	it	eq
     eb6:	462c      	moveq	r4, r5
     eb8:	e7f5      	b.n	ea6 <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     eba:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ebc:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
     ebe:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ec0:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     ec2:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ec6:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     ec8:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     eca:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     ecc:	7134      	strb	r4, [r6, #4]
     ece:	e7ce      	b.n	e6e <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
     ed0:	2507      	movs	r5, #7
     ed2:	e7cc      	b.n	e6e <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
     ed4:	2501      	movs	r5, #1
     ed6:	e7ca      	b.n	e6e <swap_read_status_bytes+0x5a>
     ed8:	0000dfdf 	.word	0x0000dfdf

00000edc <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
     edc:	6a81      	ldr	r1, [r0, #40]	; 0x28
     ede:	6d42      	ldr	r2, [r0, #84]	; 0x54
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     ee0:	428a      	cmp	r2, r1
{
     ee2:	b538      	push	{r3, r4, r5, lr}
    if ((num_sectors_pri != num_sectors_sec) &&
     ee4:	d008      	beq.n	ef8 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     ee6:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     ee8:	428b      	cmp	r3, r1
     eea:	d005      	beq.n	ef8 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     eec:	4813      	ldr	r0, [pc, #76]	; (f3c <boot_slots_compatible+0x60>)
     eee:	2157      	movs	r1, #87	; 0x57

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     ef0:	f00a fe73 	bl	bbda <z_log_minimal_printk>
            return 0;
     ef4:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     ef6:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     ef8:	2980      	cmp	r1, #128	; 0x80
     efa:	d91c      	bls.n	f36 <boot_slots_compatible+0x5a>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     efc:	4810      	ldr	r0, [pc, #64]	; (f40 <boot_slots_compatible+0x64>)
     efe:	2157      	movs	r1, #87	; 0x57
     f00:	e7f6      	b.n	ef0 <boot_slots_compatible+0x14>
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     f02:	6a44      	ldr	r4, [r0, #36]	; 0x24
     f04:	6d05      	ldr	r5, [r0, #80]	; 0x50
     f06:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     f0a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     f0e:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     f10:	686d      	ldr	r5, [r5, #4]
     f12:	42ac      	cmp	r4, r5
     f14:	d002      	beq.n	f1c <boot_slots_compatible+0x40>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     f16:	480b      	ldr	r0, [pc, #44]	; (f44 <boot_slots_compatible+0x68>)
     f18:	2157      	movs	r1, #87	; 0x57
     f1a:	e7e9      	b.n	ef0 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
     f1c:	3301      	adds	r3, #1
     f1e:	429a      	cmp	r2, r3
     f20:	d1ef      	bne.n	f02 <boot_slots_compatible+0x26>
    if (num_sectors_pri > num_sectors_sec) {
     f22:	4291      	cmp	r1, r2
     f24:	d905      	bls.n	f32 <boot_slots_compatible+0x56>
     f26:	6a43      	ldr	r3, [r0, #36]	; 0x24
     f28:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
     f2c:	6853      	ldr	r3, [r2, #4]
     f2e:	42a3      	cmp	r3, r4
     f30:	d1f1      	bne.n	f16 <boot_slots_compatible+0x3a>
    return 1;
     f32:	2001      	movs	r0, #1
     f34:	e7df      	b.n	ef6 <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
     f36:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
     f38:	461c      	mov	r4, r3
     f3a:	e7f0      	b.n	f1e <boot_slots_compatible+0x42>
     f3c:	0000e002 	.word	0x0000e002
     f40:	0000e03a 	.word	0x0000e03a
     f44:	0000e069 	.word	0x0000e069

00000f48 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
     f48:	b500      	push	{lr}
     f4a:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     f4c:	a904      	add	r1, sp, #16
     f4e:	2002      	movs	r0, #2
     f50:	f00b fc60 	bl	c814 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     f54:	f89d 2010 	ldrb.w	r2, [sp, #16]
     f58:	2a01      	cmp	r2, #1
     f5a:	d041      	beq.n	fe0 <swap_status_source+0x98>
     f5c:	4b25      	ldr	r3, [pc, #148]	; (ff4 <swap_status_source+0xac>)
     f5e:	4926      	ldr	r1, [pc, #152]	; (ff8 <swap_status_source+0xb0>)
     f60:	2a03      	cmp	r2, #3
     f62:	bf18      	it	ne
     f64:	460b      	movne	r3, r1
     f66:	f89d 2013 	ldrb.w	r2, [sp, #19]
     f6a:	9202      	str	r2, [sp, #8]
     f6c:	f89d 2012 	ldrb.w	r2, [sp, #18]
     f70:	9201      	str	r2, [sp, #4]
     f72:	f89d 2011 	ldrb.w	r2, [sp, #17]
     f76:	4821      	ldr	r0, [pc, #132]	; (ffc <swap_status_source+0xb4>)
     f78:	9200      	str	r2, [sp, #0]
     f7a:	2149      	movs	r1, #73	; 0x49
     f7c:	4a20      	ldr	r2, [pc, #128]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
     f7e:	f00a fe2c 	bl	bbda <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     f82:	a906      	add	r1, sp, #24
     f84:	2005      	movs	r0, #5
     f86:	f00b fc45 	bl	c814 <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     f8a:	f89d 2018 	ldrb.w	r2, [sp, #24]
     f8e:	2a01      	cmp	r2, #1
     f90:	d028      	beq.n	fe4 <swap_status_source+0x9c>
     f92:	4b18      	ldr	r3, [pc, #96]	; (ff4 <swap_status_source+0xac>)
     f94:	4918      	ldr	r1, [pc, #96]	; (ff8 <swap_status_source+0xb0>)
     f96:	2a03      	cmp	r2, #3
     f98:	bf18      	it	ne
     f9a:	460b      	movne	r3, r1
     f9c:	f89d 201b 	ldrb.w	r2, [sp, #27]
     fa0:	9202      	str	r2, [sp, #8]
     fa2:	f89d 201a 	ldrb.w	r2, [sp, #26]
     fa6:	9201      	str	r2, [sp, #4]
     fa8:	f89d 2019 	ldrb.w	r2, [sp, #25]
     fac:	9200      	str	r2, [sp, #0]
     fae:	4813      	ldr	r0, [pc, #76]	; (ffc <swap_status_source+0xb4>)
     fb0:	4a14      	ldr	r2, [pc, #80]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     fb2:	2149      	movs	r1, #73	; 0x49
     fb4:	f00a fe11 	bl	bbda <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
     fb8:	f89d 3010 	ldrb.w	r3, [sp, #16]
     fbc:	2b01      	cmp	r3, #1
     fbe:	d113      	bne.n	fe8 <swap_status_source+0xa0>
     fc0:	f89d 3012 	ldrb.w	r3, [sp, #18]
     fc4:	2b03      	cmp	r3, #3
     fc6:	d10f      	bne.n	fe8 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
     fc8:	f89d 3018 	ldrb.w	r3, [sp, #24]
     fcc:	2b01      	cmp	r3, #1
     fce:	d00b      	beq.n	fe8 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
     fd0:	480d      	ldr	r0, [pc, #52]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     fd2:	2149      	movs	r1, #73	; 0x49
     fd4:	f00a fe01 	bl	bbda <z_log_minimal_printk>
        return source;
     fd8:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
     fda:	b009      	add	sp, #36	; 0x24
     fdc:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     fe0:	4b0a      	ldr	r3, [pc, #40]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     fe2:	e7c0      	b.n	f66 <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     fe4:	4b09      	ldr	r3, [pc, #36]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     fe6:	e7d9      	b.n	f9c <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
     fe8:	4809      	ldr	r0, [pc, #36]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     fea:	2149      	movs	r1, #73	; 0x49
     fec:	f00a fdf5 	bl	bbda <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
     ff0:	2000      	movs	r0, #0
     ff2:	e7f2      	b.n	fda <swap_status_source+0x92>
     ff4:	0000e09a 	.word	0x0000e09a
     ff8:	0000e0a0 	.word	0x0000e0a0
     ffc:	0000e0b2 	.word	0x0000e0b2
    1000:	0000e0a4 	.word	0x0000e0a4
    1004:	0000e0f3 	.word	0x0000e0f3
    1008:	0000e103 	.word	0x0000e103
    100c:	0000e095 	.word	0x0000e095
    1010:	0000e122 	.word	0x0000e122

00001014 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    1014:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1016:	684b      	ldr	r3, [r1, #4]
{
    1018:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    101a:	4a1e      	ldr	r2, [pc, #120]	; (1094 <fixup_revert+0x80>)
    101c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1020:	4293      	cmp	r3, r2
{
    1022:	b086      	sub	sp, #24
    1024:	4606      	mov	r6, r0
    1026:	460d      	mov	r5, r1
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1028:	d12f      	bne.n	108a <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    102a:	680b      	ldr	r3, [r1, #0]
    102c:	2b01      	cmp	r3, #1
    102e:	d12c      	bne.n	108a <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1030:	a904      	add	r1, sp, #16
    1032:	4620      	mov	r0, r4
    1034:	f005 f8b4 	bl	61a0 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1038:	f89d 2010 	ldrb.w	r2, [sp, #16]
    103c:	2a01      	cmp	r2, #1
    103e:	d026      	beq.n	108e <fixup_revert+0x7a>
    1040:	4b15      	ldr	r3, [pc, #84]	; (1098 <fixup_revert+0x84>)
    1042:	4916      	ldr	r1, [pc, #88]	; (109c <fixup_revert+0x88>)
    1044:	2a03      	cmp	r2, #3
    1046:	bf18      	it	ne
    1048:	460b      	movne	r3, r1
    104a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    104e:	9202      	str	r2, [sp, #8]
    1050:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1054:	9201      	str	r2, [sp, #4]
    1056:	f89d 2011 	ldrb.w	r2, [sp, #17]
    105a:	9200      	str	r2, [sp, #0]
    105c:	4810      	ldr	r0, [pc, #64]	; (10a0 <fixup_revert+0x8c>)
    105e:	4a11      	ldr	r2, [pc, #68]	; (10a4 <fixup_revert+0x90>)
    1060:	2149      	movs	r1, #73	; 0x49
    1062:	f00a fdba 	bl	bbda <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    1066:	f89d 3010 	ldrb.w	r3, [sp, #16]
    106a:	2b03      	cmp	r3, #3
    106c:	d10d      	bne.n	108a <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    106e:	4621      	mov	r1, r4
    1070:	4630      	mov	r0, r6
    1072:	f00a f822 	bl	b0ba <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    1076:	4620      	mov	r0, r4
    1078:	f00b fbc3 	bl	c802 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    107c:	68a9      	ldr	r1, [r5, #8]
    107e:	4620      	mov	r0, r4
    1080:	f009 ff40 	bl	af04 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    1084:	4620      	mov	r0, r4
    1086:	f005 f87d 	bl	6184 <boot_write_magic>
        assert(rc == 0);
    }
}
    108a:	b006      	add	sp, #24
    108c:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    108e:	4b06      	ldr	r3, [pc, #24]	; (10a8 <fixup_revert+0x94>)
    1090:	e7db      	b.n	104a <fixup_revert+0x36>
    1092:	bf00      	nop
    1094:	04000100 	.word	0x04000100
    1098:	0000e09a 	.word	0x0000e09a
    109c:	0000e0a0 	.word	0x0000e0a0
    10a0:	0000e0b2 	.word	0x0000e0b2
    10a4:	0000e0f3 	.word	0x0000e0f3
    10a8:	0000e095 	.word	0x0000e095

000010ac <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    10ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10b0:	ed2d 8b02 	vpush	{d8}
    10b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    10b6:	460c      	mov	r4, r1
    10b8:	685e      	ldr	r6, [r3, #4]
    10ba:	b08b      	sub	sp, #44	; 0x2c
    10bc:	4605      	mov	r5, r0
    10be:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    10c0:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    10c2:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    10c4:	429a      	cmp	r2, r3
    10c6:	4608      	mov	r0, r1
    10c8:	f101 0101 	add.w	r1, r1, #1
    10cc:	d8f9      	bhi.n	10c2 <swap_run+0x16>
    10ce:	4f78      	ldr	r7, [pc, #480]	; (12b0 <swap_run+0x204>)
    10d0:	6038      	str	r0, [r7, #0]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    10d2:	4620      	mov	r0, r4
    10d4:	f009 ffb0 	bl	b038 <boot_status_is_reset>
    10d8:	46bb      	mov	fp, r7
    10da:	b1c8      	cbz	r0, 1110 <swap_run+0x64>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    10dc:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    10de:	f009 feee 	bl	aebe <boot_trailer_sz>
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    10e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
        sz = 0;
    10e4:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    10e6:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    10e8:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    10ea:	4290      	cmp	r0, r2
    10ec:	d901      	bls.n	10f2 <swap_run+0x46>
                break;
            }
            first_trailer_idx--;
    10ee:	3b01      	subs	r3, #1
            sz += sector_sz;
    10f0:	e7fa      	b.n	10e8 <swap_run+0x3c>
        }

        if (g_last_idx >= first_trailer_idx) {
    10f2:	f8db 2000 	ldr.w	r2, [fp]
    10f6:	429a      	cmp	r2, r3
    10f8:	d30a      	bcc.n	1110 <swap_run+0x64>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    10fa:	486e      	ldr	r0, [pc, #440]	; (12b4 <swap_run+0x208>)
    10fc:	2157      	movs	r1, #87	; 0x57
    10fe:	f00a fd6c 	bl	bbda <z_log_minimal_printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1102:	2301      	movs	r3, #1
    1104:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    1106:	b00b      	add	sp, #44	; 0x2c
    1108:	ecbd 8b02 	vpop	{d8}
    110c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1110:	a908      	add	r1, sp, #32
    1112:	2002      	movs	r0, #2
    1114:	f002 f8a0 	bl	3258 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1118:	a909      	add	r1, sp, #36	; 0x24
    111a:	2005      	movs	r0, #5
    111c:	f002 f89c 	bl	3258 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    1120:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1122:	4621      	mov	r1, r4
    1124:	4628      	mov	r0, r5
    1126:	f7ff ff75 	bl	1014 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    112a:	7963      	ldrb	r3, [r4, #5]
    112c:	2b01      	cmp	r3, #1
    112e:	d108      	bne.n	1142 <swap_run+0x96>
        idx = g_last_idx;
    1130:	f8db 7000 	ldr.w	r7, [fp]
    BOOT_STATUS_ASSERT(rc == 0);
    1134:	f8df a180 	ldr.w	sl, [pc, #384]	; 12b8 <swap_run+0x20c>
        while (idx > 0) {
    1138:	f8db 3000 	ldr.w	r3, [fp]
    113c:	b9a7      	cbnz	r7, 1168 <swap_run+0xbc>
        bs->idx = BOOT_STATUS_IDX_0;
    113e:	2301      	movs	r3, #1
    1140:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    1142:	2302      	movs	r3, #2
        BOOT_STATUS_ASSERT(rc == 0);
    1144:	f8df 8170 	ldr.w	r8, [pc, #368]	; 12b8 <swap_run+0x20c>
    bs->op = BOOT_STATUS_OP_SWAP;
    1148:	7163      	strb	r3, [r4, #5]
    idx = 1;
    114a:	2701      	movs	r7, #1
        bs->state = BOOT_STATUS_STATE_1;
    114c:	9305      	str	r3, [sp, #20]
    while (idx <= g_last_idx) {
    114e:	f8db 3000 	ldr.w	r3, [fp]
    1152:	f8dd 9020 	ldr.w	r9, [sp, #32]
    1156:	429f      	cmp	r7, r3
    1158:	d94d      	bls.n	11f6 <swap_run+0x14a>
    flash_area_close(fap_pri);
    115a:	4648      	mov	r0, r9
    115c:	f00a fe20 	bl	bda0 <flash_area_close>
    flash_area_close(fap_sec);
    1160:	9809      	ldr	r0, [sp, #36]	; 0x24
    1162:	f00a fe1d 	bl	bda0 <flash_area_close>
    1166:	e7ce      	b.n	1106 <swap_run+0x5a>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1168:	6822      	ldr	r2, [r4, #0]
    116a:	3301      	adds	r3, #1
    116c:	1a9b      	subs	r3, r3, r2
    116e:	429f      	cmp	r7, r3
    1170:	d83f      	bhi.n	11f2 <swap_run+0x146>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    1172:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 */
uint8_t flash_area_erased_val(const struct flash_area *fap);

static inline uint32_t flash_sector_get_off(const struct flash_sector *fs)
{
	return fs->fs_off;
    1178:	6819      	ldr	r1, [r3, #0]
    117a:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    117e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    if (bs->idx == BOOT_STATUS_IDX_0) {
    1182:	2a01      	cmp	r2, #1
    1184:	f853 3c08 	ldr.w	r3, [r3, #-8]
    1188:	eba3 0301 	sub.w	r3, r3, r1
    118c:	ee08 3a10 	vmov	s16, r3
    1190:	eba0 0901 	sub.w	r9, r0, r1
    1194:	d112      	bne.n	11bc <swap_run+0x110>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    1196:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1198:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    119a:	2a02      	cmp	r2, #2
    119c:	d00a      	beq.n	11b4 <swap_run+0x108>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    119e:	4641      	mov	r1, r8
    11a0:	4628      	mov	r0, r5
    11a2:	9303      	str	r3, [sp, #12]
    11a4:	f009 ff89 	bl	b0ba <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    11a8:	4622      	mov	r2, r4
    11aa:	4641      	mov	r1, r8
    11ac:	4628      	mov	r0, r5
    11ae:	f009 ffba 	bl	b126 <swap_status_init>
    11b2:	9b03      	ldr	r3, [sp, #12]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    11b4:	4619      	mov	r1, r3
    11b6:	4628      	mov	r0, r5
    11b8:	f009 ff7f 	bl	b0ba <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    11bc:	4632      	mov	r2, r6
    11be:	4649      	mov	r1, r9
    11c0:	4640      	mov	r0, r8
    11c2:	f009 ff78 	bl	b0b6 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    11c6:	ee18 3a10 	vmov	r3, s16
    11ca:	4642      	mov	r2, r8
    11cc:	4641      	mov	r1, r8
    11ce:	e9cd 9600 	strd	r9, r6, [sp]
    11d2:	4628      	mov	r0, r5
    11d4:	f7ff fc4e 	bl	a74 <boot_copy_region>
    rc = boot_write_status(state, bs);
    11d8:	4621      	mov	r1, r4
    11da:	4628      	mov	r0, r5
    11dc:	f009 ff39 	bl	b052 <boot_write_status>
    bs->idx++;
    11e0:	6823      	ldr	r3, [r4, #0]
    11e2:	3301      	adds	r3, #1
    11e4:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    11e6:	b120      	cbz	r0, 11f2 <swap_run+0x146>
    11e8:	f8da 3000 	ldr.w	r3, [sl]
    11ec:	3301      	adds	r3, #1
    11ee:	f8ca 3000 	str.w	r3, [sl]
            idx--;
    11f2:	3f01      	subs	r7, #1
    11f4:	e7a0      	b.n	1138 <swap_run+0x8c>
        if (idx >= bs->idx) {
    11f6:	6823      	ldr	r3, [r4, #0]
    11f8:	429f      	cmp	r7, r3
    11fa:	d356      	bcc.n	12aa <swap_run+0x1fe>
    11fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    11fe:	6d28      	ldr	r0, [r5, #80]	; 0x50
    1200:	f851 3037 	ldr.w	r3, [r1, r7, lsl #3]
    1204:	9304      	str	r3, [sp, #16]
    1206:	00fa      	lsls	r2, r7, #3
    1208:	3a08      	subs	r2, #8
    120a:	680b      	ldr	r3, [r1, #0]
    120c:	f850 c002 	ldr.w	ip, [r0, r2]
    1210:	9303      	str	r3, [sp, #12]
    1212:	6803      	ldr	r3, [r0, #0]
    if (bs->state == BOOT_STATUS_STATE_0) {
    1214:	7920      	ldrb	r0, [r4, #4]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1216:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    if (bs->state == BOOT_STATUS_STATE_0) {
    121a:	2801      	cmp	r0, #1
    121c:	ebac 0303 	sub.w	r3, ip, r3
    1220:	d141      	bne.n	12a6 <swap_run+0x1fa>
    1222:	5889      	ldr	r1, [r1, r2]
    1224:	9307      	str	r3, [sp, #28]
    1226:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1228:	4632      	mov	r2, r6
    122a:	1ac9      	subs	r1, r1, r3
    122c:	4648      	mov	r0, r9
    122e:	9106      	str	r1, [sp, #24]
    1230:	f009 ff41 	bl	b0b6 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    1234:	9906      	ldr	r1, [sp, #24]
    1236:	9b07      	ldr	r3, [sp, #28]
    1238:	9100      	str	r1, [sp, #0]
    123a:	464a      	mov	r2, r9
    123c:	4651      	mov	r1, sl
    123e:	9601      	str	r6, [sp, #4]
    1240:	4628      	mov	r0, r5
    1242:	9306      	str	r3, [sp, #24]
    1244:	f7ff fc16 	bl	a74 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1248:	4621      	mov	r1, r4
    124a:	4628      	mov	r0, r5
    124c:	f009 ff01 	bl	b052 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1250:	9b05      	ldr	r3, [sp, #20]
    1252:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1254:	9b06      	ldr	r3, [sp, #24]
    1256:	b120      	cbz	r0, 1262 <swap_run+0x1b6>
    1258:	f8d8 2000 	ldr.w	r2, [r8]
    125c:	3201      	adds	r2, #1
    125e:	f8c8 2000 	str.w	r2, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    1262:	4619      	mov	r1, r3
    1264:	4632      	mov	r2, r6
    1266:	4650      	mov	r0, sl
    1268:	9306      	str	r3, [sp, #24]
    126a:	f009 ff24 	bl	b0b6 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    126e:	9b06      	ldr	r3, [sp, #24]
    1270:	9300      	str	r3, [sp, #0]
    1272:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    1276:	4649      	mov	r1, r9
    1278:	1a9b      	subs	r3, r3, r2
    127a:	9601      	str	r6, [sp, #4]
    127c:	4652      	mov	r2, sl
    127e:	4628      	mov	r0, r5
    1280:	f7ff fbf8 	bl	a74 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1284:	4621      	mov	r1, r4
    1286:	4628      	mov	r0, r5
    1288:	f009 fee3 	bl	b052 <boot_write_status>
        bs->idx++;
    128c:	6823      	ldr	r3, [r4, #0]
    128e:	3301      	adds	r3, #1
    1290:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1292:	f04f 0301 	mov.w	r3, #1
    1296:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1298:	b138      	cbz	r0, 12aa <swap_run+0x1fe>
    129a:	f8d8 3000 	ldr.w	r3, [r8]
    129e:	3301      	adds	r3, #1
    12a0:	f8c8 3000 	str.w	r3, [r8]
    12a4:	e001      	b.n	12aa <swap_run+0x1fe>
    if (bs->state == BOOT_STATUS_STATE_1) {
    12a6:	2802      	cmp	r0, #2
    12a8:	d0db      	beq.n	1262 <swap_run+0x1b6>
        idx++;
    12aa:	3701      	adds	r7, #1
    12ac:	e74f      	b.n	114e <swap_run+0xa2>
    12ae:	bf00      	nop
    12b0:	20000004 	.word	0x20000004
    12b4:	0000e139 	.word	0x0000e139
    12b8:	20001848 	.word	0x20001848

000012bc <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    12bc:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    12be:	4d09      	ldr	r5, [pc, #36]	; (12e4 <cc310_init+0x28>)
    12c0:	782b      	ldrb	r3, [r5, #0]
    12c2:	b953      	cbnz	r3, 12da <cc310_init+0x1e>
    NRF_CRYPTOCELL->ENABLE=1;
    12c4:	4c08      	ldr	r4, [pc, #32]	; (12e8 <cc310_init+0x2c>)
    12c6:	2601      	movs	r6, #1
    12c8:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        nrf_cc310_enable();
        if (nrf_cc310_bl_init() != 0) {
    12cc:	f008 fd08 	bl	9ce0 <nrf_cc310_bl_init>
    12d0:	b928      	cbnz	r0, 12de <cc310_init+0x22>
            return -1;
        }
        initialized = true;
    12d2:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    12d4:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        nrf_cc310_disable();
    }

    return 0;
}
    12d8:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    12da:	2000      	movs	r0, #0
    12dc:	e7fc      	b.n	12d8 <cc310_init+0x1c>
            return -1;
    12de:	f04f 30ff 	mov.w	r0, #4294967295
    12e2:	e7f9      	b.n	12d8 <cc310_init+0x1c>
    12e4:	20002db0 	.word	0x20002db0
    12e8:	5002a000 	.word	0x5002a000

000012ec <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    12ec:	b570      	push	{r4, r5, r6, lr}
    NRF_CRYPTOCELL->ENABLE=1;
    12ee:	4e0b      	ldr	r6, [pc, #44]	; (131c <cc310_ecdsa_verify_secp256r1+0x30>)
    12f0:	b0ae      	sub	sp, #184	; 0xb8
    12f2:	461d      	mov	r5, r3
    12f4:	e9cd 2102 	strd	r2, r1, [sp, #8]
    12f8:	4604      	mov	r4, r0
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    12fa:	f7ff ffdf 	bl	12bc <cc310_init>
    12fe:	2301      	movs	r3, #1
    1300:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    1304:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1308:	4623      	mov	r3, r4
    130a:	9500      	str	r5, [sp, #0]
    130c:	a805      	add	r0, sp, #20
    130e:	f00c f8b9 	bl	d484 <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    1312:	2300      	movs	r3, #0
    1314:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    1318:	b02e      	add	sp, #184	; 0xb8
    131a:	bd70      	pop	{r4, r5, r6, pc}
    131c:	5002a000 	.word	0x5002a000

00001320 <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1320:	4b17      	ldr	r3, [pc, #92]	; (1380 <nrf_cleanup_peripheral+0x60>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1322:	4918      	ldr	r1, [pc, #96]	; (1384 <nrf_cleanup_peripheral+0x64>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1324:	2201      	movs	r2, #1
    1326:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    1328:	f04f 33ff 	mov.w	r3, #4294967295
    132c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1330:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1334:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    1338:	3104      	adds	r1, #4
    133a:	600a      	str	r2, [r1, #0]
    p_reg->EVTENCLR = mask;
    133c:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    p_reg->INTENCLR = mask;
    1340:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1344:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
    1348:	600a      	str	r2, [r1, #0]
    p_reg->EVTENCLR = mask;
    134a:	4a0f      	ldr	r2, [pc, #60]	; (1388 <nrf_cleanup_peripheral+0x68>)
    134c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1350:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1354:	f5a2 3208 	sub.w	r2, r2, #139264	; 0x22000
    1358:	2100      	movs	r1, #0
    135a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    135e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1362:	f502 3218 	add.w	r2, r2, #155648	; 0x26000
    1366:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    136a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    }
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable_all(NRF_PPI_Type * p_reg)
{
    p_reg->CHENCLR = ((uint32_t)0xFFFFFFFFuL);
    136e:	f5a2 4210 	sub.w	r2, r2, #36864	; 0x9000
    1372:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    137a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    137e:	4770      	bx	lr
    1380:	4000b004 	.word	0x4000b004
    1384:	4000b000 	.word	0x4000b000
    1388:	40024000 	.word	0x40024000

0000138c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    138c:	680b      	ldr	r3, [r1, #0]
    138e:	3301      	adds	r3, #1
    1390:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1392:	4b01      	ldr	r3, [pc, #4]	; (1398 <char_out+0xc>)
    1394:	681b      	ldr	r3, [r3, #0]
    1396:	4718      	bx	r3
    1398:	20000008 	.word	0x20000008

0000139c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    139c:	b507      	push	{r0, r1, r2, lr}
    139e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    13a0:	2100      	movs	r1, #0
{
    13a2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    13a4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    13a6:	4803      	ldr	r0, [pc, #12]	; (13b4 <vprintk+0x18>)
    13a8:	a901      	add	r1, sp, #4
    13aa:	f000 f8ed 	bl	1588 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    13ae:	b003      	add	sp, #12
    13b0:	f85d fb04 	ldr.w	pc, [sp], #4
    13b4:	0000138d 	.word	0x0000138d

000013b8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    13b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13bc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    13c0:	f019 0808 	ands.w	r8, r9, #8
{
    13c4:	4604      	mov	r4, r0
    13c6:	4693      	mov	fp, r2
	if (processing) {
    13c8:	d00e      	beq.n	13e8 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    13ca:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13cc:	bf0c      	ite	eq
    13ce:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    13d2:	f049 0920 	orrne.w	r9, r9, #32
    13d6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    13da:	f38b 8811 	msr	BASEPRI, fp
    13de:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    13e2:	b003      	add	sp, #12
    13e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    13e8:	f8df a198 	ldr.w	sl, [pc, #408]	; 1584 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13ec:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    13f0:	2902      	cmp	r1, #2
    13f2:	d107      	bne.n	1404 <process_event+0x4c>
			evt = process_recheck(mgr);
    13f4:	4620      	mov	r0, r4
    13f6:	f00a f84b 	bl	b490 <process_recheck>
		if (evt == EVT_NOP) {
    13fa:	2800      	cmp	r0, #0
    13fc:	d0ed      	beq.n	13da <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    13fe:	2801      	cmp	r0, #1
    1400:	8b23      	ldrh	r3, [r4, #24]
    1402:	d14d      	bne.n	14a0 <process_event+0xe8>
			res = mgr->last_res;
    1404:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1406:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1408:	2f00      	cmp	r7, #0
    140a:	da15      	bge.n	1438 <process_event+0x80>
		*clients = mgr->clients;
    140c:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    140e:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1412:	e9c4 8800 	strd	r8, r8, [r4]
    1416:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    141a:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    141c:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    141e:	8b21      	ldrh	r1, [r4, #24]
    1420:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1424:	454a      	cmp	r2, r9
    1426:	d002      	beq.n	142e <process_event+0x76>
		if (do_monitors
    1428:	68a3      	ldr	r3, [r4, #8]
    142a:	2b00      	cmp	r3, #0
    142c:	d159      	bne.n	14e2 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    142e:	b90d      	cbnz	r5, 1434 <process_event+0x7c>
		    || (transit != NULL)) {
    1430:	2e00      	cmp	r6, #0
    1432:	d071      	beq.n	1518 <process_event+0x160>
    1434:	2300      	movs	r3, #0
    1436:	e055      	b.n	14e4 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1438:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    143c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    143e:	2a01      	cmp	r2, #1
    1440:	d81f      	bhi.n	1482 <process_event+0xca>
		*clients = mgr->clients;
    1442:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1446:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1448:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    144a:	b289      	uxth	r1, r1
	list->tail = NULL;
    144c:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1450:	d10c      	bne.n	146c <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1452:	2d00      	cmp	r5, #0
    1454:	462b      	mov	r3, r5
    1456:	bf38      	it	cc
    1458:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    145a:	b12b      	cbz	r3, 1468 <process_event+0xb0>
				mgr->refs += 1U;
    145c:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    145e:	681b      	ldr	r3, [r3, #0]
    1460:	3201      	adds	r2, #1
    1462:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1464:	2b00      	cmp	r3, #0
    1466:	d1f8      	bne.n	145a <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1468:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    146c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    146e:	4620      	mov	r0, r4
    1470:	f00a f80e 	bl	b490 <process_recheck>
    1474:	2800      	cmp	r0, #0
    1476:	d0d1      	beq.n	141c <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1478:	8b23      	ldrh	r3, [r4, #24]
    147a:	f043 0320 	orr.w	r3, r3, #32
    147e:	8323      	strh	r3, [r4, #24]
    1480:	e7cc      	b.n	141c <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1482:	2b04      	cmp	r3, #4
    1484:	d10a      	bne.n	149c <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1486:	f021 0107 	bic.w	r1, r1, #7
    148a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    148c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    148e:	4620      	mov	r0, r4
    1490:	f009 fffe 	bl	b490 <process_recheck>
    1494:	b110      	cbz	r0, 149c <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1496:	f041 0120 	orr.w	r1, r1, #32
    149a:	8321      	strh	r1, [r4, #24]
    149c:	2500      	movs	r5, #0
    149e:	e7bd      	b.n	141c <process_event+0x64>
		} else if (evt == EVT_START) {
    14a0:	2803      	cmp	r0, #3
    14a2:	d109      	bne.n	14b8 <process_event+0x100>
			transit = mgr->transitions->start;
    14a4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14a6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    14aa:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14ac:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    14b0:	8323      	strh	r3, [r4, #24]
}
    14b2:	2500      	movs	r5, #0
		res = 0;
    14b4:	462f      	mov	r7, r5
    14b6:	e7b2      	b.n	141e <process_event+0x66>
		} else if (evt == EVT_STOP) {
    14b8:	2804      	cmp	r0, #4
    14ba:	d106      	bne.n	14ca <process_event+0x112>
			transit = mgr->transitions->stop;
    14bc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14be:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    14c2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14c4:	f043 0304 	orr.w	r3, r3, #4
    14c8:	e7f2      	b.n	14b0 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    14ca:	2805      	cmp	r0, #5
    14cc:	d106      	bne.n	14dc <process_event+0x124>
			transit = mgr->transitions->reset;
    14ce:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14d0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    14d4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14d6:	f043 0305 	orr.w	r3, r3, #5
    14da:	e7e9      	b.n	14b0 <process_event+0xf8>
    14dc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    14de:	462e      	mov	r6, r5
    14e0:	e7e8      	b.n	14b4 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    14e2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    14e4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    14e8:	8321      	strh	r1, [r4, #24]
    14ea:	f38b 8811 	msr	BASEPRI, fp
    14ee:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    14f2:	bb03      	cbnz	r3, 1536 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    14f4:	2d00      	cmp	r5, #0
    14f6:	d134      	bne.n	1562 <process_event+0x1aa>
			if (transit != NULL) {
    14f8:	b116      	cbz	r6, 1500 <process_event+0x148>
				transit(mgr, transition_complete);
    14fa:	4651      	mov	r1, sl
    14fc:	4620      	mov	r0, r4
    14fe:	47b0      	blx	r6
	__asm__ volatile(
    1500:	f04f 0320 	mov.w	r3, #32
    1504:	f3ef 8b11 	mrs	fp, BASEPRI
    1508:	f383 8812 	msr	BASEPRI_MAX, r3
    150c:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1510:	8b23      	ldrh	r3, [r4, #24]
    1512:	f023 0308 	bic.w	r3, r3, #8
    1516:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1518:	8b23      	ldrh	r3, [r4, #24]
    151a:	06da      	lsls	r2, r3, #27
    151c:	d52a      	bpl.n	1574 <process_event+0x1bc>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    151e:	f023 0310 	bic.w	r3, r3, #16
    1522:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1524:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1526:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    152a:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    152e:	2900      	cmp	r1, #0
    1530:	f47f af5e 	bne.w	13f0 <process_event+0x38>
out:
    1534:	e751      	b.n	13da <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1536:	68a1      	ldr	r1, [r4, #8]
    1538:	2900      	cmp	r1, #0
    153a:	d0db      	beq.n	14f4 <process_event+0x13c>
	return node->next;
    153c:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    153e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1542:	9201      	str	r2, [sp, #4]
    1544:	2b00      	cmp	r3, #0
    1546:	bf38      	it	cc
    1548:	2300      	movcc	r3, #0
    154a:	4699      	mov	r9, r3
    154c:	4620      	mov	r0, r4
    154e:	463b      	mov	r3, r7
    1550:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1552:	9a01      	ldr	r2, [sp, #4]
    1554:	f1b9 0f00 	cmp.w	r9, #0
    1558:	d0cc      	beq.n	14f4 <process_event+0x13c>
    155a:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    155e:	4649      	mov	r1, r9
    1560:	e7ed      	b.n	153e <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1562:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1564:	463b      	mov	r3, r7
    1566:	4620      	mov	r0, r4
    1568:	9201      	str	r2, [sp, #4]
    156a:	682d      	ldr	r5, [r5, #0]
    156c:	f009 ffac 	bl	b4c8 <notify_one>
	while (!sys_slist_is_empty(list)) {
    1570:	9a01      	ldr	r2, [sp, #4]
    1572:	e7bf      	b.n	14f4 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1574:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1578:	bf1e      	ittt	ne
    157a:	f023 0320 	bicne.w	r3, r3, #32
    157e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1580:	2102      	movne	r1, #2
    1582:	e7d0      	b.n	1526 <process_event+0x16e>
    1584:	0000b4f5 	.word	0x0000b4f5

00001588 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    1588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    158c:	b08f      	sub	sp, #60	; 0x3c
    158e:	461f      	mov	r7, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    1590:	1e53      	subs	r3, r2, #1
{
    1592:	9000      	str	r0, [sp, #0]
    1594:	468b      	mov	fp, r1
	fmt--;
    1596:	9301      	str	r3, [sp, #4]
	size_t count = 0;
    1598:	f04f 0a00 	mov.w	sl, #0

start:
	while (*++fmt != '%') {
    159c:	9b01      	ldr	r3, [sp, #4]
    159e:	7858      	ldrb	r0, [r3, #1]
    15a0:	2825      	cmp	r0, #37	; 0x25
    15a2:	f103 0401 	add.w	r4, r3, #1
    15a6:	d122      	bne.n	15ee <cbvprintf+0x66>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    15a8:	f04f 0c00 	mov.w	ip, #0

	for (fmt++ ; ; fmt++) {
    15ac:	4618      	mov	r0, r3
	precision = -1;
    15ae:	f04f 36ff 	mov.w	r6, #4294967295
	for (fmt++ ; ; fmt++) {
    15b2:	3002      	adds	r0, #2
	length_mod = 0;
    15b4:	4661      	mov	r1, ip
	padding_mode = 0;
    15b6:	f8cd c008 	str.w	ip, [sp, #8]
	min_width = -1;
    15ba:	4634      	mov	r4, r6
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    15bc:	f04f 0e0a 	mov.w	lr, #10
		switch (*fmt) {
    15c0:	7802      	ldrb	r2, [r0, #0]
    15c2:	9001      	str	r0, [sp, #4]
    15c4:	2a39      	cmp	r2, #57	; 0x39
    15c6:	f100 0001 	add.w	r0, r0, #1
    15ca:	d857      	bhi.n	167c <cbvprintf+0xf4>
    15cc:	2a1f      	cmp	r2, #31
    15ce:	d818      	bhi.n	1602 <cbvprintf+0x7a>
    15d0:	2a00      	cmp	r2, #0
    15d2:	f000 81fe 	beq.w	19d2 <cbvprintf+0x44a>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    15d6:	9b00      	ldr	r3, [sp, #0]
    15d8:	4659      	mov	r1, fp
    15da:	2025      	movs	r0, #37	; 0x25
    15dc:	4798      	blx	r3
			OUTC(*fmt);
    15de:	9b01      	ldr	r3, [sp, #4]
    15e0:	4659      	mov	r1, fp
    15e2:	7818      	ldrb	r0, [r3, #0]
    15e4:	9b00      	ldr	r3, [sp, #0]
    15e6:	4798      	blx	r3
    15e8:	f10a 0a02 	add.w	sl, sl, #2
			goto start;
    15ec:	e7d6      	b.n	159c <cbvprintf+0x14>
		if (*fmt == '\0') {
    15ee:	2800      	cmp	r0, #0
    15f0:	f000 81ef 	beq.w	19d2 <cbvprintf+0x44a>
		OUTC(*fmt);
    15f4:	9b00      	ldr	r3, [sp, #0]
    15f6:	4659      	mov	r1, fp
    15f8:	4798      	blx	r3
    15fa:	f10a 0a01 	add.w	sl, sl, #1
	while (*++fmt != '%') {
    15fe:	9401      	str	r4, [sp, #4]
    1600:	e7cc      	b.n	159c <cbvprintf+0x14>
    1602:	f1a2 0320 	sub.w	r3, r2, #32
    1606:	2b19      	cmp	r3, #25
    1608:	d8e5      	bhi.n	15d6 <cbvprintf+0x4e>
    160a:	a501      	add	r5, pc, #4	; (adr r5, 1610 <cbvprintf+0x88>)
    160c:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    1610:	00001679 	.word	0x00001679
    1614:	000015d7 	.word	0x000015d7
    1618:	000015d7 	.word	0x000015d7
    161c:	00001679 	.word	0x00001679
    1620:	000015d7 	.word	0x000015d7
    1624:	000016f9 	.word	0x000016f9
    1628:	000015d7 	.word	0x000015d7
    162c:	000015d7 	.word	0x000015d7
    1630:	000015d7 	.word	0x000015d7
    1634:	000015d7 	.word	0x000015d7
    1638:	0000173b 	.word	0x0000173b
    163c:	00001679 	.word	0x00001679
    1640:	000015d7 	.word	0x000015d7
    1644:	0000174f 	.word	0x0000174f
    1648:	00001707 	.word	0x00001707
    164c:	000015d7 	.word	0x000015d7
    1650:	00001713 	.word	0x00001713
    1654:	0000172f 	.word	0x0000172f
    1658:	0000172f 	.word	0x0000172f
    165c:	0000172f 	.word	0x0000172f
    1660:	0000172f 	.word	0x0000172f
    1664:	0000172f 	.word	0x0000172f
    1668:	0000172f 	.word	0x0000172f
    166c:	0000172f 	.word	0x0000172f
    1670:	0000172f 	.word	0x0000172f
    1674:	0000172f 	.word	0x0000172f
		switch (*fmt) {
    1678:	4694      	mov	ip, r2
    167a:	e7a1      	b.n	15c0 <cbvprintf+0x38>
    167c:	2a58      	cmp	r2, #88	; 0x58
    167e:	f000 8140 	beq.w	1902 <cbvprintf+0x37a>
    1682:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    1686:	b2dd      	uxtb	r5, r3
    1688:	2d17      	cmp	r5, #23
    168a:	d8a4      	bhi.n	15d6 <cbvprintf+0x4e>
    168c:	2b17      	cmp	r3, #23
    168e:	d8a2      	bhi.n	15d6 <cbvprintf+0x4e>
    1690:	a501      	add	r5, pc, #4	; (adr r5, 1698 <cbvprintf+0x110>)
    1692:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    1696:	bf00      	nop
    1698:	0000195d 	.word	0x0000195d
    169c:	00001775 	.word	0x00001775
    16a0:	000015d7 	.word	0x000015d7
    16a4:	000015d7 	.word	0x000015d7
    16a8:	000015d7 	.word	0x000015d7
    16ac:	00001755 	.word	0x00001755
    16b0:	00001775 	.word	0x00001775
    16b4:	000015d7 	.word	0x000015d7
    16b8:	000015d7 	.word	0x000015d7
    16bc:	00001755 	.word	0x00001755
    16c0:	000015d7 	.word	0x000015d7
    16c4:	000015d7 	.word	0x000015d7
    16c8:	000015d7 	.word	0x000015d7
    16cc:	000018ad 	.word	0x000018ad
    16d0:	000015d7 	.word	0x000015d7
    16d4:	000015d7 	.word	0x000015d7
    16d8:	0000193f 	.word	0x0000193f
    16dc:	000015d7 	.word	0x000015d7
    16e0:	00001775 	.word	0x00001775
    16e4:	000015d7 	.word	0x000015d7
    16e8:	000015d7 	.word	0x000015d7
    16ec:	000018ad 	.word	0x000018ad
    16f0:	000015d7 	.word	0x000015d7
    16f4:	00001755 	.word	0x00001755
			OUTC('%');
    16f8:	9b00      	ldr	r3, [sp, #0]
    16fa:	4659      	mov	r1, fp
    16fc:	2025      	movs	r0, #37	; 0x25
    16fe:	4798      	blx	r3
    1700:	f10a 0a01 	add.w	sl, sl, #1
			goto start;
    1704:	e74a      	b.n	159c <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1706:	9b02      	ldr	r3, [sp, #8]
    1708:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    170c:	9302      	str	r3, [sp, #8]
			precision = 0;
    170e:	2600      	movs	r6, #0
			continue;
    1710:	e756      	b.n	15c0 <cbvprintf+0x38>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1712:	2c00      	cmp	r4, #0
    1714:	da0b      	bge.n	172e <cbvprintf+0x1a6>
    1716:	2e00      	cmp	r6, #0
    1718:	da0b      	bge.n	1732 <cbvprintf+0x1aa>
    171a:	9b02      	ldr	r3, [sp, #8]
    171c:	2b00      	cmp	r3, #0
    171e:	f000 8154 	beq.w	19ca <cbvprintf+0x442>
				min_width = 10 * min_width + *fmt - '0';
    1722:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    1726:	fb0e 2404 	mla	r4, lr, r4, r2
    172a:	3c30      	subs	r4, #48	; 0x30
    172c:	e748      	b.n	15c0 <cbvprintf+0x38>
			if (precision >= 0) {
    172e:	2e00      	cmp	r6, #0
    1730:	dbf7      	blt.n	1722 <cbvprintf+0x19a>
				precision = 10 * precision + *fmt - '0';
    1732:	fb0e 2606 	mla	r6, lr, r6, r2
    1736:	3e30      	subs	r6, #48	; 0x30
    1738:	e742      	b.n	15c0 <cbvprintf+0x38>
			if (precision >= 0) {
    173a:	2e00      	cmp	r6, #0
    173c:	f857 3b04 	ldr.w	r3, [r7], #4
    1740:	db01      	blt.n	1746 <cbvprintf+0x1be>
				precision = va_arg(ap, int);
    1742:	461e      	mov	r6, r3
    1744:	e73c      	b.n	15c0 <cbvprintf+0x38>
				if (min_width < 0) {
    1746:	1e1c      	subs	r4, r3, #0
    1748:	f6bf af3a 	bge.w	15c0 <cbvprintf+0x38>
					min_width = -min_width;
    174c:	4264      	negs	r4, r4
		switch (*fmt) {
    174e:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    1750:	9302      	str	r3, [sp, #8]
    1752:	e735      	b.n	15c0 <cbvprintf+0x38>
			if (*fmt == 'h' && length_mod == 'h') {
    1754:	2a68      	cmp	r2, #104	; 0x68
    1756:	d103      	bne.n	1760 <cbvprintf+0x1d8>
    1758:	2968      	cmp	r1, #104	; 0x68
    175a:	d106      	bne.n	176a <cbvprintf+0x1e2>
				length_mod = 'H';
    175c:	2148      	movs	r1, #72	; 0x48
    175e:	e72f      	b.n	15c0 <cbvprintf+0x38>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1760:	2a6c      	cmp	r2, #108	; 0x6c
    1762:	d102      	bne.n	176a <cbvprintf+0x1e2>
    1764:	296c      	cmp	r1, #108	; 0x6c
    1766:	f000 8132 	beq.w	19ce <cbvprintf+0x446>
			} else if (length_mod == '\0') {
    176a:	2900      	cmp	r1, #0
    176c:	f47f af33 	bne.w	15d6 <cbvprintf+0x4e>
    1770:	4611      	mov	r1, r2
		switch (*fmt) {
    1772:	e725      	b.n	15c0 <cbvprintf+0x38>
			if (length_mod == 'z') {
    1774:	297a      	cmp	r1, #122	; 0x7a
    1776:	d10f      	bne.n	1798 <cbvprintf+0x210>
				d = va_arg(ap, unsigned int);
    1778:	683b      	ldr	r3, [r7, #0]
			} else if (*fmt == 'u') {
    177a:	2a75      	cmp	r2, #117	; 0x75
    177c:	f107 0504 	add.w	r5, r7, #4
				d = va_arg(ap, unsigned int);
    1780:	4698      	mov	r8, r3
			} else if (*fmt == 'u') {
    1782:	f040 8088 	bne.w	1896 <cbvprintf+0x30e>
				d = va_arg(ap, unsigned int);
    1786:	f04f 0900 	mov.w	r9, #0
			} else if (special == ' ') {
    178a:	f1bc 0f20 	cmp.w	ip, #32
    178e:	f040 8085 	bne.w	189c <cbvprintf+0x314>
				prefix = " ";
    1792:	4f92      	ldr	r7, [pc, #584]	; (19dc <cbvprintf+0x454>)
				min_width--;
    1794:	3c01      	subs	r4, #1
    1796:	e015      	b.n	17c4 <cbvprintf+0x23c>
			} else if (length_mod == 'l') {
    1798:	296c      	cmp	r1, #108	; 0x6c
    179a:	d0ed      	beq.n	1778 <cbvprintf+0x1f0>
			} else if (length_mod == 'L') {
    179c:	294c      	cmp	r1, #76	; 0x4c
    179e:	d1eb      	bne.n	1778 <cbvprintf+0x1f0>
				if (*fmt == 'u') {
    17a0:	1dfd      	adds	r5, r7, #7
    17a2:	f025 0507 	bic.w	r5, r5, #7
    17a6:	2a75      	cmp	r2, #117	; 0x75
    17a8:	e8f5 8902 	ldrd	r8, r9, [r5], #8
    17ac:	d0ed      	beq.n	178a <cbvprintf+0x202>
			if (*fmt != 'u' && (int_value_type)d < 0) {
    17ae:	f1b8 0f00 	cmp.w	r8, #0
    17b2:	f179 0300 	sbcs.w	r3, r9, #0
    17b6:	dae8      	bge.n	178a <cbvprintf+0x202>
				d = -d;
    17b8:	f1d8 0800 	rsbs	r8, r8, #0
				prefix = "-";
    17bc:	4f88      	ldr	r7, [pc, #544]	; (19e0 <cbvprintf+0x458>)
				d = -d;
    17be:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
				min_width--;
    17c2:	3c01      	subs	r4, #1
	int i = 0;
    17c4:	ab0d      	add	r3, sp, #52	; 0x34
    17c6:	9305      	str	r3, [sp, #20]
    17c8:	2300      	movs	r3, #0
    17ca:	9303      	str	r3, [sp, #12]
		buftop[--i] = c + '0';
    17cc:	9b03      	ldr	r3, [sp, #12]
    17ce:	9304      	str	r3, [sp, #16]
    17d0:	3b01      	subs	r3, #1
    17d2:	9303      	str	r3, [sp, #12]
		unsigned int c = num % base;
    17d4:	4640      	mov	r0, r8
    17d6:	4649      	mov	r1, r9
    17d8:	220a      	movs	r2, #10
    17da:	2300      	movs	r3, #0
    17dc:	f7fe fc90 	bl	100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    17e0:	9b05      	ldr	r3, [sp, #20]
    17e2:	3230      	adds	r2, #48	; 0x30
    17e4:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
    17e8:	4640      	mov	r0, r8
		buftop[--i] = c + '0';
    17ea:	9305      	str	r3, [sp, #20]
		num /= base;
    17ec:	220a      	movs	r2, #10
    17ee:	2300      	movs	r3, #0
    17f0:	4649      	mov	r1, r9
    17f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
    17f6:	f7fe fc83 	bl	100 <__aeabi_uldivmod>
	} while (num);
    17fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    17fe:	2b00      	cmp	r3, #0
    1800:	bf08      	it	eq
    1802:	2a0a      	cmpeq	r2, #10
		num /= base;
    1804:	4680      	mov	r8, r0
    1806:	4689      	mov	r9, r1
	} while (num);
    1808:	d2e0      	bcs.n	17cc <cbvprintf+0x244>
	return -i;
    180a:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
    180c:	aa0e      	add	r2, sp, #56	; 0x38
	return -i;
    180e:	f1c3 0901 	rsb	r9, r3, #1
			data = buf + sizeof(buf) - data_len;
    1812:	eb02 0803 	add.w	r8, r2, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1816:	2e00      	cmp	r6, #0
			data = buf + sizeof(buf) - data_len;
    1818:	f1a8 0804 	sub.w	r8, r8, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    181c:	da04      	bge.n	1828 <cbvprintf+0x2a0>
    181e:	9b02      	ldr	r3, [sp, #8]
    1820:	f013 0f01 	tst.w	r3, #1
    1824:	bf18      	it	ne
    1826:	4626      	movne	r6, r4
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1828:	eba6 0309 	sub.w	r3, r6, r9
		if (precision > 0) {
    182c:	2b00      	cmp	r3, #0
		precision -= data_len;
    182e:	9303      	str	r3, [sp, #12]
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1830:	9b02      	ldr	r3, [sp, #8]
		min_width -= data_len;
    1832:	bfd4      	ite	le
    1834:	eba4 0409 	suble.w	r4, r4, r9
			min_width -= precision;
    1838:	1ba4      	subgt	r4, r4, r6
		if (!(padding_mode & PAD_TAIL)) {
    183a:	079a      	lsls	r2, r3, #30
    183c:	f140 80af 	bpl.w	199e <cbvprintf+0x416>
    1840:	ebaa 0607 	sub.w	r6, sl, r7
    1844:	eb06 0a07 	add.w	sl, r6, r7
			while (--min_width >= 0) {
				OUTC(' ');
			}
		}
		while (*prefix) {
    1848:	f817 0b01 	ldrb.w	r0, [r7], #1
    184c:	2800      	cmp	r0, #0
    184e:	f040 80a8 	bne.w	19a2 <cbvprintf+0x41a>
		precision -= data_len;
    1852:	9e03      	ldr	r6, [sp, #12]
			OUTC(*prefix++);
		}
		while (--precision >= 0) {
    1854:	3e01      	subs	r6, #1
    1856:	f140 80a8 	bpl.w	19aa <cbvprintf+0x422>
    185a:	9b03      	ldr	r3, [sp, #12]
    185c:	1e5a      	subs	r2, r3, #1
    185e:	3201      	adds	r2, #1
    1860:	bfac      	ite	ge
    1862:	461f      	movge	r7, r3
    1864:	2700      	movlt	r7, #0
    1866:	464e      	mov	r6, r9
			OUTC('0');
		}
		while (--data_len >= 0) {
    1868:	3e01      	subs	r6, #1
    186a:	f140 80a3 	bpl.w	19b4 <cbvprintf+0x42c>
    186e:	f109 32ff 	add.w	r2, r9, #4294967295
    1872:	3201      	adds	r2, #1
    1874:	bfac      	ite	ge
    1876:	464b      	movge	r3, r9
    1878:	2300      	movlt	r3, #0
    187a:	eb03 0907 	add.w	r9, r3, r7
    187e:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1880:	3e01      	subs	r6, #1
    1882:	f140 809d 	bpl.w	19c0 <cbvprintf+0x438>
    1886:	1e63      	subs	r3, r4, #1
    1888:	3301      	adds	r3, #1
    188a:	bfb8      	it	lt
    188c:	2400      	movlt	r4, #0
    188e:	44a1      	add	r9, r4
    1890:	44ca      	add	sl, r9
    1892:	462f      	mov	r7, r5
    1894:	e682      	b.n	159c <cbvprintf+0x14>
				d = va_arg(ap, int);
    1896:	ea4f 79e3 	mov.w	r9, r3, asr #31
    189a:	e788      	b.n	17ae <cbvprintf+0x226>
			} else if (special == '+') {
    189c:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
    18a0:	bf0a      	itet	eq
    18a2:	4f50      	ldreq	r7, [pc, #320]	; (19e4 <cbvprintf+0x45c>)
	prefix = "";
    18a4:	4f50      	ldrne	r7, [pc, #320]	; (19e8 <cbvprintf+0x460>)
				min_width--;
    18a6:	f104 34ff 	addeq.w	r4, r4, #4294967295
    18aa:	e78b      	b.n	17c4 <cbvprintf+0x23c>
			if (*fmt == 'p') {
    18ac:	2a70      	cmp	r2, #112	; 0x70
    18ae:	d128      	bne.n	1902 <cbvprintf+0x37a>
				x = (uintptr_t)va_arg(ap, void *);
    18b0:	463d      	mov	r5, r7
    18b2:	f855 0b04 	ldr.w	r0, [r5], #4
				if (x == (uint_value_type)0) {
    18b6:	2800      	cmp	r0, #0
    18b8:	d05a      	beq.n	1970 <cbvprintf+0x3e8>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    18ba:	4f4c      	ldr	r7, [pc, #304]	; (19ec <cbvprintf+0x464>)
				x = (uintptr_t)va_arg(ap, void *);
    18bc:	2100      	movs	r1, #0
				min_width -= 2;
    18be:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
    18c0:	f002 0260 	and.w	r2, r2, #96	; 0x60
    18c4:	f1a2 0939 	sub.w	r9, r2, #57	; 0x39
	int i = 0;
    18c8:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    18cc:	f04f 0800 	mov.w	r8, #0
		unsigned int c = num % base;
    18d0:	f000 030f 	and.w	r3, r0, #15
		if (c >= 10) {
    18d4:	2b09      	cmp	r3, #9
			c += alpha;
    18d6:	bf88      	it	hi
    18d8:	444b      	addhi	r3, r9
		buftop[--i] = c + '0';
    18da:	3330      	adds	r3, #48	; 0x30
	} while (num);
    18dc:	2900      	cmp	r1, #0
		buftop[--i] = c + '0';
    18de:	f80e 3901 	strb.w	r3, [lr], #-1
	} while (num);
    18e2:	bf08      	it	eq
    18e4:	2810      	cmpeq	r0, #16
		num /= base;
    18e6:	ea4f 1310 	mov.w	r3, r0, lsr #4
		buftop[--i] = c + '0';
    18ea:	f108 3cff 	add.w	ip, r8, #4294967295
		num /= base;
    18ee:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    18f2:	ea4f 1211 	mov.w	r2, r1, lsr #4
	} while (num);
    18f6:	d21e      	bcs.n	1936 <cbvprintf+0x3ae>
			data = buf + sizeof(buf) - data_len;
    18f8:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
    18fa:	f1c8 0901 	rsb	r9, r8, #1
			data = buf + sizeof(buf) - data_len;
    18fe:	4498      	add	r8, r3
    1900:	e789      	b.n	1816 <cbvprintf+0x28e>
			} else if (length_mod == 'l') {
    1902:	296c      	cmp	r1, #108	; 0x6c
    1904:	d104      	bne.n	1910 <cbvprintf+0x388>
				x = va_arg(ap, unsigned int);
    1906:	463d      	mov	r5, r7
    1908:	2100      	movs	r1, #0
    190a:	f855 0b04 	ldr.w	r0, [r5], #4
    190e:	e006      	b.n	191e <cbvprintf+0x396>
			} else if (length_mod == 'L') {
    1910:	294c      	cmp	r1, #76	; 0x4c
    1912:	d1f8      	bne.n	1906 <cbvprintf+0x37e>
				unsigned long long llx =
    1914:	1dfd      	adds	r5, r7, #7
    1916:	f025 0507 	bic.w	r5, r5, #7
    191a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
			if (special == '#') {
    191e:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    1922:	d106      	bne.n	1932 <cbvprintf+0x3aa>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1924:	4b31      	ldr	r3, [pc, #196]	; (19ec <cbvprintf+0x464>)
    1926:	4f32      	ldr	r7, [pc, #200]	; (19f0 <cbvprintf+0x468>)
    1928:	f012 0f20 	tst.w	r2, #32
    192c:	bf18      	it	ne
    192e:	461f      	movne	r7, r3
    1930:	e7c5      	b.n	18be <cbvprintf+0x336>
	prefix = "";
    1932:	4f2d      	ldr	r7, [pc, #180]	; (19e8 <cbvprintf+0x460>)
    1934:	e7c4      	b.n	18c0 <cbvprintf+0x338>
		buftop[--i] = c + '0';
    1936:	46e0      	mov	r8, ip
		num /= base;
    1938:	4618      	mov	r0, r3
    193a:	4611      	mov	r1, r2
    193c:	e7c8      	b.n	18d0 <cbvprintf+0x348>
			data = va_arg(ap, char *);
    193e:	463d      	mov	r5, r7
    1940:	f855 8b04 	ldr.w	r8, [r5], #4
			data_len = strlen(data);
    1944:	4640      	mov	r0, r8
    1946:	f00a fb3f 	bl	bfc8 <strlen>
			if (precision >= 0 && data_len > precision) {
    194a:	2e00      	cmp	r6, #0
			data_len = strlen(data);
    194c:	4681      	mov	r9, r0
			if (precision >= 0 && data_len > precision) {
    194e:	db02      	blt.n	1956 <cbvprintf+0x3ce>
    1950:	42b0      	cmp	r0, r6
    1952:	bfa8      	it	ge
    1954:	46b1      	movge	r9, r6
    1956:	4f24      	ldr	r7, [pc, #144]	; (19e8 <cbvprintf+0x460>)
    1958:	2600      	movs	r6, #0
    195a:	e765      	b.n	1828 <cbvprintf+0x2a0>
			int c = va_arg(ap, int);
    195c:	463d      	mov	r5, r7
			data_len = 1;
    195e:	f04f 0901 	mov.w	r9, #1
			buf[0] = c;
    1962:	f855 3b04 	ldr.w	r3, [r5], #4
    1966:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    196a:	f10d 0820 	add.w	r8, sp, #32
    196e:	e7f2      	b.n	1956 <cbvprintf+0x3ce>
					data = "(nil)";
    1970:	f8df 8080 	ldr.w	r8, [pc, #128]	; 19f4 <cbvprintf+0x46c>
					data_len = 5;
    1974:	f04f 0905 	mov.w	r9, #5
    1978:	e7ed      	b.n	1956 <cbvprintf+0x3ce>
				OUTC(' ');
    197a:	9b00      	ldr	r3, [sp, #0]
    197c:	4659      	mov	r1, fp
    197e:	2020      	movs	r0, #32
    1980:	4798      	blx	r3
			while (--min_width >= 0) {
    1982:	3e01      	subs	r6, #1
    1984:	d5f9      	bpl.n	197a <cbvprintf+0x3f2>
    1986:	1e62      	subs	r2, r4, #1
    1988:	1c53      	adds	r3, r2, #1
    198a:	bfac      	ite	ge
    198c:	4621      	movge	r1, r4
    198e:	2100      	movlt	r1, #0
    1990:	f1c4 0400 	rsb	r4, r4, #0
    1994:	bfb8      	it	lt
    1996:	2400      	movlt	r4, #0
    1998:	448a      	add	sl, r1
    199a:	4414      	add	r4, r2
    199c:	e750      	b.n	1840 <cbvprintf+0x2b8>
    199e:	4626      	mov	r6, r4
    19a0:	e7ef      	b.n	1982 <cbvprintf+0x3fa>
			OUTC(*prefix++);
    19a2:	9b00      	ldr	r3, [sp, #0]
    19a4:	4659      	mov	r1, fp
    19a6:	4798      	blx	r3
    19a8:	e74c      	b.n	1844 <cbvprintf+0x2bc>
			OUTC('0');
    19aa:	9b00      	ldr	r3, [sp, #0]
    19ac:	4659      	mov	r1, fp
    19ae:	2030      	movs	r0, #48	; 0x30
    19b0:	4798      	blx	r3
    19b2:	e74f      	b.n	1854 <cbvprintf+0x2cc>
			OUTC(*data++);
    19b4:	f818 0b01 	ldrb.w	r0, [r8], #1
    19b8:	9b00      	ldr	r3, [sp, #0]
    19ba:	4659      	mov	r1, fp
    19bc:	4798      	blx	r3
    19be:	e753      	b.n	1868 <cbvprintf+0x2e0>
			OUTC(' ');
    19c0:	9b00      	ldr	r3, [sp, #0]
    19c2:	4659      	mov	r1, fp
    19c4:	2020      	movs	r0, #32
    19c6:	4798      	blx	r3
    19c8:	e75a      	b.n	1880 <cbvprintf+0x2f8>
				padding_mode = PAD_ZERO;
    19ca:	2301      	movs	r3, #1
    19cc:	e6c0      	b.n	1750 <cbvprintf+0x1c8>
				length_mod = 'L';
    19ce:	214c      	movs	r1, #76	; 0x4c
    19d0:	e5f6      	b.n	15c0 <cbvprintf+0x38>
		}

		goto start;
	}
}
    19d2:	4650      	mov	r0, sl
    19d4:	b00f      	add	sp, #60	; 0x3c
    19d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19da:	bf00      	nop
    19dc:	0000ee0a 	.word	0x0000ee0a
    19e0:	0000e1c3 	.word	0x0000e1c3
    19e4:	0000e1c5 	.word	0x0000e1c5
    19e8:	0000f443 	.word	0x0000f443
    19ec:	0000e1c7 	.word	0x0000e1c7
    19f0:	0000e1ca 	.word	0x0000e1ca
    19f4:	0000e1cd 	.word	0x0000e1cd

000019f8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    19f8:	b508      	push	{r3, lr}
    19fa:	f04f 0220 	mov.w	r2, #32
    19fe:	f3ef 8311 	mrs	r3, BASEPRI
    1a02:	f382 8812 	msr	BASEPRI_MAX, r2
    1a06:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1a0a:	f002 fc11 	bl	4230 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1a0e:	4803      	ldr	r0, [pc, #12]	; (1a1c <sys_reboot+0x24>)
    1a10:	f009 fd31 	bl	b476 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1a14:	f001 fe72 	bl	36fc <arch_cpu_idle>
    1a18:	e7fc      	b.n	1a14 <sys_reboot+0x1c>
    1a1a:	bf00      	nop
    1a1c:	0000e1d3 	.word	0x0000e1d3

00001a20 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1a20:	4b0c      	ldr	r3, [pc, #48]	; (1a54 <class_handler+0x34>)
{
    1a22:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1a24:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1a26:	4e0c      	ldr	r6, [pc, #48]	; (1a58 <class_handler+0x38>)
    1a28:	4b0c      	ldr	r3, [pc, #48]	; (1a5c <class_handler+0x3c>)
    1a2a:	42b3      	cmp	r3, r6
    1a2c:	d303      	bcc.n	1a36 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    1a2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1a32:	bcf0      	pop	{r4, r5, r6, r7}
    1a34:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    1a36:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1a38:	42bd      	cmp	r5, r7
    1a3a:	d309      	bcc.n	1a50 <class_handler+0x30>
		if (iface->class_handler &&
    1a3c:	691c      	ldr	r4, [r3, #16]
    1a3e:	b13c      	cbz	r4, 1a50 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1a40:	f895 c002 	ldrb.w	ip, [r5, #2]
    1a44:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    1a46:	45ac      	cmp	ip, r5
    1a48:	d102      	bne.n	1a50 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    1a4a:	4623      	mov	r3, r4
}
    1a4c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    1a4e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1a50:	3324      	adds	r3, #36	; 0x24
    1a52:	e7ea      	b.n	1a2a <class_handler+0xa>
    1a54:	2000184c 	.word	0x2000184c
    1a58:	20000734 	.word	0x20000734
    1a5c:	200006c8 	.word	0x200006c8

00001a60 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1a62:	4c13      	ldr	r4, [pc, #76]	; (1ab0 <custom_handler+0x50>)
    1a64:	4e13      	ldr	r6, [pc, #76]	; (1ab4 <custom_handler+0x54>)
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1a66:	4f14      	ldr	r7, [pc, #80]	; (1ab8 <custom_handler+0x58>)
{
    1a68:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1a6a:	42b4      	cmp	r4, r6
    1a6c:	d303      	bcc.n	1a76 <custom_handler+0x16>
			}
		}
	}

	return -ENOTSUP;
}
    1a6e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1a72:	b003      	add	sp, #12
    1a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if_descr = cfg_data->interface_descriptor;
    1a76:	6860      	ldr	r0, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a7a:	4298      	cmp	r0, r3
    1a7c:	d315      	bcc.n	1aaa <custom_handler+0x4a>
		if (iface->custom_handler == NULL) {
    1a7e:	69a3      	ldr	r3, [r4, #24]
    1a80:	b19b      	cbz	r3, 1aaa <custom_handler+0x4a>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1a82:	f890 e002 	ldrb.w	lr, [r0, #2]
    1a86:	f895 c004 	ldrb.w	ip, [r5, #4]
    1a8a:	45e6      	cmp	lr, ip
    1a8c:	d104      	bne.n	1a98 <custom_handler+0x38>
			return iface->custom_handler(pSetup, len, data);
    1a8e:	4628      	mov	r0, r5
}
    1a90:	b003      	add	sp, #12
    1a92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return iface->custom_handler(pSetup, len, data);
    1a96:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    1a98:	7940      	ldrb	r0, [r0, #5]
    1a9a:	2801      	cmp	r0, #1
    1a9c:	d105      	bne.n	1aaa <custom_handler+0x4a>
				(void)iface->custom_handler(pSetup, len, data);
    1a9e:	4628      	mov	r0, r5
    1aa0:	e9cd 1200 	strd	r1, r2, [sp]
    1aa4:	4798      	blx	r3
    1aa6:	e9dd 1200 	ldrd	r1, r2, [sp]
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1aaa:	3424      	adds	r4, #36	; 0x24
    1aac:	e7dd      	b.n	1a6a <custom_handler+0xa>
    1aae:	bf00      	nop
    1ab0:	200006c8 	.word	0x200006c8
    1ab4:	20000734 	.word	0x20000734
    1ab8:	2000184c 	.word	0x2000184c

00001abc <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1ac0:	4c0a      	ldr	r4, [pc, #40]	; (1aec <vendor_handler+0x30>)
    1ac2:	4e0b      	ldr	r6, [pc, #44]	; (1af0 <vendor_handler+0x34>)
{
    1ac4:	4605      	mov	r5, r0
    1ac6:	460f      	mov	r7, r1
    1ac8:	4690      	mov	r8, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1aca:	42b4      	cmp	r4, r6
    1acc:	d302      	bcc.n	1ad4 <vendor_handler+0x18>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    1ace:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1ad2:	e009      	b.n	1ae8 <vendor_handler+0x2c>
		if (iface->vendor_handler) {
    1ad4:	6963      	ldr	r3, [r4, #20]
    1ad6:	b90b      	cbnz	r3, 1adc <vendor_handler+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1ad8:	3424      	adds	r4, #36	; 0x24
    1ada:	e7f6      	b.n	1aca <vendor_handler+0xe>
			if (!iface->vendor_handler(pSetup, len, data)) {
    1adc:	4642      	mov	r2, r8
    1ade:	4639      	mov	r1, r7
    1ae0:	4628      	mov	r0, r5
    1ae2:	4798      	blx	r3
    1ae4:	2800      	cmp	r0, #0
    1ae6:	d1f7      	bne.n	1ad8 <vendor_handler+0x1c>
}
    1ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1aec:	200006c8 	.word	0x200006c8
    1af0:	20000734 	.word	0x20000734

00001af4 <set_endpoint>:
{
    1af4:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    1af6:	7883      	ldrb	r3, [r0, #2]
    1af8:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    1afc:	7942      	ldrb	r2, [r0, #5]
    1afe:	7903      	ldrb	r3, [r0, #4]
    1b00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1b04:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1b08:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    1b0a:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1b0c:	f003 0303 	and.w	r3, r3, #3
    1b10:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    1b14:	f003 f858 	bl	4bc8 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    1b18:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1b1c:	f89d 2000 	ldrb.w	r2, [sp]
    1b20:	d115      	bne.n	1b4e <set_endpoint+0x5a>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    1b22:	4813      	ldr	r0, [pc, #76]	; (1b70 <set_endpoint+0x7c>)
    1b24:	2157      	movs	r1, #87	; 0x57
    1b26:	f00a f858 	bl	bbda <z_log_minimal_printk>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    1b2a:	f89d 0000 	ldrb.w	r0, [sp]
    1b2e:	f003 f8dd 	bl	4cec <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    1b32:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1b36:	d114      	bne.n	1b62 <set_endpoint+0x6e>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    1b38:	f89d 2000 	ldrb.w	r2, [sp]
    1b3c:	480d      	ldr	r0, [pc, #52]	; (1b74 <set_endpoint+0x80>)
    1b3e:	2157      	movs	r1, #87	; 0x57
    1b40:	f00a f84b 	bl	bbda <z_log_minimal_printk>
	usb_dev.configured = true;
    1b44:	4b0c      	ldr	r3, [pc, #48]	; (1b78 <set_endpoint+0x84>)
    1b46:	2001      	movs	r0, #1
    1b48:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    1b4c:	e006      	b.n	1b5c <set_endpoint+0x68>
	} else if (ret) {
    1b4e:	2800      	cmp	r0, #0
    1b50:	d0eb      	beq.n	1b2a <set_endpoint+0x36>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    1b52:	480a      	ldr	r0, [pc, #40]	; (1b7c <set_endpoint+0x88>)
    1b54:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    1b56:	f00a f840 	bl	bbda <z_log_minimal_printk>
		return false;
    1b5a:	2000      	movs	r0, #0
}
    1b5c:	b003      	add	sp, #12
    1b5e:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (ret) {
    1b62:	2800      	cmp	r0, #0
    1b64:	d0ee      	beq.n	1b44 <set_endpoint+0x50>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    1b66:	f89d 2000 	ldrb.w	r2, [sp]
    1b6a:	4805      	ldr	r0, [pc, #20]	; (1b80 <set_endpoint+0x8c>)
    1b6c:	2145      	movs	r1, #69	; 0x45
    1b6e:	e7f2      	b.n	1b56 <set_endpoint+0x62>
    1b70:	0000e1fc 	.word	0x0000e1fc
    1b74:	0000e24d 	.word	0x0000e24d
    1b78:	2000184c 	.word	0x2000184c
    1b7c:	0000e224 	.word	0x0000e224
    1b80:	0000e272 	.word	0x0000e272

00001b84 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    1b84:	4802      	ldr	r0, [pc, #8]	; (1b90 <usb_reset_alt_setting+0xc>)
    1b86:	2208      	movs	r2, #8
    1b88:	2100      	movs	r1, #0
    1b8a:	f00a ba4b 	b.w	c024 <memset>
    1b8e:	bf00      	nop
    1b90:	20001907 	.word	0x20001907

00001b94 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    1b94:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1b96:	4b0b      	ldr	r3, [pc, #44]	; (1bc4 <is_ep_valid.part.0+0x30>)
    1b98:	4c0b      	ldr	r4, [pc, #44]	; (1bc8 <is_ep_valid.part.0+0x34>)
    1b9a:	42a3      	cmp	r3, r4
    1b9c:	d301      	bcc.n	1ba2 <is_ep_valid.part.0+0xe>
	return false;
    1b9e:	2000      	movs	r0, #0
}
    1ba0:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    1ba2:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1ba4:	7f1e      	ldrb	r6, [r3, #28]
    1ba6:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    1ba8:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1baa:	b2d5      	uxtb	r5, r2
    1bac:	42ae      	cmp	r6, r5
    1bae:	d801      	bhi.n	1bb4 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1bb0:	3324      	adds	r3, #36	; 0x24
    1bb2:	e7f2      	b.n	1b9a <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    1bb4:	3201      	adds	r2, #1
    1bb6:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    1bba:	4285      	cmp	r5, r0
    1bbc:	d1f5      	bne.n	1baa <is_ep_valid.part.0+0x16>
				return true;
    1bbe:	2001      	movs	r0, #1
    1bc0:	e7ee      	b.n	1ba0 <is_ep_valid.part.0+0xc>
    1bc2:	bf00      	nop
    1bc4:	200006c8 	.word	0x200006c8
    1bc8:	20000734 	.word	0x20000734

00001bcc <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1bcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    1bce:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    1bd0:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1bd2:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    1bd4:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    1bd8:	d007      	beq.n	1bea <usb_halt_endpoint_req.isra.0+0x1e>
    1bda:	4620      	mov	r0, r4
    1bdc:	f7ff ffda 	bl	1b94 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    1be0:	b1b8      	cbz	r0, 1c12 <usb_halt_endpoint_req.isra.0+0x46>
	return (usb_dev.configuration != 0);
    1be2:	4b14      	ldr	r3, [pc, #80]	; (1c34 <usb_halt_endpoint_req.isra.0+0x68>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1be4:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    1be8:	b198      	cbz	r0, 1c12 <usb_halt_endpoint_req.isra.0+0x46>
		if (halt) {
    1bea:	4e12      	ldr	r6, [pc, #72]	; (1c34 <usb_halt_endpoint_req.isra.0+0x68>)
			LOG_INF("Set halt ep 0x%02x", ep);
    1bec:	4622      	mov	r2, r4
    1bee:	2149      	movs	r1, #73	; 0x49
		if (halt) {
    1bf0:	b18d      	cbz	r5, 1c16 <usb_halt_endpoint_req.isra.0+0x4a>
			LOG_INF("Set halt ep 0x%02x", ep);
    1bf2:	4811      	ldr	r0, [pc, #68]	; (1c38 <usb_halt_endpoint_req.isra.0+0x6c>)
    1bf4:	f009 fff1 	bl	bbda <z_log_minimal_printk>
			usb_dc_ep_set_stall(ep);
    1bf8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1bfc:	f003 f80c 	bl	4c18 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    1c00:	69f3      	ldr	r3, [r6, #28]
    1c02:	b90b      	cbnz	r3, 1c08 <usb_halt_endpoint_req.isra.0+0x3c>
		return true;
    1c04:	2001      	movs	r0, #1
    1c06:	e004      	b.n	1c12 <usb_halt_endpoint_req.isra.0+0x46>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    1c08:	2008      	movs	r0, #8
    1c0a:	f10d 0107 	add.w	r1, sp, #7
    1c0e:	4798      	blx	r3
		return true;
    1c10:	4628      	mov	r0, r5
}
    1c12:	b002      	add	sp, #8
    1c14:	bd70      	pop	{r4, r5, r6, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
    1c16:	4809      	ldr	r0, [pc, #36]	; (1c3c <usb_halt_endpoint_req.isra.0+0x70>)
    1c18:	f009 ffdf 	bl	bbda <z_log_minimal_printk>
			usb_dc_ep_clear_stall(ep);
    1c1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1c20:	f003 f828 	bl	4c74 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    1c24:	69f3      	ldr	r3, [r6, #28]
    1c26:	2b00      	cmp	r3, #0
    1c28:	d0ec      	beq.n	1c04 <usb_halt_endpoint_req.isra.0+0x38>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    1c2a:	f10d 0107 	add.w	r1, sp, #7
    1c2e:	2009      	movs	r0, #9
    1c30:	4798      	blx	r3
    1c32:	e7e7      	b.n	1c04 <usb_halt_endpoint_req.isra.0+0x38>
    1c34:	2000184c 	.word	0x2000184c
    1c38:	0000e298 	.word	0x0000e298
    1c3c:	0000e2b0 	.word	0x0000e2b0

00001c40 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    1c40:	2804      	cmp	r0, #4
{
    1c42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c46:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1cd0 <forward_status_cb+0x90>
    1c4a:	4604      	mov	r4, r0
    1c4c:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    1c4e:	d10c      	bne.n	1c6a <forward_status_cb+0x2a>
		usb_reset_alt_setting();
    1c50:	f7ff ff98 	bl	1b84 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    1c54:	4b1c      	ldr	r3, [pc, #112]	; (1cc8 <forward_status_cb+0x88>)
    1c56:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    1c5a:	4699      	mov	r9, r3
    1c5c:	b13a      	cbz	r2, 1c6e <forward_status_cb+0x2e>
			usb_cancel_transfers();
    1c5e:	f000 fe21 	bl	28a4 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    1c62:	2c04      	cmp	r4, #4
    1c64:	d103      	bne.n	1c6e <forward_status_cb+0x2e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1c66:	4d19      	ldr	r5, [pc, #100]	; (1ccc <forward_status_cb+0x8c>)
    1c68:	e014      	b.n	1c94 <forward_status_cb+0x54>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    1c6a:	2805      	cmp	r0, #5
    1c6c:	d0f2      	beq.n	1c54 <forward_status_cb+0x14>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1c6e:	4d17      	ldr	r5, [pc, #92]	; (1ccc <forward_status_cb+0x8c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1c70:	4545      	cmp	r5, r8
    1c72:	d31e      	bcc.n	1cb2 <forward_status_cb+0x72>
	if (usb_dev.user_status_callback) {
    1c74:	4b14      	ldr	r3, [pc, #80]	; (1cc8 <forward_status_cb+0x88>)
    1c76:	6a1b      	ldr	r3, [r3, #32]
    1c78:	b31b      	cbz	r3, 1cc2 <forward_status_cb+0x82>
		usb_dev.user_status_callback(status, param);
    1c7a:	4631      	mov	r1, r6
    1c7c:	4620      	mov	r0, r4
}
    1c7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    1c82:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    1c84:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1c88:	2700      	movs	r7, #0
    1c8a:	7f2a      	ldrb	r2, [r5, #28]
    1c8c:	b2fb      	uxtb	r3, r7
    1c8e:	429a      	cmp	r2, r3
    1c90:	d803      	bhi.n	1c9a <forward_status_cb+0x5a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1c92:	3524      	adds	r5, #36	; 0x24
    1c94:	4545      	cmp	r5, r8
    1c96:	d3f5      	bcc.n	1c84 <forward_status_cb+0x44>
    1c98:	e007      	b.n	1caa <forward_status_cb+0x6a>
	return usb_dc_ep_disable(ep_data->ep_addr);
    1c9a:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
    1c9e:	3701      	adds	r7, #1
    1ca0:	7918      	ldrb	r0, [r3, #4]
    1ca2:	f003 f84d 	bl	4d40 <usb_dc_ep_disable>
			if (ret < 0) {
    1ca6:	2800      	cmp	r0, #0
    1ca8:	daef      	bge.n	1c8a <forward_status_cb+0x4a>
				usb_dev.configured = false;
    1caa:	2300      	movs	r3, #0
    1cac:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    1cb0:	e7dd      	b.n	1c6e <forward_status_cb+0x2e>
		if (cfg_data->cb_usb_status) {
    1cb2:	68eb      	ldr	r3, [r5, #12]
    1cb4:	b11b      	cbz	r3, 1cbe <forward_status_cb+0x7e>
			cfg_data->cb_usb_status(cfg_data, status, param);
    1cb6:	4632      	mov	r2, r6
    1cb8:	4621      	mov	r1, r4
    1cba:	4628      	mov	r0, r5
    1cbc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1cbe:	3524      	adds	r5, #36	; 0x24
    1cc0:	e7d6      	b.n	1c70 <forward_status_cb+0x30>
}
    1cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1cc6:	bf00      	nop
    1cc8:	2000184c 	.word	0x2000184c
    1ccc:	200006c8 	.word	0x200006c8
    1cd0:	20000734 	.word	0x20000734

00001cd4 <usb_handle_standard_request>:
{
    1cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    1cd8:	4eac      	ldr	r6, [pc, #688]	; (1f8c <usb_handle_standard_request+0x2b8>)
    1cda:	69b3      	ldr	r3, [r6, #24]
{
    1cdc:	4605      	mov	r5, r0
    1cde:	460f      	mov	r7, r1
    1ce0:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    1ce2:	bb03      	cbnz	r3, 1d26 <usb_handle_standard_request+0x52>
	switch (setup->RequestType.recipient) {
    1ce4:	7829      	ldrb	r1, [r5, #0]
    1ce6:	f001 001f 	and.w	r0, r1, #31
    1cea:	2801      	cmp	r0, #1
    1cec:	f000 80a1 	beq.w	1e32 <usb_handle_standard_request+0x15e>
    1cf0:	2802      	cmp	r0, #2
    1cf2:	f000 8118 	beq.w	1f26 <usb_handle_standard_request+0x252>
    1cf6:	bb00      	cbnz	r0, 1d3a <usb_handle_standard_request+0x66>
	if (usb_reqtype_is_to_host(setup)) {
    1cf8:	0609      	lsls	r1, r1, #24
	uint8_t *data = *data_buf;
    1cfa:	f8d8 2000 	ldr.w	r2, [r8]
 * @param setup Pointer to USB Setup packet
 * @return true If transfer direction is to host
 */
static inline bool usb_reqtype_is_to_host(struct usb_setup_packet *setup)
{
	return setup->RequestType.direction == USB_REQTYPE_DIR_TO_HOST;
    1cfe:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    1d00:	d538      	bpl.n	1d74 <usb_handle_standard_request+0xa0>
		switch (setup->bRequest) {
    1d02:	2b06      	cmp	r3, #6
    1d04:	d014      	beq.n	1d30 <usb_handle_standard_request+0x5c>
    1d06:	2b08      	cmp	r3, #8
    1d08:	d02e      	beq.n	1d68 <usb_handle_standard_request+0x94>
    1d0a:	b9b3      	cbnz	r3, 1d3a <usb_handle_standard_request+0x66>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    1d0c:	2101      	movs	r1, #1
	data[1] = 0U;
    1d0e:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    1d10:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    1d12:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    1d16:	2900      	cmp	r1, #0
    1d18:	bf18      	it	ne
    1d1a:	2302      	movne	r3, #2
    1d1c:	f043 0301 	orr.w	r3, r3, #1
    1d20:	7013      	strb	r3, [r2, #0]
		*len = 2;
    1d22:	2302      	movs	r3, #2
    1d24:	e024      	b.n	1d70 <usb_handle_standard_request+0x9c>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    1d26:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    1d28:	2800      	cmp	r0, #0
    1d2a:	d1db      	bne.n	1ce4 <usb_handle_standard_request+0x10>
	int rc = 0;
    1d2c:	2000      	movs	r0, #0
    1d2e:	e006      	b.n	1d3e <usb_handle_standard_request+0x6a>
			return usb_get_descriptor(setup, len, data_buf);
    1d30:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    1d32:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    1d34:	1f11      	subs	r1, r2, #4
    1d36:	2901      	cmp	r1, #1
    1d38:	d804      	bhi.n	1d44 <usb_handle_standard_request+0x70>
			rc = -EINVAL;
    1d3a:	f06f 0015 	mvn.w	r0, #21
}
    1d3e:	b003      	add	sp, #12
    1d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    1d44:	2a07      	cmp	r2, #7
    1d46:	d8f8      	bhi.n	1d3a <usb_handle_standard_request+0x66>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    1d48:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    1d4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    1d4c:	781c      	ldrb	r4, [r3, #0]
    1d4e:	2c00      	cmp	r4, #0
    1d50:	d0f3      	beq.n	1d3a <usb_handle_standard_request+0x66>
		if (p[DESC_bDescriptorType] == type) {
    1d52:	785d      	ldrb	r5, [r3, #1]
    1d54:	4295      	cmp	r5, r2
    1d56:	d103      	bne.n	1d60 <usb_handle_standard_request+0x8c>
			if (cur_index == index) {
    1d58:	4281      	cmp	r1, r0
    1d5a:	f000 811f 	beq.w	1f9c <usb_handle_standard_request+0x2c8>
			cur_index++;
    1d5e:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    1d60:	4423      	add	r3, r4
    1d62:	e7f3      	b.n	1d4c <usb_handle_standard_request+0x78>
			*len = p[DESC_bLength];
    1d64:	781b      	ldrb	r3, [r3, #0]
    1d66:	e11f      	b.n	1fa8 <usb_handle_standard_request+0x2d4>
			data[0] = usb_dev.configuration;
    1d68:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    1d6c:	7013      	strb	r3, [r2, #0]
			*len = 1;
    1d6e:	2301      	movs	r3, #1
		*len = 2;
    1d70:	603b      	str	r3, [r7, #0]
		return true;
    1d72:	e7e4      	b.n	1d3e <usb_handle_standard_request+0x6a>
		switch (setup->bRequest) {
    1d74:	3b01      	subs	r3, #1
    1d76:	2b08      	cmp	r3, #8
    1d78:	d8df      	bhi.n	1d3a <usb_handle_standard_request+0x66>
    1d7a:	a201      	add	r2, pc, #4	; (adr r2, 1d80 <usb_handle_standard_request+0xac>)
    1d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1d80:	00001e19 	.word	0x00001e19
    1d84:	00001d3b 	.word	0x00001d3b
    1d88:	00001e27 	.word	0x00001e27
    1d8c:	00001d3b 	.word	0x00001d3b
    1d90:	00001da5 	.word	0x00001da5
    1d94:	00001d3b 	.word	0x00001d3b
    1d98:	00001d3b 	.word	0x00001d3b
    1d9c:	00001d3b 	.word	0x00001d3b
    1da0:	00001db1 	.word	0x00001db1
			return !usb_dc_set_address(setup->wValue);
    1da4:	78a8      	ldrb	r0, [r5, #2]
    1da6:	f002 fedb 	bl	4b60 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    1daa:	2800      	cmp	r0, #0
    1dac:	d0be      	beq.n	1d2c <usb_handle_standard_request+0x58>
    1dae:	e7c4      	b.n	1d3a <usb_handle_standard_request+0x66>
	if (setup->wValue == 0U) {
    1db0:	886c      	ldrh	r4, [r5, #2]
    1db2:	b144      	cbz	r4, 1dc6 <usb_handle_standard_request+0xf2>
	uint8_t cur_config = 0xFF;
    1db4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1db8:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
    1dba:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    1dbc:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    1dbe:	783c      	ldrb	r4, [r7, #0]
    1dc0:	b96c      	cbnz	r4, 1dde <usb_handle_standard_request+0x10a>
	if (found) {
    1dc2:	2800      	cmp	r0, #0
    1dc4:	d0b9      	beq.n	1d3a <usb_handle_standard_request+0x66>
		usb_reset_alt_setting();
    1dc6:	f7ff fedd 	bl	1b84 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    1dca:	886b      	ldrh	r3, [r5, #2]
    1dcc:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    1dd0:	69f3      	ldr	r3, [r6, #28]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d0aa      	beq.n	1d2c <usb_handle_standard_request+0x58>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    1dd6:	496e      	ldr	r1, [pc, #440]	; (1f90 <usb_handle_standard_request+0x2bc>)
    1dd8:	2003      	movs	r0, #3
    1dda:	4798      	blx	r3
    1ddc:	e7a6      	b.n	1d2c <usb_handle_standard_request+0x58>
		switch (p[DESC_bDescriptorType]) {
    1dde:	787b      	ldrb	r3, [r7, #1]
    1de0:	2b04      	cmp	r3, #4
    1de2:	d00c      	beq.n	1dfe <usb_handle_standard_request+0x12a>
    1de4:	2b05      	cmp	r3, #5
    1de6:	d00d      	beq.n	1e04 <usb_handle_standard_request+0x130>
    1de8:	2b02      	cmp	r3, #2
    1dea:	d105      	bne.n	1df8 <usb_handle_standard_request+0x124>
			cur_config = p[CONF_DESC_bConfigurationValue];
    1dec:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    1df0:	886a      	ldrh	r2, [r5, #2]
				found = true;
    1df2:	4542      	cmp	r2, r8
    1df4:	bf08      	it	eq
    1df6:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    1df8:	783b      	ldrb	r3, [r7, #0]
    1dfa:	441f      	add	r7, r3
    1dfc:	e7df      	b.n	1dbe <usb_handle_standard_request+0xea>
			cur_alt_setting =
    1dfe:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    1e02:	e7f9      	b.n	1df8 <usb_handle_standard_request+0x124>
			if ((cur_config != setup->wValue) ||
    1e04:	886b      	ldrh	r3, [r5, #2]
    1e06:	4543      	cmp	r3, r8
    1e08:	d1f6      	bne.n	1df8 <usb_handle_standard_request+0x124>
    1e0a:	f1b9 0f00 	cmp.w	r9, #0
    1e0e:	d1f3      	bne.n	1df8 <usb_handle_standard_request+0x124>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    1e10:	4638      	mov	r0, r7
    1e12:	f7ff fe6f 	bl	1af4 <set_endpoint>
			break;
    1e16:	e7ef      	b.n	1df8 <usb_handle_standard_request+0x124>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    1e18:	886b      	ldrh	r3, [r5, #2]
    1e1a:	2b01      	cmp	r3, #1
    1e1c:	d18d      	bne.n	1d3a <usb_handle_standard_request+0x66>
					usb_dev.remote_wakeup = false;
    1e1e:	2000      	movs	r0, #0
    1e20:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
					return true;
    1e24:	e78b      	b.n	1d3e <usb_handle_standard_request+0x6a>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    1e26:	886b      	ldrh	r3, [r5, #2]
    1e28:	2b01      	cmp	r3, #1
    1e2a:	d186      	bne.n	1d3a <usb_handle_standard_request+0x66>
					usb_dev.remote_wakeup = true;
    1e2c:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    1e30:	e77c      	b.n	1d2c <usb_handle_standard_request+0x58>
	if (!is_device_configured() ||
    1e32:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    1e36:	2b00      	cmp	r3, #0
    1e38:	f43f af7f 	beq.w	1d3a <usb_handle_standard_request+0x66>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1e3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    1e3e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    1e42:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1e44:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
    1e46:	781a      	ldrb	r2, [r3, #0]
    1e48:	2a00      	cmp	r2, #0
    1e4a:	f43f af76 	beq.w	1d3a <usb_handle_standard_request+0x66>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    1e4e:	7859      	ldrb	r1, [r3, #1]
    1e50:	2902      	cmp	r1, #2
    1e52:	d104      	bne.n	1e5e <usb_handle_standard_request+0x18a>
			if (interface < cfg_descr->bNumInterfaces) {
    1e54:	f893 e004 	ldrb.w	lr, [r3, #4]
    1e58:	4586      	cmp	lr, r0
    1e5a:	f200 80a7 	bhi.w	1fac <usb_handle_standard_request+0x2d8>
		p += p[DESC_bLength];
    1e5e:	4413      	add	r3, r2
    1e60:	e7f1      	b.n	1e46 <usb_handle_standard_request+0x172>
			data[0] = 0U;
    1e62:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    1e64:	7050      	strb	r0, [r2, #1]
			*len = 2;
    1e66:	6039      	str	r1, [r7, #0]
			return true;
    1e68:	e769      	b.n	1d3e <usb_handle_standard_request+0x6a>
		p += p[DESC_bLength];
    1e6a:	440c      	add	r4, r1
    1e6c:	e0ac      	b.n	1fc8 <usb_handle_standard_request+0x2f4>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    1e6e:	280b      	cmp	r0, #11
    1e70:	f47f af63 	bne.w	1d3a <usb_handle_standard_request+0x66>
	bool ret = false;
    1e74:	2200      	movs	r2, #0
	uint8_t cur_iface = 0xFF;
    1e76:	f04f 09ff 	mov.w	r9, #255	; 0xff
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    1e7a:	f8df a118 	ldr.w	sl, [pc, #280]	; 1f94 <usb_handle_standard_request+0x2c0>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
    1e7e:	f8df b118 	ldr.w	fp, [pc, #280]	; 1f98 <usb_handle_standard_request+0x2c4>
	uint8_t cur_alt_setting = 0xFF;
    1e82:	464f      	mov	r7, r9
	const uint8_t *if_desc = NULL;
    1e84:	4690      	mov	r8, r2
    1e86:	e006      	b.n	1e96 <usb_handle_standard_request+0x1c2>
		switch (p[DESC_bDescriptorType]) {
    1e88:	7863      	ldrb	r3, [r4, #1]
    1e8a:	2b04      	cmp	r3, #4
    1e8c:	d011      	beq.n	1eb2 <usb_handle_standard_request+0x1de>
    1e8e:	2b05      	cmp	r3, #5
    1e90:	d022      	beq.n	1ed8 <usb_handle_standard_request+0x204>
		p += p[DESC_bLength];
    1e92:	7823      	ldrb	r3, [r4, #0]
    1e94:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    1e96:	7823      	ldrb	r3, [r4, #0]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d1f5      	bne.n	1e88 <usb_handle_standard_request+0x1b4>
	if (usb_dev.status_callback) {
    1e9c:	69f3      	ldr	r3, [r6, #28]
    1e9e:	b123      	cbz	r3, 1eaa <usb_handle_standard_request+0x1d6>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    1ea0:	4641      	mov	r1, r8
    1ea2:	2007      	movs	r0, #7
    1ea4:	9201      	str	r2, [sp, #4]
    1ea6:	4798      	blx	r3
    1ea8:	9a01      	ldr	r2, [sp, #4]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    1eaa:	2a00      	cmp	r2, #0
    1eac:	f47f af3e 	bne.w	1d2c <usb_handle_standard_request+0x58>
    1eb0:	e743      	b.n	1d3a <usb_handle_standard_request+0x66>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    1eb2:	f894 9002 	ldrb.w	r9, [r4, #2]
			if (cur_iface == setup->wIndex &&
    1eb6:	88a9      	ldrh	r1, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    1eb8:	78e7      	ldrb	r7, [r4, #3]
			if (cur_iface == setup->wIndex &&
    1eba:	4589      	cmp	r9, r1
    1ebc:	464b      	mov	r3, r9
    1ebe:	d1e8      	bne.n	1e92 <usb_handle_standard_request+0x1be>
			    cur_alt_setting == setup->wValue) {
    1ec0:	8868      	ldrh	r0, [r5, #2]
			if (cur_iface == setup->wIndex &&
    1ec2:	4287      	cmp	r7, r0
    1ec4:	b2b9      	uxth	r1, r7
    1ec6:	d1e4      	bne.n	1e92 <usb_handle_standard_request+0x1be>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1ec8:	2b07      	cmp	r3, #7
    1eca:	d82a      	bhi.n	1f22 <usb_handle_standard_request+0x24e>
		usb_dev.alt_setting[iface] = alt_setting;
    1ecc:	4433      	add	r3, r6
		return true;
    1ece:	46a0      	mov	r8, r4
				ret = usb_set_alt_setting(setup->wIndex,
    1ed0:	f883 10bb 	strb.w	r1, [r3, #187]	; 0xbb
	return true;
    1ed4:	2201      	movs	r2, #1
    1ed6:	e7dc      	b.n	1e92 <usb_handle_standard_request+0x1be>
			if (cur_iface == setup->wIndex) {
    1ed8:	88ab      	ldrh	r3, [r5, #4]
    1eda:	454b      	cmp	r3, r9
    1edc:	d1d9      	bne.n	1e92 <usb_handle_standard_request+0x1be>
	if (cur_alt_setting != alt_setting) {
    1ede:	78ab      	ldrb	r3, [r5, #2]
    1ee0:	42bb      	cmp	r3, r7
    1ee2:	d019      	beq.n	1f18 <usb_handle_standard_request+0x244>
		ret = reset_endpoint(ep_desc);
    1ee4:	78a2      	ldrb	r2, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    1ee6:	9201      	str	r2, [sp, #4]
    1ee8:	4610      	mov	r0, r2
    1eea:	f000 fcbd 	bl	2868 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    1eee:	9a01      	ldr	r2, [sp, #4]
    1ef0:	4610      	mov	r0, r2
    1ef2:	f002 ff25 	bl	4d40 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    1ef6:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1efa:	9a01      	ldr	r2, [sp, #4]
    1efc:	d104      	bne.n	1f08 <usb_handle_standard_request+0x234>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
    1efe:	2157      	movs	r1, #87	; 0x57
    1f00:	4658      	mov	r0, fp
    1f02:	f009 fe6a 	bl	bbda <z_log_minimal_printk>
    1f06:	e7e5      	b.n	1ed4 <usb_handle_standard_request+0x200>
	} else if (ret) {
    1f08:	2800      	cmp	r0, #0
    1f0a:	d0e3      	beq.n	1ed4 <usb_handle_standard_request+0x200>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    1f0c:	2145      	movs	r1, #69	; 0x45
    1f0e:	4650      	mov	r0, sl
    1f10:	f009 fe63 	bl	bbda <z_log_minimal_printk>
	return false;
    1f14:	2200      	movs	r2, #0
    1f16:	e7bc      	b.n	1e92 <usb_handle_standard_request+0x1be>
		ret = set_endpoint(ep_desc);
    1f18:	4620      	mov	r0, r4
    1f1a:	f7ff fdeb 	bl	1af4 <set_endpoint>
    1f1e:	4602      	mov	r2, r0
    1f20:	e7b7      	b.n	1e92 <usb_handle_standard_request+0x1be>
    1f22:	46a0      	mov	r8, r4
    1f24:	e7f6      	b.n	1f14 <usb_handle_standard_request+0x240>
	if (usb_reqtype_is_to_host(setup)) {
    1f26:	060a      	lsls	r2, r1, #24
    1f28:	786b      	ldrb	r3, [r5, #1]
    1f2a:	d519      	bpl.n	1f60 <usb_handle_standard_request+0x28c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	f47f af04 	bne.w	1d3a <usb_handle_standard_request+0x66>
	uint8_t ep = setup->wIndex;
    1f32:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    1f34:	0663      	lsls	r3, r4, #25
    1f36:	d00a      	beq.n	1f4e <usb_handle_standard_request+0x27a>
    1f38:	4620      	mov	r0, r4
    1f3a:	f7ff fe2b 	bl	1b94 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    1f3e:	2800      	cmp	r0, #0
    1f40:	f43f aefb 	beq.w	1d3a <usb_handle_standard_request+0x66>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1f44:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    1f48:	2b00      	cmp	r3, #0
    1f4a:	f43f aef6 	beq.w	1d3a <usb_handle_standard_request+0x66>
			return usb_get_status_endpoint(setup, len, data_buf);
    1f4e:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    1f52:	4620      	mov	r0, r4
    1f54:	4629      	mov	r1, r5
    1f56:	f002 fead 	bl	4cb4 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    1f5a:	2000      	movs	r0, #0
    1f5c:	7068      	strb	r0, [r5, #1]
    1f5e:	e6e0      	b.n	1d22 <usb_handle_standard_request+0x4e>
		switch (setup->bRequest) {
    1f60:	2b01      	cmp	r3, #1
    1f62:	d008      	beq.n	1f76 <usb_handle_standard_request+0x2a2>
    1f64:	2b03      	cmp	r3, #3
    1f66:	f47f aee8 	bne.w	1d3a <usb_handle_standard_request+0x66>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    1f6a:	886b      	ldrh	r3, [r5, #2]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	f47f aee4 	bne.w	1d3a <usb_handle_standard_request+0x66>
				return usb_halt_endpoint_req(setup, true);
    1f72:	2101      	movs	r1, #1
    1f74:	e003      	b.n	1f7e <usb_handle_standard_request+0x2aa>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    1f76:	8869      	ldrh	r1, [r5, #2]
    1f78:	2900      	cmp	r1, #0
    1f7a:	f47f aede 	bne.w	1d3a <usb_handle_standard_request+0x66>
				return usb_halt_endpoint_req(setup, true);
    1f7e:	88a8      	ldrh	r0, [r5, #4]
    1f80:	f7ff fe24 	bl	1bcc <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    1f84:	2800      	cmp	r0, #0
    1f86:	f47f aed1 	bne.w	1d2c <usb_handle_standard_request+0x58>
    1f8a:	e6d6      	b.n	1d3a <usb_handle_standard_request+0x66>
    1f8c:	2000184c 	.word	0x2000184c
    1f90:	20001906 	.word	0x20001906
    1f94:	0000e2f0 	.word	0x0000e2f0
    1f98:	0000e2ca 	.word	0x0000e2ca
		if (type == USB_DESC_CONFIGURATION) {
    1f9c:	2a02      	cmp	r2, #2
		*data = p;
    1f9e:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    1fa2:	f47f aedf 	bne.w	1d64 <usb_handle_standard_request+0x90>
			*len = (p[CONF_DESC_wTotalLength]) |
    1fa6:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    1fa8:	603b      	str	r3, [r7, #0]
    1faa:	e6bf      	b.n	1d2c <usb_handle_standard_request+0x58>
    1fac:	f995 3000 	ldrsb.w	r3, [r5]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    1fb0:	f8d8 2000 	ldr.w	r2, [r8]
    1fb4:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	f6bf af59 	bge.w	1e6e <usb_handle_standard_request+0x19a>
		switch (setup->bRequest) {
    1fbc:	2800      	cmp	r0, #0
    1fbe:	f43f af50 	beq.w	1e62 <usb_handle_standard_request+0x18e>
    1fc2:	280a      	cmp	r0, #10
    1fc4:	f47f aeb9 	bne.w	1d3a <usb_handle_standard_request+0x66>
	while (p[DESC_bLength] != 0U) {
    1fc8:	7821      	ldrb	r1, [r4, #0]
    1fca:	2900      	cmp	r1, #0
    1fcc:	f43f aeb5 	beq.w	1d3a <usb_handle_standard_request+0x66>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    1fd0:	7863      	ldrb	r3, [r4, #1]
    1fd2:	2b04      	cmp	r3, #4
    1fd4:	f47f af49 	bne.w	1e6a <usb_handle_standard_request+0x196>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    1fd8:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    1fda:	459c      	cmp	ip, r3
    1fdc:	f47f af45 	bne.w	1e6a <usb_handle_standard_request+0x196>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1fe0:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    1fe2:	bf96      	itet	ls
    1fe4:	18f6      	addls	r6, r6, r3
	return 0;
    1fe6:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    1fe8:	f896 30bb 	ldrbls.w	r3, [r6, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    1fec:	7013      	strb	r3, [r2, #0]
				*len = 1;
    1fee:	2301      	movs	r3, #1
    1ff0:	e7da      	b.n	1fa8 <usb_handle_standard_request+0x2d4>
    1ff2:	bf00      	nop

00001ff4 <usb_disable>:
{
    1ff4:	b510      	push	{r4, lr}
	if (usb_dev.enabled != true) {
    1ff6:	4c06      	ldr	r4, [pc, #24]	; (2010 <usb_disable+0x1c>)
    1ff8:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    1ffc:	b130      	cbz	r0, 200c <usb_disable+0x18>
	ret = usb_dc_detach();
    1ffe:	f002 fd63 	bl	4ac8 <usb_dc_detach>
	if (ret < 0) {
    2002:	2800      	cmp	r0, #0
	usb_dev.enabled = false;
    2004:	bfa4      	itt	ge
    2006:	2000      	movge	r0, #0
    2008:	f884 00b8 	strbge.w	r0, [r4, #184]	; 0xb8
}
    200c:	bd10      	pop	{r4, pc}
    200e:	bf00      	nop
    2010:	2000184c 	.word	0x2000184c

00002014 <usb_write>:
{
    2014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    2018:	f8df a038 	ldr.w	sl, [pc, #56]	; 2054 <usb_write+0x40>
{
    201c:	4605      	mov	r5, r0
    201e:	460f      	mov	r7, r1
    2020:	4690      	mov	r8, r2
    2022:	4699      	mov	r9, r3
    2024:	2604      	movs	r6, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    2026:	464b      	mov	r3, r9
    2028:	4642      	mov	r2, r8
    202a:	4639      	mov	r1, r7
    202c:	4628      	mov	r0, r5
    202e:	f002 fead 	bl	4d8c <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    2032:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    2036:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    2038:	d108      	bne.n	204c <usb_write+0x38>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    203a:	462a      	mov	r2, r5
    203c:	2157      	movs	r1, #87	; 0x57
    203e:	4650      	mov	r0, sl
    2040:	f009 fdcb 	bl	bbda <z_log_minimal_printk>
		arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
    2044:	f006 fe82 	bl	8d4c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    2048:	3e01      	subs	r6, #1
    204a:	d1ec      	bne.n	2026 <usb_write+0x12>
}
    204c:	4620      	mov	r0, r4
    204e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2052:	bf00      	nop
    2054:	0000e317 	.word	0x0000e317

00002058 <usb_data_to_host>:
{
    2058:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    205a:	4c12      	ldr	r4, [pc, #72]	; (20a4 <usb_data_to_host+0x4c>)
    205c:	7d23      	ldrb	r3, [r4, #20]
    205e:	b9c3      	cbnz	r3, 2092 <usb_data_to_host+0x3a>
		uint32_t chunk = usb_dev.data_buf_residue;
    2060:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2062:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2064:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2066:	ab01      	add	r3, sp, #4
    2068:	2080      	movs	r0, #128	; 0x80
    206a:	f7ff ffd3 	bl	2014 <usb_write>
		usb_dev.data_buf += chunk;
    206e:	9901      	ldr	r1, [sp, #4]
    2070:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2072:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    2074:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    2076:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    2078:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    207a:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
    207c:	b93b      	cbnz	r3, 208e <usb_data_to_host+0x36>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    207e:	6923      	ldr	r3, [r4, #16]
    2080:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue &&
    2082:	429a      	cmp	r2, r3
    2084:	dd03      	ble.n	208e <usb_data_to_host+0x36>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    2086:	069b      	lsls	r3, r3, #26
    2088:	d101      	bne.n	208e <usb_data_to_host+0x36>
				usb_dev.zlp_flag = true;
    208a:	2301      	movs	r3, #1
    208c:	7523      	strb	r3, [r4, #20]
}
    208e:	b002      	add	sp, #8
    2090:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    2092:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2094:	461a      	mov	r2, r3
    2096:	4619      	mov	r1, r3
    2098:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    209a:	7523      	strb	r3, [r4, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    209c:	f002 fe76 	bl	4d8c <usb_dc_ep_write>
}
    20a0:	e7f5      	b.n	208e <usb_data_to_host+0x36>
    20a2:	bf00      	nop
    20a4:	2000184c 	.word	0x2000184c

000020a8 <usb_handle_control_transfer>:
{
    20a8:	b530      	push	{r4, r5, lr}
    20aa:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    20ac:	2300      	movs	r3, #0
{
    20ae:	460c      	mov	r4, r1
	uint32_t chunk = 0U;
    20b0:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    20b2:	4605      	mov	r5, r0
    20b4:	2800      	cmp	r0, #0
    20b6:	d17a      	bne.n	21ae <usb_handle_control_transfer+0x106>
    20b8:	2900      	cmp	r1, #0
    20ba:	d146      	bne.n	214a <usb_handle_control_transfer+0xa2>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    20bc:	2208      	movs	r2, #8
    20be:	460b      	mov	r3, r1
    20c0:	eb0d 0102 	add.w	r1, sp, r2
    20c4:	f009 ffd7 	bl	c076 <usb_dc_ep_read>
    20c8:	2800      	cmp	r0, #0
    20ca:	da04      	bge.n	20d6 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    20cc:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    20ce:	f002 fda3 	bl	4c18 <usb_dc_ep_set_stall>
}
    20d2:	b005      	add	sp, #20
    20d4:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    20d6:	4a3b      	ldr	r2, [pc, #236]	; (21c4 <usb_handle_control_transfer+0x11c>)
    20d8:	9902      	ldr	r1, [sp, #8]
    20da:	6011      	str	r1, [r2, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    20dc:	9903      	ldr	r1, [sp, #12]
    20de:	6051      	str	r1, [r2, #4]
		usb_dev.data_buf = usb_dev.req_data;
    20e0:	f102 0138 	add.w	r1, r2, #56	; 0x38
    20e4:	6091      	str	r1, [r2, #8]
		if (usb_reqtype_is_to_device(setup)) {
    20e6:	f99d 1008 	ldrsb.w	r1, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    20ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    20ee:	7514      	strb	r4, [r2, #20]
		if (usb_reqtype_is_to_device(setup)) {
    20f0:	2900      	cmp	r1, #0
		usb_dev.data_buf_residue = 0;
    20f2:	e9c2 4403 	strd	r4, r4, [r2, #12]
 * @param setup Pointer to USB Setup packet
 * @return true If transfer direction is to device
 */
static inline bool usb_reqtype_is_to_device(struct usb_setup_packet *setup)
{
	return setup->RequestType.direction == USB_REQTYPE_DIR_TO_DEVICE;
    20f6:	4615      	mov	r5, r2
		if (usb_reqtype_is_to_device(setup)) {
    20f8:	db0e      	blt.n	2118 <usb_handle_control_transfer+0x70>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    20fa:	2b80      	cmp	r3, #128	; 0x80
    20fc:	d908      	bls.n	2110 <usb_handle_control_transfer+0x68>
				LOG_ERR("Request buffer too small");
    20fe:	4832      	ldr	r0, [pc, #200]	; (21c8 <usb_handle_control_transfer+0x120>)
    2100:	2145      	movs	r1, #69	; 0x45
    2102:	f009 fd6a 	bl	bbda <z_log_minimal_printk>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2106:	2080      	movs	r0, #128	; 0x80
    2108:	f002 fd86 	bl	4c18 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    210c:	4620      	mov	r0, r4
    210e:	e7de      	b.n	20ce <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    2110:	b113      	cbz	r3, 2118 <usb_handle_control_transfer+0x70>
				usb_dev.data_buf_residue = setup->wLength;
    2112:	e9c2 3303 	strd	r3, r3, [r2, #12]
				return;
    2116:	e7dc      	b.n	20d2 <usb_handle_control_transfer+0x2a>
	uint32_t type = setup->RequestType.type;
    2118:	782b      	ldrb	r3, [r5, #0]
    211a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    211e:	330a      	adds	r3, #10
    2120:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
	if (handler == NULL) {
    2124:	2b00      	cmp	r3, #0
    2126:	d0d1      	beq.n	20cc <usb_handle_control_transfer+0x24>
	if ((*handler)(setup, len, data) < 0) {
    2128:	4a28      	ldr	r2, [pc, #160]	; (21cc <usb_handle_control_transfer+0x124>)
    212a:	f102 0108 	add.w	r1, r2, #8
    212e:	f1a2 0008 	sub.w	r0, r2, #8
    2132:	4798      	blx	r3
    2134:	2800      	cmp	r0, #0
    2136:	dbc9      	blt.n	20cc <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    2138:	88ea      	ldrh	r2, [r5, #6]
    213a:	692b      	ldr	r3, [r5, #16]
    213c:	429a      	cmp	r2, r3
    213e:	bfd4      	ite	le
    2140:	60ea      	strle	r2, [r5, #12]
    2142:	60eb      	strgt	r3, [r5, #12]
			usb_data_to_host();
    2144:	f7ff ff88 	bl	2058 <usb_data_to_host>
    2148:	e7c3      	b.n	20d2 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    214a:	4c1e      	ldr	r4, [pc, #120]	; (21c4 <usb_handle_control_transfer+0x11c>)
    214c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    2150:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2152:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    2154:	dc05      	bgt.n	2162 <usb_handle_control_transfer+0xba>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2156:	4602      	mov	r2, r0
    2158:	f009 ff8d 	bl	c076 <usb_dc_ep_read>
    215c:	2800      	cmp	r0, #0
    215e:	dab8      	bge.n	20d2 <usb_handle_control_transfer+0x2a>
    2160:	e7b4      	b.n	20cc <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2162:	f009 ff88 	bl	c076 <usb_dc_ep_read>
    2166:	2800      	cmp	r0, #0
    2168:	da04      	bge.n	2174 <usb_handle_control_transfer+0xcc>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    216a:	2080      	movs	r0, #128	; 0x80
    216c:	f002 fd54 	bl	4c18 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2170:	4628      	mov	r0, r5
    2172:	e7ac      	b.n	20ce <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    2174:	9901      	ldr	r1, [sp, #4]
    2176:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2178:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    217a:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    217c:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    217e:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2180:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    2182:	2b00      	cmp	r3, #0
    2184:	d1a5      	bne.n	20d2 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    2186:	f104 0338 	add.w	r3, r4, #56	; 0x38
    218a:	60a3      	str	r3, [r4, #8]
	uint32_t type = setup->RequestType.type;
    218c:	7823      	ldrb	r3, [r4, #0]
    218e:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    2192:	330a      	adds	r3, #10
    2194:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
    2198:	2b00      	cmp	r3, #0
    219a:	d097      	beq.n	20cc <usb_handle_control_transfer+0x24>
	if ((*handler)(setup, len, data) < 0) {
    219c:	f104 0208 	add.w	r2, r4, #8
    21a0:	f104 0110 	add.w	r1, r4, #16
    21a4:	4620      	mov	r0, r4
    21a6:	4798      	blx	r3
    21a8:	2800      	cmp	r0, #0
    21aa:	dacb      	bge.n	2144 <usb_handle_control_transfer+0x9c>
    21ac:	e78e      	b.n	20cc <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    21ae:	2880      	cmp	r0, #128	; 0x80
    21b0:	d18f      	bne.n	20d2 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    21b2:	4b04      	ldr	r3, [pc, #16]	; (21c4 <usb_handle_control_transfer+0x11c>)
    21b4:	68da      	ldr	r2, [r3, #12]
    21b6:	2a00      	cmp	r2, #0
    21b8:	d1c4      	bne.n	2144 <usb_handle_control_transfer+0x9c>
    21ba:	7d1b      	ldrb	r3, [r3, #20]
    21bc:	2b00      	cmp	r3, #0
    21be:	d1c1      	bne.n	2144 <usb_handle_control_transfer+0x9c>
    21c0:	e787      	b.n	20d2 <usb_handle_control_transfer+0x2a>
    21c2:	bf00      	nop
    21c4:	2000184c 	.word	0x2000184c
    21c8:	0000e343 	.word	0x0000e343
    21cc:	20001854 	.word	0x20001854

000021d0 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    21d0:	4b05      	ldr	r3, [pc, #20]	; (21e8 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    21d2:	4a06      	ldr	r2, [pc, #24]	; (21ec <usb_set_config+0x1c>)
    21d4:	629a      	str	r2, [r3, #40]	; 0x28
    21d6:	4a06      	ldr	r2, [pc, #24]	; (21f0 <usb_set_config+0x20>)
    21d8:	62da      	str	r2, [r3, #44]	; 0x2c
    21da:	4a06      	ldr	r2, [pc, #24]	; (21f4 <usb_set_config+0x24>)
    21dc:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    21de:	4a06      	ldr	r2, [pc, #24]	; (21f8 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    21e0:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    21e2:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    21e4:	2000      	movs	r0, #0
    21e6:	4770      	bx	lr
    21e8:	2000184c 	.word	0x2000184c
    21ec:	00001cd5 	.word	0x00001cd5
    21f0:	00001a21 	.word	0x00001a21
    21f4:	00001abd 	.word	0x00001abd
    21f8:	00001a61 	.word	0x00001a61

000021fc <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    21fc:	4b09      	ldr	r3, [pc, #36]	; (2224 <usb_device_init+0x28>)
{
    21fe:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    2200:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    2204:	b95c      	cbnz	r4, 221e <usb_device_init+0x22>
		return 0;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    2206:	f000 f9c1 	bl	258c <usb_get_device_descriptor>
	if (!device_descriptor) {
    220a:	b930      	cbnz	r0, 221a <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
    220c:	4806      	ldr	r0, [pc, #24]	; (2228 <usb_device_init+0x2c>)
    220e:	2145      	movs	r1, #69	; 0x45
    2210:	f009 fce3 	bl	bbda <z_log_minimal_printk>
    2214:	f04f 30ff 	mov.w	r0, #4294967295
	}

	usb_set_config(device_descriptor);

	return 0;
}
    2218:	bd10      	pop	{r4, pc}
	usb_set_config(device_descriptor);
    221a:	f7ff ffd9 	bl	21d0 <usb_set_config>
		return 0;
    221e:	2000      	movs	r0, #0
    2220:	e7fa      	b.n	2218 <usb_device_init+0x1c>
    2222:	bf00      	nop
    2224:	2000184c 	.word	0x2000184c
    2228:	0000e361 	.word	0x0000e361

0000222c <usb_enable>:
{
    222c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2230:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    2232:	4d34      	ldr	r5, [pc, #208]	; (2304 <usb_enable+0xd8>)
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    2234:	4834      	ldr	r0, [pc, #208]	; (2308 <usb_enable+0xdc>)
    2236:	f04f 32ff 	mov.w	r2, #4294967295
    223a:	f04f 33ff 	mov.w	r3, #4294967295
    223e:	f006 f8bb 	bl	83b8 <z_impl_k_mutex_lock>
    2242:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    2246:	2e00      	cmp	r6, #0
    2248:	d13e      	bne.n	22c8 <usb_enable+0x9c>
	usb_dev.status_callback = cb;
    224a:	4830      	ldr	r0, [pc, #192]	; (230c <usb_enable+0xe0>)
	usb_dev.user_status_callback = status_cb;
    224c:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    224e:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    2250:	f002 fed2 	bl	4ff8 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    2254:	f002 fbfa 	bl	4a4c <usb_dc_attach>
	if (ret < 0) {
    2258:	1e04      	subs	r4, r0, #0
    225a:	db36      	blt.n	22ca <usb_enable+0x9e>
	ret = usb_transfer_init();
    225c:	f000 fb4a 	bl	28f4 <usb_transfer_init>
	if (ret < 0) {
    2260:	1e04      	subs	r4, r0, #0
    2262:	db32      	blt.n	22ca <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2264:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    2266:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2268:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    226c:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    2270:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2274:	f002 fca8 	bl	4bc8 <usb_dc_ep_configure>
	if (ret < 0) {
    2278:	1e04      	subs	r4, r0, #0
    227a:	db26      	blt.n	22ca <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    227c:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    227e:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2280:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2284:	f002 fca0 	bl	4bc8 <usb_dc_ep_configure>
	if (ret < 0) {
    2288:	1e04      	subs	r4, r0, #0
    228a:	db1e      	blt.n	22ca <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    228c:	4920      	ldr	r1, [pc, #128]	; (2310 <usb_enable+0xe4>)
    228e:	4630      	mov	r0, r6
    2290:	f002 fe9e 	bl	4fd0 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2294:	1e04      	subs	r4, r0, #0
    2296:	db18      	blt.n	22ca <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2298:	491d      	ldr	r1, [pc, #116]	; (2310 <usb_enable+0xe4>)
    229a:	4638      	mov	r0, r7
    229c:	f002 fe98 	bl	4fd0 <usb_dc_ep_set_callback>
	if (ret < 0) {
    22a0:	1e04      	subs	r4, r0, #0
    22a2:	db12      	blt.n	22ca <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22a4:	4c1b      	ldr	r4, [pc, #108]	; (2314 <usb_enable+0xe8>)
    22a6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2318 <usb_enable+0xec>
    22aa:	4544      	cmp	r4, r8
    22ac:	d314      	bcc.n	22d8 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    22ae:	2000      	movs	r0, #0
    22b0:	f002 fd1c 	bl	4cec <usb_dc_ep_enable>
	if (ret < 0) {
    22b4:	1e04      	subs	r4, r0, #0
    22b6:	db08      	blt.n	22ca <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    22b8:	2080      	movs	r0, #128	; 0x80
    22ba:	f002 fd17 	bl	4cec <usb_dc_ep_enable>
	if (ret < 0) {
    22be:	1e04      	subs	r4, r0, #0
    22c0:	db03      	blt.n	22ca <usb_enable+0x9e>
	usb_dev.enabled = true;
    22c2:	2301      	movs	r3, #1
    22c4:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		ret = 0;
    22c8:	2400      	movs	r4, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    22ca:	480f      	ldr	r0, [pc, #60]	; (2308 <usb_enable+0xdc>)
    22cc:	f006 f8f2 	bl	84b4 <z_impl_k_mutex_unlock>
}
    22d0:	4620      	mov	r0, r4
    22d2:	b002      	add	sp, #8
    22d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    22d8:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    22da:	2600      	movs	r6, #0
    22dc:	7f22      	ldrb	r2, [r4, #28]
    22de:	b2f3      	uxtb	r3, r6
    22e0:	429a      	cmp	r2, r3
    22e2:	d801      	bhi.n	22e8 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22e4:	3424      	adds	r4, #36	; 0x24
    22e6:	e7e0      	b.n	22aa <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    22e8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    22ec:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    22f0:	7910      	ldrb	r0, [r2, #4]
    22f2:	f002 fe6d 	bl	4fd0 <usb_dc_ep_set_callback>
    22f6:	3601      	adds	r6, #1
    22f8:	2800      	cmp	r0, #0
    22fa:	d0ef      	beq.n	22dc <usb_enable+0xb0>
    22fc:	f04f 34ff 	mov.w	r4, #4294967295
    2300:	e7e3      	b.n	22ca <usb_enable+0x9e>
    2302:	bf00      	nop
    2304:	2000184c 	.word	0x2000184c
    2308:	2000051c 	.word	0x2000051c
    230c:	00001c41 	.word	0x00001c41
    2310:	000020a9 	.word	0x000020a9
    2314:	200006c8 	.word	0x200006c8
    2318:	20000734 	.word	0x20000734

0000231c <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    231c:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    231e:	4b1f      	ldr	r3, [pc, #124]	; (239c <usb_update_sn_string_descriptor+0x80>)
{
    2320:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2322:	aa05      	add	r2, sp, #20
    2324:	f103 0510 	add.w	r5, r3, #16
    2328:	6818      	ldr	r0, [r3, #0]
    232a:	6859      	ldr	r1, [r3, #4]
    232c:	4614      	mov	r4, r2
    232e:	c403      	stmia	r4!, {r0, r1}
    2330:	3308      	adds	r3, #8
    2332:	42ab      	cmp	r3, r5
    2334:	4622      	mov	r2, r4
    2336:	d1f7      	bne.n	2328 <usb_update_sn_string_descriptor+0xc>
    2338:	781b      	ldrb	r3, [r3, #0]
    233a:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    233c:	2210      	movs	r2, #16
    233e:	2100      	movs	r1, #0
    2340:	a801      	add	r0, sp, #4
    2342:	f009 fe6f 	bl	c024 <memset>
	memset(sn, 0, sizeof(sn));
    2346:	2212      	movs	r2, #18
    2348:	2100      	movs	r1, #0
    234a:	4815      	ldr	r0, [pc, #84]	; (23a0 <usb_update_sn_string_descriptor+0x84>)
    234c:	f009 fe6a 	bl	c024 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2350:	2110      	movs	r1, #16
    2352:	a801      	add	r0, sp, #4
    2354:	f009 ff84 	bl	c260 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2358:	2800      	cmp	r0, #0
    235a:	dd1b      	ble.n	2394 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    235c:	3808      	subs	r0, #8
    235e:	ab01      	add	r3, sp, #4
    2360:	2800      	cmp	r0, #0
    2362:	bfa8      	it	ge
    2364:	181b      	addge	r3, r3, r0
    2366:	4a0e      	ldr	r2, [pc, #56]	; (23a0 <usb_update_sn_string_descriptor+0x84>)
    2368:	4618      	mov	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    236a:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    236c:	f810 3b01 	ldrb.w	r3, [r0], #1
    2370:	ac0a      	add	r4, sp, #40	; 0x28
    2372:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2376:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    237a:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    237e:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2380:	ac0a      	add	r4, sp, #40	; 0x28
    2382:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    2384:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2386:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    238a:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    238c:	2908      	cmp	r1, #8
    238e:	f102 0202 	add.w	r2, r2, #2
    2392:	d1eb      	bne.n	236c <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2394:	4802      	ldr	r0, [pc, #8]	; (23a0 <usb_update_sn_string_descriptor+0x84>)
    2396:	b00b      	add	sp, #44	; 0x2c
    2398:	bd30      	pop	{r4, r5, pc}
    239a:	bf00      	nop
    239c:	0000e396 	.word	0x0000e396
    23a0:	20002db1 	.word	0x20002db1

000023a4 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    23a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    23a8:	2600      	movs	r6, #0
{
    23aa:	b085      	sub	sp, #20
    23ac:	4604      	mov	r4, r0
	uint32_t requested_ep = BIT(16) | BIT(0);
    23ae:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    23b2:	46b0      	mov	r8, r6
	struct usb_cfg_data *cfg_data = NULL;
    23b4:	4637      	mov	r7, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    23b6:	46b1      	mov	r9, r6

	while (head->bLength != 0U) {
    23b8:	7823      	ldrb	r3, [r4, #0]
    23ba:	b93b      	cbnz	r3, 23cc <usb_fix_descriptor+0x28>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    23bc:	4a6a      	ldr	r2, [pc, #424]	; (2568 <usb_fix_descriptor+0x1c4>)
    23be:	1ca0      	adds	r0, r4, #2
    23c0:	4290      	cmp	r0, r2
    23c2:	f000 80c6 	beq.w	2552 <usb_fix_descriptor+0x1ae>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
    23c6:	f7ff ffed 	bl	23a4 <usb_fix_descriptor>
    23ca:	e02d      	b.n	2428 <usb_fix_descriptor+0x84>
		switch (head->bDescriptorType) {
    23cc:	7863      	ldrb	r3, [r4, #1]
    23ce:	2b05      	cmp	r3, #5
    23d0:	d805      	bhi.n	23de <usb_fix_descriptor+0x3a>
    23d2:	e8df f003 	tbb	[pc, r3]
    23d6:	047e      	.short	0x047e
    23d8:	21077e03 	.word	0x21077e03
    23dc:	46a1      	mov	r9, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    23de:	7823      	ldrb	r3, [r4, #0]
    23e0:	441c      	add	r4, r3
    23e2:	e7e9      	b.n	23b8 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    23e4:	78e3      	ldrb	r3, [r4, #3]
    23e6:	2b00      	cmp	r3, #0
    23e8:	d1f9      	bne.n	23de <usb_fix_descriptor+0x3a>
			if (if_descr->bInterfaceNumber == 0U) {
    23ea:	78a3      	ldrb	r3, [r4, #2]
    23ec:	b18b      	cbz	r3, 2412 <usb_fix_descriptor+0x6e>
			numof_ifaces++;
    23ee:	f108 0801 	add.w	r8, r8, #1
    23f2:	fa5f f888 	uxtb.w	r8, r8
			break;
    23f6:	e7f2      	b.n	23de <usb_fix_descriptor+0x3a>
		if (cfg_data->interface_descriptor == iface) {
    23f8:	687a      	ldr	r2, [r7, #4]
    23fa:	4294      	cmp	r4, r2
    23fc:	f000 80ab 	beq.w	2556 <usb_fix_descriptor+0x1b2>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2400:	3724      	adds	r7, #36	; 0x24
    2402:	429f      	cmp	r7, r3
    2404:	d3f8      	bcc.n	23f8 <usb_fix_descriptor+0x54>
					LOG_ERR("There is no usb_cfg_data "
    2406:	4859      	ldr	r0, [pc, #356]	; (256c <usb_fix_descriptor+0x1c8>)
    2408:	4622      	mov	r2, r4
    240a:	2145      	movs	r1, #69	; 0x45
    240c:	f009 fbe5 	bl	bbda <z_log_minimal_printk>
					return -1;
    2410:	e008      	b.n	2424 <usb_fix_descriptor+0x80>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2412:	4f57      	ldr	r7, [pc, #348]	; (2570 <usb_fix_descriptor+0x1cc>)
    2414:	4b57      	ldr	r3, [pc, #348]	; (2574 <usb_fix_descriptor+0x1d0>)
    2416:	e7f4      	b.n	2402 <usb_fix_descriptor+0x5e>
			if (!cfg_data) {
    2418:	2f00      	cmp	r7, #0
    241a:	d156      	bne.n	24ca <usb_fix_descriptor+0x126>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    241c:	4856      	ldr	r0, [pc, #344]	; (2578 <usb_fix_descriptor+0x1d4>)
    241e:	2145      	movs	r1, #69	; 0x45
				LOG_ERR("Failed to validate endpoints");
    2420:	f009 fbdb 	bl	bbda <z_log_minimal_printk>
				return -1;
    2424:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return 0;
}
    2428:	b005      	add	sp, #20
    242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    242e:	6a3b      	ldr	r3, [r7, #32]
    2430:	78a0      	ldrb	r0, [r4, #2]
    2432:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    2436:	791a      	ldrb	r2, [r3, #4]
    2438:	4290      	cmp	r0, r2
    243a:	d007      	beq.n	244c <usb_fix_descriptor+0xa8>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    243c:	f10b 0b01 	add.w	fp, fp, #1
    2440:	7f3b      	ldrb	r3, [r7, #28]
    2442:	459b      	cmp	fp, r3
    2444:	d3f3      	bcc.n	242e <usb_fix_descriptor+0x8a>
				LOG_ERR("Failed to validate endpoints");
    2446:	484d      	ldr	r0, [pc, #308]	; (257c <usb_fix_descriptor+0x1d8>)
    2448:	2145      	movs	r1, #69	; 0x45
    244a:	e7e9      	b.n	2420 <usb_fix_descriptor+0x7c>
    244c:	2501      	movs	r5, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    244e:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2450:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2454:	f000 0003 	and.w	r0, r0, #3
    2458:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    245c:	7920      	ldrb	r0, [r4, #4]
    245e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    2462:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2466:	f994 0002 	ldrsb.w	r0, [r4, #2]
    246a:	2800      	cmp	r0, #0
    246c:	b2ea      	uxtb	r2, r5
    246e:	da23      	bge.n	24b8 <usb_fix_descriptor+0x114>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    2470:	f105 0010 	add.w	r0, r5, #16
    2474:	fa01 f000 	lsl.w	r0, r1, r0
    2478:	ea10 0f0a 	tst.w	r0, sl
    247c:	d121      	bne.n	24c2 <usb_fix_descriptor+0x11e>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    247e:	f062 027f 	orn	r2, r2, #127	; 0x7f
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    2482:	a802      	add	r0, sp, #8
    2484:	9301      	str	r3, [sp, #4]
				ep_cfg.ep_addr = idx;
    2486:	f88d 2008 	strb.w	r2, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    248a:	f002 fb7b 	bl	4b84 <usb_dc_ep_check_cap>
    248e:	9b01      	ldr	r3, [sp, #4]
    2490:	2101      	movs	r1, #1
    2492:	b9b0      	cbnz	r0, 24c2 <usb_fix_descriptor+0x11e>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2494:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2498:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    249a:	f012 0f80 	tst.w	r2, #128	; 0x80
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    249e:	711a      	strb	r2, [r3, #4]
					*requested_ep |= (1U << (idx + 16U));
    24a0:	bf18      	it	ne
    24a2:	3510      	addne	r5, #16
    24a4:	460b      	mov	r3, r1
    24a6:	bf15      	itete	ne
    24a8:	40ab      	lslne	r3, r5
					*requested_ep |= (1U << idx);
    24aa:	fa03 f505 	lsleq.w	r5, r3, r5
					*requested_ep |= (1U << (idx + 16U));
    24ae:	ea4a 0a03 	orrne.w	sl, sl, r3
					*requested_ep |= (1U << idx);
    24b2:	ea4a 0a05 	orreq.w	sl, sl, r5
				return 0;
    24b6:	e792      	b.n	23de <usb_fix_descriptor+0x3a>
				if ((*requested_ep & (1U << (idx)))) {
    24b8:	fa01 f005 	lsl.w	r0, r1, r5
    24bc:	ea10 0f0a 	tst.w	r0, sl
    24c0:	d0df      	beq.n	2482 <usb_fix_descriptor+0xde>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    24c2:	3501      	adds	r5, #1
    24c4:	2d10      	cmp	r5, #16
    24c6:	d1c2      	bne.n	244e <usb_fix_descriptor+0xaa>
    24c8:	e7b8      	b.n	243c <usb_fix_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    24ca:	f04f 0b00 	mov.w	fp, #0
    24ce:	2101      	movs	r1, #1
    24d0:	e7b6      	b.n	2440 <usb_fix_descriptor+0x9c>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    24d2:	2e03      	cmp	r6, #3
    24d4:	d123      	bne.n	251e <usb_fix_descriptor+0x17a>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    24d6:	f7ff ff21 	bl	231c <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    24da:	4683      	mov	fp, r0
    24dc:	b160      	cbz	r0, 24f8 <usb_fix_descriptor+0x154>
	runtime_sn_len = strlen(runtime_sn);
    24de:	f009 fd73 	bl	bfc8 <strlen>
	if (!runtime_sn_len) {
    24e2:	4605      	mov	r5, r0
    24e4:	b140      	cbz	r0, 24f8 <usb_fix_descriptor+0x154>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    24e6:	4826      	ldr	r0, [pc, #152]	; (2580 <usb_fix_descriptor+0x1dc>)
    24e8:	f009 fd6e 	bl	bfc8 <strlen>
	if (runtime_sn_len != default_sn_len) {
    24ec:	4285      	cmp	r5, r0
    24ee:	d010      	beq.n	2512 <usb_fix_descriptor+0x16e>
		LOG_ERR("the new SN descriptor doesn't have the same "
    24f0:	4824      	ldr	r0, [pc, #144]	; (2584 <usb_fix_descriptor+0x1e0>)
    24f2:	2145      	movs	r1, #69	; 0x45
    24f4:	f009 fb71 	bl	bbda <z_log_minimal_printk>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    24f8:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    24fa:	f06f 0102 	mvn.w	r1, #2
    24fe:	18e2      	adds	r2, r4, r3
    2500:	1b09      	subs	r1, r1, r4
    2502:	eb04 0353 	add.w	r3, r4, r3, lsr #1
		buf[i] = 0U;
    2506:	2000      	movs	r0, #0
	for (int i = idx_max; i >= 0; i -= 2) {
    2508:	42d1      	cmn	r1, r2
    250a:	d510      	bpl.n	252e <usb_fix_descriptor+0x18a>
			str_descr_idx += 1U;
    250c:	3601      	adds	r6, #1
    250e:	b2f6      	uxtb	r6, r6
			break;
    2510:	e765      	b.n	23de <usb_fix_descriptor+0x3a>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2512:	462a      	mov	r2, r5
    2514:	4659      	mov	r1, fp
    2516:	1ca0      	adds	r0, r4, #2
    2518:	f009 fd79 	bl	c00e <memcpy>
    251c:	e7ec      	b.n	24f8 <usb_fix_descriptor+0x154>
			if (str_descr_idx) {
    251e:	2e00      	cmp	r6, #0
    2520:	d1ea      	bne.n	24f8 <usb_fix_descriptor+0x154>
				if (!cfg_descr) {
    2522:	f1b9 0f00 	cmp.w	r9, #0
    2526:	d109      	bne.n	253c <usb_fix_descriptor+0x198>
					LOG_ERR("Incomplete device descriptor");
    2528:	4817      	ldr	r0, [pc, #92]	; (2588 <usb_fix_descriptor+0x1e4>)
    252a:	2145      	movs	r1, #69	; 0x45
    252c:	e778      	b.n	2420 <usb_fix_descriptor+0x7c>
		buf[i] = 0U;
    252e:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    2532:	f813 5901 	ldrb.w	r5, [r3], #-1
    2536:	f802 5d02 	strb.w	r5, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    253a:	e7e5      	b.n	2508 <usb_fix_descriptor+0x164>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    253c:	eba4 0309 	sub.w	r3, r4, r9
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2540:	f889 3002 	strb.w	r3, [r9, #2]
	dst[1] = val >> 8;
    2544:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2548:	f889 3003 	strb.w	r3, [r9, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    254c:	f889 8004 	strb.w	r8, [r9, #4]
    2550:	e7dc      	b.n	250c <usb_fix_descriptor+0x168>
	return 0;
    2552:	4618      	mov	r0, r3
    2554:	e768      	b.n	2428 <usb_fix_descriptor+0x84>
				if (cfg_data->interface_config) {
    2556:	68bb      	ldr	r3, [r7, #8]
    2558:	2b00      	cmp	r3, #0
    255a:	f43f af48 	beq.w	23ee <usb_fix_descriptor+0x4a>
					cfg_data->interface_config(head,
    255e:	4641      	mov	r1, r8
    2560:	4620      	mov	r0, r4
    2562:	4798      	blx	r3
    2564:	e743      	b.n	23ee <usb_fix_descriptor+0x4a>
    2566:	bf00      	nop
    2568:	200006c5 	.word	0x200006c5
    256c:	0000e481 	.word	0x0000e481
    2570:	200006c8 	.word	0x200006c8
    2574:	20000734 	.word	0x20000734
    2578:	0000e3a7 	.word	0x0000e3a7
    257c:	0000e3ed 	.word	0x0000e3ed
    2580:	0000e396 	.word	0x0000e396
    2584:	0000e40f 	.word	0x0000e40f
    2588:	0000e45f 	.word	0x0000e45f

0000258c <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    258c:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    258e:	4806      	ldr	r0, [pc, #24]	; (25a8 <usb_get_device_descriptor+0x1c>)
    2590:	f7ff ff08 	bl	23a4 <usb_fix_descriptor>
    2594:	b128      	cbz	r0, 25a2 <usb_get_device_descriptor+0x16>
		LOG_ERR("Failed to fixup USB descriptor");
    2596:	4805      	ldr	r0, [pc, #20]	; (25ac <usb_get_device_descriptor+0x20>)
    2598:	2145      	movs	r1, #69	; 0x45
    259a:	f009 fb1e 	bl	bbda <z_log_minimal_printk>
		return NULL;
    259e:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    25a0:	bd08      	pop	{r3, pc}
	return (uint8_t *) __usb_descriptor_start;
    25a2:	4801      	ldr	r0, [pc, #4]	; (25a8 <usb_get_device_descriptor+0x1c>)
    25a4:	e7fc      	b.n	25a0 <usb_get_device_descriptor+0x14>
    25a6:	bf00      	nop
    25a8:	20000574 	.word	0x20000574
    25ac:	0000e4a6 	.word	0x0000e4a6

000025b0 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    25b0:	b510      	push	{r4, lr}
    25b2:	4a09      	ldr	r2, [pc, #36]	; (25d8 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    25b4:	2300      	movs	r3, #0
    25b6:	4611      	mov	r1, r2
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    25b8:	7814      	ldrb	r4, [r2, #0]
    25ba:	4284      	cmp	r4, r0
    25bc:	d105      	bne.n	25ca <usb_ep_get_transfer+0x1a>
    25be:	6854      	ldr	r4, [r2, #4]
    25c0:	b11c      	cbz	r4, 25ca <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    25c2:	2048      	movs	r0, #72	; 0x48
    25c4:	fb00 1003 	mla	r0, r0, r3, r1
		}
	}

	return NULL;
}
    25c8:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    25ca:	3301      	adds	r3, #1
    25cc:	2b04      	cmp	r3, #4
    25ce:	f102 0248 	add.w	r2, r2, #72	; 0x48
    25d2:	d1f1      	bne.n	25b8 <usb_ep_get_transfer+0x8>
	return NULL;
    25d4:	2000      	movs	r0, #0
    25d6:	e7f7      	b.n	25c8 <usb_ep_get_transfer+0x18>
    25d8:	20001910 	.word	0x20001910

000025dc <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    25dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    25e0:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    25e4:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    25e8:	3310      	adds	r3, #16
{
    25ea:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    25ec:	d110      	bne.n	2610 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    25ee:	6903      	ldr	r3, [r0, #16]
    25f0:	f850 2c28 	ldr.w	r2, [r0, #-40]
    25f4:	0799      	lsls	r1, r3, #30
    25f6:	d542      	bpl.n	267e <usb_transfer_work+0xa2>
		if (!trans->bsize) {
    25f8:	bb02      	cbnz	r2, 263c <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    25fa:	f013 0304 	ands.w	r3, r3, #4
    25fe:	d104      	bne.n	260a <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    2600:	461a      	mov	r2, r3
    2602:	4619      	mov	r1, r3
    2604:	4628      	mov	r0, r5
    2606:	f7ff fd05 	bl	2014 <usb_write>
			}
			trans->status = 0;
    260a:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    260c:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    2610:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2614:	3310      	adds	r3, #16
    2616:	d00e      	beq.n	2636 <usb_transfer_work+0x5a>
    2618:	f854 6c20 	ldr.w	r6, [r4, #-32]
    261c:	b15e      	cbz	r6, 2636 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    261e:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
    2622:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
    2626:	f00a fb4b 	bl	ccc0 <k_is_in_isr>
    262a:	2800      	cmp	r0, #0
    262c:	d053      	beq.n	26d6 <usb_transfer_work+0xfa>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    262e:	4831      	ldr	r0, [pc, #196]	; (26f4 <usb_transfer_work+0x118>)
    2630:	4621      	mov	r1, r4
    2632:	f00a fc00 	bl	ce36 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    2636:	b002      	add	sp, #8
    2638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    263c:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    2640:	ab01      	add	r3, sp, #4
    2642:	4628      	mov	r0, r5
    2644:	f7ff fce6 	bl	2014 <usb_write>
		if (ret) {
    2648:	4602      	mov	r2, r0
    264a:	b138      	cbz	r0, 265c <usb_transfer_work+0x80>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    264c:	462b      	mov	r3, r5
    264e:	482a      	ldr	r0, [pc, #168]	; (26f8 <usb_transfer_work+0x11c>)
    2650:	2145      	movs	r1, #69	; 0x45
    2652:	f009 fac2 	bl	bbda <z_log_minimal_printk>
			trans->status = -EINVAL;
    2656:	f06f 0315 	mvn.w	r3, #21
    265a:	e7d7      	b.n	260c <usb_transfer_work+0x30>
		trans->buffer += bytes;
    265c:	9a01      	ldr	r2, [sp, #4]
    265e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    2662:	4413      	add	r3, r2
    2664:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    2668:	f854 3c28 	ldr.w	r3, [r4, #-40]
    266c:	1a9b      	subs	r3, r3, r2
    266e:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    2672:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2676:	4413      	add	r3, r2
    2678:	f844 3c24 	str.w	r3, [r4, #-36]
    267c:	e7c8      	b.n	2610 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    267e:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    2682:	ab01      	add	r3, sp, #4
    2684:	4628      	mov	r0, r5
    2686:	f002 fc05 	bl	4e94 <usb_dc_ep_read_wait>
		if (ret) {
    268a:	4602      	mov	r2, r0
    268c:	2800      	cmp	r0, #0
    268e:	d1dd      	bne.n	264c <usb_transfer_work+0x70>
		trans->buffer += bytes;
    2690:	9e01      	ldr	r6, [sp, #4]
    2692:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    2696:	4433      	add	r3, r6
    2698:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    269c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    26a0:	1b9b      	subs	r3, r3, r6
    26a2:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    26a6:	f854 3c24 	ldr.w	r3, [r4, #-36]
    26aa:	4433      	add	r3, r6
    26ac:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    26b0:	2e00      	cmp	r6, #0
    26b2:	d0aa      	beq.n	260a <usb_transfer_work+0x2e>
    26b4:	4628      	mov	r0, r5
    26b6:	f002 fca5 	bl	5004 <usb_dc_ep_mps>
    26ba:	fbb6 f3f0 	udiv	r3, r6, r0
    26be:	fb03 6010 	mls	r0, r3, r0, r6
    26c2:	2800      	cmp	r0, #0
    26c4:	d1a1      	bne.n	260a <usb_transfer_work+0x2e>
    26c6:	f854 3c28 	ldr.w	r3, [r4, #-40]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d09d      	beq.n	260a <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    26ce:	4628      	mov	r0, r5
    26d0:	f002 fc34 	bl	4f3c <usb_dc_ep_read_continue>
    26d4:	e79c      	b.n	2610 <usb_transfer_work+0x34>
		trans->cb = NULL;
    26d6:	f844 0c20 	str.w	r0, [r4, #-32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    26da:	f1a4 0018 	sub.w	r0, r4, #24
    26de:	f005 ff63 	bl	85a8 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    26e2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    26e6:	338c      	adds	r3, #140	; 0x8c
    26e8:	d0a5      	beq.n	2636 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
    26ea:	4642      	mov	r2, r8
    26ec:	4639      	mov	r1, r7
    26ee:	4628      	mov	r0, r5
    26f0:	47b0      	blx	r6
    26f2:	e7a0      	b.n	2636 <usb_transfer_work+0x5a>
    26f4:	20000770 	.word	0x20000770
    26f8:	0000e4d9 	.word	0x0000e4d9

000026fc <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    26fc:	1e4b      	subs	r3, r1, #1
    26fe:	2b01      	cmp	r3, #1
{
    2700:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2702:	4606      	mov	r6, r0
    2704:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2706:	d813      	bhi.n	2730 <usb_transfer_ep_callback+0x34>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2708:	f7ff ff52 	bl	25b0 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    270c:	4604      	mov	r4, r0
    270e:	b988      	cbnz	r0, 2734 <usb_transfer_ep_callback+0x38>
		if (status == USB_DC_EP_DATA_OUT) {
    2710:	2d01      	cmp	r5, #1
    2712:	d10d      	bne.n	2730 <usb_transfer_ep_callback+0x34>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2714:	ab01      	add	r3, sp, #4
    2716:	2201      	movs	r2, #1
    2718:	f10d 0103 	add.w	r1, sp, #3
    271c:	4630      	mov	r0, r6
    271e:	f002 fbb9 	bl	4e94 <usb_dc_ep_read_wait>
			} while (bytes);
    2722:	9b01      	ldr	r3, [sp, #4]
    2724:	2b00      	cmp	r3, #0
    2726:	d1f5      	bne.n	2714 <usb_transfer_ep_callback+0x18>

			LOG_ERR("RX data lost, no transfer");
    2728:	480a      	ldr	r0, [pc, #40]	; (2754 <usb_transfer_ep_callback+0x58>)
    272a:	2145      	movs	r1, #69	; 0x45
    272c:	f009 fa55 	bl	bbda <z_log_minimal_printk>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2730:	b002      	add	sp, #8
    2732:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2734:	f00a fac4 	bl	ccc0 <k_is_in_isr>
    2738:	f104 0134 	add.w	r1, r4, #52	; 0x34
    273c:	b108      	cbz	r0, 2742 <usb_transfer_ep_callback+0x46>
    273e:	2d01      	cmp	r5, #1
    2740:	d103      	bne.n	274a <usb_transfer_ep_callback+0x4e>
		usb_transfer_work(&trans->work);
    2742:	4608      	mov	r0, r1
    2744:	f7ff ff4a 	bl	25dc <usb_transfer_work>
    2748:	e7f2      	b.n	2730 <usb_transfer_ep_callback+0x34>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    274a:	4803      	ldr	r0, [pc, #12]	; (2758 <usb_transfer_ep_callback+0x5c>)
    274c:	f00a fb73 	bl	ce36 <k_work_submit_to_queue>
    2750:	e7ee      	b.n	2730 <usb_transfer_ep_callback+0x34>
    2752:	bf00      	nop
    2754:	0000e4fb 	.word	0x0000e4fb
    2758:	20000770 	.word	0x20000770

0000275c <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    275c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2760:	4604      	mov	r4, r0
    2762:	9101      	str	r1, [sp, #4]
    2764:	4617      	mov	r7, r2
    2766:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2768:	f009 fabf 	bl	bcea <usb_transfer_is_busy>
    276c:	2800      	cmp	r0, #0
    276e:	d16e      	bne.n	284e <CONFIG_MAIN_STACK_SIZE+0x4e>
    2770:	f04f 0320 	mov.w	r3, #32
    2774:	f3ef 8b11 	mrs	fp, BASEPRI
    2778:	f383 8812 	msr	BASEPRI_MAX, r3
    277c:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2780:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 2864 <CONFIG_MAIN_STACK_SIZE+0x64>
    2784:	4606      	mov	r6, r0
    2786:	f04f 0a48 	mov.w	sl, #72	; 0x48
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    278a:	fb0a f506 	mul.w	r5, sl, r6
	return z_impl_k_sem_take(sem, timeout);
    278e:	2200      	movs	r2, #0
    2790:	2300      	movs	r3, #0
    2792:	4648      	mov	r0, r9
    2794:	f005 ff2e 	bl	85f4 <z_impl_k_sem_take>
    2798:	b9c8      	cbnz	r0, 27ce <usb_transfer+0x72>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    279a:	4e2e      	ldr	r6, [pc, #184]	; (2854 <CONFIG_MAIN_STACK_SIZE+0x54>)
    279c:	eb06 0a05 	add.w	sl, r6, r5
    27a0:	f8da 3004 	ldr.w	r3, [sl, #4]
    27a4:	f113 0f10 	cmn.w	r3, #16
    27a8:	d11d      	bne.n	27e6 <usb_transfer+0x8a>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    27aa:	482b      	ldr	r0, [pc, #172]	; (2858 <CONFIG_MAIN_STACK_SIZE+0x58>)
    27ac:	9301      	str	r3, [sp, #4]
    27ae:	4622      	mov	r2, r4
    27b0:	2145      	movs	r1, #69	; 0x45
    27b2:	f009 fa12 	bl	bbda <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
    27b6:	4648      	mov	r0, r9
    27b8:	f005 fef6 	bl	85a8 <z_impl_k_sem_give>
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    27bc:	9b01      	ldr	r3, [sp, #4]
	__asm__ volatile(
    27be:	f38b 8811 	msr	BASEPRI, fp
    27c2:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    27c6:	4618      	mov	r0, r3
    27c8:	b003      	add	sp, #12
    27ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    27ce:	3601      	adds	r6, #1
    27d0:	2e04      	cmp	r6, #4
    27d2:	f109 0948 	add.w	r9, r9, #72	; 0x48
    27d6:	d1d8      	bne.n	278a <usb_transfer+0x2e>
		LOG_ERR("No transfer slot available");
    27d8:	4820      	ldr	r0, [pc, #128]	; (285c <CONFIG_MAIN_STACK_SIZE+0x5c>)
    27da:	2145      	movs	r1, #69	; 0x45
    27dc:	f009 f9fd 	bl	bbda <z_log_minimal_printk>
		ret = -ENOMEM;
    27e0:	f06f 030b 	mvn.w	r3, #11
		goto done;
    27e4:	e7eb      	b.n	27be <usb_transfer+0x62>
	trans->buffer = data;
    27e6:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    27e8:	f8ca 0010 	str.w	r0, [sl, #16]
	trans->bsize = dlen;
    27ec:	e9ca 3702 	strd	r3, r7, [sl, #8]
	trans->cb = cb;
    27f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    27f2:	f8ca 3014 	str.w	r3, [sl, #20]
	trans->priv = cb_data;
    27f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    27f8:	f8ca 3018 	str.w	r3, [sl, #24]
	trans->status = -EBUSY;
    27fc:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
    2800:	5574      	strb	r4, [r6, r5]
	trans->flags = flags;
    2802:	f8ca 8044 	str.w	r8, [sl, #68]	; 0x44
	trans->status = -EBUSY;
    2806:	f8ca 3004 	str.w	r3, [sl, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    280a:	4620      	mov	r0, r4
    280c:	f002 fbfa 	bl	5004 <usb_dc_ep_mps>
    2810:	b168      	cbz	r0, 282e <CONFIG_MAIN_STACK_SIZE+0x2e>
    2812:	4620      	mov	r0, r4
    2814:	f002 fbf6 	bl	5004 <usb_dc_ep_mps>
    2818:	fbb7 f2f0 	udiv	r2, r7, r0
    281c:	fb02 7010 	mls	r0, r2, r0, r7
    2820:	b128      	cbz	r0, 282e <CONFIG_MAIN_STACK_SIZE+0x2e>
		trans->flags |= USB_TRANS_NO_ZLP;
    2822:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
    2826:	f043 0304 	orr.w	r3, r3, #4
    282a:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    282e:	f018 0f02 	tst.w	r8, #2
    2832:	d007      	beq.n	2844 <CONFIG_MAIN_STACK_SIZE+0x44>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2834:	f105 0134 	add.w	r1, r5, #52	; 0x34
    2838:	4809      	ldr	r0, [pc, #36]	; (2860 <CONFIG_MAIN_STACK_SIZE+0x60>)
    283a:	4431      	add	r1, r6
    283c:	f00a fafb 	bl	ce36 <k_work_submit_to_queue>
	int i, key, ret = 0;
    2840:	2300      	movs	r3, #0
    2842:	e7bc      	b.n	27be <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    2844:	4620      	mov	r0, r4
    2846:	f002 fb79 	bl	4f3c <usb_dc_ep_read_continue>
    284a:	4603      	mov	r3, r0
    284c:	e7b7      	b.n	27be <usb_transfer+0x62>
		return -EBUSY;
    284e:	f06f 030f 	mvn.w	r3, #15
    2852:	e7b8      	b.n	27c6 <usb_transfer+0x6a>
    2854:	20001910 	.word	0x20001910
    2858:	0000e51a 	.word	0x0000e51a
    285c:	0000e548 	.word	0x0000e548
    2860:	20000770 	.word	0x20000770
    2864:	2000192c 	.word	0x2000192c

00002868 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    2868:	b510      	push	{r4, lr}
	__asm__ volatile(
    286a:	f04f 0320 	mov.w	r3, #32
    286e:	f3ef 8411 	mrs	r4, BASEPRI
    2872:	f383 8812 	msr	BASEPRI_MAX, r3
    2876:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    287a:	f7ff fe99 	bl	25b0 <usb_ep_get_transfer>
	if (!trans) {
    287e:	b150      	cbz	r0, 2896 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2880:	6843      	ldr	r3, [r0, #4]
    2882:	3310      	adds	r3, #16
    2884:	d107      	bne.n	2896 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    2886:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    288a:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    288c:	f100 0134 	add.w	r1, r0, #52	; 0x34
    2890:	4803      	ldr	r0, [pc, #12]	; (28a0 <usb_cancel_transfer+0x38>)
    2892:	f00a fad0 	bl	ce36 <k_work_submit_to_queue>
	__asm__ volatile(
    2896:	f384 8811 	msr	BASEPRI, r4
    289a:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    289e:	bd10      	pop	{r4, pc}
    28a0:	20000770 	.word	0x20000770

000028a4 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    28a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28a8:	4c10      	ldr	r4, [pc, #64]	; (28ec <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    28aa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 28f0 <usb_cancel_transfers+0x4c>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    28ae:	2500      	movs	r5, #0
			trans->status = -ECANCELED;
    28b0:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    28b4:	f04f 0320 	mov.w	r3, #32
    28b8:	f3ef 8611 	mrs	r6, BASEPRI
    28bc:	f383 8812 	msr	BASEPRI_MAX, r3
    28c0:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    28c4:	6863      	ldr	r3, [r4, #4]
    28c6:	3310      	adds	r3, #16
    28c8:	d105      	bne.n	28d6 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    28ca:	f104 0134 	add.w	r1, r4, #52	; 0x34
    28ce:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    28d0:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    28d2:	f00a fab0 	bl	ce36 <k_work_submit_to_queue>
	__asm__ volatile(
    28d6:	f386 8811 	msr	BASEPRI, r6
    28da:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    28de:	3501      	adds	r5, #1
    28e0:	2d04      	cmp	r5, #4
    28e2:	f104 0448 	add.w	r4, r4, #72	; 0x48
    28e6:	d1e5      	bne.n	28b4 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    28e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28ec:	20001910 	.word	0x20001910
    28f0:	20000770 	.word	0x20000770

000028f4 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    28f4:	b570      	push	{r4, r5, r6, lr}
    28f6:	4c0a      	ldr	r4, [pc, #40]	; (2920 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    28f8:	4e0a      	ldr	r6, [pc, #40]	; (2924 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    28fa:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    28fc:	4631      	mov	r1, r6
    28fe:	4620      	mov	r0, r4
    2900:	f00a fa90 	bl	ce24 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2904:	2201      	movs	r2, #1
    2906:	f1a4 0018 	sub.w	r0, r4, #24
    290a:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    290c:	3501      	adds	r5, #1
    290e:	f00a fa72 	bl	cdf6 <z_impl_k_sem_init>
    2912:	2d04      	cmp	r5, #4
    2914:	f104 0448 	add.w	r4, r4, #72	; 0x48
    2918:	d1f0      	bne.n	28fc <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    291a:	2000      	movs	r0, #0
    291c:	bd70      	pop	{r4, r5, r6, pc}
    291e:	bf00      	nop
    2920:	20001944 	.word	0x20001944
    2924:	000025dd 	.word	0x000025dd

00002928 <cdc_acm_irq_rx_enable>:
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2928:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    292a:	2301      	movs	r3, #1
    292c:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    2930:	680b      	ldr	r3, [r1, #0]
    2932:	b133      	cbz	r3, 2942 <cdc_acm_irq_rx_enable+0x1a>
    2934:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    2938:	b11b      	cbz	r3, 2942 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    293a:	4802      	ldr	r0, [pc, #8]	; (2944 <cdc_acm_irq_rx_enable+0x1c>)
    293c:	3108      	adds	r1, #8
    293e:	f00a ba7a 	b.w	ce36 <k_work_submit_to_queue>
	}
}
    2942:	4770      	bx	lr
    2944:	20000770 	.word	0x20000770

00002948 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2948:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    294a:	2301      	movs	r3, #1
    294c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    2950:	680b      	ldr	r3, [r1, #0]
    2952:	b133      	cbz	r3, 2962 <cdc_acm_irq_tx_enable+0x1a>
    2954:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    2958:	b11b      	cbz	r3, 2962 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    295a:	4802      	ldr	r0, [pc, #8]	; (2964 <cdc_acm_irq_tx_enable+0x1c>)
    295c:	3108      	adds	r1, #8
    295e:	f00a ba6a 	b.w	ce36 <k_work_submit_to_queue>
}
    2962:	4770      	bx	lr
    2964:	20000770 	.word	0x20000770

00002968 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2968:	4a0b      	ldr	r2, [pc, #44]	; (2998 <cdc_acm_reset_port+0x30>)
{
    296a:	4603      	mov	r3, r0
	dev_data->configured = false;
    296c:	2100      	movs	r1, #0
    296e:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    2972:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2974:	6810      	ldr	r0, [r2, #0]
    2976:	6758      	str	r0, [r3, #116]	; 0x74
    2978:	8890      	ldrh	r0, [r2, #4]
    297a:	7992      	ldrb	r2, [r2, #6]
    297c:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    2980:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    2984:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    2988:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    298c:	2240      	movs	r2, #64	; 0x40
    298e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    2992:	f009 bb47 	b.w	c024 <memset>
    2996:	bf00      	nop
    2998:	0000d870 	.word	0x0000d870

0000299c <cdc_acm_read_cb>:
{
    299c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (size <= 0) {
    299e:	1e0d      	subs	r5, r1, #0
{
    29a0:	4606      	mov	r6, r0
    29a2:	4614      	mov	r4, r2
    29a4:	f102 072c 	add.w	r7, r2, #44	; 0x2c
	if (size <= 0) {
    29a8:	dd18      	ble.n	29dc <cdc_acm_read_cb+0x40>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    29aa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    29ac:	462a      	mov	r2, r5
    29ae:	4639      	mov	r1, r7
    29b0:	f009 f88c 	bl	bacc <ring_buf_put>
	if (wrote < size) {
    29b4:	4285      	cmp	r5, r0
    29b6:	d904      	bls.n	29c2 <cdc_acm_read_cb+0x26>
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    29b8:	1a2a      	subs	r2, r5, r0
    29ba:	2145      	movs	r1, #69	; 0x45
    29bc:	480d      	ldr	r0, [pc, #52]	; (29f4 <cdc_acm_read_cb+0x58>)
    29be:	f009 f90c 	bl	bbda <z_log_minimal_printk>
	dev_data->rx_ready = true;
    29c2:	2301      	movs	r3, #1
    29c4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    29c8:	6823      	ldr	r3, [r4, #0]
    29ca:	b13b      	cbz	r3, 29dc <cdc_acm_read_cb+0x40>
    29cc:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    29d0:	b123      	cbz	r3, 29dc <cdc_acm_read_cb+0x40>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    29d2:	4809      	ldr	r0, [pc, #36]	; (29f8 <cdc_acm_read_cb+0x5c>)
    29d4:	f104 0108 	add.w	r1, r4, #8
    29d8:	f00a fa2d 	bl	ce36 <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    29dc:	4b07      	ldr	r3, [pc, #28]	; (29fc <cdc_acm_read_cb+0x60>)
    29de:	9300      	str	r3, [sp, #0]
    29e0:	9401      	str	r4, [sp, #4]
    29e2:	2301      	movs	r3, #1
    29e4:	2240      	movs	r2, #64	; 0x40
    29e6:	4639      	mov	r1, r7
    29e8:	4630      	mov	r0, r6
    29ea:	f7ff feb7 	bl	275c <usb_transfer>
}
    29ee:	b003      	add	sp, #12
    29f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29f2:	bf00      	nop
    29f4:	0000e575 	.word	0x0000e575
    29f8:	20000770 	.word	0x20000770
    29fc:	0000299d 	.word	0x0000299d

00002a00 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    2a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2a02:	6904      	ldr	r4, [r0, #16]
{
    2a04:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    2a08:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    2a0c:	b113      	cbz	r3, 2a14 <cdc_acm_poll_out+0x14>
    2a0e:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    2a12:	b12b      	cbz	r3, 2a20 <cdc_acm_poll_out+0x20>
		LOG_INF("USB device not ready, drop data");
    2a14:	4815      	ldr	r0, [pc, #84]	; (2a6c <cdc_acm_poll_out+0x6c>)
    2a16:	2149      	movs	r1, #73	; 0x49

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
		LOG_INF("Ring buffer full, drain buffer");
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
			LOG_ERR("Failed to drain buffer");
    2a18:	f009 f8df 	bl	bbda <z_log_minimal_printk>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    2a1c:	b003      	add	sp, #12
    2a1e:	bd30      	pop	{r4, r5, pc}
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2a20:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    2a22:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2a26:	2201      	movs	r2, #1
    2a28:	f10d 0107 	add.w	r1, sp, #7
    2a2c:	f009 f84e 	bl	bacc <ring_buf_put>
    2a30:	4605      	mov	r5, r0
    2a32:	b9a0      	cbnz	r0, 2a5e <cdc_acm_poll_out+0x5e>
		LOG_INF("Ring buffer full, drain buffer");
    2a34:	480e      	ldr	r0, [pc, #56]	; (2a70 <cdc_acm_poll_out+0x70>)
    2a36:	2149      	movs	r1, #73	; 0x49
    2a38:	f009 f8cf 	bl	bbda <z_log_minimal_printk>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2a3c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2a3e:	2201      	movs	r2, #1
    2a40:	4629      	mov	r1, r5
    2a42:	f009 f8a9 	bl	bb98 <ring_buf_get>
    2a46:	b910      	cbnz	r0, 2a4e <cdc_acm_poll_out+0x4e>
			LOG_ERR("Failed to drain buffer");
    2a48:	480a      	ldr	r0, [pc, #40]	; (2a74 <cdc_acm_poll_out+0x74>)
    2a4a:	2145      	movs	r1, #69	; 0x45
    2a4c:	e7e4      	b.n	2a18 <cdc_acm_poll_out+0x18>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2a4e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2a50:	2201      	movs	r2, #1
    2a52:	f10d 0107 	add.w	r1, sp, #7
    2a56:	f009 f839 	bl	bacc <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2a5a:	2800      	cmp	r0, #0
    2a5c:	d0f4      	beq.n	2a48 <cdc_acm_poll_out+0x48>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2a5e:	f104 0118 	add.w	r1, r4, #24
    2a62:	4805      	ldr	r0, [pc, #20]	; (2a78 <cdc_acm_poll_out+0x78>)
    2a64:	f00a f9e7 	bl	ce36 <k_work_submit_to_queue>
    2a68:	e7d8      	b.n	2a1c <cdc_acm_poll_out+0x1c>
    2a6a:	bf00      	nop
    2a6c:	0000e59b 	.word	0x0000e59b
    2a70:	0000e5c0 	.word	0x0000e5c0
    2a74:	0000e5e4 	.word	0x0000e5e4
    2a78:	20000770 	.word	0x20000770

00002a7c <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    2a7c:	2301      	movs	r3, #1
    2a7e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2a82:	6813      	ldr	r3, [r2, #0]
{
    2a84:	b510      	push	{r4, lr}
    2a86:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2a88:	b13b      	cbz	r3, 2a9a <cdc_acm_write_cb+0x1e>
    2a8a:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    2a8e:	b123      	cbz	r3, 2a9a <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2a90:	4808      	ldr	r0, [pc, #32]	; (2ab4 <cdc_acm_write_cb+0x38>)
    2a92:	f102 0108 	add.w	r1, r2, #8
    2a96:	f00a f9ce 	bl	ce36 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    2a9a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2a9c:	f008 ffd0 	bl	ba40 <ring_buf_is_empty>
    2aa0:	b930      	cbnz	r0, 2ab0 <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2aa2:	f104 0118 	add.w	r1, r4, #24
    2aa6:	4803      	ldr	r0, [pc, #12]	; (2ab4 <cdc_acm_write_cb+0x38>)
}
    2aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2aac:	f00a b9c3 	b.w	ce36 <k_work_submit_to_queue>
}
    2ab0:	bd10      	pop	{r4, pc}
    2ab2:	bf00      	nop
    2ab4:	20000770 	.word	0x20000770

00002ab8 <tx_work_handler>:
{
    2ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    2aba:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2abc:	685b      	ldr	r3, [r3, #4]
    2abe:	6a1b      	ldr	r3, [r3, #32]
    2ac0:	7d1e      	ldrb	r6, [r3, #20]
{
    2ac2:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    2ac4:	4630      	mov	r0, r6
    2ac6:	f009 f910 	bl	bcea <usb_transfer_is_busy>
    2aca:	b9d0      	cbnz	r0, 2b02 <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    2acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2ace:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2ad2:	a903      	add	r1, sp, #12
    2ad4:	f009 f819 	bl	bb0a <ring_buf_get_claim>
	if (!len) {
    2ad8:	4604      	mov	r4, r0
    2ada:	b190      	cbz	r0, 2b02 <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    2adc:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    2ade:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    2ae2:	bf08      	it	eq
    2ae4:	f100 34ff 	addeq.w	r4, r0, #4294967295
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    2ae8:	9301      	str	r3, [sp, #4]
    2aea:	4b07      	ldr	r3, [pc, #28]	; (2b08 <tx_work_handler+0x50>)
    2aec:	9903      	ldr	r1, [sp, #12]
    2aee:	9300      	str	r3, [sp, #0]
    2af0:	4622      	mov	r2, r4
    2af2:	2302      	movs	r3, #2
    2af4:	4630      	mov	r0, r6
    2af6:	f7ff fe31 	bl	275c <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    2afa:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2afc:	4621      	mov	r1, r4
    2afe:	f009 f82f 	bl	bb60 <ring_buf_get_finish>
}
    2b02:	b004      	add	sp, #16
    2b04:	bd70      	pop	{r4, r5, r6, pc}
    2b06:	bf00      	nop
    2b08:	00002a7d 	.word	0x00002a7d

00002b0c <cdc_acm_class_handle_req>:
{
    2b0c:	b570      	push	{r4, r5, r6, lr}
    2b0e:	4604      	mov	r4, r0
    2b10:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2b12:	7901      	ldrb	r1, [r0, #4]
    2b14:	4815      	ldr	r0, [pc, #84]	; (2b6c <cdc_acm_class_handle_req+0x60>)
{
    2b16:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2b18:	f009 f8bc 	bl	bc94 <usb_get_dev_data_by_iface>
	if (common == NULL) {
    2b1c:	b938      	cbnz	r0, 2b2e <cdc_acm_class_handle_req+0x22>
		LOG_WRN("Device data not found for interface %u",
    2b1e:	4814      	ldr	r0, [pc, #80]	; (2b70 <cdc_acm_class_handle_req+0x64>)
    2b20:	88a2      	ldrh	r2, [r4, #4]
    2b22:	2157      	movs	r1, #87	; 0x57
    2b24:	f009 f859 	bl	bbda <z_log_minimal_printk>
    2b28:	f06f 0012 	mvn.w	r0, #18
}
    2b2c:	bd70      	pop	{r4, r5, r6, pc}
    2b2e:	f994 2000 	ldrsb.w	r2, [r4]
    2b32:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    2b34:	2a00      	cmp	r2, #0
    2b36:	db11      	blt.n	2b5c <cdc_acm_class_handle_req+0x50>
		switch (setup->bRequest) {
    2b38:	2b20      	cmp	r3, #32
    2b3a:	d004      	beq.n	2b46 <cdc_acm_class_handle_req+0x3a>
    2b3c:	2b22      	cmp	r3, #34	; 0x22
    2b3e:	d009      	beq.n	2b54 <cdc_acm_class_handle_req+0x48>
	return -ENOTSUP;
    2b40:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2b44:	e7f2      	b.n	2b2c <cdc_acm_class_handle_req+0x20>
			memcpy(&dev_data->line_coding, *data,
    2b46:	6829      	ldr	r1, [r5, #0]
    2b48:	2207      	movs	r2, #7
    2b4a:	380c      	subs	r0, #12
    2b4c:	f009 fa5f 	bl	c00e <memcpy>
			return 0;
    2b50:	2000      	movs	r0, #0
    2b52:	e7eb      	b.n	2b2c <cdc_acm_class_handle_req+0x20>
			dev_data->line_state = (uint8_t)setup->wValue;
    2b54:	8863      	ldrh	r3, [r4, #2]
    2b56:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    2b5a:	e7f9      	b.n	2b50 <cdc_acm_class_handle_req+0x44>
		if (setup->bRequest == GET_LINE_CODING) {
    2b5c:	2b21      	cmp	r3, #33	; 0x21
    2b5e:	d1ef      	bne.n	2b40 <cdc_acm_class_handle_req+0x34>
			*data = (uint8_t *)(&dev_data->line_coding);
    2b60:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    2b62:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    2b64:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    2b66:	6033      	str	r3, [r6, #0]
    2b68:	e7f2      	b.n	2b50 <cdc_acm_class_handle_req+0x44>
    2b6a:	bf00      	nop
    2b6c:	20001a30 	.word	0x20001a30
    2b70:	0000e600 	.word	0x0000e600

00002b74 <cdc_acm_int_in>:
{
    2b74:	b507      	push	{r0, r1, r2, lr}
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    2b76:	4601      	mov	r1, r0
    2b78:	9001      	str	r0, [sp, #4]
    2b7a:	4809      	ldr	r0, [pc, #36]	; (2ba0 <cdc_acm_int_in+0x2c>)
    2b7c:	f009 f89b 	bl	bcb6 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    2b80:	9a01      	ldr	r2, [sp, #4]
    2b82:	b930      	cbnz	r0, 2b92 <cdc_acm_int_in+0x1e>
		LOG_WRN("Device data not found for endpoint %u", ep);
    2b84:	4807      	ldr	r0, [pc, #28]	; (2ba4 <cdc_acm_int_in+0x30>)
    2b86:	2157      	movs	r1, #87	; 0x57
}
    2b88:	b003      	add	sp, #12
    2b8a:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG_WRN("Device data not found for endpoint %u", ep);
    2b8e:	f009 b824 	b.w	bbda <z_log_minimal_printk>
	dev_data->notification_sent = 1U;
    2b92:	2301      	movs	r3, #1
    2b94:	f800 3c03 	strb.w	r3, [r0, #-3]
}
    2b98:	b003      	add	sp, #12
    2b9a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b9e:	bf00      	nop
    2ba0:	20001a30 	.word	0x20001a30
    2ba4:	0000e62c 	.word	0x0000e62c

00002ba8 <cdc_acm_fifo_fill>:
{
    2ba8:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2baa:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    2bac:	f895 307e 	ldrb.w	r3, [r5, #126]	; 0x7e
{
    2bb0:	4616      	mov	r6, r2
	if (!dev_data->configured || dev_data->suspended) {
    2bb2:	b113      	cbz	r3, 2bba <cdc_acm_fifo_fill+0x12>
    2bb4:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
    2bb8:	b133      	cbz	r3, 2bc8 <cdc_acm_fifo_fill+0x20>
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    2bba:	480d      	ldr	r0, [pc, #52]	; (2bf0 <cdc_acm_fifo_fill+0x48>)
    2bbc:	4632      	mov	r2, r6
    2bbe:	2157      	movs	r1, #87	; 0x57
    2bc0:	f009 f80b 	bl	bbda <z_log_minimal_printk>
    2bc4:	2000      	movs	r0, #0
}
    2bc6:	bd70      	pop	{r4, r5, r6, pc}
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2bc8:	6f28      	ldr	r0, [r5, #112]	; 0x70
	dev_data->tx_ready = false;
    2bca:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2bce:	f008 ff7d 	bl	bacc <ring_buf_put>
	if (wrote < len) {
    2bd2:	4286      	cmp	r6, r0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2bd4:	4604      	mov	r4, r0
	if (wrote < len) {
    2bd6:	d904      	bls.n	2be2 <cdc_acm_fifo_fill+0x3a>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    2bd8:	1a32      	subs	r2, r6, r0
    2bda:	2157      	movs	r1, #87	; 0x57
    2bdc:	4805      	ldr	r0, [pc, #20]	; (2bf4 <cdc_acm_fifo_fill+0x4c>)
    2bde:	f008 fffc 	bl	bbda <z_log_minimal_printk>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2be2:	4805      	ldr	r0, [pc, #20]	; (2bf8 <cdc_acm_fifo_fill+0x50>)
    2be4:	f105 0118 	add.w	r1, r5, #24
    2be8:	f00a f925 	bl	ce36 <k_work_submit_to_queue>
	return wrote;
    2bec:	4620      	mov	r0, r4
    2bee:	e7ea      	b.n	2bc6 <cdc_acm_fifo_fill+0x1e>
    2bf0:	0000e657 	.word	0x0000e657
    2bf4:	0000e575 	.word	0x0000e575
    2bf8:	20000770 	.word	0x20000770

00002bfc <cdc_acm_dev_status_cb>:
{
    2bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2bfe:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    2c00:	9001      	str	r0, [sp, #4]
    2c02:	4601      	mov	r1, r0
    2c04:	4834      	ldr	r0, [pc, #208]	; (2cd8 <cdc_acm_dev_status_cb+0xdc>)
    2c06:	f009 f836 	bl	bc76 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    2c0a:	9a01      	ldr	r2, [sp, #4]
    2c0c:	4604      	mov	r4, r0
    2c0e:	b930      	cbnz	r0, 2c1e <cdc_acm_dev_status_cb+0x22>
		LOG_WRN("Device data not found for cfg %p", cfg);
    2c10:	4832      	ldr	r0, [pc, #200]	; (2cdc <cdc_acm_dev_status_cb+0xe0>)
    2c12:	2157      	movs	r1, #87	; 0x57
}
    2c14:	b003      	add	sp, #12
    2c16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		LOG_WRN("Device data not found for cfg %p", cfg);
    2c1a:	f008 bfde 	b.w	bbda <z_log_minimal_printk>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    2c1e:	4605      	mov	r5, r0
	struct usb_cfg_data *cfg = (void *)dev->config;
    2c20:	1e71      	subs	r1, r6, #1
    2c22:	f855 3980 	ldr.w	r3, [r5], #-128
    2c26:	685f      	ldr	r7, [r3, #4]
	switch (status) {
    2c28:	2905      	cmp	r1, #5
    2c2a:	d838      	bhi.n	2c9e <cdc_acm_dev_status_cb+0xa2>
    2c2c:	e8df f001 	tbb	[pc, r1]
    2c30:	2603372a 	.word	0x2603372a
    2c34:	3930      	.short	0x3930
		LOG_INF("Device configured");
    2c36:	2149      	movs	r1, #73	; 0x49
    2c38:	4829      	ldr	r0, [pc, #164]	; (2ce0 <cdc_acm_dev_status_cb+0xe4>)
    2c3a:	f008 ffce 	bl	bbda <z_log_minimal_printk>
		if (!dev_data->configured) {
    2c3e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    2c42:	b939      	cbnz	r1, 2c54 <cdc_acm_dev_status_cb+0x58>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    2c44:	6a3b      	ldr	r3, [r7, #32]
    2c46:	462a      	mov	r2, r5
    2c48:	7b18      	ldrb	r0, [r3, #12]
    2c4a:	f7ff fea7 	bl	299c <cdc_acm_read_cb>
			dev_data->configured = true;
    2c4e:	2301      	movs	r3, #1
    2c50:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    2c54:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    2c58:	bb0b      	cbnz	r3, 2c9e <cdc_acm_dev_status_cb+0xa2>
			dev_data->tx_ready = true;
    2c5a:	2301      	movs	r3, #1
    2c5c:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    2c60:	f854 3c80 	ldr.w	r3, [r4, #-128]
    2c64:	b1db      	cbz	r3, 2c9e <cdc_acm_dev_status_cb+0xa2>
    2c66:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    2c6a:	b1c3      	cbz	r3, 2c9e <cdc_acm_dev_status_cb+0xa2>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2c6c:	481d      	ldr	r0, [pc, #116]	; (2ce4 <cdc_acm_dev_status_cb+0xe8>)
    2c6e:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
}
    2c72:	b003      	add	sp, #12
    2c74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2c78:	f00a b8dd 	b.w	ce36 <k_work_submit_to_queue>
		LOG_INF("Device disconnected");
    2c7c:	481a      	ldr	r0, [pc, #104]	; (2ce8 <cdc_acm_dev_status_cb+0xec>)
    2c7e:	2149      	movs	r1, #73	; 0x49
    2c80:	f008 ffab 	bl	bbda <z_log_minimal_printk>
		cdc_acm_reset_port(dev_data);
    2c84:	4628      	mov	r0, r5
}
    2c86:	b003      	add	sp, #12
    2c88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cdc_acm_reset_port(dev_data);
    2c8c:	f7ff be6c 	b.w	2968 <cdc_acm_reset_port>
		LOG_INF("Device suspended");
    2c90:	4816      	ldr	r0, [pc, #88]	; (2cec <cdc_acm_dev_status_cb+0xf0>)
    2c92:	2149      	movs	r1, #73	; 0x49
    2c94:	f008 ffa1 	bl	bbda <z_log_minimal_printk>
		dev_data->suspended = true;
    2c98:	2301      	movs	r3, #1
    2c9a:	f804 3c01 	strb.w	r3, [r4, #-1]
}
    2c9e:	b003      	add	sp, #12
    2ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Device resumed");
    2ca2:	4813      	ldr	r0, [pc, #76]	; (2cf0 <cdc_acm_dev_status_cb+0xf4>)
    2ca4:	2149      	movs	r1, #73	; 0x49
    2ca6:	f008 ff98 	bl	bbda <z_log_minimal_printk>
		if (dev_data->suspended) {
    2caa:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d0f5      	beq.n	2c9e <cdc_acm_dev_status_cb+0xa2>
			LOG_INF("from suspend");
    2cb2:	2149      	movs	r1, #73	; 0x49
    2cb4:	480f      	ldr	r0, [pc, #60]	; (2cf4 <cdc_acm_dev_status_cb+0xf8>)
    2cb6:	f008 ff90 	bl	bbda <z_log_minimal_printk>
			if (dev_data->configured) {
    2cba:	f814 3c02 	ldrb.w	r3, [r4, #-2]
			dev_data->suspended = false;
    2cbe:	2100      	movs	r1, #0
    2cc0:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d0ea      	beq.n	2c9e <cdc_acm_dev_status_cb+0xa2>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    2cc8:	6a3b      	ldr	r3, [r7, #32]
    2cca:	7b18      	ldrb	r0, [r3, #12]
    2ccc:	462a      	mov	r2, r5
}
    2cce:	b003      	add	sp, #12
    2cd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    2cd4:	f7ff be62 	b.w	299c <cdc_acm_read_cb>
    2cd8:	20001a30 	.word	0x20001a30
    2cdc:	0000e68e 	.word	0x0000e68e
    2ce0:	0000e6b4 	.word	0x0000e6b4
    2ce4:	20000770 	.word	0x20000770
    2ce8:	0000e6cb 	.word	0x0000e6cb
    2cec:	0000e6e4 	.word	0x0000e6e4
    2cf0:	0000e6fa 	.word	0x0000e6fa
    2cf4:	0000e70e 	.word	0x0000e70e

00002cf8 <cdc_acm_init>:
{
    2cf8:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2cfa:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    2cfc:	2300      	movs	r3, #0
    2cfe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    2d02:	4b0c      	ldr	r3, [pc, #48]	; (2d34 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    2d04:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    2d08:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    2d0a:	f104 0284 	add.w	r2, r4, #132	; 0x84
    2d0e:	b969      	cbnz	r1, 2d2c <cdc_acm_init+0x34>
	list->head = node;
    2d10:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    2d14:	f104 0008 	add.w	r0, r4, #8
    2d18:	4907      	ldr	r1, [pc, #28]	; (2d38 <cdc_acm_init+0x40>)
    2d1a:	f00a f883 	bl	ce24 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    2d1e:	f104 0018 	add.w	r0, r4, #24
    2d22:	4906      	ldr	r1, [pc, #24]	; (2d3c <cdc_acm_init+0x44>)
    2d24:	f00a f87e 	bl	ce24 <k_work_init>
}
    2d28:	2000      	movs	r0, #0
    2d2a:	bd10      	pop	{r4, pc}
	parent->next = child;
    2d2c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    2d2e:	605a      	str	r2, [r3, #4]
}
    2d30:	e7f0      	b.n	2d14 <cdc_acm_init+0x1c>
    2d32:	bf00      	nop
    2d34:	20001a30 	.word	0x20001a30
    2d38:	0000bd15 	.word	0x0000bd15
    2d3c:	00002ab9 	.word	0x00002ab9

00002d40 <dfu_check_app_state>:
 *
 * @return  true if app state, false otherwise.
 */
static bool dfu_check_app_state(void)
{
	if (dfu_data.state == appIDLE ||
    2d40:	4b04      	ldr	r3, [pc, #16]	; (2d54 <dfu_check_app_state+0x14>)
    2d42:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
    2d46:	2000      	movs	r0, #0
    2d48:	2a01      	cmp	r2, #1
	    dfu_data.state == appDETACH) {
		dfu_data.state = appIDLE;
    2d4a:	bf9c      	itt	ls
    2d4c:	f883 0238 	strbls.w	r0, [r3, #568]	; 0x238
		return true;
    2d50:	2001      	movls	r0, #1
	}

	return false;
}
    2d52:	4770      	bx	lr
    2d54:	200000e4 	.word	0x200000e4

00002d58 <dfu_timer_expired>:
	LOG_DBG("bytes written 0x%x", flash_img_bytes_written(&dfu_data.ctx));
}

static void dfu_timer_expired(struct k_timer *timer)
{
	if (dfu_data.state == appDETACH) {
    2d58:	4b04      	ldr	r3, [pc, #16]	; (2d6c <dfu_timer_expired+0x14>)
    2d5a:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
    2d5e:	2a01      	cmp	r2, #1
		dfu_data.state = appIDLE;
    2d60:	bf04      	itt	eq
    2d62:	2200      	moveq	r2, #0
    2d64:	f883 2238 	strbeq.w	r2, [r3, #568]	; 0x238
	}
}
    2d68:	4770      	bx	lr
    2d6a:	bf00      	nop
    2d6c:	200000e4 	.word	0x200000e4

00002d70 <dfu_interface_config>:
static void dfu_interface_config(struct usb_desc_header *head,
				 uint8_t bInterfaceNumber)
{
	ARG_UNUSED(head);

	dfu_cfg.if0.bInterfaceNumber = bInterfaceNumber;
    2d70:	4b01      	ldr	r3, [pc, #4]	; (2d78 <dfu_interface_config+0x8>)
    2d72:	7099      	strb	r1, [r3, #2]
}
    2d74:	4770      	bx	lr
    2d76:	bf00      	nop
    2d78:	200005d1 	.word	0x200005d1

00002d7c <dfu_custom_handle_req>:
{
    2d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2d7e:	f990 2000 	ldrsb.w	r2, [r0]
    2d82:	7803      	ldrb	r3, [r0, #0]
	if (usb_reqtype_is_to_host(setup) ||
    2d84:	2a00      	cmp	r2, #0
{
    2d86:	4604      	mov	r4, r0
	if (usb_reqtype_is_to_host(setup) ||
    2d88:	db0e      	blt.n	2da8 <dfu_custom_handle_req+0x2c>
    2d8a:	f003 031f 	and.w	r3, r3, #31
    2d8e:	2b01      	cmp	r3, #1
    2d90:	d10a      	bne.n	2da8 <dfu_custom_handle_req+0x2c>
	if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    2d92:	7843      	ldrb	r3, [r0, #1]
    2d94:	2b0b      	cmp	r3, #11
    2d96:	d11a      	bne.n	2dce <dfu_custom_handle_req+0x52>
		switch (setup->wValue) {
    2d98:	8843      	ldrh	r3, [r0, #2]
    2d9a:	b143      	cbz	r3, 2dae <dfu_custom_handle_req+0x32>
    2d9c:	2b01      	cmp	r3, #1
    2d9e:	d019      	beq.n	2dd4 <dfu_custom_handle_req+0x58>
			LOG_WRN("Invalid DFU alternate setting");
    2da0:	4810      	ldr	r0, [pc, #64]	; (2de4 <dfu_custom_handle_req+0x68>)
    2da2:	2157      	movs	r1, #87	; 0x57
    2da4:	f008 ff19 	bl	bbda <z_log_minimal_printk>
		return -ENOTSUP;
    2da8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2dac:	e017      	b.n	2dde <dfu_custom_handle_req+0x62>
			dfu_data.flash_area_id =
    2dae:	4b0e      	ldr	r3, [pc, #56]	; (2de8 <dfu_custom_handle_req+0x6c>)
    2db0:	2202      	movs	r2, #2
		if (flash_area_open(dfu_data.flash_area_id, &fa)) {
    2db2:	4d0d      	ldr	r5, [pc, #52]	; (2de8 <dfu_custom_handle_req+0x6c>)
			dfu_data.flash_area_id =
    2db4:	701a      	strb	r2, [r3, #0]
		if (flash_area_open(dfu_data.flash_area_id, &fa)) {
    2db6:	7828      	ldrb	r0, [r5, #0]
    2db8:	a901      	add	r1, sp, #4
    2dba:	f000 fa4d 	bl	3258 <flash_area_open>
    2dbe:	b960      	cbnz	r0, 2dda <dfu_custom_handle_req+0x5e>
		dfu_data.flash_upload_size = fa->fa_size;
    2dc0:	9801      	ldr	r0, [sp, #4]
    2dc2:	6883      	ldr	r3, [r0, #8]
    2dc4:	606b      	str	r3, [r5, #4]
		flash_area_close(fa);
    2dc6:	f008 ffeb 	bl	bda0 <flash_area_close>
		dfu_data.alt_setting = setup->wValue;
    2dca:	8863      	ldrh	r3, [r4, #2]
    2dcc:	60eb      	str	r3, [r5, #12]
	return -EINVAL;
    2dce:	f06f 0015 	mvn.w	r0, #21
    2dd2:	e004      	b.n	2dde <dfu_custom_handle_req+0x62>
			dfu_data.flash_area_id =
    2dd4:	4b04      	ldr	r3, [pc, #16]	; (2de8 <dfu_custom_handle_req+0x6c>)
    2dd6:	2205      	movs	r2, #5
    2dd8:	e7eb      	b.n	2db2 <dfu_custom_handle_req+0x36>
			return -EIO;
    2dda:	f06f 0004 	mvn.w	r0, #4
}
    2dde:	b003      	add	sp, #12
    2de0:	bd30      	pop	{r4, r5, pc}
    2de2:	bf00      	nop
    2de4:	0000e736 	.word	0x0000e736
    2de8:	200000e4 	.word	0x200000e4

00002dec <dfu_reset_counters>:
{
    2dec:	b510      	push	{r4, lr}
	dfu_data.bytes_sent = 0U;
    2dee:	4c09      	ldr	r4, [pc, #36]	; (2e14 <dfu_reset_counters+0x28>)
    2df0:	2300      	movs	r3, #0
	if (flash_img_init(&dfu_data.ctx)) {
    2df2:	f104 0010 	add.w	r0, r4, #16
	dfu_data.bytes_sent = 0U;
    2df6:	60a3      	str	r3, [r4, #8]
	dfu_data.block_nr = 0U;
    2df8:	f8a4 323a 	strh.w	r3, [r4, #570]	; 0x23a
	if (flash_img_init(&dfu_data.ctx)) {
    2dfc:	f008 ff38 	bl	bc70 <flash_img_init>
    2e00:	b138      	cbz	r0, 2e12 <dfu_reset_counters+0x26>
		LOG_ERR("flash img init error");
    2e02:	4805      	ldr	r0, [pc, #20]	; (2e18 <dfu_reset_counters+0x2c>)
    2e04:	2145      	movs	r1, #69	; 0x45
    2e06:	f008 fee8 	bl	bbda <z_log_minimal_printk>
		dfu_data.state = dfuERROR;
    2e0a:	f640 630a 	movw	r3, #3594	; 0xe0a
    2e0e:	f8a4 3238 	strh.w	r3, [r4, #568]	; 0x238
}
    2e12:	bd10      	pop	{r4, pc}
    2e14:	200000e4 	.word	0x200000e4
    2e18:	0000e759 	.word	0x0000e759

00002e1c <dfu_work_handler>:
	},
	.num_endpoints = 0,
};

static void dfu_work_handler(struct k_work *item)
{
    2e1c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(item);

	switch (dfu_data_worker.worker_state) {
    2e1e:	4b1d      	ldr	r3, [pc, #116]	; (2e94 <dfu_work_handler+0x78>)
    2e20:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
    2e24:	2a02      	cmp	r2, #2
    2e26:	d001      	beq.n	2e2c <dfu_work_handler+0x10>
    2e28:	2a05      	cmp	r2, #5
    2e2a:	d12d      	bne.n	2e88 <dfu_work_handler+0x6c>
			dfu_data.status = errERASE;
			break;
		}
#endif
	case dfuDNLOAD_IDLE:
		dfu_flash_write(dfu_data_worker.buf,
    2e2c:	f8b3 5082 	ldrh.w	r5, [r3, #130]	; 0x82
	if (flash_img_buffered_write(&dfu_data.ctx, data, len, flush)) {
    2e30:	4c19      	ldr	r4, [pc, #100]	; (2e98 <dfu_work_handler+0x7c>)
    2e32:	4918      	ldr	r1, [pc, #96]	; (2e94 <dfu_work_handler+0x78>)
    2e34:	fab5 f385 	clz	r3, r5
    2e38:	095b      	lsrs	r3, r3, #5
    2e3a:	462a      	mov	r2, r5
    2e3c:	f104 0010 	add.w	r0, r4, #16
    2e40:	f008 fed8 	bl	bbf4 <flash_img_buffered_write>
    2e44:	b140      	cbz	r0, 2e58 <dfu_work_handler+0x3c>
		LOG_ERR("flash write error");
    2e46:	4815      	ldr	r0, [pc, #84]	; (2e9c <dfu_work_handler+0x80>)
    2e48:	2145      	movs	r1, #69	; 0x45
    2e4a:	f008 fec6 	bl	bbda <z_log_minimal_printk>
		dfu_data.state = dfuERROR;
    2e4e:	f240 330a 	movw	r3, #778	; 0x30a
    2e52:	f8a4 3238 	strh.w	r3, [r4, #568]	; 0x238
		break;
	default:
		LOG_ERR("OUT of state machine");
		break;
	}
}
    2e56:	bd38      	pop	{r3, r4, r5, pc}
	} else if (!len) {
    2e58:	b995      	cbnz	r5, 2e80 <dfu_work_handler+0x64>
		dfu_data.state = dfuMANIFEST_SYNC;
    2e5a:	2306      	movs	r3, #6
    2e5c:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
		dfu_reset_counters();
    2e60:	f7ff ffc4 	bl	2dec <dfu_reset_counters>
		if (boot_request_upgrade(false)) {
    2e64:	4628      	mov	r0, r5
    2e66:	f009 f8e6 	bl	c036 <boot_request_upgrade>
    2e6a:	b118      	cbz	r0, 2e74 <dfu_work_handler+0x58>
			dfu_data.state = dfuERROR;
    2e6c:	f240 330a 	movw	r3, #778	; 0x30a
    2e70:	f8a4 3238 	strh.w	r3, [r4, #568]	; 0x238
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    2e74:	480a      	ldr	r0, [pc, #40]	; (2ea0 <dfu_work_handler+0x84>)
}
    2e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2e7a:	2100      	movs	r1, #0
    2e7c:	f006 bb02 	b.w	9484 <z_impl_k_poll_signal_raise>
		dfu_data.state = dfuDNLOAD_IDLE;
    2e80:	2305      	movs	r3, #5
    2e82:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    2e86:	e7e6      	b.n	2e56 <dfu_work_handler+0x3a>
}
    2e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("OUT of state machine");
    2e8c:	4805      	ldr	r0, [pc, #20]	; (2ea4 <dfu_work_handler+0x88>)
    2e8e:	2145      	movs	r1, #69	; 0x45
    2e90:	f008 bea3 	b.w	bbda <z_log_minimal_printk>
    2e94:	20002c2c 	.word	0x20002c2c
    2e98:	200000e4 	.word	0x200000e4
    2e9c:	0000e773 	.word	0x0000e773
    2ea0:	20001a4c 	.word	0x20001a4c
    2ea4:	0000e78a 	.word	0x0000e78a

00002ea8 <usb_dfu_init>:

static int usb_dfu_init(const struct device *dev)
{
    2ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct flash_area *fa;

	ARG_UNUSED(dev);

	k_work_init(&dfu_work, dfu_work_handler);
    2eaa:	490f      	ldr	r1, [pc, #60]	; (2ee8 <usb_dfu_init+0x40>)
    2eac:	480f      	ldr	r0, [pc, #60]	; (2eec <usb_dfu_init+0x44>)
    2eae:	f009 ffb9 	bl	ce24 <k_work_init>
	z_impl_k_poll_signal_init(sig);
    2eb2:	480f      	ldr	r0, [pc, #60]	; (2ef0 <usb_dfu_init+0x48>)
	k_poll_signal_init(&dfu_signal);
	k_timer_init(&dfu_timer, dfu_timer_expired, NULL);

	if (flash_area_open(dfu_data.flash_area_id, &fa)) {
    2eb4:	4d0f      	ldr	r5, [pc, #60]	; (2ef4 <usb_dfu_init+0x4c>)
    2eb6:	f00a fad4 	bl	d462 <z_impl_k_poll_signal_init>
	k_timer_init(&dfu_timer, dfu_timer_expired, NULL);
    2eba:	490f      	ldr	r1, [pc, #60]	; (2ef8 <usb_dfu_init+0x50>)
    2ebc:	480f      	ldr	r0, [pc, #60]	; (2efc <usb_dfu_init+0x54>)
    2ebe:	2200      	movs	r2, #0
    2ec0:	f00a f952 	bl	d168 <k_timer_init>
	if (flash_area_open(dfu_data.flash_area_id, &fa)) {
    2ec4:	7828      	ldrb	r0, [r5, #0]
    2ec6:	a901      	add	r1, sp, #4
    2ec8:	f000 f9c6 	bl	3258 <flash_area_open>
    2ecc:	4604      	mov	r4, r0
    2ece:	b938      	cbnz	r0, 2ee0 <usb_dfu_init+0x38>
		return -EIO;
	}

	dfu_data.flash_upload_size = fa->fa_size;
    2ed0:	9801      	ldr	r0, [sp, #4]
    2ed2:	6883      	ldr	r3, [r0, #8]
    2ed4:	606b      	str	r3, [r5, #4]
	flash_area_close(fa);
    2ed6:	f008 ff63 	bl	bda0 <flash_area_close>

	return 0;
}
    2eda:	4620      	mov	r0, r4
    2edc:	b003      	add	sp, #12
    2ede:	bd30      	pop	{r4, r5, pc}
		return -EIO;
    2ee0:	f06f 0404 	mvn.w	r4, #4
    2ee4:	e7f9      	b.n	2eda <usb_dfu_init+0x32>
    2ee6:	bf00      	nop
    2ee8:	00002e1d 	.word	0x00002e1d
    2eec:	20001a5c 	.word	0x20001a5c
    2ef0:	20001a4c 	.word	0x20001a4c
    2ef4:	200000e4 	.word	0x200000e4
    2ef8:	00002d59 	.word	0x00002d59
    2efc:	20000738 	.word	0x20000738

00002f00 <dfu_status_cb>:
	switch (status) {
    2f00:	2901      	cmp	r1, #1
{
    2f02:	b508      	push	{r3, lr}
	switch (status) {
    2f04:	d116      	bne.n	2f34 <dfu_status_cb+0x34>
	z_impl_k_timer_stop(timer);
    2f06:	480c      	ldr	r0, [pc, #48]	; (2f38 <dfu_status_cb+0x38>)
    2f08:	f00a f93a 	bl	d180 <z_impl_k_timer_stop>
		if (dfu_data.state == appDETACH) {
    2f0c:	4b0b      	ldr	r3, [pc, #44]	; (2f3c <dfu_status_cb+0x3c>)
    2f0e:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
    2f12:	2a01      	cmp	r2, #1
    2f14:	d10e      	bne.n	2f34 <dfu_status_cb+0x34>
			dfu_data.state = dfuIDLE;
    2f16:	2202      	movs	r2, #2
    2f18:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
			dfu_config.usb_device_description =
    2f1c:	4b08      	ldr	r3, [pc, #32]	; (2f40 <dfu_status_cb+0x40>)
    2f1e:	4809      	ldr	r0, [pc, #36]	; (2f44 <dfu_status_cb+0x44>)
    2f20:	6018      	str	r0, [r3, #0]
			if (usb_set_config(dfu_config.usb_device_description)) {
    2f22:	f7ff f955 	bl	21d0 <usb_set_config>
    2f26:	b128      	cbz	r0, 2f34 <dfu_status_cb+0x34>
}
    2f28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				LOG_ERR("usb_set_config failed during USB "
    2f2c:	4806      	ldr	r0, [pc, #24]	; (2f48 <dfu_status_cb+0x48>)
    2f2e:	2145      	movs	r1, #69	; 0x45
    2f30:	f008 be53 	b.w	bbda <z_log_minimal_printk>
}
    2f34:	bd08      	pop	{r3, pc}
    2f36:	bf00      	nop
    2f38:	20000738 	.word	0x20000738
    2f3c:	200000e4 	.word	0x200000e4
    2f40:	200006ec 	.word	0x200006ec
    2f44:	20000629 	.word	0x20000629
    2f48:	0000e7a4 	.word	0x0000e7a4

00002f4c <dfu_class_handle_req>:
{
    2f4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2f50:	4615      	mov	r5, r2
    2f52:	f990 2000 	ldrsb.w	r2, [r0]
    2f56:	7843      	ldrb	r3, [r0, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2f58:	2a00      	cmp	r2, #0
{
    2f5a:	4607      	mov	r7, r0
    2f5c:	4688      	mov	r8, r1
	if (usb_reqtype_is_to_host(setup)) {
    2f5e:	f280 8096 	bge.w	308e <CONFIG_USB_DEVICE_VID+0xab>
	switch (setup->bRequest) {
    2f62:	2b03      	cmp	r3, #3
    2f64:	d01a      	beq.n	2f9c <dfu_class_handle_req+0x50>
    2f66:	2b05      	cmp	r3, #5
    2f68:	d039      	beq.n	2fde <dfu_class_handle_req+0x92>
    2f6a:	2b02      	cmp	r3, #2
    2f6c:	d152      	bne.n	3014 <CONFIG_USB_DEVICE_VID+0x31>
		if (dfu_check_app_state()) {
    2f6e:	f7ff fee7 	bl	2d40 <dfu_check_app_state>
    2f72:	2800      	cmp	r0, #0
    2f74:	d14e      	bne.n	3014 <CONFIG_USB_DEVICE_VID+0x31>
		switch (dfu_data.state) {
    2f76:	4e88      	ldr	r6, [pc, #544]	; (3198 <CONFIG_USB_DEVICE_VID+0x1b5>)
    2f78:	f896 2238 	ldrb.w	r2, [r6, #568]	; 0x238
    2f7c:	2a02      	cmp	r2, #2
    2f7e:	4634      	mov	r4, r6
    2f80:	d036      	beq.n	2ff0 <CONFIG_USB_DEVICE_VID+0xd>
    2f82:	2a09      	cmp	r2, #9
    2f84:	d036      	beq.n	2ff4 <CONFIG_USB_DEVICE_VID+0x11>
			LOG_ERR("DFU_UPLOAD wrong state %d", dfu_data.state);
    2f86:	4885      	ldr	r0, [pc, #532]	; (319c <CONFIG_USB_DEVICE_VID+0x1b9>)
    2f88:	2145      	movs	r1, #69	; 0x45
    2f8a:	f008 fe26 	bl	bbda <z_log_minimal_printk>
			dfu_data.state = dfuERROR;
    2f8e:	f640 630a 	movw	r3, #3594	; 0xe0a
    2f92:	f8a6 3238 	strh.w	r3, [r6, #568]	; 0x238
			dfu_reset_counters();
    2f96:	f7ff ff29 	bl	2dec <dfu_reset_counters>
			return -EINVAL;
    2f9a:	e03b      	b.n	3014 <CONFIG_USB_DEVICE_VID+0x31>
		if (dfu_data.state == dfuMANIFEST_SYNC) {
    2f9c:	4b7e      	ldr	r3, [pc, #504]	; (3198 <CONFIG_USB_DEVICE_VID+0x1b5>)
    2f9e:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
		(*data)[0] = dfu_data.status;
    2fa2:	f893 1239 	ldrb.w	r1, [r3, #569]	; 0x239
		if (dfu_data.state == dfuMANIFEST_SYNC) {
    2fa6:	2a06      	cmp	r2, #6
			dfu_data.state = dfuIDLE;
    2fa8:	bf04      	itt	eq
    2faa:	2202      	moveq	r2, #2
    2fac:	f883 2238 	strbeq.w	r2, [r3, #568]	; 0x238
		(*data)[0] = dfu_data.status;
    2fb0:	682a      	ldr	r2, [r5, #0]
    2fb2:	7011      	strb	r1, [r2, #0]
		sys_put_le16(dfu_data.bwPollTimeout, &(*data)[1]);
    2fb4:	f8b3 223c 	ldrh.w	r2, [r3, #572]	; 0x23c
    2fb8:	6829      	ldr	r1, [r5, #0]
	dst[0] = val;
    2fba:	704a      	strb	r2, [r1, #1]
	dst[1] = val >> 8;
    2fbc:	0a12      	lsrs	r2, r2, #8
    2fbe:	708a      	strb	r2, [r1, #2]
		(*data)[3] = 0U;
    2fc0:	682a      	ldr	r2, [r5, #0]
    2fc2:	2000      	movs	r0, #0
    2fc4:	70d0      	strb	r0, [r2, #3]
		(*data)[4] = dfu_data.state;
    2fc6:	682a      	ldr	r2, [r5, #0]
    2fc8:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
    2fcc:	7113      	strb	r3, [r2, #4]
		(*data)[5] = 0U;
    2fce:	682b      	ldr	r3, [r5, #0]
    2fd0:	7158      	strb	r0, [r3, #5]
		*data_len = 6;
    2fd2:	2306      	movs	r3, #6
    2fd4:	f8c8 3000 	str.w	r3, [r8]
}
    2fd8:	b004      	add	sp, #16
    2fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(*data)[0] = dfu_data.state;
    2fde:	4a6e      	ldr	r2, [pc, #440]	; (3198 <CONFIG_USB_DEVICE_VID+0x1b5>)
    2fe0:	682b      	ldr	r3, [r5, #0]
    2fe2:	f892 2238 	ldrb.w	r2, [r2, #568]	; 0x238
    2fe6:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    2fe8:	2301      	movs	r3, #1
    2fea:	600b      	str	r3, [r1, #0]
	return 0;
    2fec:	2000      	movs	r0, #0
    2fee:	e7f3      	b.n	2fd8 <dfu_class_handle_req+0x8c>
			dfu_reset_counters();
    2ff0:	f7ff fefc 	bl	2dec <dfu_reset_counters>
			if (!setup->wLength ||
    2ff4:	88f9      	ldrh	r1, [r7, #6]
    2ff6:	f8b4 323a 	ldrh.w	r3, [r4, #570]	; 0x23a
    2ffa:	887a      	ldrh	r2, [r7, #2]
    2ffc:	b109      	cbz	r1, 3002 <CONFIG_USB_DEVICE_VID+0x1f>
    2ffe:	429a      	cmp	r2, r3
    3000:	d00b      	beq.n	301a <CONFIG_USB_DEVICE_VID+0x37>
				LOG_ERR("DFU_UPLOAD block %d, expected %d, "
    3002:	9100      	str	r1, [sp, #0]
    3004:	4866      	ldr	r0, [pc, #408]	; (31a0 <CONFIG_USB_DEVICE_VID+0x1bd>)
    3006:	2145      	movs	r1, #69	; 0x45
    3008:	f008 fde7 	bl	bbda <z_log_minimal_printk>
				dfu_data.state = dfuERROR;
    300c:	f640 630a 	movw	r3, #3594	; 0xe0a
					dfu_data.state = dfuERROR;
    3010:	f8a4 3238 	strh.w	r3, [r4, #568]	; 0x238
			return -EINVAL;
    3014:	f06f 0015 	mvn.w	r0, #21
    3018:	e7de      	b.n	2fd8 <dfu_class_handle_req+0x8c>
			bytes_left = dfu_data.flash_upload_size -
    301a:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    301e:	1af6      	subs	r6, r6, r3
    3020:	428e      	cmp	r6, r1
    3022:	bf28      	it	cs
    3024:	460e      	movcs	r6, r1
			if (len > USB_DFU_MAX_XFER_SIZE) {
    3026:	2e80      	cmp	r6, #128	; 0x80
    3028:	d808      	bhi.n	303c <CONFIG_USB_DEVICE_VID+0x59>
			if (len) {
    302a:	b1ae      	cbz	r6, 3058 <CONFIG_USB_DEVICE_VID+0x75>
				ret = flash_area_open(dfu_data.flash_area_id,
    302c:	7820      	ldrb	r0, [r4, #0]
    302e:	a903      	add	r1, sp, #12
    3030:	f000 f912 	bl	3258 <flash_area_open>
				if (ret) {
    3034:	b120      	cbz	r0, 3040 <CONFIG_USB_DEVICE_VID+0x5d>
					dfu_data.state = dfuERROR;
    3036:	f240 230a 	movw	r3, #522	; 0x20a
    303a:	e7e9      	b.n	3010 <CONFIG_USB_DEVICE_VID+0x2d>
				len = USB_DFU_MAX_XFER_SIZE;
    303c:	2680      	movs	r6, #128	; 0x80
    303e:	e7f5      	b.n	302c <CONFIG_USB_DEVICE_VID+0x49>
				ret = flash_area_read(fa, dfu_data.bytes_sent,
    3040:	682a      	ldr	r2, [r5, #0]
    3042:	68a1      	ldr	r1, [r4, #8]
    3044:	9803      	ldr	r0, [sp, #12]
    3046:	4633      	mov	r3, r6
    3048:	f008 feab 	bl	bda2 <flash_area_read>
    304c:	4605      	mov	r5, r0
				flash_area_close(fa);
    304e:	9803      	ldr	r0, [sp, #12]
    3050:	f008 fea6 	bl	bda0 <flash_area_close>
				if (ret) {
    3054:	2d00      	cmp	r5, #0
    3056:	d1ee      	bne.n	3036 <CONFIG_USB_DEVICE_VID+0x53>
			dfu_data.block_nr++;
    3058:	f8b4 223a 	ldrh.w	r2, [r4, #570]	; 0x23a
			*data_len = len;
    305c:	f8c8 6000 	str.w	r6, [r8]
			dfu_data.bytes_sent += len;
    3060:	68a3      	ldr	r3, [r4, #8]
			dfu_data.block_nr++;
    3062:	3201      	adds	r2, #1
    3064:	f8a4 223a 	strh.w	r2, [r4, #570]	; 0x23a
			if (dfu_data.bytes_sent == dfu_data.flash_upload_size &&
    3068:	6862      	ldr	r2, [r4, #4]
			dfu_data.bytes_sent += len;
    306a:	4433      	add	r3, r6
			if (dfu_data.bytes_sent == dfu_data.flash_upload_size &&
    306c:	4293      	cmp	r3, r2
			dfu_data.bytes_sent += len;
    306e:	60a3      	str	r3, [r4, #8]
			if (dfu_data.bytes_sent == dfu_data.flash_upload_size &&
    3070:	d109      	bne.n	3086 <CONFIG_USB_DEVICE_VID+0xa3>
			    len < setup->wLength) {
    3072:	88fb      	ldrh	r3, [r7, #6]
			if (dfu_data.bytes_sent == dfu_data.flash_upload_size &&
    3074:	429e      	cmp	r6, r3
    3076:	d206      	bcs.n	3086 <CONFIG_USB_DEVICE_VID+0xa3>
				*data_len = 0;
    3078:	2000      	movs	r0, #0
				dfu_data.state = dfuIDLE;
    307a:	2302      	movs	r3, #2
				*data_len = 0;
    307c:	f8c8 0000 	str.w	r0, [r8]
				dfu_data.state = dfuIDLE;
    3080:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    3084:	e7a8      	b.n	2fd8 <dfu_class_handle_req+0x8c>
				dfu_data.state = dfuUPLOAD_IDLE;
    3086:	2309      	movs	r3, #9
    3088:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    308c:	e7ae      	b.n	2fec <CONFIG_USB_DEVICE_VID+0x9>
	switch (setup->bRequest) {
    308e:	2b06      	cmp	r3, #6
    3090:	d8c0      	bhi.n	3014 <CONFIG_USB_DEVICE_VID+0x31>
    3092:	a201      	add	r2, pc, #4	; (adr r2, 3098 <CONFIG_USB_DEVICE_VID+0xb5>)
    3094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3098:	00003143 	.word	0x00003143
    309c:	000030d5 	.word	0x000030d5
    30a0:	00003015 	.word	0x00003015
    30a4:	00003015 	.word	0x00003015
    30a8:	000030cb 	.word	0x000030cb
    30ac:	00003015 	.word	0x00003015
    30b0:	000030b5 	.word	0x000030b5
		if (dfu_check_app_state()) {
    30b4:	f7ff fe44 	bl	2d40 <dfu_check_app_state>
    30b8:	2800      	cmp	r0, #0
    30ba:	d1ab      	bne.n	3014 <CONFIG_USB_DEVICE_VID+0x31>
		dfu_reset_counters();
    30bc:	f7ff fe96 	bl	2dec <dfu_reset_counters>
		dfu_data.state = dfuIDLE;
    30c0:	4b35      	ldr	r3, [pc, #212]	; (3198 <CONFIG_USB_DEVICE_VID+0x1b5>)
    30c2:	2202      	movs	r2, #2
    30c4:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
		break;
    30c8:	e790      	b.n	2fec <CONFIG_USB_DEVICE_VID+0x9>
		if (dfu_check_app_state()) {
    30ca:	f7ff fe39 	bl	2d40 <dfu_check_app_state>
    30ce:	2800      	cmp	r0, #0
    30d0:	d0f6      	beq.n	30c0 <CONFIG_USB_DEVICE_VID+0xdd>
    30d2:	e79f      	b.n	3014 <CONFIG_USB_DEVICE_VID+0x31>
		if (dfu_check_app_state()) {
    30d4:	f7ff fe34 	bl	2d40 <dfu_check_app_state>
    30d8:	2800      	cmp	r0, #0
    30da:	d19b      	bne.n	3014 <CONFIG_USB_DEVICE_VID+0x31>
		switch (dfu_data.state) {
    30dc:	4c2e      	ldr	r4, [pc, #184]	; (3198 <CONFIG_USB_DEVICE_VID+0x1b5>)
    30de:	f894 6238 	ldrb.w	r6, [r4, #568]	; 0x238
    30e2:	2e02      	cmp	r6, #2
    30e4:	d00b      	beq.n	30fe <CONFIG_USB_DEVICE_VID+0x11b>
    30e6:	2e05      	cmp	r6, #5
    30e8:	d01a      	beq.n	3120 <CONFIG_USB_DEVICE_VID+0x13d>
			LOG_ERR("DFU_DNLOAD wrong state %d", dfu_data.state);
    30ea:	482e      	ldr	r0, [pc, #184]	; (31a4 <CONFIG_USB_DEVICE_VID+0x1c1>)
    30ec:	4632      	mov	r2, r6
    30ee:	2145      	movs	r1, #69	; 0x45
    30f0:	f008 fd73 	bl	bbda <z_log_minimal_printk>
			dfu_data.state = dfuERROR;
    30f4:	f640 630a 	movw	r3, #3594	; 0xe0a
    30f8:	f8a4 3238 	strh.w	r3, [r4, #568]	; 0x238
    30fc:	e74b      	b.n	2f96 <dfu_class_handle_req+0x4a>
			dfu_reset_counters();
    30fe:	f7ff fe75 	bl	2dec <dfu_reset_counters>
	z_impl_k_poll_signal_reset(sig);
    3102:	4829      	ldr	r0, [pc, #164]	; (31a8 <CONFIG_USB_DEVICE_VID+0x1c5>)
    3104:	f00a f9b2 	bl	d46c <z_impl_k_poll_signal_reset>
			if (dfu_data.flash_area_id != UPLOAD_FLASH_AREA_ID) {
    3108:	7823      	ldrb	r3, [r4, #0]
    310a:	2b05      	cmp	r3, #5
    310c:	d008      	beq.n	3120 <CONFIG_USB_DEVICE_VID+0x13d>
				dfu_data.state = dfuERROR;
    310e:	f240 330a 	movw	r3, #778	; 0x30a
				LOG_ERR("This area can not be overwritten");
    3112:	4826      	ldr	r0, [pc, #152]	; (31ac <CONFIG_USB_DEVICE_VID+0x1c9>)
				dfu_data.state = dfuERROR;
    3114:	f8a4 3238 	strh.w	r3, [r4, #568]	; 0x238
				LOG_ERR("This area can not be overwritten");
    3118:	2145      	movs	r1, #69	; 0x45
    311a:	f008 fd5e 	bl	bbda <z_log_minimal_printk>
    311e:	e765      	b.n	2fec <CONFIG_USB_DEVICE_VID+0x9>
			dfu_data_worker.worker_state = dfuDNLOAD_IDLE;
    3120:	4823      	ldr	r0, [pc, #140]	; (31b0 <CONFIG_USB_DEVICE_VID+0x1cd>)
			dfu_data.state = dfuDNBUSY;
    3122:	2304      	movs	r3, #4
    3124:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
			dfu_data_worker.worker_state = dfuDNLOAD_IDLE;
    3128:	f880 6080 	strb.w	r6, [r0, #128]	; 0x80
			dfu_data_worker.worker_len  = setup->wLength;
    312c:	88fa      	ldrh	r2, [r7, #6]
			memcpy(dfu_data_worker.buf, *data, setup->wLength);
    312e:	6829      	ldr	r1, [r5, #0]
			dfu_data_worker.worker_len  = setup->wLength;
    3130:	f8a0 2082 	strh.w	r2, [r0, #130]	; 0x82
			memcpy(dfu_data_worker.buf, *data, setup->wLength);
    3134:	f008 ff6b 	bl	c00e <memcpy>
			k_work_submit_to_queue(&USB_WORK_Q, &dfu_work);
    3138:	491e      	ldr	r1, [pc, #120]	; (31b4 <CONFIG_USB_DEVICE_VID+0x1d1>)
    313a:	481f      	ldr	r0, [pc, #124]	; (31b8 <CONFIG_USB_DEVICE_VID+0x1d5>)
    313c:	f009 fe7b 	bl	ce36 <k_work_submit_to_queue>
			break;
    3140:	e754      	b.n	2fec <CONFIG_USB_DEVICE_VID+0x9>
		if (dfu_data.state != appIDLE) {
    3142:	4b15      	ldr	r3, [pc, #84]	; (3198 <CONFIG_USB_DEVICE_VID+0x1b5>)
    3144:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
    3148:	b11a      	cbz	r2, 3152 <CONFIG_USB_DEVICE_VID+0x16f>
			dfu_data.state = appIDLE;
    314a:	2200      	movs	r2, #0
    314c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
			return -EINVAL;
    3150:	e760      	b.n	3014 <CONFIG_USB_DEVICE_VID+0x31>
		dfu_data.state = appDETACH;
    3152:	2201      	movs	r2, #1
    3154:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
		timeout = MIN(setup->wValue, CONFIG_USB_DFU_DETACH_TIMEOUT);
    3158:	8841      	ldrh	r1, [r0, #2]
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    315a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    315e:	bf28      	it	cs
    3160:	f44f 717a 	movcs.w	r1, #1000	; 0x3e8
    3164:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3168:	f240 34e7 	movw	r4, #999	; 0x3e7
    316c:	2500      	movs	r5, #0
    316e:	fbe1 4500 	umlal	r4, r5, r1, r0
    3172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3176:	2300      	movs	r3, #0
    3178:	4620      	mov	r0, r4
    317a:	4629      	mov	r1, r5
    317c:	f7fc ffc0 	bl	100 <__aeabi_uldivmod>
    3180:	4602      	mov	r2, r0
    3182:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    3184:	f04f 30ff 	mov.w	r0, #4294967295
    3188:	f04f 31ff 	mov.w	r1, #4294967295
    318c:	e9cd 0100 	strd	r0, r1, [sp]
    3190:	480a      	ldr	r0, [pc, #40]	; (31bc <CONFIG_USB_DEVICE_VID+0x1d9>)
    3192:	f006 f8bb 	bl	930c <z_impl_k_timer_start>
		break;
    3196:	e729      	b.n	2fec <CONFIG_USB_DEVICE_VID+0x9>
    3198:	200000e4 	.word	0x200000e4
    319c:	0000e805 	.word	0x0000e805
    31a0:	0000e7d7 	.word	0x0000e7d7
    31a4:	0000e84a 	.word	0x0000e84a
    31a8:	20001a4c 	.word	0x20001a4c
    31ac:	0000e824 	.word	0x0000e824
    31b0:	20002c2c 	.word	0x20002c2c
    31b4:	20001a5c 	.word	0x20001a5c
    31b8:	20000770 	.word	0x20000770
    31bc:	20000738 	.word	0x20000738

000031c0 <wait_for_usb_dfu>:
 * @brief Function to check and wait while the USB DFU is in progress.
 *
 * @return  N/A
 */
void wait_for_usb_dfu(k_timeout_t delay)
{
    31c0:	b570      	push	{r4, r5, r6, lr}
	uint64_t end = sys_clock_timeout_end_calc(delay);
    31c2:	f009 ffa8 	bl	d116 <sys_clock_timeout_end_calc>
	if ((dfu_data.state == dfuDNBUSY) ||
    31c6:	4e14      	ldr	r6, [pc, #80]	; (3218 <wait_for_usb_dfu+0x58>)
	uint64_t end = sys_clock_timeout_end_calc(delay);
    31c8:	4604      	mov	r4, r0
    31ca:	460d      	mov	r5, r1
	return z_impl_k_uptime_ticks();
    31cc:	f009 ff9d 	bl	d10a <z_impl_k_uptime_ticks>

	/* Wait for a prescribed duration of time. If DFU hasn't started within
	 * that time, stop waiting and proceed further.
	 */
	while (end > k_uptime_ticks()) {
    31d0:	42a9      	cmp	r1, r5
    31d2:	bf08      	it	eq
    31d4:	42a0      	cmpeq	r0, r4
    31d6:	d300      	bcc.n	31da <wait_for_usb_dfu+0x1a>
			break;
		}

		k_msleep(INTERMITTENT_CHECK_DELAY);
	}
}
    31d8:	bd70      	pop	{r4, r5, r6, pc}
	if ((dfu_data.state == dfuDNBUSY) ||
    31da:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
    31de:	3b04      	subs	r3, #4
    31e0:	2b01      	cmp	r3, #1
    31e2:	d905      	bls.n	31f0 <wait_for_usb_dfu+0x30>
	return z_impl_k_sleep(timeout);
    31e4:	2100      	movs	r1, #0
    31e6:	f240 6067 	movw	r0, #1639	; 0x667
    31ea:	f005 fe3d 	bl	8e68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    31ee:	e7ed      	b.n	31cc <wait_for_usb_dfu+0xc>
			k_poll_event_init(&dfu_event, K_POLL_TYPE_SIGNAL,
    31f0:	4b0a      	ldr	r3, [pc, #40]	; (321c <wait_for_usb_dfu+0x5c>)
    31f2:	480b      	ldr	r0, [pc, #44]	; (3220 <wait_for_usb_dfu+0x60>)
    31f4:	2200      	movs	r2, #0
    31f6:	2101      	movs	r1, #1
    31f8:	f00a f916 	bl	d428 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
    31fc:	2101      	movs	r1, #1
    31fe:	4808      	ldr	r0, [pc, #32]	; (3220 <wait_for_usb_dfu+0x60>)
    3200:	f04f 32ff 	mov.w	r2, #4294967295
    3204:	f04f 33ff 	mov.w	r3, #4294967295
    3208:	f006 f8e0 	bl	93cc <z_impl_k_poll>
}
    320c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_INF("USB DFU Completed");
    3210:	4804      	ldr	r0, [pc, #16]	; (3224 <wait_for_usb_dfu+0x64>)
    3212:	2149      	movs	r1, #73	; 0x49
    3214:	f008 bce1 	b.w	bbda <z_log_minimal_printk>
    3218:	200000e4 	.word	0x200000e4
    321c:	20001a4c 	.word	0x20001a4c
    3220:	20001a38 	.word	0x20001a38
    3224:	0000e869 	.word	0x0000e869

00003228 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    3228:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    322a:	2400      	movs	r4, #0
    322c:	4807      	ldr	r0, [pc, #28]	; (324c <z_usb_work_q_init+0x24>)
    322e:	4908      	ldr	r1, [pc, #32]	; (3250 <z_usb_work_q_init+0x28>)
    3230:	9400      	str	r4, [sp, #0]
    3232:	f04f 33ff 	mov.w	r3, #4294967295
    3236:	f44f 6280 	mov.w	r2, #1024	; 0x400
    323a:	f005 faf3 	bl	8824 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    323e:	4905      	ldr	r1, [pc, #20]	; (3254 <z_usb_work_q_init+0x2c>)
    3240:	4802      	ldr	r0, [pc, #8]	; (324c <z_usb_work_q_init+0x24>)
    3242:	f009 fd43 	bl	cccc <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    3246:	4620      	mov	r0, r4
    3248:	b002      	add	sp, #8
    324a:	bd10      	pop	{r4, pc}
    324c:	20000770 	.word	0x20000770
    3250:	20003400 	.word	0x20003400
    3254:	0000e888 	.word	0x0000e888

00003258 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    3258:	4b0c      	ldr	r3, [pc, #48]	; (328c <flash_area_open+0x34>)
    325a:	681b      	ldr	r3, [r3, #0]
{
    325c:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    325e:	b173      	cbz	r3, 327e <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    3260:	4a0b      	ldr	r2, [pc, #44]	; (3290 <flash_area_open+0x38>)
    3262:	6815      	ldr	r5, [r2, #0]
    3264:	2200      	movs	r2, #0
    3266:	42aa      	cmp	r2, r5
    3268:	db02      	blt.n	3270 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    326a:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
    326e:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    3270:	461c      	mov	r4, r3
    3272:	f813 6b10 	ldrb.w	r6, [r3], #16
    3276:	4286      	cmp	r6, r0
    3278:	d004      	beq.n	3284 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
    327a:	3201      	adds	r2, #1
    327c:	e7f3      	b.n	3266 <flash_area_open+0xe>
		return -EACCES;
    327e:	f06f 000c 	mvn.w	r0, #12
    3282:	e7f4      	b.n	326e <flash_area_open+0x16>
	*fap = area;
    3284:	600c      	str	r4, [r1, #0]
	return 0;
    3286:	2000      	movs	r0, #0
    3288:	e7f1      	b.n	326e <flash_area_open+0x16>
    328a:	bf00      	nop
    328c:	20000324 	.word	0x20000324
    3290:	0000d954 	.word	0x0000d954

00003294 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    3294:	b570      	push	{r4, r5, r6, lr}
    3296:	b088      	sub	sp, #32
    3298:	4605      	mov	r5, r0
    329a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    329c:	b2c0      	uxtb	r0, r0
    329e:	4669      	mov	r1, sp
{
    32a0:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    32a2:	f7ff ffd9 	bl	3258 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    32a6:	2800      	cmp	r0, #0
    32a8:	db1f      	blt.n	32ea <flash_area_get_sectors+0x56>
    32aa:	9b00      	ldr	r3, [sp, #0]
    32ac:	b1eb      	cbz	r3, 32ea <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    32ae:	685a      	ldr	r2, [r3, #4]
    32b0:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    32b2:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
    32b4:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    32b6:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
    32b8:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    32ba:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    32be:	2200      	movs	r2, #0
	cb_data->status = 0;
    32c0:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    32c4:	9205      	str	r2, [sp, #20]
    32c6:	f004 fe1f 	bl	7f08 <z_impl_device_get_binding>
    32ca:	4605      	mov	r5, r0
	flash_area_close(fa);
    32cc:	9800      	ldr	r0, [sp, #0]
    32ce:	f008 fd67 	bl	bda0 <flash_area_close>
	if (flash_dev == NULL) {
    32d2:	b16d      	cbz	r5, 32f0 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    32d4:	4628      	mov	r0, r5
    32d6:	4908      	ldr	r1, [pc, #32]	; (32f8 <flash_area_get_sectors+0x64>)
    32d8:	aa01      	add	r2, sp, #4
    32da:	f009 f845 	bl	c368 <flash_page_foreach>
	if (cb_data->status == 0) {
    32de:	9807      	ldr	r0, [sp, #28]
    32e0:	b908      	cbnz	r0, 32e6 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    32e2:	9b05      	ldr	r3, [sp, #20]
    32e4:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    32e6:	b008      	add	sp, #32
    32e8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    32ea:	f06f 0015 	mvn.w	r0, #21
    32ee:	e7fa      	b.n	32e6 <flash_area_get_sectors+0x52>
		return -ENODEV;
    32f0:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    32f4:	e7f7      	b.n	32e6 <flash_area_get_sectors+0x52>
    32f6:	bf00      	nop
    32f8:	0000bebf 	.word	0x0000bebf

000032fc <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
    32fc:	6842      	ldr	r2, [r0, #4]
    32fe:	680b      	ldr	r3, [r1, #0]
    3300:	4293      	cmp	r3, r2
{
    3302:	b510      	push	{r4, lr}
    3304:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
    3306:	d906      	bls.n	3316 <find_flash_total_size+0x1a>
		LOG_ERR("Buffer size is bigger than page");
    3308:	4805      	ldr	r0, [pc, #20]	; (3320 <find_flash_total_size+0x24>)
    330a:	2145      	movs	r1, #69	; 0x45
    330c:	f008 fc65 	bl	bbda <z_log_minimal_printk>
		ctx->total_size = 0;
    3310:	2000      	movs	r0, #0
    3312:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
    3314:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
    3316:	684b      	ldr	r3, [r1, #4]
    3318:	4413      	add	r3, r2
    331a:	604b      	str	r3, [r1, #4]
	return true;
    331c:	2001      	movs	r0, #1
    331e:	e7f9      	b.n	3314 <find_flash_total_size+0x18>
    3320:	0000e891 	.word	0x0000e891

00003324 <stream_flash_erase_page>:
{
    3324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3328:	4605      	mov	r5, r0
    332a:	b086      	sub	sp, #24
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
    332c:	68c0      	ldr	r0, [r0, #12]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    332e:	aa03      	add	r2, sp, #12
    3330:	f009 f816 	bl	c360 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
    3334:	4604      	mov	r4, r0
    3336:	b140      	cbz	r0, 334a <stream_flash_erase_page+0x26>
		LOG_ERR("Error %d while getting page info", rc);
    3338:	4602      	mov	r2, r0
    333a:	4816      	ldr	r0, [pc, #88]	; (3394 <stream_flash_erase_page+0x70>)
    333c:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Error %d while erasing page", rc);
    333e:	f008 fc4c 	bl	bbda <z_log_minimal_printk>
}
    3342:	4620      	mov	r0, r4
    3344:	b006      	add	sp, #24
    3346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
    334a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    334e:	6a2b      	ldr	r3, [r5, #32]
    3350:	4543      	cmp	r3, r8
    3352:	d0f6      	beq.n	3342 <stream_flash_erase_page+0x1e>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
    3354:	68ee      	ldr	r6, [r5, #12]
    3356:	9a04      	ldr	r2, [sp, #16]
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    3358:	68b7      	ldr	r7, [r6, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    335a:	68fb      	ldr	r3, [r7, #12]
    335c:	b953      	cbnz	r3, 3374 <stream_flash_erase_page+0x50>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    335e:	68bb      	ldr	r3, [r7, #8]
    3360:	4641      	mov	r1, r8
    3362:	4630      	mov	r0, r6
    3364:	4798      	blx	r3

	if (api->write_protection != NULL) {
    3366:	68fb      	ldr	r3, [r7, #12]
	rc = api->erase(dev, offset, size);
    3368:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    336a:	b97b      	cbnz	r3, 338c <stream_flash_erase_page+0x68>
	if (rc != 0) {
    336c:	b954      	cbnz	r4, 3384 <stream_flash_erase_page+0x60>
		ctx->last_erased_page_start_offset = page.start_offset;
    336e:	9b03      	ldr	r3, [sp, #12]
    3370:	622b      	str	r3, [r5, #32]
    3372:	e7e6      	b.n	3342 <stream_flash_erase_page+0x1e>
		rc = api->write_protection(dev, false);
    3374:	4601      	mov	r1, r0
    3376:	4630      	mov	r0, r6
    3378:	9201      	str	r2, [sp, #4]
    337a:	4798      	blx	r3
		if (rc) {
    337c:	9a01      	ldr	r2, [sp, #4]
    337e:	4604      	mov	r4, r0
    3380:	2800      	cmp	r0, #0
    3382:	d0ec      	beq.n	335e <stream_flash_erase_page+0x3a>
		LOG_ERR("Error %d while erasing page", rc);
    3384:	4804      	ldr	r0, [pc, #16]	; (3398 <stream_flash_erase_page+0x74>)
    3386:	4622      	mov	r2, r4
    3388:	2145      	movs	r1, #69	; 0x45
    338a:	e7d8      	b.n	333e <stream_flash_erase_page+0x1a>
		(void) api->write_protection(dev, true);
    338c:	2101      	movs	r1, #1
    338e:	4630      	mov	r0, r6
    3390:	4798      	blx	r3
    3392:	e7eb      	b.n	336c <stream_flash_erase_page+0x48>
    3394:	0000e8b6 	.word	0x0000e8b6
    3398:	0000e8dc 	.word	0x0000e8dc

0000339c <flash_sync>:
{
    339c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (ctx->buf_bytes == 0) {
    33a0:	6884      	ldr	r4, [r0, #8]
{
    33a2:	4605      	mov	r5, r0
	if (ctx->buf_bytes == 0) {
    33a4:	b174      	cbz	r4, 33c4 <flash_sync+0x28>
	size_t write_addr = ctx->offset + ctx->bytes_written;
    33a6:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
    33aa:	3c01      	subs	r4, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
    33ac:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
    33ae:	19a1      	adds	r1, r4, r6
    33b0:	f7ff ffb8 	bl	3324 <stream_flash_erase_page>
		if (rc < 0) {
    33b4:	1e04      	subs	r4, r0, #0
    33b6:	da09      	bge.n	33cc <flash_sync+0x30>
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
    33b8:	483a      	ldr	r0, [pc, #232]	; (34a4 <flash_sync+0x108>)
    33ba:	4633      	mov	r3, r6
    33bc:	4622      	mov	r2, r4
    33be:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
    33c0:	f008 fc0b 	bl	bbda <z_log_minimal_printk>
}
    33c4:	4620      	mov	r0, r4
    33c6:	b002      	add	sp, #8
    33c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fill_length = flash_get_write_block_size(ctx->fdev);
    33cc:	68e8      	ldr	r0, [r5, #12]
		/* coverity[OVERRUN] */
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
    33ce:	f008 fd94 	bl	befa <z_impl_flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
    33d2:	68aa      	ldr	r2, [r5, #8]
    33d4:	fbb2 f4f0 	udiv	r4, r2, r0
    33d8:	fb00 2414 	mls	r4, r0, r4, r2
    33dc:	b15c      	cbz	r4, 33f6 <flash_sync+0x5a>
		fill_length -= ctx->buf_bytes % fill_length;
    33de:	1b04      	subs	r4, r0, r4
		filler = flash_get_parameters(ctx->fdev)->erase_value;
    33e0:	68e8      	ldr	r0, [r5, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    33e2:	6883      	ldr	r3, [r0, #8]
    33e4:	691b      	ldr	r3, [r3, #16]
    33e6:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
    33e8:	682f      	ldr	r7, [r5, #0]
    33ea:	68ab      	ldr	r3, [r5, #8]
    33ec:	7901      	ldrb	r1, [r0, #4]
    33ee:	4622      	mov	r2, r4
    33f0:	18f8      	adds	r0, r7, r3
    33f2:	f008 fe17 	bl	c024 <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
    33f6:	68ab      	ldr	r3, [r5, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
    33f8:	68ef      	ldr	r7, [r5, #12]
    33fa:	682a      	ldr	r2, [r5, #0]
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
    33fc:	4423      	add	r3, r4
	const struct flash_driver_api *api =
    33fe:	f8d7 8008 	ldr.w	r8, [r7, #8]
	if (api->write_protection != NULL) {
    3402:	f8d8 400c 	ldr.w	r4, [r8, #12]
    3406:	b99c      	cbnz	r4, 3430 <flash_sync+0x94>
	rc = api->write(dev, offset, data, len);
    3408:	f8d8 4004 	ldr.w	r4, [r8, #4]
    340c:	4631      	mov	r1, r6
    340e:	4638      	mov	r0, r7
    3410:	47a0      	blx	r4
	if (api->write_protection != NULL) {
    3412:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
    3416:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    3418:	b9cb      	cbnz	r3, 344e <flash_sync+0xb2>
	if (rc != 0) {
    341a:	b99c      	cbnz	r4, 3444 <flash_sync+0xa8>
	if (ctx->callback) {
    341c:	69eb      	ldr	r3, [r5, #28]
    341e:	2b00      	cmp	r3, #0
    3420:	d12f      	bne.n	3482 <flash_sync+0xe6>
	ctx->bytes_written += ctx->buf_bytes;
    3422:	692b      	ldr	r3, [r5, #16]
    3424:	68aa      	ldr	r2, [r5, #8]
    3426:	4413      	add	r3, r2
    3428:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
    342a:	2300      	movs	r3, #0
    342c:	60ab      	str	r3, [r5, #8]
	return rc;
    342e:	e7c9      	b.n	33c4 <flash_sync+0x28>
		rc = api->write_protection(dev, false);
    3430:	2100      	movs	r1, #0
    3432:	4638      	mov	r0, r7
    3434:	e9cd 2300 	strd	r2, r3, [sp]
    3438:	47a0      	blx	r4
		if (rc) {
    343a:	e9dd 2300 	ldrd	r2, r3, [sp]
    343e:	4604      	mov	r4, r0
    3440:	2800      	cmp	r0, #0
    3442:	d0e1      	beq.n	3408 <flash_sync+0x6c>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
    3444:	4818      	ldr	r0, [pc, #96]	; (34a8 <flash_sync+0x10c>)
    3446:	4633      	mov	r3, r6
    3448:	4622      	mov	r2, r4
    344a:	2145      	movs	r1, #69	; 0x45
    344c:	e7b8      	b.n	33c0 <flash_sync+0x24>
		(void) api->write_protection(dev, true);
    344e:	2101      	movs	r1, #1
    3450:	4638      	mov	r0, r7
    3452:	4798      	blx	r3
    3454:	e7e1      	b.n	341a <flash_sync+0x7e>
			ctx->buf[i] = ~ctx->buf[i];
    3456:	5c53      	ldrb	r3, [r2, r1]
    3458:	43db      	mvns	r3, r3
    345a:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
    345c:	3101      	adds	r1, #1
    345e:	68ab      	ldr	r3, [r5, #8]
    3460:	682a      	ldr	r2, [r5, #0]
    3462:	428b      	cmp	r3, r1
    3464:	d8f7      	bhi.n	3456 <flash_sync+0xba>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
    3466:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
    3468:	6881      	ldr	r1, [r0, #8]
    346a:	680f      	ldr	r7, [r1, #0]
    346c:	4631      	mov	r1, r6
    346e:	47b8      	blx	r7
		if (rc != 0) {
    3470:	4607      	mov	r7, r0
    3472:	b140      	cbz	r0, 3486 <flash_sync+0xea>
			LOG_ERR("flash read failed: %d", rc);
    3474:	4602      	mov	r2, r0
    3476:	2145      	movs	r1, #69	; 0x45
    3478:	480c      	ldr	r0, [pc, #48]	; (34ac <flash_sync+0x110>)
    347a:	f008 fbae 	bl	bbda <z_log_minimal_printk>
			return rc;
    347e:	463c      	mov	r4, r7
    3480:	e7a0      	b.n	33c4 <flash_sync+0x28>
		for (int i = 0; i < ctx->buf_bytes; i++) {
    3482:	4621      	mov	r1, r4
    3484:	e7eb      	b.n	345e <flash_sync+0xc2>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
    3486:	4632      	mov	r2, r6
    3488:	69eb      	ldr	r3, [r5, #28]
    348a:	68a9      	ldr	r1, [r5, #8]
    348c:	6828      	ldr	r0, [r5, #0]
    348e:	4798      	blx	r3
		if (rc != 0) {
    3490:	4606      	mov	r6, r0
    3492:	2800      	cmp	r0, #0
    3494:	d0c5      	beq.n	3422 <flash_sync+0x86>
			LOG_ERR("callback failed: %d", rc);
    3496:	4602      	mov	r2, r0
    3498:	2145      	movs	r1, #69	; 0x45
    349a:	4805      	ldr	r0, [pc, #20]	; (34b0 <flash_sync+0x114>)
    349c:	f008 fb9d 	bl	bbda <z_log_minimal_printk>
			return rc;
    34a0:	4634      	mov	r4, r6
    34a2:	e78f      	b.n	33c4 <flash_sync+0x28>
    34a4:	0000e8fd 	.word	0x0000e8fd
    34a8:	0000e930 	.word	0x0000e930
    34ac:	0000e959 	.word	0x0000e959
    34b0:	0000e974 	.word	0x0000e974

000034b4 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
    34b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    34b8:	460d      	mov	r5, r1
    34ba:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
    34be:	4691      	mov	r9, r2
    34c0:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
    34c2:	4604      	mov	r4, r0
    34c4:	b920      	cbnz	r0, 34d0 <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
    34c6:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
    34ca:	b003      	add	sp, #12
    34cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
    34d0:	2900      	cmp	r1, #0
    34d2:	d0f8      	beq.n	34c6 <stream_flash_init+0x12>
    34d4:	2a00      	cmp	r2, #0
    34d6:	d0f6      	beq.n	34c6 <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
    34d8:	9300      	str	r3, [sp, #0]
    34da:	2300      	movs	r3, #0
    34dc:	9301      	str	r3, [sp, #4]
    34de:	4608      	mov	r0, r1
    34e0:	f008 fd0b 	bl	befa <z_impl_flash_get_write_block_size>
	if (buf_len % flash_get_write_block_size(fdev)) {
    34e4:	fbb7 f3f0 	udiv	r3, r7, r0
    34e8:	fb03 7010 	mls	r0, r3, r0, r7
    34ec:	b120      	cbz	r0, 34f8 <stream_flash_init+0x44>
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
    34ee:	4818      	ldr	r0, [pc, #96]	; (3550 <stream_flash_init+0x9c>)
    34f0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Incorrect parameter");
    34f2:	f008 fb72 	bl	bbda <z_log_minimal_printk>
    34f6:	e7e6      	b.n	34c6 <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
    34f8:	4916      	ldr	r1, [pc, #88]	; (3554 <stream_flash_init+0xa0>)
    34fa:	466a      	mov	r2, sp
    34fc:	4628      	mov	r0, r5
    34fe:	f008 ff33 	bl	c368 <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
    3502:	9b01      	ldr	r3, [sp, #4]
    3504:	2b00      	cmp	r3, #0
    3506:	d0de      	beq.n	34c6 <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
    3508:	eb08 0206 	add.w	r2, r8, r6
    350c:	4293      	cmp	r3, r2
    350e:	d202      	bcs.n	3516 <stream_flash_init+0x62>
		LOG_ERR("Incorrect parameter");
    3510:	4811      	ldr	r0, [pc, #68]	; (3558 <stream_flash_init+0xa4>)
    3512:	2145      	movs	r1, #69	; 0x45
    3514:	e7ed      	b.n	34f2 <stream_flash_init+0x3e>
    3516:	4628      	mov	r0, r5
    3518:	f008 fcef 	bl	befa <z_impl_flash_get_write_block_size>
	    offset % flash_get_write_block_size(fdev)) {
    351c:	fbb8 f3f0 	udiv	r3, r8, r0
    3520:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
    3524:	2800      	cmp	r0, #0
    3526:	d1f3      	bne.n	3510 <stream_flash_init+0x5c>
	ctx->buf_len = buf_len;
    3528:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
    352c:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
    352e:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
    3530:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
    3532:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
    3536:	b916      	cbnz	r6, 353e <stream_flash_init+0x8a>
    3538:	9e01      	ldr	r6, [sp, #4]
    353a:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
    353e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3540:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
    3542:	f04f 33ff 	mov.w	r3, #4294967295
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
    3546:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
    3548:	6223      	str	r3, [r4, #32]
	return 0;
    354a:	2000      	movs	r0, #0
    354c:	e7bd      	b.n	34ca <stream_flash_init+0x16>
    354e:	bf00      	nop
    3550:	0000e98d 	.word	0x0000e98d
    3554:	000032fd 	.word	0x000032fd
    3558:	0000e9c9 	.word	0x0000e9c9

0000355c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    355c:	4801      	ldr	r0, [pc, #4]	; (3564 <nrf_cc3xx_platform_abort_init+0x8>)
    355e:	f006 b841 	b.w	95e4 <nrf_cc3xx_platform_set_abort>
    3562:	bf00      	nop
    3564:	0000d958 	.word	0x0000d958

00003568 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3568:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    356a:	b1d0      	cbz	r0, 35a2 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    356c:	6843      	ldr	r3, [r0, #4]
    356e:	2b04      	cmp	r3, #4
    3570:	d111      	bne.n	3596 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3572:	2200      	movs	r2, #0
    3574:	6803      	ldr	r3, [r0, #0]
    3576:	f3bf 8f5b 	dmb	ish
    357a:	e853 1f00 	ldrex	r1, [r3]
    357e:	2901      	cmp	r1, #1
    3580:	d103      	bne.n	358a <mutex_unlock_platform+0x22>
    3582:	e843 2000 	strex	r0, r2, [r3]
    3586:	2800      	cmp	r0, #0
    3588:	d1f7      	bne.n	357a <mutex_unlock_platform+0x12>
    358a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    358e:	4807      	ldr	r0, [pc, #28]	; (35ac <mutex_unlock_platform+0x44>)
    3590:	bf08      	it	eq
    3592:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    3594:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3596:	b13b      	cbz	r3, 35a8 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3598:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    359a:	f004 ff8b 	bl	84b4 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    359e:	2000      	movs	r0, #0
    35a0:	e7f8      	b.n	3594 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    35a2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    35a6:	e7f5      	b.n	3594 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    35a8:	4801      	ldr	r0, [pc, #4]	; (35b0 <mutex_unlock_platform+0x48>)
    35aa:	e7f3      	b.n	3594 <mutex_unlock_platform+0x2c>
    35ac:	ffff8fe9 	.word	0xffff8fe9
    35b0:	ffff8fea 	.word	0xffff8fea

000035b4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    35b4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    35b6:	4604      	mov	r4, r0
    35b8:	b918      	cbnz	r0, 35c2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    35ba:	4b0d      	ldr	r3, [pc, #52]	; (35f0 <mutex_free_platform+0x3c>)
    35bc:	480d      	ldr	r0, [pc, #52]	; (35f4 <mutex_free_platform+0x40>)
    35be:	685b      	ldr	r3, [r3, #4]
    35c0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    35c2:	6861      	ldr	r1, [r4, #4]
    35c4:	2908      	cmp	r1, #8
    35c6:	d00d      	beq.n	35e4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    35c8:	f031 0304 	bics.w	r3, r1, #4
    35cc:	d00a      	beq.n	35e4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    35ce:	f011 0102 	ands.w	r1, r1, #2
    35d2:	d008      	beq.n	35e6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    35d4:	4808      	ldr	r0, [pc, #32]	; (35f8 <mutex_free_platform+0x44>)
    35d6:	4621      	mov	r1, r4
    35d8:	f009 fb49 	bl	cc6e <k_mem_slab_free>
        mutex->mutex = NULL;
    35dc:	2300      	movs	r3, #0
    35de:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    35e0:	2300      	movs	r3, #0
    35e2:	6063      	str	r3, [r4, #4]
}
    35e4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    35e6:	6820      	ldr	r0, [r4, #0]
    35e8:	2214      	movs	r2, #20
    35ea:	f008 fd1b 	bl	c024 <memset>
    35ee:	e7f7      	b.n	35e0 <mutex_free_platform+0x2c>
    35f0:	20000434 	.word	0x20000434
    35f4:	0000e9ef 	.word	0x0000e9ef
    35f8:	20001a6c 	.word	0x20001a6c

000035fc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    35fc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    35fe:	4604      	mov	r4, r0
    3600:	b918      	cbnz	r0, 360a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3602:	4b16      	ldr	r3, [pc, #88]	; (365c <mutex_init_platform+0x60>)
    3604:	4816      	ldr	r0, [pc, #88]	; (3660 <mutex_init_platform+0x64>)
    3606:	685b      	ldr	r3, [r3, #4]
    3608:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    360a:	6863      	ldr	r3, [r4, #4]
    360c:	2b04      	cmp	r3, #4
    360e:	d023      	beq.n	3658 <mutex_init_platform+0x5c>
    3610:	2b08      	cmp	r3, #8
    3612:	d021      	beq.n	3658 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3614:	b9cb      	cbnz	r3, 364a <mutex_init_platform+0x4e>
    3616:	6823      	ldr	r3, [r4, #0]
    3618:	b9bb      	cbnz	r3, 364a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    361a:	4812      	ldr	r0, [pc, #72]	; (3664 <mutex_init_platform+0x68>)
    361c:	f04f 32ff 	mov.w	r2, #4294967295
    3620:	f04f 33ff 	mov.w	r3, #4294967295
    3624:	4621      	mov	r1, r4
    3626:	f004 fddb 	bl	81e0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    362a:	b908      	cbnz	r0, 3630 <mutex_init_platform+0x34>
    362c:	6823      	ldr	r3, [r4, #0]
    362e:	b91b      	cbnz	r3, 3638 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3630:	4b0a      	ldr	r3, [pc, #40]	; (365c <mutex_init_platform+0x60>)
    3632:	480d      	ldr	r0, [pc, #52]	; (3668 <mutex_init_platform+0x6c>)
    3634:	685b      	ldr	r3, [r3, #4]
    3636:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3638:	6820      	ldr	r0, [r4, #0]
    363a:	2214      	movs	r2, #20
    363c:	2100      	movs	r1, #0
    363e:	f008 fcf1 	bl	c024 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3642:	6863      	ldr	r3, [r4, #4]
    3644:	f043 0302 	orr.w	r3, r3, #2
    3648:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    364a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    364c:	f009 fb51 	bl	ccf2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3650:	6863      	ldr	r3, [r4, #4]
    3652:	f043 0301 	orr.w	r3, r3, #1
    3656:	6063      	str	r3, [r4, #4]
}
    3658:	bd10      	pop	{r4, pc}
    365a:	bf00      	nop
    365c:	20000434 	.word	0x20000434
    3660:	0000e9ef 	.word	0x0000e9ef
    3664:	20001a6c 	.word	0x20001a6c
    3668:	0000ea15 	.word	0x0000ea15

0000366c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    366c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    366e:	b308      	cbz	r0, 36b4 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    3670:	6843      	ldr	r3, [r0, #4]
    3672:	2b04      	cmp	r3, #4
    3674:	d110      	bne.n	3698 <mutex_lock_platform+0x2c>
    3676:	2201      	movs	r2, #1
    3678:	6803      	ldr	r3, [r0, #0]
    367a:	f3bf 8f5b 	dmb	ish
    367e:	e853 1f00 	ldrex	r1, [r3]
    3682:	2900      	cmp	r1, #0
    3684:	d103      	bne.n	368e <mutex_lock_platform+0x22>
    3686:	e843 2000 	strex	r0, r2, [r3]
    368a:	2800      	cmp	r0, #0
    368c:	d1f7      	bne.n	367e <mutex_lock_platform+0x12>
    368e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3692:	d10b      	bne.n	36ac <mutex_lock_platform+0x40>
    3694:	2000      	movs	r0, #0
}
    3696:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3698:	b153      	cbz	r3, 36b0 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    369a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    369c:	f04f 32ff 	mov.w	r2, #4294967295
    36a0:	f04f 33ff 	mov.w	r3, #4294967295
    36a4:	f004 fe88 	bl	83b8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    36a8:	2800      	cmp	r0, #0
    36aa:	d0f3      	beq.n	3694 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    36ac:	4803      	ldr	r0, [pc, #12]	; (36bc <mutex_lock_platform+0x50>)
    36ae:	e7f2      	b.n	3696 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    36b0:	4803      	ldr	r0, [pc, #12]	; (36c0 <mutex_lock_platform+0x54>)
    36b2:	e7f0      	b.n	3696 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    36b4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    36b8:	e7ed      	b.n	3696 <mutex_lock_platform+0x2a>
    36ba:	bf00      	nop
    36bc:	ffff8fe9 	.word	0xffff8fe9
    36c0:	ffff8fea 	.word	0xffff8fea

000036c4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    36c4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    36c6:	4906      	ldr	r1, [pc, #24]	; (36e0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    36c8:	4806      	ldr	r0, [pc, #24]	; (36e4 <nrf_cc3xx_platform_mutex_init+0x20>)
    36ca:	2340      	movs	r3, #64	; 0x40
    36cc:	2214      	movs	r2, #20
    36ce:	f009 fab3 	bl	cc38 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    36d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    36d6:	4904      	ldr	r1, [pc, #16]	; (36e8 <nrf_cc3xx_platform_mutex_init+0x24>)
    36d8:	4804      	ldr	r0, [pc, #16]	; (36ec <nrf_cc3xx_platform_mutex_init+0x28>)
    36da:	f005 bfe5 	b.w	96a8 <nrf_cc3xx_platform_set_mutexes>
    36de:	bf00      	nop
    36e0:	20001a88 	.word	0x20001a88
    36e4:	20001a6c 	.word	0x20001a6c
    36e8:	0000d970 	.word	0x0000d970
    36ec:	0000d960 	.word	0x0000d960

000036f0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    36f0:	4901      	ldr	r1, [pc, #4]	; (36f8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    36f2:	2210      	movs	r2, #16
	str	r2, [r1]
    36f4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    36f6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    36f8:	e000ed10 	.word	0xe000ed10

000036fc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    36fc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    36fe:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3700:	f380 8811 	msr	BASEPRI, r0
	isb
    3704:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3708:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    370c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    370e:	b662      	cpsie	i
	isb
    3710:	f3bf 8f6f 	isb	sy

	bx	lr
    3714:	4770      	bx	lr
    3716:	bf00      	nop

00003718 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3718:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    371a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    371c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3720:	bf20      	wfe

	msr	BASEPRI, r0
    3722:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3726:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3728:	4770      	bx	lr
    372a:	bf00      	nop

0000372c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3730:	4607      	mov	r7, r0
    3732:	b086      	sub	sp, #24

	if (esf != NULL) {
    3734:	460c      	mov	r4, r1
    3736:	2900      	cmp	r1, #0
    3738:	d04a      	beq.n	37d0 <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    373a:	688b      	ldr	r3, [r1, #8]
    373c:	9300      	str	r3, [sp, #0]
    373e:	e9d1 2300 	ldrd	r2, r3, [r1]
    3742:	4827      	ldr	r0, [pc, #156]	; (37e0 <z_arm_fatal_error+0xb4>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    3744:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 37f4 <z_arm_fatal_error+0xc8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3748:	2145      	movs	r1, #69	; 0x45
    374a:	f008 fa46 	bl	bbda <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    374e:	6963      	ldr	r3, [r4, #20]
    3750:	9300      	str	r3, [sp, #0]
    3752:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    3756:	4823      	ldr	r0, [pc, #140]	; (37e4 <z_arm_fatal_error+0xb8>)
    3758:	2145      	movs	r1, #69	; 0x45
    375a:	f008 fa3e 	bl	bbda <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    375e:	69e2      	ldr	r2, [r4, #28]
    3760:	4821      	ldr	r0, [pc, #132]	; (37e8 <z_arm_fatal_error+0xbc>)
    3762:	2145      	movs	r1, #69	; 0x45
    3764:	f008 fa39 	bl	bbda <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
    3768:	4626      	mov	r6, r4
    376a:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    376c:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
    3770:	ed96 7a08 	vldr	s14, [r6, #32]
    3774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3778:	1ceb      	adds	r3, r5, #3
    377a:	9304      	str	r3, [sp, #16]
    377c:	edcd 7a05 	vstr	s15, [sp, #20]
    3780:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
    3784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3788:	1cab      	adds	r3, r5, #2
    378a:	9302      	str	r3, [sp, #8]
    378c:	edcd 7a03 	vstr	s15, [sp, #12]
    3790:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    3794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3798:	1c6b      	adds	r3, r5, #1
    379a:	edcd 7a01 	vstr	s15, [sp, #4]
    379e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    37a2:	9300      	str	r3, [sp, #0]
    37a4:	462a      	mov	r2, r5
    37a6:	ee17 3a90 	vmov	r3, s15
    37aa:	2145      	movs	r1, #69	; 0x45
    37ac:	4640      	mov	r0, r8
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
    37ae:	3504      	adds	r5, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    37b0:	f008 fa13 	bl	bbda <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
    37b4:	2d10      	cmp	r5, #16
    37b6:	f106 0610 	add.w	r6, r6, #16
    37ba:	d1d7      	bne.n	376c <z_arm_fatal_error+0x40>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    37bc:	6e22      	ldr	r2, [r4, #96]	; 0x60
    37be:	480b      	ldr	r0, [pc, #44]	; (37ec <z_arm_fatal_error+0xc0>)
    37c0:	2145      	movs	r1, #69	; 0x45
    37c2:	f008 fa0a 	bl	bbda <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    37c6:	69a2      	ldr	r2, [r4, #24]
    37c8:	4809      	ldr	r0, [pc, #36]	; (37f0 <z_arm_fatal_error+0xc4>)
    37ca:	2145      	movs	r1, #69	; 0x45
    37cc:	f008 fa05 	bl	bbda <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    37d0:	4621      	mov	r1, r4
    37d2:	4638      	mov	r0, r7
}
    37d4:	b006      	add	sp, #24
    37d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_fatal_error(reason, esf);
    37da:	f004 bbc1 	b.w	7f60 <z_fatal_error>
    37de:	bf00      	nop
    37e0:	0000ea42 	.word	0x0000ea42
    37e4:	0000ea76 	.word	0x0000ea76
    37e8:	0000eaaa 	.word	0x0000eaaa
    37ec:	0000eb06 	.word	0x0000eb06
    37f0:	0000eb1a 	.word	0x0000eb1a
    37f4:	0000eabe 	.word	0x0000eabe

000037f8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    37f8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    37fa:	2b00      	cmp	r3, #0
    37fc:	db08      	blt.n	3810 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    37fe:	2201      	movs	r2, #1
    3800:	f000 001f 	and.w	r0, r0, #31
    3804:	fa02 f000 	lsl.w	r0, r2, r0
    3808:	095b      	lsrs	r3, r3, #5
    380a:	4a02      	ldr	r2, [pc, #8]	; (3814 <arch_irq_enable+0x1c>)
    380c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3810:	4770      	bx	lr
    3812:	bf00      	nop
    3814:	e000e100 	.word	0xe000e100

00003818 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3818:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    381a:	2b00      	cmp	r3, #0
    381c:	db0d      	blt.n	383a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    381e:	2201      	movs	r2, #1
    3820:	095b      	lsrs	r3, r3, #5
    3822:	f000 001f 	and.w	r0, r0, #31
    3826:	fa02 f000 	lsl.w	r0, r2, r0
    382a:	3320      	adds	r3, #32
    382c:	4a03      	ldr	r2, [pc, #12]	; (383c <arch_irq_disable+0x24>)
    382e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3832:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3836:	f3bf 8f6f 	isb	sy
}
    383a:	4770      	bx	lr
    383c:	e000e100 	.word	0xe000e100

00003840 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3840:	4b05      	ldr	r3, [pc, #20]	; (3858 <arch_irq_is_enabled+0x18>)
    3842:	0942      	lsrs	r2, r0, #5
    3844:	f000 001f 	and.w	r0, r0, #31
    3848:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    384c:	2301      	movs	r3, #1
    384e:	fa03 f000 	lsl.w	r0, r3, r0
}
    3852:	4010      	ands	r0, r2
    3854:	4770      	bx	lr
    3856:	bf00      	nop
    3858:	e000e100 	.word	0xe000e100

0000385c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    385c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    385e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3860:	bfa8      	it	ge
    3862:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3866:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    386a:	bfb8      	it	lt
    386c:	4b06      	ldrlt	r3, [pc, #24]	; (3888 <z_arm_irq_priority_set+0x2c>)
    386e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3872:	bfac      	ite	ge
    3874:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3878:	f000 000f 	andlt.w	r0, r0, #15
    387c:	b2c9      	uxtb	r1, r1
    387e:	bfb4      	ite	lt
    3880:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3882:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    3886:	4770      	bx	lr
    3888:	e000ed14 	.word	0xe000ed14

0000388c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    388c:	bf30      	wfi
    b z_SysNmiOnReset
    388e:	f7ff bffd 	b.w	388c <z_SysNmiOnReset>
    3892:	bf00      	nop

00003894 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3894:	4a14      	ldr	r2, [pc, #80]	; (38e8 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3896:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3898:	4b14      	ldr	r3, [pc, #80]	; (38ec <z_arm_prep_c+0x58>)
    389a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    389e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    38a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    38a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    38ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    38b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    38b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    38b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    38bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    38c0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    38c4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    38c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38cc:	f3bf 8f6f 	isb	sy
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    38d0:	2300      	movs	r3, #0
    38d2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    38d6:	f004 fbd5 	bl	8084 <z_bss_zero>
	z_data_copy();
    38da:	f005 fb59 	bl	8f90 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    38de:	f000 fb3b 	bl	3f58 <z_arm_interrupt_init>
	z_cstart();
    38e2:	f004 fbd9 	bl	8098 <z_cstart>
    38e6:	bf00      	nop
    38e8:	00000000 	.word	0x00000000
    38ec:	e000ed00 	.word	0xe000ed00

000038f0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    38f0:	4a09      	ldr	r2, [pc, #36]	; (3918 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    38f2:	490a      	ldr	r1, [pc, #40]	; (391c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    38f4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    38f6:	6809      	ldr	r1, [r1, #0]
    38f8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    38fa:	4909      	ldr	r1, [pc, #36]	; (3920 <arch_swap+0x30>)
	_current->arch.basepri = key;
    38fc:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    38fe:	684b      	ldr	r3, [r1, #4]
    3900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3904:	604b      	str	r3, [r1, #4]
    3906:	2300      	movs	r3, #0
    3908:	f383 8811 	msr	BASEPRI, r3
    390c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3910:	6893      	ldr	r3, [r2, #8]
}
    3912:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3914:	4770      	bx	lr
    3916:	bf00      	nop
    3918:	20002bd4 	.word	0x20002bd4
    391c:	0000db84 	.word	0x0000db84
    3920:	e000ed00 	.word	0xe000ed00

00003924 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3924:	4921      	ldr	r1, [pc, #132]	; (39ac <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3926:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    3928:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    392c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3930:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3932:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3936:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    393a:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    393e:	d103      	bne.n	3948 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    3940:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
    3944:	ec80 8a10 	vstmia	r0, {s16-s31}

00003948 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3948:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    394a:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    394e:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3952:	4f17      	ldr	r7, [pc, #92]	; (39b0 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3954:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3958:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    395a:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    395c:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    395e:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3962:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    3964:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3966:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3968:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    396c:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    3970:	d003      	beq.n	397a <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    3972:	2300      	movs	r3, #0
    vmsr fpscr, r3
    3974:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    3978:	e003      	b.n	3982 <in_fp_endif>

0000397a <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    397a:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
    397e:	ec90 8a10 	vldmia	r0, {s16-s31}

00003982 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    3982:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    3986:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    398a:	f383 8814 	msr	CONTROL, r3
    isb
    398e:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3992:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3994:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3996:	f000 fb75 	bl	4084 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    399a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    399e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    39a2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    39a6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    39aa:	4770      	bx	lr
    ldr r1, =_kernel
    39ac:	20002bd4 	.word	0x20002bd4
    ldr v4, =_SCS_ICSR
    39b0:	e000ed04 	.word	0xe000ed04

000039b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    39b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    39b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    39ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    39be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    39c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    39c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    39c8:	2902      	cmp	r1, #2
    beq _oops
    39ca:	d0ff      	beq.n	39cc <_oops>

000039cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    39cc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    39ce:	f008 fae2 	bl	bf96 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    39d2:	bd01      	pop	{r0, pc}

000039d4 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    39d4:	7b01      	ldrb	r1, [r0, #12]
{
    39d6:	b510      	push	{r4, lr}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    39d8:	f011 0402 	ands.w	r4, r1, #2
    39dc:	d005      	beq.n	39ea <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
    39de:	6e81      	ldr	r1, [r0, #104]	; 0x68
    39e0:	3160      	adds	r1, #96	; 0x60
    39e2:	6681      	str	r1, [r0, #104]	; 0x68
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
    39e4:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
    39e6:	3960      	subs	r1, #96	; 0x60
    39e8:	66c1      	str	r1, [r0, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    39ea:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    39ee:	9b02      	ldr	r3, [sp, #8]
    39f0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    39f4:	9b03      	ldr	r3, [sp, #12]
    39f6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->pc &= 0xfffffffe;
    39fa:	490d      	ldr	r1, [pc, #52]	; (3a30 <arch_new_thread+0x5c>)
	iframe->a4 = (uint32_t)p3;
    39fc:	9b04      	ldr	r3, [sp, #16]
    39fe:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3a02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3a06:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3a0a:	f021 0101 	bic.w	r1, r1, #1
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3a0e:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
    3a10:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3a14:	3a20      	subs	r2, #32
	thread->arch.basepri = 0;
    3a16:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    3a18:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
    3a1c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    3a1e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    3a22:	b11c      	cbz	r4, 3a2c <arch_new_thread+0x58>
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    3a24:	f64f 5308 	movw	r3, #64776	; 0xfd08
    3a28:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3a2c:	bd10      	pop	{r4, pc}
    3a2e:	bf00      	nop
    3a30:	0000b693 	.word	0x0000b693

00003a34 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
    3a34:	b530      	push	{r4, r5, lr}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    3a36:	7b01      	ldrb	r1, [r0, #12]
    3a38:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    3a3c:	4a17      	ldr	r2, [pc, #92]	; (3a9c <z_arm_mpu_stack_guard_and_fpu_adjust+0x68>)
    3a3e:	f011 0f02 	tst.w	r1, #2
    3a42:	f003 0508 	and.w	r5, r3, #8
    3a46:	d103      	bne.n	3a50 <z_arm_mpu_stack_guard_and_fpu_adjust+0x1c>
    3a48:	f890 40c1 	ldrb.w	r4, [r0, #193]	; 0xc1
    3a4c:	06e4      	lsls	r4, r4, #27
    3a4e:	d413      	bmi.n	3a78 <z_arm_mpu_stack_guard_and_fpu_adjust+0x44>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
    3a50:	6854      	ldr	r4, [r2, #4]
    3a52:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    3a56:	6054      	str	r4, [r2, #4]
		if ((thread->arch.mode &
    3a58:	b94d      	cbnz	r5, 3a6e <z_arm_mpu_stack_guard_and_fpu_adjust+0x3a>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    3a5a:	f043 0308 	orr.w	r3, r3, #8
    3a5e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start +=
    3a62:	6e83      	ldr	r3, [r0, #104]	; 0x68
    3a64:	3360      	adds	r3, #96	; 0x60
    3a66:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size -=
    3a68:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    3a6a:	3b60      	subs	r3, #96	; 0x60
    3a6c:	66c3      	str	r3, [r0, #108]	; 0x6c

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
    3a6e:	f041 0102 	orr.w	r1, r1, #2
    3a72:	7301      	strb	r1, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
    3a74:	2080      	movs	r0, #128	; 0x80
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
    3a76:	bd30      	pop	{r4, r5, pc}
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
    3a78:	6851      	ldr	r1, [r2, #4]
    3a7a:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
    3a7e:	6051      	str	r1, [r2, #4]
		if ((thread->arch.mode &
    3a80:	b14d      	cbz	r5, 3a96 <z_arm_mpu_stack_guard_and_fpu_adjust+0x62>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    3a82:	f023 0308 	bic.w	r3, r3, #8
    3a86:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start -=
    3a8a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    3a8c:	3b60      	subs	r3, #96	; 0x60
    3a8e:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size +=
    3a90:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    3a92:	3360      	adds	r3, #96	; 0x60
    3a94:	66c3      	str	r3, [r0, #108]	; 0x6c
	return MPU_GUARD_ALIGN_AND_SIZE;
    3a96:	2020      	movs	r0, #32
    3a98:	e7ed      	b.n	3a76 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
    3a9a:	bf00      	nop
    3a9c:	e000ef30 	.word	0xe000ef30

00003aa0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3aa0:	4b0f      	ldr	r3, [pc, #60]	; (3ae0 <z_check_thread_stack_fail+0x40>)
{
    3aa2:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
    3aa4:	6898      	ldr	r0, [r3, #8]
{
    3aa6:	b510      	push	{r4, lr}

	if (thread == NULL) {
    3aa8:	b1c0      	cbz	r0, 3adc <z_check_thread_stack_fail+0x3c>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
    3aaa:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    3aae:	6e80      	ldr	r0, [r0, #104]	; 0x68
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
    3ab0:	f013 0f08 	tst.w	r3, #8
    3ab4:	bf14      	ite	ne
    3ab6:	2480      	movne	r4, #128	; 0x80
    3ab8:	2420      	moveq	r4, #32
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3aba:	f112 0f16 	cmn.w	r2, #22
    3abe:	d004      	beq.n	3aca <z_check_thread_stack_fail+0x2a>
    3ac0:	1b03      	subs	r3, r0, r4
    3ac2:	4293      	cmp	r3, r2
    3ac4:	d806      	bhi.n	3ad4 <z_check_thread_stack_fail+0x34>
    3ac6:	4282      	cmp	r2, r0
    3ac8:	d204      	bcs.n	3ad4 <z_check_thread_stack_fail+0x34>
    3aca:	4281      	cmp	r1, r0
    3acc:	bf2c      	ite	cs
    3ace:	2100      	movcs	r1, #0
    3ad0:	2101      	movcc	r1, #1
    3ad2:	e000      	b.n	3ad6 <z_check_thread_stack_fail+0x36>
    3ad4:	2100      	movs	r1, #0
    3ad6:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3ad8:	bf08      	it	eq
    3ada:	2000      	moveq	r0, #0
}
    3adc:	bd10      	pop	{r4, pc}
    3ade:	bf00      	nop
    3ae0:	20002bd4 	.word	0x20002bd4

00003ae4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3ae4:	4614      	mov	r4, r2
    3ae6:	b508      	push	{r3, lr}
    3ae8:	460d      	mov	r5, r1
    3aea:	2200      	movs	r2, #0
    3aec:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3af0:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3af4:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3af8:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
    3afc:	f3bf 8f6f 	isb	sy
    3b00:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3b04:	4a08      	ldr	r2, [pc, #32]	; (3b28 <arch_switch_to_main_thread+0x44>)
    3b06:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3b08:	f000 fabc 	bl	4084 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3b0c:	4620      	mov	r0, r4
    3b0e:	f385 8809 	msr	PSP, r5
    3b12:	2100      	movs	r1, #0
    3b14:	b663      	cpsie	if
    3b16:	f381 8811 	msr	BASEPRI, r1
    3b1a:	f3bf 8f6f 	isb	sy
    3b1e:	2200      	movs	r2, #0
    3b20:	2300      	movs	r3, #0
    3b22:	f007 fdb6 	bl	b692 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3b26:	bf00      	nop
    3b28:	20002bd4 	.word	0x20002bd4

00003b2c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3b2c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3b2e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3b32:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3b36:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3b3a:	4904      	ldr	r1, [pc, #16]	; (3b4c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3b3c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3b3e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3b40:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3b42:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3b46:	4902      	ldr	r1, [pc, #8]	; (3b50 <_isr_wrapper+0x24>)
	bx r1
    3b48:	4708      	bx	r1
    3b4a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    3b4c:	0000d628 	.word	0x0000d628
	ldr r1, =z_arm_int_exit
    3b50:	00003b55 	.word	0x00003b55

00003b54 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3b54:	4b04      	ldr	r3, [pc, #16]	; (3b68 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3b56:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3b58:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    3b5a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3b5c:	d003      	beq.n	3b66 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3b5e:	4903      	ldr	r1, [pc, #12]	; (3b6c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3b64:	600a      	str	r2, [r1, #0]

00003b66 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3b66:	4770      	bx	lr
	ldr r3, =_kernel
    3b68:	20002bd4 	.word	0x20002bd4
	ldr r1, =_SCS_ICSR
    3b6c:	e000ed04 	.word	0xe000ed04

00003b70 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3b74:	4c2e      	ldr	r4, [pc, #184]	; (3c30 <mem_manage_fault+0xc0>)
{
    3b76:	4606      	mov	r6, r0
    3b78:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3b7a:	482e      	ldr	r0, [pc, #184]	; (3c34 <mem_manage_fault+0xc4>)
    3b7c:	2145      	movs	r1, #69	; 0x45
{
    3b7e:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3b80:	f008 f82b 	bl	bbda <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3b84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3b86:	06d7      	lsls	r7, r2, #27
    3b88:	d503      	bpl.n	3b92 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3b8a:	482b      	ldr	r0, [pc, #172]	; (3c38 <mem_manage_fault+0xc8>)
    3b8c:	2145      	movs	r1, #69	; 0x45
    3b8e:	f008 f824 	bl	bbda <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3b92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3b94:	0718      	lsls	r0, r3, #28
    3b96:	d503      	bpl.n	3ba0 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    3b98:	4828      	ldr	r0, [pc, #160]	; (3c3c <mem_manage_fault+0xcc>)
    3b9a:	2145      	movs	r1, #69	; 0x45
    3b9c:	f008 f81d 	bl	bbda <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3ba0:	4c23      	ldr	r4, [pc, #140]	; (3c30 <mem_manage_fault+0xc0>)
    3ba2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ba4:	0799      	lsls	r1, r3, #30
    3ba6:	d421      	bmi.n	3bec <mem_manage_fault+0x7c>
	uint32_t mmfar = -EINVAL;
    3ba8:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3bac:	4c20      	ldr	r4, [pc, #128]	; (3c30 <mem_manage_fault+0xc0>)
    3bae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3bb0:	07d3      	lsls	r3, r2, #31
    3bb2:	d503      	bpl.n	3bbc <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    3bb4:	4822      	ldr	r0, [pc, #136]	; (3c40 <mem_manage_fault+0xd0>)
    3bb6:	2145      	movs	r1, #69	; 0x45
    3bb8:	f008 f80f 	bl	bbda <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3bbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3bbe:	0698      	lsls	r0, r3, #26
    3bc0:	d503      	bpl.n	3bca <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
    3bc2:	4820      	ldr	r0, [pc, #128]	; (3c44 <mem_manage_fault+0xd4>)
    3bc4:	2145      	movs	r1, #69	; 0x45
    3bc6:	f008 f808 	bl	bbda <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3bca:	4b19      	ldr	r3, [pc, #100]	; (3c30 <mem_manage_fault+0xc0>)
    3bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3bce:	06d1      	lsls	r1, r2, #27
    3bd0:	d421      	bmi.n	3c16 <mem_manage_fault+0xa6>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3bd4:	0792      	lsls	r2, r2, #30
    3bd6:	d41e      	bmi.n	3c16 <mem_manage_fault+0xa6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3bd8:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3bda:	4a15      	ldr	r2, [pc, #84]	; (3c30 <mem_manage_fault+0xc0>)
    3bdc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3bde:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3be2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3be4:	2300      	movs	r3, #0
    3be6:	702b      	strb	r3, [r5, #0]

	return reason;
}
    3be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    3bec:	4816      	ldr	r0, [pc, #88]	; (3c48 <mem_manage_fault+0xd8>)
    3bee:	2145      	movs	r1, #69	; 0x45
    3bf0:	f007 fff3 	bl	bbda <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    3bf4:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3bf8:	061a      	lsls	r2, r3, #24
    3bfa:	d5d5      	bpl.n	3ba8 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3bfc:	4813      	ldr	r0, [pc, #76]	; (3c4c <mem_manage_fault+0xdc>)
    3bfe:	463a      	mov	r2, r7
    3c00:	2145      	movs	r1, #69	; 0x45
    3c02:	f007 ffea 	bl	bbda <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    3c06:	f1b8 0f00 	cmp.w	r8, #0
    3c0a:	d0cf      	beq.n	3bac <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3c0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3c12:	62a3      	str	r3, [r4, #40]	; 0x28
    3c14:	e7ca      	b.n	3bac <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3c16:	685b      	ldr	r3, [r3, #4]
    3c18:	051b      	lsls	r3, r3, #20
    3c1a:	d5dd      	bpl.n	3bd8 <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3c1c:	4631      	mov	r1, r6
    3c1e:	4638      	mov	r0, r7
    3c20:	f7ff ff3e 	bl	3aa0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3c24:	2800      	cmp	r0, #0
    3c26:	d0d7      	beq.n	3bd8 <mem_manage_fault+0x68>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3c28:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3c2c:	2002      	movs	r0, #2
    3c2e:	e7d4      	b.n	3bda <mem_manage_fault+0x6a>
    3c30:	e000ed00 	.word	0xe000ed00
    3c34:	0000eb4d 	.word	0x0000eb4d
    3c38:	0000eb68 	.word	0x0000eb68
    3c3c:	0000eba0 	.word	0x0000eba0
    3c40:	0000ebf0 	.word	0x0000ebf0
    3c44:	0000ec14 	.word	0x0000ec14
    3c48:	0000ebb8 	.word	0x0000ebb8
    3c4c:	0000ebd5 	.word	0x0000ebd5

00003c50 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3c50:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3c52:	4c23      	ldr	r4, [pc, #140]	; (3ce0 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3c54:	4606      	mov	r6, r0
    3c56:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3c58:	4822      	ldr	r0, [pc, #136]	; (3ce4 <bus_fault.isra.0+0x94>)
    3c5a:	2145      	movs	r1, #69	; 0x45
    3c5c:	f007 ffbd 	bl	bbda <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3c60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3c62:	04d1      	lsls	r1, r2, #19
    3c64:	d503      	bpl.n	3c6e <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    3c66:	4820      	ldr	r0, [pc, #128]	; (3ce8 <bus_fault.isra.0+0x98>)
    3c68:	2145      	movs	r1, #69	; 0x45
    3c6a:	f007 ffb6 	bl	bbda <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3c6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3c70:	051a      	lsls	r2, r3, #20
    3c72:	d503      	bpl.n	3c7c <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    3c74:	481d      	ldr	r0, [pc, #116]	; (3cec <bus_fault.isra.0+0x9c>)
    3c76:	2145      	movs	r1, #69	; 0x45
    3c78:	f007 ffaf 	bl	bbda <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3c7c:	4c18      	ldr	r4, [pc, #96]	; (3ce0 <bus_fault.isra.0+0x90>)
    3c7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3c80:	059b      	lsls	r3, r3, #22
    3c82:	d510      	bpl.n	3ca6 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    3c84:	481a      	ldr	r0, [pc, #104]	; (3cf0 <bus_fault.isra.0+0xa0>)
    3c86:	2145      	movs	r1, #69	; 0x45
    3c88:	f007 ffa7 	bl	bbda <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3c8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3c8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3c90:	0418      	lsls	r0, r3, #16
    3c92:	d508      	bpl.n	3ca6 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3c94:	4817      	ldr	r0, [pc, #92]	; (3cf4 <bus_fault.isra.0+0xa4>)
    3c96:	2145      	movs	r1, #69	; 0x45
    3c98:	f007 ff9f 	bl	bbda <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    3c9c:	b11e      	cbz	r6, 3ca6 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3c9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ca0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3ca4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3ca6:	4c0e      	ldr	r4, [pc, #56]	; (3ce0 <bus_fault.isra.0+0x90>)
    3ca8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3caa:	0559      	lsls	r1, r3, #21
    3cac:	d503      	bpl.n	3cb6 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    3cae:	4812      	ldr	r0, [pc, #72]	; (3cf8 <bus_fault.isra.0+0xa8>)
    3cb0:	2145      	movs	r1, #69	; 0x45
    3cb2:	f007 ff92 	bl	bbda <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3cb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3cb8:	05da      	lsls	r2, r3, #23
    3cba:	d50b      	bpl.n	3cd4 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    3cbc:	480f      	ldr	r0, [pc, #60]	; (3cfc <bus_fault.isra.0+0xac>)
    3cbe:	2145      	movs	r1, #69	; 0x45
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3cc0:	f007 ff8b 	bl	bbda <z_log_minimal_printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3cc4:	4a06      	ldr	r2, [pc, #24]	; (3ce0 <bus_fault.isra.0+0x90>)
    3cc6:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3cc8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3cca:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3cce:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3cd0:	7028      	strb	r0, [r5, #0]

	return reason;
}
    3cd2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3cd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3cd6:	049b      	lsls	r3, r3, #18
    3cd8:	d5f4      	bpl.n	3cc4 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3cda:	4809      	ldr	r0, [pc, #36]	; (3d00 <bus_fault.isra.0+0xb0>)
    3cdc:	2145      	movs	r1, #69	; 0x45
    3cde:	e7ef      	b.n	3cc0 <bus_fault.isra.0+0x70>
    3ce0:	e000ed00 	.word	0xe000ed00
    3ce4:	0000ec48 	.word	0x0000ec48
    3ce8:	0000ec63 	.word	0x0000ec63
    3cec:	0000eba0 	.word	0x0000eba0
    3cf0:	0000ec79 	.word	0x0000ec79
    3cf4:	0000ec97 	.word	0x0000ec97
    3cf8:	0000ecb1 	.word	0x0000ecb1
    3cfc:	0000ecd1 	.word	0x0000ecd1
    3d00:	0000ec14 	.word	0x0000ec14

00003d04 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3d04:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3d06:	4c1d      	ldr	r4, [pc, #116]	; (3d7c <usage_fault.isra.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3d08:	481d      	ldr	r0, [pc, #116]	; (3d80 <usage_fault.isra.0+0x7c>)
    3d0a:	2145      	movs	r1, #69	; 0x45
    3d0c:	f007 ff65 	bl	bbda <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3d10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3d12:	0193      	lsls	r3, r2, #6
    3d14:	d503      	bpl.n	3d1e <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    3d16:	481b      	ldr	r0, [pc, #108]	; (3d84 <usage_fault.isra.0+0x80>)
    3d18:	2145      	movs	r1, #69	; 0x45
    3d1a:	f007 ff5e 	bl	bbda <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3d1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3d20:	01dc      	lsls	r4, r3, #7
    3d22:	d503      	bpl.n	3d2c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    3d24:	4818      	ldr	r0, [pc, #96]	; (3d88 <usage_fault.isra.0+0x84>)
    3d26:	2145      	movs	r1, #69	; 0x45
    3d28:	f007 ff57 	bl	bbda <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3d2c:	4c13      	ldr	r4, [pc, #76]	; (3d7c <usage_fault.isra.0+0x78>)
    3d2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3d30:	0310      	lsls	r0, r2, #12
    3d32:	d503      	bpl.n	3d3c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    3d34:	4815      	ldr	r0, [pc, #84]	; (3d8c <usage_fault.isra.0+0x88>)
    3d36:	2145      	movs	r1, #69	; 0x45
    3d38:	f007 ff4f 	bl	bbda <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3d3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3d3e:	0359      	lsls	r1, r3, #13
    3d40:	d503      	bpl.n	3d4a <usage_fault.isra.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3d42:	4813      	ldr	r0, [pc, #76]	; (3d90 <usage_fault.isra.0+0x8c>)
    3d44:	2145      	movs	r1, #69	; 0x45
    3d46:	f007 ff48 	bl	bbda <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3d4a:	4c0c      	ldr	r4, [pc, #48]	; (3d7c <usage_fault.isra.0+0x78>)
    3d4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3d4e:	0392      	lsls	r2, r2, #14
    3d50:	d503      	bpl.n	3d5a <usage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3d52:	4810      	ldr	r0, [pc, #64]	; (3d94 <usage_fault.isra.0+0x90>)
    3d54:	2145      	movs	r1, #69	; 0x45
    3d56:	f007 ff40 	bl	bbda <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3d5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3d5c:	03db      	lsls	r3, r3, #15
    3d5e:	d503      	bpl.n	3d68 <usage_fault.isra.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3d60:	480d      	ldr	r0, [pc, #52]	; (3d98 <usage_fault.isra.0+0x94>)
    3d62:	2145      	movs	r1, #69	; 0x45
    3d64:	f007 ff39 	bl	bbda <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3d68:	4a04      	ldr	r2, [pc, #16]	; (3d7c <usage_fault.isra.0+0x78>)
    3d6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3d6c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3d70:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3d74:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3d76:	2000      	movs	r0, #0
    3d78:	bd10      	pop	{r4, pc}
    3d7a:	bf00      	nop
    3d7c:	e000ed00 	.word	0xe000ed00
    3d80:	0000ecee 	.word	0x0000ecee
    3d84:	0000ed0b 	.word	0x0000ed0b
    3d88:	0000ed23 	.word	0x0000ed23
    3d8c:	0000ed42 	.word	0x0000ed42
    3d90:	0000ed65 	.word	0x0000ed65
    3d94:	0000ed8f 	.word	0x0000ed8f
    3d98:	0000edae 	.word	0x0000edae

00003d9c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3da0:	4b57      	ldr	r3, [pc, #348]	; (3f00 <z_arm_fault+0x164>)
    3da2:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    3da6:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3da8:	f3c8 0708 	ubfx	r7, r8, #0, #9
    3dac:	2600      	movs	r6, #0
    3dae:	f386 8811 	msr	BASEPRI, r6
    3db2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3db6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3dba:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3dbe:	d107      	bne.n	3dd0 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3dc0:	f002 030c 	and.w	r3, r2, #12
    3dc4:	2b08      	cmp	r3, #8
    3dc6:	d105      	bne.n	3dd4 <z_arm_fault+0x38>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3dc8:	484e      	ldr	r0, [pc, #312]	; (3f04 <z_arm_fault+0x168>)
    3dca:	2145      	movs	r1, #69	; 0x45
    3dcc:	f007 ff05 	bl	bbda <z_log_minimal_printk>
		return NULL;
    3dd0:	4635      	mov	r5, r6
    3dd2:	e004      	b.n	3dde <z_arm_fault+0x42>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3dd4:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3dd6:	bf4e      	itee	mi
    3dd8:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
    3dda:	4605      	movpl	r5, r0
			*nested_exc = true;
    3ddc:	2601      	movpl	r6, #1
	*recoverable = false;
    3dde:	2200      	movs	r2, #0
    3de0:	1ef9      	subs	r1, r7, #3
    3de2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    3de6:	4614      	mov	r4, r2
    3de8:	2909      	cmp	r1, #9
    3dea:	d877      	bhi.n	3edc <z_arm_fault+0x140>
    3dec:	e8df f001 	tbb	[pc, r1]
    3df0:	686f6b05 	.word	0x686f6b05
    3df4:	76767676 	.word	0x76767676
    3df8:	7376      	.short	0x7376
	PR_FAULT_INFO("***** HARD FAULT *****");
    3dfa:	4843      	ldr	r0, [pc, #268]	; (3f08 <z_arm_fault+0x16c>)
    3dfc:	2145      	movs	r1, #69	; 0x45
    3dfe:	f007 feec 	bl	bbda <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3e02:	4b3f      	ldr	r3, [pc, #252]	; (3f00 <z_arm_fault+0x164>)
	*recoverable = false;
    3e04:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3e08:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3e0a:	f014 0402 	ands.w	r4, r4, #2
    3e0e:	d005      	beq.n	3e1c <z_arm_fault+0x80>
		PR_EXC("  Bus fault on vector table read");
    3e10:	483e      	ldr	r0, [pc, #248]	; (3f0c <z_arm_fault+0x170>)
    3e12:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    3e14:	f007 fee1 	bl	bbda <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3e18:	2400      	movs	r4, #0
}
    3e1a:	e006      	b.n	3e2a <z_arm_fault+0x8e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e1e:	2a00      	cmp	r2, #0
    3e20:	da1d      	bge.n	3e5e <z_arm_fault+0xc2>
		PR_EXC("  Debug event");
    3e22:	483b      	ldr	r0, [pc, #236]	; (3f10 <z_arm_fault+0x174>)
    3e24:	2145      	movs	r1, #69	; 0x45
    3e26:	f007 fed8 	bl	bbda <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3e2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3e2e:	b99b      	cbnz	r3, 3e58 <z_arm_fault+0xbc>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3e30:	2268      	movs	r2, #104	; 0x68
    3e32:	4629      	mov	r1, r5
    3e34:	a802      	add	r0, sp, #8
    3e36:	f008 f8ea 	bl	c00e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e3c:	2e00      	cmp	r6, #0
    3e3e:	d05a      	beq.n	3ef6 <z_arm_fault+0x15a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3e44:	b922      	cbnz	r2, 3e50 <z_arm_fault+0xb4>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3e46:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3e4a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3e4e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3e50:	a902      	add	r1, sp, #8
    3e52:	4620      	mov	r0, r4
    3e54:	f7ff fc6a 	bl	372c <z_arm_fatal_error>
}
    3e58:	b01c      	add	sp, #112	; 0x70
    3e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3e60:	005b      	lsls	r3, r3, #1
    3e62:	d5e2      	bpl.n	3e2a <z_arm_fault+0x8e>
		PR_EXC("  Fault escalation (see below)");
    3e64:	482b      	ldr	r0, [pc, #172]	; (3f14 <z_arm_fault+0x178>)
    3e66:	2145      	movs	r1, #69	; 0x45
    3e68:	f007 feb7 	bl	bbda <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    3e6c:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3e6e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    3e72:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3e76:	429a      	cmp	r2, r3
    3e78:	d00d      	beq.n	3e96 <z_arm_fault+0xfa>
		} else if (SCB_MMFSR != 0) {
    3e7a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3e7e:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    3e82:	781b      	ldrb	r3, [r3, #0]
    3e84:	b173      	cbz	r3, 3ea4 <z_arm_fault+0x108>
			reason = mem_manage_fault(esf, 1, recoverable);
    3e86:	f10d 0207 	add.w	r2, sp, #7
    3e8a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3e8c:	4628      	mov	r0, r5
    3e8e:	f7ff fe6f 	bl	3b70 <mem_manage_fault>
    3e92:	4604      	mov	r4, r0
		break;
    3e94:	e7c9      	b.n	3e2a <z_arm_fault+0x8e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3e96:	682a      	ldr	r2, [r5, #0]
    3e98:	481f      	ldr	r0, [pc, #124]	; (3f18 <z_arm_fault+0x17c>)
    3e9a:	2145      	movs	r1, #69	; 0x45
    3e9c:	f007 fe9d 	bl	bbda <z_log_minimal_printk>
			reason = esf->basic.r0;
    3ea0:	682c      	ldr	r4, [r5, #0]
    3ea2:	e7c2      	b.n	3e2a <z_arm_fault+0x8e>
		} else if (SCB_BFSR != 0) {
    3ea4:	4b1d      	ldr	r3, [pc, #116]	; (3f1c <z_arm_fault+0x180>)
    3ea6:	781b      	ldrb	r3, [r3, #0]
    3ea8:	b12b      	cbz	r3, 3eb6 <z_arm_fault+0x11a>
			reason = bus_fault(esf, 1, recoverable);
    3eaa:	f10d 0107 	add.w	r1, sp, #7
    3eae:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3eb0:	f7ff fece 	bl	3c50 <bus_fault.isra.0>
    3eb4:	e7ed      	b.n	3e92 <z_arm_fault+0xf6>
		} else if (SCB_UFSR != 0) {
    3eb6:	4b1a      	ldr	r3, [pc, #104]	; (3f20 <z_arm_fault+0x184>)
    3eb8:	881b      	ldrh	r3, [r3, #0]
    3eba:	b29b      	uxth	r3, r3
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d0b4      	beq.n	3e2a <z_arm_fault+0x8e>
		reason = usage_fault(esf);
    3ec0:	f7ff ff20 	bl	3d04 <usage_fault.isra.0>
    3ec4:	e7e5      	b.n	3e92 <z_arm_fault+0xf6>
		reason = mem_manage_fault(esf, 0, recoverable);
    3ec6:	f10d 0207 	add.w	r2, sp, #7
    3eca:	2100      	movs	r1, #0
    3ecc:	e7de      	b.n	3e8c <z_arm_fault+0xf0>
		reason = bus_fault(esf, 0, recoverable);
    3ece:	f10d 0107 	add.w	r1, sp, #7
    3ed2:	2000      	movs	r0, #0
    3ed4:	e7ec      	b.n	3eb0 <z_arm_fault+0x114>
	PR_FAULT_INFO(
    3ed6:	4813      	ldr	r0, [pc, #76]	; (3f24 <z_arm_fault+0x188>)
    3ed8:	2145      	movs	r1, #69	; 0x45
    3eda:	e79b      	b.n	3e14 <z_arm_fault+0x78>
	PR_FAULT_INFO("***** %s %d) *****",
    3edc:	4912      	ldr	r1, [pc, #72]	; (3f28 <z_arm_fault+0x18c>)
    3ede:	4a13      	ldr	r2, [pc, #76]	; (3f2c <z_arm_fault+0x190>)
    3ee0:	4813      	ldr	r0, [pc, #76]	; (3f30 <z_arm_fault+0x194>)
    3ee2:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    3ee6:	bf08      	it	eq
    3ee8:	460a      	moveq	r2, r1
    3eea:	f1a7 0310 	sub.w	r3, r7, #16
    3eee:	2145      	movs	r1, #69	; 0x45
    3ef0:	f007 fe73 	bl	bbda <z_log_minimal_printk>
    3ef4:	e790      	b.n	3e18 <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3ef6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3efa:	f023 0301 	bic.w	r3, r3, #1
    3efe:	e7a6      	b.n	3e4e <z_arm_fault+0xb2>
    3f00:	e000ed00 	.word	0xe000ed00
    3f04:	0000ee0c 	.word	0x0000ee0c
    3f08:	0000ee3c 	.word	0x0000ee3c
    3f0c:	0000ee58 	.word	0x0000ee58
    3f10:	0000ee7e 	.word	0x0000ee7e
    3f14:	0000ee91 	.word	0x0000ee91
    3f18:	0000eeb5 	.word	0x0000eeb5
    3f1c:	e000ed29 	.word	0xe000ed29
    3f20:	e000ed2a 	.word	0xe000ed2a
    3f24:	0000eed6 	.word	0x0000eed6
    3f28:	0000edde 	.word	0x0000edde
    3f2c:	0000edf3 	.word	0x0000edf3
    3f30:	0000eeff 	.word	0x0000eeff

00003f34 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3f34:	4a02      	ldr	r2, [pc, #8]	; (3f40 <z_arm_fault_init+0xc>)
    3f36:	6953      	ldr	r3, [r2, #20]
    3f38:	f043 0310 	orr.w	r3, r3, #16
    3f3c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3f3e:	4770      	bx	lr
    3f40:	e000ed00 	.word	0xe000ed00

00003f44 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3f44:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3f48:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3f4c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3f4e:	4672      	mov	r2, lr
	bl z_arm_fault
    3f50:	f7ff ff24 	bl	3d9c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3f54:	bd01      	pop	{r0, pc}
    3f56:	bf00      	nop

00003f58 <z_arm_interrupt_init>:
    3f58:	4804      	ldr	r0, [pc, #16]	; (3f6c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3f5a:	2300      	movs	r3, #0
    3f5c:	2120      	movs	r1, #32
    3f5e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3f60:	3301      	adds	r3, #1
    3f62:	2b30      	cmp	r3, #48	; 0x30
    3f64:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3f68:	d1f9      	bne.n	3f5e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3f6a:	4770      	bx	lr
    3f6c:	e000e100 	.word	0xe000e100

00003f70 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3f70:	2000      	movs	r0, #0
    msr CONTROL, r0
    3f72:	f380 8814 	msr	CONTROL, r0
    isb
    3f76:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3f7a:	f009 faaf 	bl	d4dc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3f7e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3f80:	490d      	ldr	r1, [pc, #52]	; (3fb8 <__start+0x48>)
    str r0, [r1]
    3f82:	6008      	str	r0, [r1, #0]
    dsb
    3f84:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3f88:	480c      	ldr	r0, [pc, #48]	; (3fbc <__start+0x4c>)
    msr msp, r0
    3f8a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3f8e:	f000 f829 	bl	3fe4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3f92:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3f94:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3f98:	4809      	ldr	r0, [pc, #36]	; (3fc0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3f9a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3f9e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3fa0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3fa4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3fa8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3faa:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3fac:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3fb0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3fb4:	f7ff fc6e 	bl	3894 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3fb8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3fbc:	20006500 	.word	0x20006500
    ldr r0, =z_interrupt_stacks
    3fc0:	20006700 	.word	0x20006700

00003fc4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3fc4:	4a06      	ldr	r2, [pc, #24]	; (3fe0 <z_arm_clear_arm_mpu_config+0x1c>)
    3fc6:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    3fc8:	2300      	movs	r3, #0
	int num_regions =
    3fca:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3fce:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3fd0:	428b      	cmp	r3, r1
    3fd2:	d100      	bne.n	3fd6 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    3fd4:	4770      	bx	lr
  MPU->RNR = rnr;
    3fd6:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    3fd8:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    3fda:	3301      	adds	r3, #1
    3fdc:	e7f8      	b.n	3fd0 <z_arm_clear_arm_mpu_config+0xc>
    3fde:	bf00      	nop
    3fe0:	e000ed90 	.word	0xe000ed90

00003fe4 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3fe4:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3fe6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3fe8:	2300      	movs	r3, #0
    3fea:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3fee:	f7ff ffe9 	bl	3fc4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3ff2:	4b14      	ldr	r3, [pc, #80]	; (4044 <z_arm_init_arch_hw_at_boot+0x60>)
    3ff4:	f04f 32ff 	mov.w	r2, #4294967295
    3ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    4000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    4004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    4008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    400c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    4010:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    4014:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4018:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    401c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    4020:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    4024:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    4028:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    402c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    4030:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    4034:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    4038:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    403a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    403e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4042:	bd08      	pop	{r3, pc}
    4044:	e000e100 	.word	0xe000e100

00004048 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4048:	4b06      	ldr	r3, [pc, #24]	; (4064 <z_impl_k_thread_abort+0x1c>)
    404a:	689b      	ldr	r3, [r3, #8]
    404c:	4283      	cmp	r3, r0
    404e:	d107      	bne.n	4060 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4050:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4054:	b123      	cbz	r3, 4060 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4056:	4a04      	ldr	r2, [pc, #16]	; (4068 <z_impl_k_thread_abort+0x20>)
    4058:	6853      	ldr	r3, [r2, #4]
    405a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    405e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    4060:	f004 bf32 	b.w	8ec8 <z_thread_abort>
    4064:	20002bd4 	.word	0x20002bd4
    4068:	e000ed00 	.word	0xe000ed00

0000406c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    406c:	4b02      	ldr	r3, [pc, #8]	; (4078 <z_arm_configure_static_mpu_regions+0xc>)
    406e:	4a03      	ldr	r2, [pc, #12]	; (407c <z_arm_configure_static_mpu_regions+0x10>)
    4070:	4803      	ldr	r0, [pc, #12]	; (4080 <z_arm_configure_static_mpu_regions+0x14>)
    4072:	2101      	movs	r1, #1
    4074:	f000 b87a 	b.w	416c <arm_core_mpu_configure_static_mpu_regions>
    4078:	20040000 	.word	0x20040000
    407c:	20000000 	.word	0x20000000
    4080:	0000d984 	.word	0x0000d984

00004084 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4084:	b510      	push	{r4, lr}
    4086:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    4088:	f7ff fcd4 	bl	3a34 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    408c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    408e:	4b06      	ldr	r3, [pc, #24]	; (40a8 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
    4090:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
    4092:	e9c3 2000 	strd	r2, r0, [r3]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4096:	4a05      	ldr	r2, [pc, #20]	; (40ac <z_arm_configure_dynamic_mpu_regions+0x28>)
    4098:	609a      	str	r2, [r3, #8]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
    409a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    409e:	2101      	movs	r1, #1
    40a0:	4618      	mov	r0, r3
    40a2:	f000 b86d 	b.w	4180 <arm_core_mpu_configure_dynamic_mpu_regions>
    40a6:	bf00      	nop
    40a8:	20001f88 	.word	0x20001f88
    40ac:	150b0000 	.word	0x150b0000

000040b0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    40b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    40b2:	4f22      	ldr	r7, [pc, #136]	; (413c <mpu_configure_regions+0x8c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    40b4:	2600      	movs	r6, #0
    40b6:	428e      	cmp	r6, r1
    40b8:	da0f      	bge.n	40da <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    40ba:	6844      	ldr	r4, [r0, #4]
    40bc:	2c00      	cmp	r4, #0
    40be:	d039      	beq.n	4134 <mpu_configure_regions+0x84>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    40c0:	b19b      	cbz	r3, 40ea <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    40c2:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    40c6:	ea14 0f0c 	tst.w	r4, ip
    40ca:	d008      	beq.n	40de <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    40cc:	481c      	ldr	r0, [pc, #112]	; (4140 <mpu_configure_regions+0x90>)
    40ce:	4632      	mov	r2, r6
    40d0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    40d2:	f007 fd82 	bl	bbda <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    40d6:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    40da:	4610      	mov	r0, r2
    40dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    40de:	2c1f      	cmp	r4, #31
    40e0:	d9f4      	bls.n	40cc <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
    40e2:	6805      	ldr	r5, [r0, #0]
		&&
    40e4:	ea1c 0f05 	tst.w	ip, r5
    40e8:	d1f0      	bne.n	40cc <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    40ea:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    40ec:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    40ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    40f2:	b2d2      	uxtb	r2, r2
    40f4:	d90f      	bls.n	4116 <mpu_configure_regions+0x66>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    40f6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    40fa:	d80e      	bhi.n	411a <mpu_configure_regions+0x6a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    40fc:	3c01      	subs	r4, #1
    40fe:	fab4 f484 	clz	r4, r4
    4102:	f1c4 041f 	rsb	r4, r4, #31
    4106:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4108:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    410a:	ea4c 0404 	orr.w	r4, ip, r4
    410e:	d906      	bls.n	411e <mpu_configure_regions+0x6e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4110:	480c      	ldr	r0, [pc, #48]	; (4144 <mpu_configure_regions+0x94>)
    4112:	2145      	movs	r1, #69	; 0x45
    4114:	e7dd      	b.n	40d2 <mpu_configure_regions+0x22>
		return REGION_32B;
    4116:	2408      	movs	r4, #8
    4118:	e7f6      	b.n	4108 <mpu_configure_regions+0x58>
		return REGION_4G;
    411a:	243e      	movs	r4, #62	; 0x3e
    411c:	e7f4      	b.n	4108 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    411e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    4122:	4315      	orrs	r5, r2
    4124:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4128:	f044 0401 	orr.w	r4, r4, #1
    412c:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    412e:	60fd      	str	r5, [r7, #12]
		reg_index++;
    4130:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4132:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    4134:	3601      	adds	r6, #1
    4136:	300c      	adds	r0, #12
    4138:	e7bd      	b.n	40b6 <mpu_configure_regions+0x6>
    413a:	bf00      	nop
    413c:	e000ed90 	.word	0xe000ed90
    4140:	0000ef1b 	.word	0x0000ef1b
    4144:	0000ef43 	.word	0x0000ef43

00004148 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4148:	4b03      	ldr	r3, [pc, #12]	; (4158 <arm_core_mpu_enable+0x10>)
    414a:	2205      	movs	r2, #5
    414c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    414e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4152:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4156:	4770      	bx	lr
    4158:	e000ed90 	.word	0xe000ed90

0000415c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    415c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4160:	4b01      	ldr	r3, [pc, #4]	; (4168 <arm_core_mpu_disable+0xc>)
    4162:	2200      	movs	r2, #0
    4164:	605a      	str	r2, [r3, #4]
}
    4166:	4770      	bx	lr
    4168:	e000ed90 	.word	0xe000ed90

0000416c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    416c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    416e:	4c03      	ldr	r4, [pc, #12]	; (417c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4170:	2301      	movs	r3, #1
    4172:	7822      	ldrb	r2, [r4, #0]
    4174:	f7ff ff9c 	bl	40b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4178:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    417a:	bd10      	pop	{r4, pc}
    417c:	20002dc3 	.word	0x20002dc3

00004180 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4180:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4182:	4a08      	ldr	r2, [pc, #32]	; (41a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    4184:	2300      	movs	r3, #0
    4186:	7812      	ldrb	r2, [r2, #0]
    4188:	f7ff ff92 	bl	40b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    418c:	f110 0f16 	cmn.w	r0, #22
    4190:	d003      	beq.n	419a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    4192:	4b05      	ldr	r3, [pc, #20]	; (41a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    4194:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4196:	2807      	cmp	r0, #7
    4198:	dd00      	ble.n	419c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    419a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    419c:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    419e:	611a      	str	r2, [r3, #16]
    41a0:	3001      	adds	r0, #1
    41a2:	e7f8      	b.n	4196 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    41a4:	20002dc3 	.word	0x20002dc3
    41a8:	e000ed90 	.word	0xe000ed90

000041ac <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    41ac:	4913      	ldr	r1, [pc, #76]	; (41fc <z_arm_mpu_init+0x50>)
    41ae:	6808      	ldr	r0, [r1, #0]
    41b0:	2808      	cmp	r0, #8
{
    41b2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    41b4:	d81e      	bhi.n	41f4 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    41b6:	f7ff ffd1 	bl	415c <arm_core_mpu_disable>
    41ba:	4c11      	ldr	r4, [pc, #68]	; (4200 <z_arm_mpu_init+0x54>)
    41bc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    41be:	2200      	movs	r2, #0
    41c0:	4290      	cmp	r0, r2
    41c2:	f101 010c 	add.w	r1, r1, #12
    41c6:	d105      	bne.n	41d4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    41c8:	4b0e      	ldr	r3, [pc, #56]	; (4204 <z_arm_mpu_init+0x58>)
    41ca:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    41cc:	f7ff ffbc 	bl	4148 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    41d0:	2000      	movs	r0, #0
}
    41d2:	bd10      	pop	{r4, pc}
    41d4:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    41d6:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    41da:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    41de:	4313      	orrs	r3, r2
    41e0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    41e4:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    41e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    41ea:	f043 0301 	orr.w	r3, r3, #1
    41ee:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    41f0:	3201      	adds	r2, #1
    41f2:	e7e5      	b.n	41c0 <z_arm_mpu_init+0x14>
		return -1;
    41f4:	f04f 30ff 	mov.w	r0, #4294967295
    41f8:	e7eb      	b.n	41d2 <z_arm_mpu_init+0x26>
    41fa:	bf00      	nop
    41fc:	0000d990 	.word	0x0000d990
    4200:	e000ed90 	.word	0xe000ed90
    4204:	20002dc3 	.word	0x20002dc3

00004208 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4208:	f04f 0220 	mov.w	r2, #32
    420c:	f3ef 8311 	mrs	r3, BASEPRI
    4210:	f382 8812 	msr	BASEPRI_MAX, r2
    4214:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4218:	4a04      	ldr	r2, [pc, #16]	; (422c <nordicsemi_nrf52_init+0x24>)
    421a:	2101      	movs	r1, #1
    421c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    4220:	f383 8811 	msr	BASEPRI, r3
    4224:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4228:	2000      	movs	r0, #0
    422a:	4770      	bx	lr
    422c:	4001e000 	.word	0x4001e000

00004230 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    4230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4234:	b2c0      	uxtb	r0, r0
    4236:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    423a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    423e:	4905      	ldr	r1, [pc, #20]	; (4254 <sys_arch_reboot+0x24>)
    4240:	4b05      	ldr	r3, [pc, #20]	; (4258 <sys_arch_reboot+0x28>)
    4242:	68ca      	ldr	r2, [r1, #12]
    4244:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4248:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    424a:	60cb      	str	r3, [r1, #12]
    424c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4250:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4252:	e7fd      	b.n	4250 <sys_arch_reboot+0x20>
    4254:	e000ed00 	.word	0xe000ed00
    4258:	05fa0004 	.word	0x05fa0004

0000425c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    425c:	b120      	cbz	r0, 4268 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    425e:	4b03      	ldr	r3, [pc, #12]	; (426c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4260:	0180      	lsls	r0, r0, #6
    4262:	f043 0301 	orr.w	r3, r3, #1
    4266:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4268:	4770      	bx	lr
    426a:	bf00      	nop
    426c:	0000d880 	.word	0x0000d880

00004270 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    4270:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    4272:	4a06      	ldr	r2, [pc, #24]	; (428c <net_buf_id+0x1c>)
    4274:	212c      	movs	r1, #44	; 0x2c
    4276:	fb01 2303 	mla	r3, r1, r3, r2
    427a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    427c:	7f1b      	ldrb	r3, [r3, #28]
    427e:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    4280:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    4282:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
    4286:	fbb0 f0f3 	udiv	r0, r0, r3
    428a:	4770      	bx	lr
    428c:	20000548 	.word	0x20000548

00004290 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    4290:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    4292:	4a0a      	ldr	r2, [pc, #40]	; (42bc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    4294:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    4296:	242c      	movs	r4, #44	; 0x2c
    4298:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
    429c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42a0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    42a2:	6823      	ldr	r3, [r4, #0]
    42a4:	429a      	cmp	r2, r3
    42a6:	bf94      	ite	ls
    42a8:	600a      	strls	r2, [r1, #0]
    42aa:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    42ac:	f7ff ffe0 	bl	4270 <net_buf_id>
    42b0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    42b4:	fb02 3000 	mla	r0, r2, r0, r3
    42b8:	bd10      	pop	{r4, pc}
    42ba:	bf00      	nop
    42bc:	20000548 	.word	0x20000548

000042c0 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    42c0:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    42c4:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    42c6:	b241      	sxtb	r1, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    42c8:	d004      	beq.n	42d4 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    42ca:	f010 0f78 	tst.w	r0, #120	; 0x78
    42ce:	d001      	beq.n	42d4 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    42d0:	2000      	movs	r0, #0
    42d2:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    42d4:	2900      	cmp	r1, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    42d6:	f000 020f 	and.w	r2, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    42da:	f000 0008 	and.w	r0, r0, #8
    42de:	da05      	bge.n	42ec <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    42e0:	b958      	cbnz	r0, 42fa <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    42e2:	4808      	ldr	r0, [pc, #32]	; (4304 <endpoint_ctx+0x44>)
    42e4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    42e8:	304c      	adds	r0, #76	; 0x4c
    42ea:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    42ec:	b938      	cbnz	r0, 42fe <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    42ee:	4805      	ldr	r0, [pc, #20]	; (4304 <endpoint_ctx+0x44>)
    42f0:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    42f4:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    42f8:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    42fa:	4803      	ldr	r0, [pc, #12]	; (4308 <endpoint_ctx+0x48>)
    42fc:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    42fe:	4803      	ldr	r0, [pc, #12]	; (430c <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    4300:	4770      	bx	lr
    4302:	bf00      	nop
    4304:	20002594 	.word	0x20002594
    4308:	200026e0 	.word	0x200026e0
    430c:	20002800 	.word	0x20002800

00004310 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    4310:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    4312:	4801      	ldr	r0, [pc, #4]	; (4318 <usbd_evt_put+0x8>)
    4314:	f008 bd64 	b.w	cde0 <k_queue_append>
    4318:	20000530 	.word	0x20000530

0000431c <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    431c:	4901      	ldr	r1, [pc, #4]	; (4324 <usbd_work_schedule+0x8>)
    431e:	4802      	ldr	r0, [pc, #8]	; (4328 <usbd_work_schedule+0xc>)
    4320:	f008 bd89 	b.w	ce36 <k_work_submit_to_queue>
    4324:	200025bc 	.word	0x200025bc
    4328:	20000858 	.word	0x20000858

0000432c <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    432c:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    432e:	480b      	ldr	r0, [pc, #44]	; (435c <usb_init+0x30>)
    4330:	f002 fd68 	bl	6e04 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    4334:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    4336:	480a      	ldr	r0, [pc, #40]	; (4360 <usb_init+0x34>)
    4338:	f002 fdac 	bl	6e94 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    433c:	f04f 33ff 	mov.w	r3, #4294967295
    4340:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4344:	4907      	ldr	r1, [pc, #28]	; (4364 <usb_init+0x38>)
    4346:	4808      	ldr	r0, [pc, #32]	; (4368 <usb_init+0x3c>)
    4348:	9400      	str	r4, [sp, #0]
    434a:	f004 fa6b 	bl	8824 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    434e:	4907      	ldr	r1, [pc, #28]	; (436c <usb_init+0x40>)
    4350:	4807      	ldr	r0, [pc, #28]	; (4370 <usb_init+0x44>)
    4352:	f008 fd67 	bl	ce24 <k_work_init>

	return 0;
}
    4356:	4620      	mov	r0, r4
    4358:	b002      	add	sp, #8
    435a:	bd10      	pop	{r4, pc}
    435c:	0000f1ef 	.word	0x0000f1ef
    4360:	0000d9cc 	.word	0x0000d9cc
    4364:	20003880 	.word	0x20003880
    4368:	20000858 	.word	0x20000858
    436c:	00004701 	.word	0x00004701
    4370:	200025bc 	.word	0x200025bc

00004374 <hfxo_stop.constprop.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    4374:	b510      	push	{r4, lr}
    4376:	4911      	ldr	r1, [pc, #68]	; (43bc <hfxo_stop.constprop.0+0x48>)
    4378:	f3bf 8f5b 	dmb	ish
    437c:	f101 0320 	add.w	r3, r1, #32
    4380:	2200      	movs	r2, #0
    4382:	e853 0f00 	ldrex	r0, [r3]
    4386:	2801      	cmp	r0, #1
    4388:	d103      	bne.n	4392 <hfxo_stop.constprop.0+0x1e>
    438a:	e843 2400 	strex	r4, r2, [r3]
    438e:	2c00      	cmp	r4, #0
    4390:	d1f7      	bne.n	4382 <hfxo_stop.constprop.0+0xe>
    4392:	f3bf 8f5b 	dmb	ish
    4396:	bf0c      	ite	eq
    4398:	2001      	moveq	r0, #1
    439a:	4610      	movne	r0, r2
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    439c:	d10c      	bne.n	43b8 <hfxo_stop.constprop.0+0x44>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    439e:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    43a0:	310c      	adds	r1, #12
    43a2:	4620      	mov	r0, r4
    43a4:	f007 f945 	bl	b632 <onoff_cancel>

	if (rv == -EALREADY) {
    43a8:	f110 0f78 	cmn.w	r0, #120	; 0x78
    43ac:	d104      	bne.n	43b8 <hfxo_stop.constprop.0+0x44>
		rv = onoff_release(mgr);
    43ae:	4620      	mov	r0, r4
}
    43b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    43b4:	f007 b918 	b.w	b5e8 <onoff_release>
    43b8:	bd10      	pop	{r4, pc}
    43ba:	bf00      	nop
    43bc:	20002594 	.word	0x20002594

000043c0 <usbd_evt_flush>:
{
    43c0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_queue_get(queue, timeout);
    43c2:	4d07      	ldr	r5, [pc, #28]	; (43e0 <usbd_evt_flush+0x20>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    43c4:	4c07      	ldr	r4, [pc, #28]	; (43e4 <usbd_evt_flush+0x24>)
    43c6:	2200      	movs	r2, #0
    43c8:	2300      	movs	r3, #0
    43ca:	4628      	mov	r0, r5
    43cc:	f004 f8b8 	bl	8540 <z_impl_k_queue_get>
		if (ev) {
    43d0:	b120      	cbz	r0, 43dc <usbd_evt_flush+0x1c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    43d2:	1d01      	adds	r1, r0, #4
    43d4:	4620      	mov	r0, r4
    43d6:	f008 fc4a 	bl	cc6e <k_mem_slab_free>
	} while (ev != NULL);
    43da:	e7f4      	b.n	43c6 <usbd_evt_flush+0x6>
}
    43dc:	bd38      	pop	{r3, r4, r5, pc}
    43de:	bf00      	nop
    43e0:	20000530 	.word	0x20000530
    43e4:	200004b0 	.word	0x200004b0

000043e8 <usbd_evt_alloc>:
{
    43e8:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
    43ea:	2300      	movs	r3, #0
    43ec:	4813      	ldr	r0, [pc, #76]	; (443c <usbd_evt_alloc+0x54>)
    43ee:	2200      	movs	r2, #0
    43f0:	a901      	add	r1, sp, #4
    43f2:	f003 fef5 	bl	81e0 <k_mem_slab_alloc>
    43f6:	b1d8      	cbz	r0, 4430 <usbd_evt_alloc+0x48>
		LOG_ERR("USBD event allocation failed!");
    43f8:	4811      	ldr	r0, [pc, #68]	; (4440 <usbd_evt_alloc+0x58>)
    43fa:	2145      	movs	r1, #69	; 0x45
    43fc:	f007 fbed 	bl	bbda <z_log_minimal_printk>
		usbd_evt_flush();
    4400:	f7ff ffde 	bl	43c0 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4404:	480d      	ldr	r0, [pc, #52]	; (443c <usbd_evt_alloc+0x54>)
    4406:	2200      	movs	r2, #0
    4408:	2300      	movs	r3, #0
    440a:	a901      	add	r1, sp, #4
    440c:	f003 fee8 	bl	81e0 <k_mem_slab_alloc>
    4410:	b128      	cbz	r0, 441e <usbd_evt_alloc+0x36>
			LOG_ERR("USBD event memory corrupted");
    4412:	480c      	ldr	r0, [pc, #48]	; (4444 <usbd_evt_alloc+0x5c>)
    4414:	2145      	movs	r1, #69	; 0x45
    4416:	f007 fbe0 	bl	bbda <z_log_minimal_printk>
			return NULL;
    441a:	2000      	movs	r0, #0
    441c:	e00a      	b.n	4434 <usbd_evt_alloc+0x4c>
		ev = (struct usbd_event *)block.data;
    441e:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4420:	2304      	movs	r3, #4
		ev->block = block;
    4422:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4424:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    4426:	f7ff ff73 	bl	4310 <usbd_evt_put>
		usbd_work_schedule();
    442a:	f7ff ff77 	bl	431c <usbd_work_schedule>
		return NULL;
    442e:	e7f4      	b.n	441a <usbd_evt_alloc+0x32>
	ev = (struct usbd_event *)block.data;
    4430:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    4432:	6040      	str	r0, [r0, #4]
}
    4434:	b003      	add	sp, #12
    4436:	f85d fb04 	ldr.w	pc, [sp], #4
    443a:	bf00      	nop
    443c:	200004b0 	.word	0x200004b0
    4440:	0000ef89 	.word	0x0000ef89
    4444:	0000efac 	.word	0x0000efac

00004448 <usbd_event_transfer_data>:
{
    4448:	b573      	push	{r0, r1, r4, r5, r6, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
    444a:	7883      	ldrb	r3, [r0, #2]
    444c:	9301      	str	r3, [sp, #4]
{
    444e:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    4450:	4618      	mov	r0, r3
    4452:	f7ff ff35 	bl	42c0 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4456:	9b01      	ldr	r3, [sp, #4]
    4458:	78f4      	ldrb	r4, [r6, #3]
    445a:	061a      	lsls	r2, r3, #24
		endpoint_ctx(p_event->data.eptransfer.ep);
    445c:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    445e:	d51c      	bpl.n	449a <usbd_event_transfer_data+0x52>
		switch (p_event->data.eptransfer.status) {
    4460:	b14c      	cbz	r4, 4476 <usbd_event_transfer_data+0x2e>
    4462:	2c03      	cmp	r4, #3
    4464:	d04c      	beq.n	4500 <usbd_event_transfer_data+0xb8>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4466:	4827      	ldr	r0, [pc, #156]	; (4504 <usbd_event_transfer_data+0xbc>)
    4468:	4622      	mov	r2, r4
    446a:	2145      	movs	r1, #69	; 0x45
}
    446c:	b002      	add	sp, #8
    446e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4472:	f007 bbb2 	b.w	bbda <z_log_minimal_printk>
			struct usbd_event *ev = usbd_evt_alloc();
    4476:	f7ff ffb7 	bl	43e8 <usbd_evt_alloc>
			if (!ev) {
    447a:	4603      	mov	r3, r0
    447c:	2800      	cmp	r0, #0
    447e:	d03f      	beq.n	4500 <usbd_event_transfer_data+0xb8>
			ev->evt_type = USBD_EVT_EP;
    4480:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4482:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    4484:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4486:	2203      	movs	r2, #3
    4488:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    448a:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    448c:	f7ff ff40 	bl	4310 <usbd_evt_put>
}
    4490:	b002      	add	sp, #8
    4492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
    4496:	f7ff bf41 	b.w	431c <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    449a:	b14c      	cbz	r4, 44b0 <usbd_event_transfer_data+0x68>
    449c:	2c01      	cmp	r4, #1
    449e:	d1e2      	bne.n	4466 <usbd_event_transfer_data+0x1e>
			struct usbd_event *ev = usbd_evt_alloc();
    44a0:	f7ff ffa2 	bl	43e8 <usbd_evt_alloc>
			if (!ev) {
    44a4:	4603      	mov	r3, r0
    44a6:	b358      	cbz	r0, 4500 <usbd_event_transfer_data+0xb8>
			ep_ctx->read_pending = true;
    44a8:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    44aa:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    44ac:	7304      	strb	r4, [r0, #12]
    44ae:	e7ec      	b.n	448a <usbd_event_transfer_data+0x42>
			struct usbd_event *ev = usbd_evt_alloc();
    44b0:	f7ff ff9a 	bl	43e8 <usbd_evt_alloc>
			if (!ev) {
    44b4:	b320      	cbz	r0, 4500 <usbd_event_transfer_data+0xb8>
				p_event->data.eptransfer.ep);
    44b6:	78b3      	ldrb	r3, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    44b8:	4a13      	ldr	r2, [pc, #76]	; (4508 <usbd_event_transfer_data+0xc0>)
    44ba:	f013 0f80 	tst.w	r3, #128	; 0x80
    44be:	f003 0108 	and.w	r1, r3, #8
    44c2:	d011      	beq.n	44e8 <usbd_event_transfer_data+0xa0>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    44c4:	b141      	cbz	r1, 44d8 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOIN.AMOUNT;
    44c6:	f8d2 36a8 	ldr.w	r3, [r2, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    44ca:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    44cc:	2301      	movs	r3, #1
    44ce:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    44d0:	2302      	movs	r3, #2
    44d2:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    44d4:	6085      	str	r5, [r0, #8]
			usbd_evt_put(ev);
    44d6:	e7d9      	b.n	448c <usbd_event_transfer_data+0x44>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    44d8:	f003 030f 	and.w	r3, r3, #15
    44dc:	2114      	movs	r1, #20
    44de:	fb01 2303 	mla	r3, r1, r3, r2
    44e2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    44e6:	e7f0      	b.n	44ca <usbd_event_transfer_data+0x82>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    44e8:	b111      	cbz	r1, 44f0 <usbd_event_transfer_data+0xa8>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    44ea:	f8d2 37a8 	ldr.w	r3, [r2, #1960]	; 0x7a8
    44ee:	e7ec      	b.n	44ca <usbd_event_transfer_data+0x82>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    44f0:	f003 030f 	and.w	r3, r3, #15
    44f4:	2114      	movs	r1, #20
    44f6:	fb01 2303 	mla	r3, r1, r3, r2
    44fa:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    44fe:	e7e4      	b.n	44ca <usbd_event_transfer_data+0x82>
}
    4500:	b002      	add	sp, #8
    4502:	bd70      	pop	{r4, r5, r6, pc}
    4504:	0000efcd 	.word	0x0000efcd
    4508:	40027000 	.word	0x40027000

0000450c <usbd_event_handler>:
{
    450c:	b570      	push	{r4, r5, r6, lr}
	struct usbd_event evt = {0};
    450e:	2214      	movs	r2, #20
{
    4510:	b08a      	sub	sp, #40	; 0x28
    4512:	4606      	mov	r6, r0
	struct usbd_event evt = {0};
    4514:	2100      	movs	r1, #0
    4516:	eb0d 0002 	add.w	r0, sp, r2
    451a:	f007 fd83 	bl	c024 <memset>
	switch (p_event->type) {
    451e:	7833      	ldrb	r3, [r6, #0]
    4520:	3b01      	subs	r3, #1
    4522:	2b05      	cmp	r3, #5
    4524:	d826      	bhi.n	4574 <usbd_event_handler+0x68>
    4526:	e8df f003 	tbb	[pc, r3]
    452a:	0389      	.short	0x0389
    452c:	19791717 	.word	0x19791717
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    4530:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    4532:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt_type = USBD_EVT_POWER;
    4536:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    4538:	f7ff ff56 	bl	43e8 <usbd_evt_alloc>
		if (!ev) {
    453c:	4603      	mov	r3, r0
    453e:	b1c8      	cbz	r0, 4574 <usbd_event_handler+0x68>
		ev->evt = evt.evt;
    4540:	2200      	movs	r2, #0
    4542:	f88d 2020 	strb.w	r2, [sp, #32]
		ev->evt_type = evt.evt_type;
    4546:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    4548:	f100 0208 	add.w	r2, r0, #8
    454c:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
    4550:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    4554:	4618      	mov	r0, r3
    4556:	e026      	b.n	45a6 <usbd_event_handler+0x9a>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    4558:	2304      	movs	r3, #4
    455a:	e7ea      	b.n	4532 <usbd_event_handler+0x26>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    455c:	78b3      	ldrb	r3, [r6, #2]
    455e:	9301      	str	r3, [sp, #4]
    4560:	4618      	mov	r0, r3
    4562:	f7ff fead 	bl	42c0 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    4566:	7a82      	ldrb	r2, [r0, #10]
    4568:	9b01      	ldr	r3, [sp, #4]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    456a:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    456c:	b122      	cbz	r2, 4578 <usbd_event_handler+0x6c>
    456e:	3a01      	subs	r2, #1
    4570:	2a02      	cmp	r2, #2
    4572:	d94f      	bls.n	4614 <usbd_event_handler+0x108>
}
    4574:	b00a      	add	sp, #40	; 0x28
    4576:	bd70      	pop	{r4, r5, r6, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4578:	061a      	lsls	r2, r3, #24
    457a:	78f4      	ldrb	r4, [r6, #3]
    457c:	d518      	bpl.n	45b0 <usbd_event_handler+0xa4>
		switch (p_event->data.eptransfer.status) {
    457e:	b13c      	cbz	r4, 4590 <usbd_event_handler+0x84>
    4580:	2c03      	cmp	r4, #3
    4582:	d0f7      	beq.n	4574 <usbd_event_handler+0x68>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4584:	482e      	ldr	r0, [pc, #184]	; (4640 <usbd_event_handler+0x134>)
    4586:	4622      	mov	r2, r4
    4588:	2145      	movs	r1, #69	; 0x45
    458a:	f007 fb26 	bl	bbda <z_log_minimal_printk>
    458e:	e7f1      	b.n	4574 <usbd_event_handler+0x68>
			struct usbd_event *ev = usbd_evt_alloc();
    4590:	f7ff ff2a 	bl	43e8 <usbd_evt_alloc>
			if (!ev) {
    4594:	4603      	mov	r3, r0
    4596:	2800      	cmp	r0, #0
    4598:	d0ec      	beq.n	4574 <usbd_event_handler+0x68>
			ev->evt_type = USBD_EVT_EP;
    459a:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    459c:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    459e:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    45a0:	2203      	movs	r2, #3
    45a2:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    45a4:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    45a6:	f7ff feb3 	bl	4310 <usbd_evt_put>
		usbd_work_schedule();
    45aa:	f7ff feb7 	bl	431c <usbd_work_schedule>
    45ae:	e7e1      	b.n	4574 <usbd_event_handler+0x68>
		switch (p_event->data.eptransfer.status) {
    45b0:	b154      	cbz	r4, 45c8 <usbd_event_handler+0xbc>
    45b2:	2c01      	cmp	r4, #1
    45b4:	d1e6      	bne.n	4584 <usbd_event_handler+0x78>
			struct usbd_event *ev = usbd_evt_alloc();
    45b6:	f7ff ff17 	bl	43e8 <usbd_evt_alloc>
			if (!ev) {
    45ba:	4603      	mov	r3, r0
    45bc:	2800      	cmp	r0, #0
    45be:	d0d9      	beq.n	4574 <usbd_event_handler+0x68>
			ep_ctx->read_pending = true;
    45c0:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    45c2:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    45c4:	7304      	strb	r4, [r0, #12]
    45c6:	e7ed      	b.n	45a4 <usbd_event_handler+0x98>
			struct usbd_event *ev = usbd_evt_alloc();
    45c8:	f7ff ff0e 	bl	43e8 <usbd_evt_alloc>
			if (!ev) {
    45cc:	4604      	mov	r4, r0
    45ce:	2800      	cmp	r0, #0
    45d0:	d0d0      	beq.n	4574 <usbd_event_handler+0x68>
			ev->evt_type = USBD_EVT_EP;
    45d2:	2301      	movs	r3, #1
    45d4:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    45d6:	2302      	movs	r3, #2
    45d8:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    45da:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    45dc:	f105 010c 	add.w	r1, r5, #12
    45e0:	78b0      	ldrb	r0, [r6, #2]
    45e2:	f008 fa7c 	bl	cade <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    45e6:	4602      	mov	r2, r0
    45e8:	b118      	cbz	r0, 45f2 <usbd_event_handler+0xe6>
				LOG_ERR("_ep_status_get failed! Code: %d",
    45ea:	4816      	ldr	r0, [pc, #88]	; (4644 <usbd_event_handler+0x138>)
    45ec:	2145      	movs	r1, #69	; 0x45
    45ee:	f007 faf4 	bl	bbda <z_log_minimal_printk>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    45f2:	4a15      	ldr	r2, [pc, #84]	; (4648 <usbd_event_handler+0x13c>)
    45f4:	68e9      	ldr	r1, [r5, #12]
    45f6:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    45fa:	428b      	cmp	r3, r1
    45fc:	d906      	bls.n	460c <usbd_event_handler+0x100>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    45fe:	1a5b      	subs	r3, r3, r1
    4600:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    4604:	f003 f9b6 	bl	7974 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    4608:	4620      	mov	r0, r4
    460a:	e7cc      	b.n	45a6 <usbd_event_handler+0x9a>
				ctx->ctrl_read_len = 0U;
    460c:	2300      	movs	r3, #0
    460e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    4612:	e7f9      	b.n	4608 <usbd_event_handler+0xfc>
			usbd_event_transfer_data(p_event);
    4614:	4630      	mov	r0, r6
    4616:	f7ff ff17 	bl	4448 <usbd_event_transfer_data>
	if (put_evt) {
    461a:	e7ab      	b.n	4574 <usbd_event_handler+0x68>
		nrfx_usbd_setup_get(&drv_setup);
    461c:	a803      	add	r0, sp, #12
    461e:	f003 f983 	bl	7928 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    4622:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4626:	2b05      	cmp	r3, #5
    4628:	d104      	bne.n	4634 <usbd_event_handler+0x128>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    462a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    462e:	f013 0f60 	tst.w	r3, #96	; 0x60
    4632:	d09f      	beq.n	4574 <usbd_event_handler+0x68>
			evt.evt.ep_evt.ep = ep_ctx;
    4634:	4b05      	ldr	r3, [pc, #20]	; (464c <usbd_event_handler+0x140>)
    4636:	9307      	str	r3, [sp, #28]
			evt.evt_type = USBD_EVT_EP;
    4638:	2401      	movs	r4, #1
    463a:	e77d      	b.n	4538 <usbd_event_handler+0x2c>
	switch (p_event->type) {
    463c:	2402      	movs	r4, #2
    463e:	e77b      	b.n	4538 <usbd_event_handler+0x2c>
    4640:	0000efcd 	.word	0x0000efcd
    4644:	0000effe 	.word	0x0000effe
    4648:	20002594 	.word	0x20002594
    464c:	20002700 	.word	0x20002700

00004650 <usb_dc_power_event_handler>:
	switch (event) {
    4650:	2802      	cmp	r0, #2
{
    4652:	b510      	push	{r4, lr}
    4654:	4602      	mov	r2, r0
    4656:	d811      	bhi.n	467c <usb_dc_power_event_handler+0x2c>
    4658:	4b0c      	ldr	r3, [pc, #48]	; (468c <usb_dc_power_event_handler+0x3c>)
    465a:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    465c:	f7ff fec4 	bl	43e8 <usbd_evt_alloc>
	if (!ev) {
    4660:	b190      	cbz	r0, 4688 <usb_dc_power_event_handler+0x38>
	ev->evt_type = USBD_EVT_POWER;
    4662:	2200      	movs	r2, #0
    4664:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    4666:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    4668:	f7ff fe52 	bl	4310 <usbd_evt_put>
	if (usbd_ctx.attached) {
    466c:	4b08      	ldr	r3, [pc, #32]	; (4690 <usb_dc_power_event_handler+0x40>)
    466e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4672:	b14b      	cbz	r3, 4688 <usb_dc_power_event_handler+0x38>
}
    4674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    4678:	f7ff be50 	b.w	431c <usbd_work_schedule>
}
    467c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unknown USB power event %d", event);
    4680:	4804      	ldr	r0, [pc, #16]	; (4694 <usb_dc_power_event_handler+0x44>)
    4682:	2145      	movs	r1, #69	; 0x45
    4684:	f007 baa9 	b.w	bbda <z_log_minimal_printk>
}
    4688:	bd10      	pop	{r4, pc}
    468a:	bf00      	nop
    468c:	0000f1ec 	.word	0x0000f1ec
    4690:	20002594 	.word	0x20002594
    4694:	0000f023 	.word	0x0000f023

00004698 <eps_ctx_init>:
{
    4698:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    469a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    469c:	f064 007f 	orn	r0, r4, #127	; 0x7f
    46a0:	b2c0      	uxtb	r0, r0
    46a2:	f7ff fe0d 	bl	42c0 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    46a6:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    46a8:	f007 fcce 	bl	c048 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    46ac:	2c08      	cmp	r4, #8
    46ae:	d1f5      	bne.n	469c <eps_ctx_init+0x4>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    46b0:	4d0f      	ldr	r5, [pc, #60]	; (46f0 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    46b2:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    46b4:	b2e0      	uxtb	r0, r4
    46b6:	f7ff fe03 	bl	42c0 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    46ba:	6903      	ldr	r3, [r0, #16]
    46bc:	b913      	cbnz	r3, 46c4 <eps_ctx_init+0x2c>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    46be:	eb05 1384 	add.w	r3, r5, r4, lsl #6
    46c2:	6103      	str	r3, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    46c4:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    46c6:	f007 fcbf 	bl	c048 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    46ca:	2c08      	cmp	r4, #8
    46cc:	d1f2      	bne.n	46b4 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    46ce:	4c09      	ldr	r4, [pc, #36]	; (46f4 <eps_ctx_init+0x5c>)
    46d0:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    46d4:	f007 fcb8 	bl	c048 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    46d8:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    46dc:	b913      	cbnz	r3, 46e4 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    46de:	4b06      	ldr	r3, [pc, #24]	; (46f8 <eps_ctx_init+0x60>)
    46e0:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    46e4:	4805      	ldr	r0, [pc, #20]	; (46fc <eps_ctx_init+0x64>)
    46e6:	f007 fcaf 	bl	c048 <ep_ctx_reset>
}
    46ea:	2000      	movs	r0, #0
    46ec:	bd38      	pop	{r3, r4, r5, pc}
    46ee:	bf00      	nop
    46f0:	20002394 	.word	0x20002394
    46f4:	20002594 	.word	0x20002594
    46f8:	20001f94 	.word	0x20001f94
    46fc:	20002800 	.word	0x20002800

00004700 <usbd_work_handler>:
{
    4700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4704:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 49c0 <usbd_work_handler+0x2c0>
	return get_usbd_ctx()->ready;
    4708:	4ca4      	ldr	r4, [pc, #656]	; (499c <usbd_work_handler+0x29c>)
{
    470a:	b085      	sub	sp, #20
    470c:	4607      	mov	r7, r0
    470e:	2200      	movs	r2, #0
    4710:	2300      	movs	r3, #0
    4712:	4648      	mov	r0, r9
    4714:	f003 ff14 	bl	8540 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    4718:	4606      	mov	r6, r0
    471a:	b910      	cbnz	r0, 4722 <usbd_work_handler+0x22>
}
    471c:	b005      	add	sp, #20
    471e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    4722:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    4726:	7c32      	ldrb	r2, [r6, #16]
    4728:	f106 0804 	add.w	r8, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    472c:	b93b      	cbnz	r3, 473e <usbd_work_handler+0x3e>
    472e:	2a00      	cmp	r2, #0
    4730:	f000 8098 	beq.w	4864 <usbd_work_handler+0x164>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4734:	489a      	ldr	r0, [pc, #616]	; (49a0 <usbd_work_handler+0x2a0>)
    4736:	4641      	mov	r1, r8
    4738:	f008 fa99 	bl	cc6e <k_mem_slab_free>
}
    473c:	e7e7      	b.n	470e <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    473e:	2a04      	cmp	r2, #4
    4740:	f200 8174 	bhi.w	4a2c <usbd_work_handler+0x32c>
    4744:	e8df f012 	tbh	[pc, r2, lsl #1]
    4748:	0005008e 	.word	0x0005008e
    474c:	013e0114 	.word	0x013e0114
    4750:	015e      	.short	0x015e
			if (!ctx->attached) {
    4752:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    4756:	b92b      	cbnz	r3, 4764 <usbd_work_handler+0x64>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    4758:	68b3      	ldr	r3, [r6, #8]
    475a:	4892      	ldr	r0, [pc, #584]	; (49a4 <usbd_work_handler+0x2a4>)
    475c:	7a5a      	ldrb	r2, [r3, #9]
    475e:	2145      	movs	r1, #69	; 0x45
    4760:	f007 fa3b 	bl	bbda <z_log_minimal_printk>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4764:	7b33      	ldrb	r3, [r6, #12]
    4766:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    4768:	2b03      	cmp	r3, #3
    476a:	d8e3      	bhi.n	4734 <usbd_work_handler+0x34>
    476c:	e8df f003 	tbb	[pc, r3]
    4770:	67623d02 	.word	0x67623d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4774:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    4776:	2208      	movs	r2, #8
    4778:	2100      	movs	r1, #0
    477a:	4630      	mov	r0, r6
    477c:	f007 fc52 	bl	c024 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4780:	4a89      	ldr	r2, [pc, #548]	; (49a8 <usbd_work_handler+0x2a8>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4782:	488a      	ldr	r0, [pc, #552]	; (49ac <usbd_work_handler+0x2ac>)
    4784:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    4788:	7033      	strb	r3, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    478a:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
    478e:	7073      	strb	r3, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4790:	f8d2 3488 	ldr.w	r3, [r2, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4794:	f8d2 148c 	ldr.w	r1, [r2, #1164]	; 0x48c
    4798:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    479c:	8073      	strh	r3, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    479e:	f8d2 3490 	ldr.w	r3, [r2, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    47a2:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
    47a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    47aa:	80b3      	strh	r3, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    47ac:	f8d2 3498 	ldr.w	r3, [r2, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    47b0:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
    47b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    47b8:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    47ba:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    47bc:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    47be:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    47c0:	f007 fc25 	bl	c00e <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    47c4:	682b      	ldr	r3, [r5, #0]
    47c6:	7a68      	ldrb	r0, [r5, #9]
    47c8:	2100      	movs	r1, #0
    47ca:	4798      	blx	r3
    47cc:	f996 3000 	ldrsb.w	r3, [r6]
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    47d0:	2b00      	cmp	r3, #0
    47d2:	db06      	blt.n	47e2 <usbd_work_handler+0xe2>
    47d4:	88f3      	ldrh	r3, [r6, #6]
    47d6:	b123      	cbz	r3, 47e2 <usbd_work_handler+0xe2>
		ctx->ctrl_read_len = usbd_setup->wLength;
    47d8:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    47dc:	f003 f8ca 	bl	7974 <nrfx_usbd_setup_data_clear>
    47e0:	e7a8      	b.n	4734 <usbd_work_handler+0x34>
		ctx->ctrl_read_len = 0U;
    47e2:	2300      	movs	r3, #0
    47e4:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    47e8:	e7a4      	b.n	4734 <usbd_work_handler+0x34>
	if (!ep_ctx->read_pending) {
    47ea:	7f6b      	ldrb	r3, [r5, #29]
    47ec:	2b00      	cmp	r3, #0
    47ee:	d0a1      	beq.n	4734 <usbd_work_handler+0x34>
	if (!ep_ctx->read_complete) {
    47f0:	7f2b      	ldrb	r3, [r5, #28]
    47f2:	2b00      	cmp	r3, #0
    47f4:	d09e      	beq.n	4734 <usbd_work_handler+0x34>
	ep_ctx->read_pending = false;
    47f6:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    47f8:	f04f 32ff 	mov.w	r2, #4294967295
	ep_ctx->read_pending = false;
    47fc:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    47fe:	f04f 33ff 	mov.w	r3, #4294967295
    4802:	486b      	ldr	r0, [pc, #428]	; (49b0 <usbd_work_handler+0x2b0>)
	ep_ctx->read_complete = false;
    4804:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4806:	f007 fc34 	bl	c072 <k_mutex_lock.constprop.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    480a:	696b      	ldr	r3, [r5, #20]
    480c:	9301      	str	r3, [sp, #4]
    480e:	686b      	ldr	r3, [r5, #4]
    4810:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4814:	a901      	add	r1, sp, #4
    4816:	7a68      	ldrb	r0, [r5, #9]
    4818:	f002 feb2 	bl	7580 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    481c:	4b65      	ldr	r3, [pc, #404]	; (49b4 <usbd_work_handler+0x2b4>)
    481e:	4298      	cmp	r0, r3
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4820:	4602      	mov	r2, r0
	if (err != NRFX_SUCCESS) {
    4822:	d003      	beq.n	482c <usbd_work_handler+0x12c>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    4824:	4864      	ldr	r0, [pc, #400]	; (49b8 <usbd_work_handler+0x2b8>)
    4826:	2145      	movs	r1, #69	; 0x45
    4828:	f007 f9d7 	bl	bbda <z_log_minimal_printk>
	k_mutex_unlock(&ctx->drv_lock);
    482c:	4860      	ldr	r0, [pc, #384]	; (49b0 <usbd_work_handler+0x2b0>)
    482e:	f007 fc1e 	bl	c06e <k_mutex_unlock>
    4832:	e77f      	b.n	4734 <usbd_work_handler+0x34>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4834:	682b      	ldr	r3, [r5, #0]
    4836:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4838:	7a68      	ldrb	r0, [r5, #9]
    483a:	4798      	blx	r3
		break;
    483c:	e77a      	b.n	4734 <usbd_work_handler+0x34>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    483e:	7aab      	ldrb	r3, [r5, #10]
    4840:	b96b      	cbnz	r3, 485e <usbd_work_handler+0x15e>
    4842:	7feb      	ldrb	r3, [r5, #31]
    4844:	b95b      	cbnz	r3, 485e <usbd_work_handler+0x15e>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4846:	f04f 32ff 	mov.w	r2, #4294967295
    484a:	f04f 33ff 	mov.w	r3, #4294967295
    484e:	4858      	ldr	r0, [pc, #352]	; (49b0 <usbd_work_handler+0x2b0>)
    4850:	f007 fc0f 	bl	c072 <k_mutex_lock.constprop.0>
			nrfx_usbd_setup_clear();
    4854:	f003 f8ba 	bl	79cc <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    4858:	4855      	ldr	r0, [pc, #340]	; (49b0 <usbd_work_handler+0x2b0>)
    485a:	f007 fc08 	bl	c06e <k_mutex_unlock>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    485e:	682b      	ldr	r3, [r5, #0]
    4860:	2102      	movs	r1, #2
    4862:	e7e9      	b.n	4838 <usbd_work_handler+0x138>
	switch (pwr_evt->state) {
    4864:	7a32      	ldrb	r2, [r6, #8]
    4866:	2a04      	cmp	r2, #4
    4868:	f63f af64 	bhi.w	4734 <usbd_work_handler+0x34>
    486c:	e8df f002 	tbb	[pc, r2]
    4870:	6925035b 	.word	0x6925035b
    4874:	75          	.byte	0x75
    4875:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    4876:	f002 fe33 	bl	74e0 <nrfx_usbd_is_enabled>
    487a:	4605      	mov	r5, r0
    487c:	2800      	cmp	r0, #0
    487e:	f47f af59 	bne.w	4734 <usbd_work_handler+0x34>
			nrfx_usbd_enable();
    4882:	f002 fd6f 	bl	7364 <nrfx_usbd_enable>
    4886:	f3bf 8f5b 	dmb	ish
    488a:	494c      	ldr	r1, [pc, #304]	; (49bc <usbd_work_handler+0x2bc>)
    488c:	2301      	movs	r3, #1
    488e:	e851 2f00 	ldrex	r2, [r1]
    4892:	2a00      	cmp	r2, #0
    4894:	d103      	bne.n	489e <usbd_work_handler+0x19e>
    4896:	e841 3000 	strex	r0, r3, [r1]
    489a:	2800      	cmp	r0, #0
    489c:	d1f7      	bne.n	488e <usbd_work_handler+0x18e>
    489e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    48a2:	f47f af47 	bne.w	4734 <usbd_work_handler+0x34>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    48a6:	f841 5c10 	str.w	r5, [r1, #-16]
    48aa:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    48ae:	69e0      	ldr	r0, [r4, #28]
    48b0:	6163      	str	r3, [r4, #20]
    48b2:	3914      	subs	r1, #20
    48b4:	f006 fe4f 	bl	b556 <onoff_request>
    48b8:	e73c      	b.n	4734 <usbd_work_handler+0x34>
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
    48ba:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    48bc:	f065 007f 	orn	r0, r5, #127	; 0x7f
    48c0:	b2c0      	uxtb	r0, r0
    48c2:	f7ff fcfd 	bl	42c0 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    48c6:	7a03      	ldrb	r3, [r0, #8]
    48c8:	b113      	cbz	r3, 48d0 <usbd_work_handler+0x1d0>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    48ca:	7a40      	ldrb	r0, [r0, #9]
    48cc:	f003 fa64 	bl	7d98 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    48d0:	3501      	adds	r5, #1
    48d2:	2d08      	cmp	r5, #8
    48d4:	d1f2      	bne.n	48bc <usbd_work_handler+0x1bc>
		if (ep_ctx->cfg.en) {
    48d6:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    48da:	b11b      	cbz	r3, 48e4 <usbd_work_handler+0x1e4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    48dc:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    48e0:	f003 fa5a 	bl	7d98 <nrfx_usbd_ep_enable>
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
    48e4:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    48e6:	b2e8      	uxtb	r0, r5
    48e8:	f7ff fcea 	bl	42c0 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    48ec:	7a03      	ldrb	r3, [r0, #8]
    48ee:	b113      	cbz	r3, 48f6 <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    48f0:	7a40      	ldrb	r0, [r0, #9]
    48f2:	f003 fa51 	bl	7d98 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    48f6:	3501      	adds	r5, #1
    48f8:	2d08      	cmp	r5, #8
    48fa:	d1f4      	bne.n	48e6 <usbd_work_handler+0x1e6>
		if (ep_ctx->cfg.en) {
    48fc:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4900:	b11b      	cbz	r3, 490a <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4902:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    4906:	f003 fa47 	bl	7d98 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    490a:	2001      	movs	r0, #1
    490c:	f002 fdc2 	bl	7494 <nrfx_usbd_start>
		ctx->ready = true;
    4910:	2301      	movs	r3, #1
    4912:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    4916:	6823      	ldr	r3, [r4, #0]
    4918:	2b00      	cmp	r3, #0
    491a:	f43f af0b 	beq.w	4734 <usbd_work_handler+0x34>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    491e:	2100      	movs	r1, #0
    4920:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    4922:	4798      	blx	r3
    4924:	e706      	b.n	4734 <usbd_work_handler+0x34>
		ctx->ready = false;
    4926:	2500      	movs	r5, #0
    4928:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    492c:	f003 f9c0 	bl	7cb0 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4930:	f7ff fd20 	bl	4374 <hfxo_stop.constprop.0>
		if (ctx->status_cb) {
    4934:	6823      	ldr	r3, [r4, #0]
    4936:	2b00      	cmp	r3, #0
    4938:	f43f aefc 	beq.w	4734 <usbd_work_handler+0x34>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    493c:	4629      	mov	r1, r5
    493e:	2004      	movs	r0, #4
    4940:	e7ef      	b.n	4922 <usbd_work_handler+0x222>
		if (dev_ready()) {
    4942:	2b00      	cmp	r3, #0
    4944:	f43f aef6 	beq.w	4734 <usbd_work_handler+0x34>
			nrfx_usbd_suspend();
    4948:	f003 f9ca 	bl	7ce0 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    494c:	6823      	ldr	r3, [r4, #0]
    494e:	2b00      	cmp	r3, #0
    4950:	f43f aef0 	beq.w	4734 <usbd_work_handler+0x34>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4954:	2100      	movs	r1, #0
    4956:	2005      	movs	r0, #5
    4958:	e7e3      	b.n	4922 <usbd_work_handler+0x222>
		if (ctx->status_cb && dev_ready()) {
    495a:	6822      	ldr	r2, [r4, #0]
    495c:	2a00      	cmp	r2, #0
    495e:	f43f aee9 	beq.w	4734 <usbd_work_handler+0x34>
    4962:	2b00      	cmp	r3, #0
    4964:	f43f aee6 	beq.w	4734 <usbd_work_handler+0x34>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4968:	2100      	movs	r1, #0
    496a:	2006      	movs	r0, #6
    496c:	4790      	blx	r2
    496e:	e6e1      	b.n	4734 <usbd_work_handler+0x34>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4970:	f107 0510 	add.w	r5, r7, #16
    4974:	f04f 33ff 	mov.w	r3, #4294967295
    4978:	f04f 32ff 	mov.w	r2, #4294967295
    497c:	4628      	mov	r0, r5
    497e:	f007 fb78 	bl	c072 <k_mutex_lock.constprop.0>
			eps_ctx_init();
    4982:	f7ff fe89 	bl	4698 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4986:	4628      	mov	r0, r5
    4988:	f007 fb71 	bl	c06e <k_mutex_unlock>
			if (ctx->status_cb) {
    498c:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4990:	2b00      	cmp	r3, #0
    4992:	f43f aecf 	beq.w	4734 <usbd_work_handler+0x34>
				ctx->status_cb(USB_DC_RESET, NULL);
    4996:	2100      	movs	r1, #0
    4998:	2001      	movs	r0, #1
    499a:	e7c2      	b.n	4922 <usbd_work_handler+0x222>
    499c:	20002594 	.word	0x20002594
    49a0:	200004b0 	.word	0x200004b0
    49a4:	0000f043 	.word	0x0000f043
    49a8:	40027000 	.word	0x40027000
    49ac:	20002598 	.word	0x20002598
    49b0:	200025cc 	.word	0x200025cc
    49b4:	0bad0000 	.word	0x0bad0000
    49b8:	0000f06e 	.word	0x0000f06e
    49bc:	200025b4 	.word	0x200025b4
    49c0:	20000530 	.word	0x20000530
	if (ep_ctx->cfg.en) {
    49c4:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    49c8:	b15b      	cbz	r3, 49e2 <usbd_work_handler+0x2e2>
		ep_ctx->read_pending = true;
    49ca:	2501      	movs	r5, #1
    49cc:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    49d0:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    49d4:	f7ff fd08 	bl	43e8 <usbd_evt_alloc>
		if (!ev) {
    49d8:	b958      	cbnz	r0, 49f2 <usbd_work_handler+0x2f2>
			LOG_ERR("Failed to alloc evt");
    49da:	4817      	ldr	r0, [pc, #92]	; (4a38 <usbd_work_handler+0x338>)
    49dc:	2145      	movs	r1, #69	; 0x45
    49de:	f007 f8fc 	bl	bbda <z_log_minimal_printk>
			if (ctx->status_cb) {
    49e2:	f857 3c28 	ldr.w	r3, [r7, #-40]
    49e6:	2b00      	cmp	r3, #0
    49e8:	f43f aea4 	beq.w	4734 <usbd_work_handler+0x34>
				ctx->status_cb(USB_DC_SOF, NULL);
    49ec:	2100      	movs	r1, #0
    49ee:	200a      	movs	r0, #10
    49f0:	e797      	b.n	4922 <usbd_work_handler+0x222>
		ev->evt.ep_evt.ep = ep_ctx;
    49f2:	4a12      	ldr	r2, [pc, #72]	; (4a3c <usbd_work_handler+0x33c>)
		ev->evt_type = USBD_EVT_EP;
    49f4:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    49f6:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    49f8:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    49fa:	f7ff fc89 	bl	4310 <usbd_evt_put>
		usbd_work_schedule();
    49fe:	f7ff fc8d 	bl	431c <usbd_work_schedule>
    4a02:	e7ee      	b.n	49e2 <usbd_work_handler+0x2e2>
				LOG_ERR("USBD event queue full!");
    4a04:	2145      	movs	r1, #69	; 0x45
    4a06:	480e      	ldr	r0, [pc, #56]	; (4a40 <usbd_work_handler+0x340>)
    4a08:	f007 f8e7 	bl	bbda <z_log_minimal_printk>
	nrfx_power_usbevt_disable();
    4a0c:	f007 ffdd 	bl	c9ca <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    4a10:	f003 f94e 	bl	7cb0 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4a14:	f002 fc9c 	bl	7350 <nrfx_usbd_uninit>
	usbd_evt_flush();
    4a18:	f7ff fcd2 	bl	43c0 <usbd_evt_flush>
	ret = eps_ctx_init();
    4a1c:	f7ff fe3c 	bl	4698 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4a20:	f007 ffcc 	bl	c9bc <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4a24:	4807      	ldr	r0, [pc, #28]	; (4a44 <usbd_work_handler+0x344>)
    4a26:	f002 fd65 	bl	74f4 <nrfx_usbd_init>
}
    4a2a:	e683      	b.n	4734 <usbd_work_handler+0x34>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    4a2c:	4806      	ldr	r0, [pc, #24]	; (4a48 <usbd_work_handler+0x348>)
    4a2e:	2145      	movs	r1, #69	; 0x45
    4a30:	f007 f8d3 	bl	bbda <z_log_minimal_printk>
    4a34:	e67e      	b.n	4734 <usbd_work_handler+0x34>
    4a36:	bf00      	nop
    4a38:	0000f099 	.word	0x0000f099
    4a3c:	20002800 	.word	0x20002800
    4a40:	0000f0b2 	.word	0x0000f0b2
    4a44:	0000450d 	.word	0x0000450d
    4a48:	0000f0ce 	.word	0x0000f0ce

00004a4c <usb_dc_attach>:
{
    4a4c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    4a4e:	4d1a      	ldr	r5, [pc, #104]	; (4ab8 <usb_dc_attach+0x6c>)
    4a50:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    4a54:	bb5c      	cbnz	r4, 4aae <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
    4a56:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4a5a:	f008 f94a 	bl	ccf2 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4a5e:	4620      	mov	r0, r4
    4a60:	f000 fbf2 	bl	5248 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4a64:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
    4a66:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4a68:	2101      	movs	r1, #1
    4a6a:	2027      	movs	r0, #39	; 0x27
    4a6c:	f7fe fef6 	bl	385c <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    4a70:	4812      	ldr	r0, [pc, #72]	; (4abc <usb_dc_attach+0x70>)
    4a72:	f002 fd3f 	bl	74f4 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    4a76:	4b12      	ldr	r3, [pc, #72]	; (4ac0 <usb_dc_attach+0x74>)
    4a78:	4298      	cmp	r0, r3
    4a7a:	d11a      	bne.n	4ab2 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
    4a7c:	f007 ff9e 	bl	c9bc <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    4a80:	f7ff fe0a 	bl	4698 <eps_ctx_init>
	if (ret == 0) {
    4a84:	4604      	mov	r4, r0
    4a86:	b910      	cbnz	r0, 4a8e <usb_dc_attach+0x42>
		ctx->attached = true;
    4a88:	2301      	movs	r3, #1
    4a8a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    4a8e:	4b0d      	ldr	r3, [pc, #52]	; (4ac4 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	b10b      	cbz	r3, 4a98 <usb_dc_attach+0x4c>
		usbd_work_schedule();
    4a94:	f7ff fc42 	bl	431c <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    4a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a9c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    4aa0:	07db      	lsls	r3, r3, #31
    4aa2:	d502      	bpl.n	4aaa <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    4aa4:	2000      	movs	r0, #0
    4aa6:	f7ff fdd3 	bl	4650 <usb_dc_power_event_handler>
}
    4aaa:	4620      	mov	r0, r4
    4aac:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    4aae:	2400      	movs	r4, #0
    4ab0:	e7fb      	b.n	4aaa <usb_dc_attach+0x5e>
		return -EIO;
    4ab2:	f06f 0404 	mvn.w	r4, #4
    4ab6:	e7f8      	b.n	4aaa <usb_dc_attach+0x5e>
    4ab8:	20002594 	.word	0x20002594
    4abc:	0000450d 	.word	0x0000450d
    4ac0:	0bad0000 	.word	0x0bad0000
    4ac4:	20000530 	.word	0x20000530

00004ac8 <usb_dc_detach>:
{
    4ac8:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4aca:	f04f 32ff 	mov.w	r2, #4294967295
    4ace:	f04f 33ff 	mov.w	r3, #4294967295
    4ad2:	481f      	ldr	r0, [pc, #124]	; (4b50 <usb_dc_detach+0x88>)
    4ad4:	f007 facd 	bl	c072 <k_mutex_lock.constprop.0>
	usbd_evt_flush();
    4ad8:	f7ff fc72 	bl	43c0 <usbd_evt_flush>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4adc:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4ade:	f064 007f 	orn	r0, r4, #127	; 0x7f
    4ae2:	b2c0      	uxtb	r0, r0
    4ae4:	f7ff fbec 	bl	42c0 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4ae8:	3401      	adds	r4, #1
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    4aea:	2220      	movs	r2, #32
    4aec:	2100      	movs	r1, #0
    4aee:	f007 fa99 	bl	c024 <memset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4af2:	2c08      	cmp	r4, #8
    4af4:	d1f3      	bne.n	4ade <usb_dc_detach+0x16>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4af6:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4af8:	b2e0      	uxtb	r0, r4
    4afa:	f7ff fbe1 	bl	42c0 <endpoint_ctx>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4afe:	3401      	adds	r4, #1
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    4b00:	2220      	movs	r2, #32
    4b02:	2100      	movs	r1, #0
    4b04:	f007 fa8e 	bl	c024 <memset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4b08:	2c08      	cmp	r4, #8
    4b0a:	d1f5      	bne.n	4af8 <usb_dc_detach+0x30>
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    4b0c:	2220      	movs	r2, #32
    4b0e:	2100      	movs	r1, #0
    4b10:	4810      	ldr	r0, [pc, #64]	; (4b54 <usb_dc_detach+0x8c>)
    4b12:	f007 fa87 	bl	c024 <memset>
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    4b16:	2220      	movs	r2, #32
    4b18:	2100      	movs	r1, #0
    4b1a:	480f      	ldr	r0, [pc, #60]	; (4b58 <usb_dc_detach+0x90>)
    4b1c:	f007 fa82 	bl	c024 <memset>
	if (nrfx_usbd_is_enabled()) {
    4b20:	f002 fcde 	bl	74e0 <nrfx_usbd_is_enabled>
    4b24:	b108      	cbz	r0, 4b2a <usb_dc_detach+0x62>
		nrfx_usbd_disable();
    4b26:	f003 f8c3 	bl	7cb0 <nrfx_usbd_disable>
	if (nrfx_usbd_is_initialized()) {
    4b2a:	f002 fcd1 	bl	74d0 <nrfx_usbd_is_initialized>
    4b2e:	b108      	cbz	r0, 4b34 <usb_dc_detach+0x6c>
		nrfx_usbd_uninit();
    4b30:	f002 fc0e 	bl	7350 <nrfx_usbd_uninit>
	(void)hfxo_stop(ctx);
    4b34:	f7ff fc1e 	bl	4374 <hfxo_stop.constprop.0>
	nrfx_power_usbevt_disable();
    4b38:	f007 ff47 	bl	c9ca <nrfx_power_usbevt_disable>
	ctx->attached = false;
    4b3c:	4807      	ldr	r0, [pc, #28]	; (4b5c <usb_dc_detach+0x94>)
    4b3e:	2400      	movs	r4, #0
    4b40:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
	k_mutex_unlock(&ctx->drv_lock);
    4b44:	3038      	adds	r0, #56	; 0x38
    4b46:	f007 fa92 	bl	c06e <k_mutex_unlock>
}
    4b4a:	4620      	mov	r0, r4
    4b4c:	bd10      	pop	{r4, pc}
    4b4e:	bf00      	nop
    4b50:	200025cc 	.word	0x200025cc
    4b54:	200026e0 	.word	0x200026e0
    4b58:	20002800 	.word	0x20002800
    4b5c:	20002594 	.word	0x20002594

00004b60 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    4b60:	4b07      	ldr	r3, [pc, #28]	; (4b80 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    4b62:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4b66:	b13a      	cbz	r2, 4b78 <usb_dc_set_address+0x18>
    4b68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4b6c:	2b00      	cmp	r3, #0
	return 0;
    4b6e:	bf0c      	ite	eq
    4b70:	f06f 0012 	mvneq.w	r0, #18
    4b74:	2000      	movne	r0, #0
    4b76:	4770      	bx	lr
		return -ENODEV;
    4b78:	f06f 0012 	mvn.w	r0, #18
}
    4b7c:	4770      	bx	lr
    4b7e:	bf00      	nop
    4b80:	20002594 	.word	0x20002594

00004b84 <usb_dc_ep_check_cap>:
{
    4b84:	b508      	push	{r3, lr}
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    4b86:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    4b88:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    4b8a:	f002 030f 	and.w	r3, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    4b8e:	b939      	cbnz	r1, 4ba0 <usb_dc_ep_check_cap+0x1c>
    4b90:	b193      	cbz	r3, 4bb8 <usb_dc_ep_check_cap+0x34>
		LOG_ERR("invalid endpoint configuration");
    4b92:	480a      	ldr	r0, [pc, #40]	; (4bbc <usb_dc_ep_check_cap+0x38>)
    4b94:	2145      	movs	r1, #69	; 0x45
		LOG_WRN("invalid endpoint type");
    4b96:	f007 f820 	bl	bbda <z_log_minimal_printk>
		return -1;
    4b9a:	f04f 30ff 	mov.w	r0, #4294967295
}
    4b9e:	bd08      	pop	{r3, pc}
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    4ba0:	2b08      	cmp	r3, #8
    4ba2:	d902      	bls.n	4baa <usb_dc_ep_check_cap+0x26>
		LOG_ERR("invalid endpoint index/address");
    4ba4:	4806      	ldr	r0, [pc, #24]	; (4bc0 <usb_dc_ep_check_cap+0x3c>)
    4ba6:	2145      	movs	r1, #69	; 0x45
    4ba8:	e7f5      	b.n	4b96 <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    4baa:	2901      	cmp	r1, #1
    4bac:	d104      	bne.n	4bb8 <usb_dc_ep_check_cap+0x34>
    4bae:	0713      	lsls	r3, r2, #28
    4bb0:	d402      	bmi.n	4bb8 <usb_dc_ep_check_cap+0x34>
		LOG_WRN("invalid endpoint type");
    4bb2:	4804      	ldr	r0, [pc, #16]	; (4bc4 <usb_dc_ep_check_cap+0x40>)
    4bb4:	2157      	movs	r1, #87	; 0x57
    4bb6:	e7ee      	b.n	4b96 <usb_dc_ep_check_cap+0x12>
	return 0;
    4bb8:	2000      	movs	r0, #0
    4bba:	e7f0      	b.n	4b9e <usb_dc_ep_check_cap+0x1a>
    4bbc:	0000f0ea 	.word	0x0000f0ea
    4bc0:	0000f10e 	.word	0x0000f10e
    4bc4:	0000f132 	.word	0x0000f132

00004bc8 <usb_dc_ep_configure>:
{
    4bc8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4bca:	4b11      	ldr	r3, [pc, #68]	; (4c10 <usb_dc_ep_configure+0x48>)
	if (!dev_attached()) {
    4bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    4bd0:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4bd2:	b1d3      	cbz	r3, 4c0a <usb_dc_ep_configure+0x42>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    4bd4:	7805      	ldrb	r5, [r0, #0]
    4bd6:	4628      	mov	r0, r5
    4bd8:	f7ff fb72 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    4bdc:	b168      	cbz	r0, 4bfa <usb_dc_ep_configure+0x32>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4bde:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    4be0:	7923      	ldrb	r3, [r4, #4]
    4be2:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    4be4:	8861      	ldrh	r1, [r4, #2]
    4be6:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4be8:	072b      	lsls	r3, r5, #28
    4bea:	d409      	bmi.n	4c00 <usb_dc_ep_configure+0x38>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    4bec:	1e4b      	subs	r3, r1, #1
    4bee:	420b      	tst	r3, r1
    4bf0:	d006      	beq.n	4c00 <usb_dc_ep_configure+0x38>
			LOG_ERR("EP max packet size must be a power of 2");
    4bf2:	4808      	ldr	r0, [pc, #32]	; (4c14 <usb_dc_ep_configure+0x4c>)
    4bf4:	2145      	movs	r1, #69	; 0x45
    4bf6:	f006 fff0 	bl	bbda <z_log_minimal_printk>
		return -EINVAL;
    4bfa:	f06f 0015 	mvn.w	r0, #21
    4bfe:	e003      	b.n	4c08 <usb_dc_ep_configure+0x40>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4c00:	4628      	mov	r0, r5
    4c02:	f007 ff67 	bl	cad4 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4c06:	2000      	movs	r0, #0
}
    4c08:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4c0a:	f06f 0012 	mvn.w	r0, #18
    4c0e:	e7fb      	b.n	4c08 <usb_dc_ep_configure+0x40>
    4c10:	20002594 	.word	0x20002594
    4c14:	0000f14d 	.word	0x0000f14d

00004c18 <usb_dc_ep_set_stall>:
{
    4c18:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4c1a:	4b14      	ldr	r3, [pc, #80]	; (4c6c <usb_dc_ep_set_stall+0x54>)
	if (!dev_attached() || !dev_ready()) {
    4c1c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4c20:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4c22:	b302      	cbz	r2, 4c66 <usb_dc_ep_set_stall+0x4e>
    4c24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4c28:	b1eb      	cbz	r3, 4c66 <usb_dc_ep_set_stall+0x4e>
	ep_ctx = endpoint_ctx(ep);
    4c2a:	f7ff fb49 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    4c2e:	4604      	mov	r4, r0
    4c30:	b1b0      	cbz	r0, 4c60 <usb_dc_ep_set_stall+0x48>
	switch (ep_ctx->cfg.type) {
    4c32:	7a83      	ldrb	r3, [r0, #10]
    4c34:	2b01      	cmp	r3, #1
    4c36:	d00f      	beq.n	4c58 <usb_dc_ep_set_stall+0x40>
    4c38:	d907      	bls.n	4c4a <usb_dc_ep_set_stall+0x32>
    4c3a:	3b02      	subs	r3, #2
    4c3c:	2b01      	cmp	r3, #1
    4c3e:	d907      	bls.n	4c50 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4c40:	6962      	ldr	r2, [r4, #20]
    4c42:	61a2      	str	r2, [r4, #24]
	ep_ctx->buf.len = 0U;
    4c44:	2000      	movs	r0, #0
    4c46:	60e0      	str	r0, [r4, #12]
}
    4c48:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
    4c4a:	f002 fec7 	bl	79dc <nrfx_usbd_setup_stall>
		break;
    4c4e:	e7f7      	b.n	4c40 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    4c50:	4628      	mov	r0, r5
    4c52:	f002 fe3b 	bl	78cc <nrfx_usbd_ep_stall>
		break;
    4c56:	e7f3      	b.n	4c40 <usb_dc_ep_set_stall+0x28>
		LOG_ERR("STALL unsupported on ISO endpoint");
    4c58:	4805      	ldr	r0, [pc, #20]	; (4c70 <usb_dc_ep_set_stall+0x58>)
    4c5a:	2145      	movs	r1, #69	; 0x45
    4c5c:	f006 ffbd 	bl	bbda <z_log_minimal_printk>
		return -EINVAL;
    4c60:	f06f 0015 	mvn.w	r0, #21
    4c64:	e7f0      	b.n	4c48 <usb_dc_ep_set_stall+0x30>
		return -ENODEV;
    4c66:	f06f 0012 	mvn.w	r0, #18
    4c6a:	e7ed      	b.n	4c48 <usb_dc_ep_set_stall+0x30>
    4c6c:	20002594 	.word	0x20002594
    4c70:	0000f17a 	.word	0x0000f17a

00004c74 <usb_dc_ep_clear_stall>:
{
    4c74:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4c76:	4b0e      	ldr	r3, [pc, #56]	; (4cb0 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    4c78:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4c7c:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    4c7e:	b182      	cbz	r2, 4ca2 <usb_dc_ep_clear_stall+0x2e>
    4c80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4c84:	b16b      	cbz	r3, 4ca2 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    4c86:	f7ff fb1b 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    4c8a:	b168      	cbz	r0, 4ca8 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    4c8c:	f015 0408 	ands.w	r4, r5, #8
    4c90:	d10a      	bne.n	4ca8 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4c92:	4628      	mov	r0, r5
    4c94:	f002 fe3c 	bl	7910 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4c98:	4628      	mov	r0, r5
    4c9a:	f003 f8cf 	bl	7e3c <nrfx_usbd_ep_stall_clear>
	return 0;
    4c9e:	4620      	mov	r0, r4
}
    4ca0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4ca2:	f06f 0012 	mvn.w	r0, #18
    4ca6:	e7fb      	b.n	4ca0 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    4ca8:	f06f 0015 	mvn.w	r0, #21
    4cac:	e7f8      	b.n	4ca0 <usb_dc_ep_clear_stall+0x2c>
    4cae:	bf00      	nop
    4cb0:	20002594 	.word	0x20002594

00004cb4 <usb_dc_ep_is_stalled>:
{
    4cb4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4cb6:	4b0c      	ldr	r3, [pc, #48]	; (4ce8 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    4cb8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4cbc:	4605      	mov	r5, r0
    4cbe:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    4cc0:	b162      	cbz	r2, 4cdc <usb_dc_ep_is_stalled+0x28>
    4cc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4cc6:	b14b      	cbz	r3, 4cdc <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4cc8:	f7ff fafa 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    4ccc:	b148      	cbz	r0, 4ce2 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    4cce:	b144      	cbz	r4, 4ce2 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4cd0:	4628      	mov	r0, r5
    4cd2:	f002 fe03 	bl	78dc <nrfx_usbd_ep_stall_check>
    4cd6:	7020      	strb	r0, [r4, #0]
	return 0;
    4cd8:	2000      	movs	r0, #0
}
    4cda:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4cdc:	f06f 0012 	mvn.w	r0, #18
    4ce0:	e7fb      	b.n	4cda <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4ce2:	f06f 0015 	mvn.w	r0, #21
    4ce6:	e7f8      	b.n	4cda <usb_dc_ep_is_stalled+0x26>
    4ce8:	20002594 	.word	0x20002594

00004cec <usb_dc_ep_enable>:
{
    4cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    4cee:	4e13      	ldr	r6, [pc, #76]	; (4d3c <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    4cf0:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
{
    4cf4:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4cf6:	b1ba      	cbz	r2, 4d28 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    4cf8:	f7ff fae2 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    4cfc:	4605      	mov	r5, r0
    4cfe:	b1b0      	cbz	r0, 4d2e <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4d00:	0723      	lsls	r3, r4, #28
    4d02:	d405      	bmi.n	4d10 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4d04:	4620      	mov	r0, r4
    4d06:	f002 fe03 	bl	7910 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4d0a:	4620      	mov	r0, r4
    4d0c:	f003 f896 	bl	7e3c <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4d10:	7a2f      	ldrb	r7, [r5, #8]
    4d12:	b97f      	cbnz	r7, 4d34 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
    4d14:	f896 0025 	ldrb.w	r0, [r6, #37]	; 0x25
	ep_ctx->cfg.en = true;
    4d18:	2301      	movs	r3, #1
    4d1a:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4d1c:	b118      	cbz	r0, 4d26 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    4d1e:	4620      	mov	r0, r4
    4d20:	f003 f83a 	bl	7d98 <nrfx_usbd_ep_enable>
	return 0;
    4d24:	4638      	mov	r0, r7
}
    4d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    4d28:	f06f 0012 	mvn.w	r0, #18
    4d2c:	e7fb      	b.n	4d26 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    4d2e:	f06f 0015 	mvn.w	r0, #21
    4d32:	e7f8      	b.n	4d26 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    4d34:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4d38:	e7f5      	b.n	4d26 <usb_dc_ep_enable+0x3a>
    4d3a:	bf00      	nop
    4d3c:	20002594 	.word	0x20002594

00004d40 <usb_dc_ep_disable>:
{
    4d40:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4d42:	4b11      	ldr	r3, [pc, #68]	; (4d88 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    4d44:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4d48:	4604      	mov	r4, r0
	if (!dev_attached() || !dev_ready()) {
    4d4a:	b19a      	cbz	r2, 4d74 <usb_dc_ep_disable+0x34>
    4d4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4d50:	b183      	cbz	r3, 4d74 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    4d52:	f7ff fab5 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    4d56:	4605      	mov	r5, r0
    4d58:	b178      	cbz	r0, 4d7a <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    4d5a:	7a03      	ldrb	r3, [r0, #8]
    4d5c:	b183      	cbz	r3, 4d80 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    4d5e:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    4d60:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    4d62:	f002 ffed 	bl	7d40 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    4d66:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    4d68:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    4d6a:	f007 f96d 	bl	c048 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    4d6e:	722c      	strb	r4, [r5, #8]
	return 0;
    4d70:	4620      	mov	r0, r4
}
    4d72:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4d74:	f06f 0012 	mvn.w	r0, #18
    4d78:	e7fb      	b.n	4d72 <usb_dc_ep_disable+0x32>
		return -EINVAL;
    4d7a:	f06f 0015 	mvn.w	r0, #21
    4d7e:	e7f8      	b.n	4d72 <usb_dc_ep_disable+0x32>
		return -EALREADY;
    4d80:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4d84:	e7f5      	b.n	4d72 <usb_dc_ep_disable+0x32>
    4d86:	bf00      	nop
    4d88:	20002594 	.word	0x20002594

00004d8c <usb_dc_ep_write>:
{
    4d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    4d90:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 4e90 <usb_dc_ep_write+0x104>
{
    4d94:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    4d96:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    4d9a:	4607      	mov	r7, r0
    4d9c:	4689      	mov	r9, r1
    4d9e:	4616      	mov	r6, r2
    4da0:	46c2      	mov	sl, r8
	if (!dev_attached() || !dev_ready()) {
    4da2:	2b00      	cmp	r3, #0
    4da4:	d069      	beq.n	4e7a <usb_dc_ep_write+0xee>
    4da6:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    4daa:	2b00      	cmp	r3, #0
    4dac:	d065      	beq.n	4e7a <usb_dc_ep_write+0xee>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    4dae:	0603      	lsls	r3, r0, #24
    4db0:	d50a      	bpl.n	4dc8 <usb_dc_ep_write+0x3c>
	ep_ctx = endpoint_ctx(ep);
    4db2:	f7ff fa85 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    4db6:	4605      	mov	r5, r0
    4db8:	b130      	cbz	r0, 4dc8 <usb_dc_ep_write+0x3c>
	if (!ep_ctx->cfg.en) {
    4dba:	7a03      	ldrb	r3, [r0, #8]
    4dbc:	b93b      	cbnz	r3, 4dce <usb_dc_ep_write+0x42>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    4dbe:	4830      	ldr	r0, [pc, #192]	; (4e80 <usb_dc_ep_write+0xf4>)
    4dc0:	463a      	mov	r2, r7
    4dc2:	2145      	movs	r1, #69	; 0x45
    4dc4:	f006 ff09 	bl	bbda <z_log_minimal_printk>
		return -EINVAL;
    4dc8:	f06f 0415 	mvn.w	r4, #21
    4dcc:	e00f      	b.n	4dee <usb_dc_ep_write+0x62>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4dce:	f04f 33ff 	mov.w	r3, #4294967295
    4dd2:	f04f 32ff 	mov.w	r2, #4294967295
    4dd6:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4dda:	f007 f94a 	bl	c072 <k_mutex_lock.constprop.0>
	if (ep_ctx->write_in_progress) {
    4dde:	7fab      	ldrb	r3, [r5, #30]
    4de0:	b14b      	cbz	r3, 4df6 <usb_dc_ep_write+0x6a>
		k_mutex_unlock(&ctx->drv_lock);
    4de2:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4de6:	f007 f942 	bl	c06e <k_mutex_unlock>
		return -EAGAIN;
    4dea:	f06f 040a 	mvn.w	r4, #10
}
    4dee:	4620      	mov	r0, r4
    4df0:	b004      	add	sp, #16
    4df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    4df6:	b916      	cbnz	r6, 4dfe <usb_dc_ep_write+0x72>
    4df8:	7feb      	ldrb	r3, [r5, #31]
    4dfa:	b103      	cbz	r3, 4dfe <usb_dc_ep_write+0x72>
		ep_ctx->trans_zlp = false;
    4dfc:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4dfe:	7aab      	ldrb	r3, [r5, #10]
    4e00:	b9bb      	cbnz	r3, 4e32 <usb_dc_ep_write+0xa6>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4e02:	b15e      	cbz	r6, 4e1c <usb_dc_ep_write+0x90>
    4e04:	f8ba 300a 	ldrh.w	r3, [sl, #10]
    4e08:	42b3      	cmp	r3, r6
    4e0a:	d907      	bls.n	4e1c <usb_dc_ep_write+0x90>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    4e0c:	686a      	ldr	r2, [r5, #4]
    4e0e:	fbb6 f3f2 	udiv	r3, r6, r2
    4e12:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4e16:	b90b      	cbnz	r3, 4e1c <usb_dc_ep_write+0x90>
			ep_ctx->trans_zlp = true;
    4e18:	2301      	movs	r3, #1
    4e1a:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    4e1c:	f002 fde6 	bl	79ec <nrfx_usbd_last_setup_dir_get>
    4e20:	42b8      	cmp	r0, r7
    4e22:	d006      	beq.n	4e32 <usb_dc_ep_write+0xa6>
		nrfx_usbd_setup_clear();
    4e24:	f002 fdd2 	bl	79cc <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    4e28:	4816      	ldr	r0, [pc, #88]	; (4e84 <usb_dc_ep_write+0xf8>)
    4e2a:	f007 f920 	bl	c06e <k_mutex_unlock>
		return 0;
    4e2e:	2400      	movs	r4, #0
    4e30:	e7dd      	b.n	4dee <usb_dc_ep_write+0x62>
	ep_ctx->write_in_progress = true;
    4e32:	2301      	movs	r3, #1
    4e34:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4e36:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4e3a:	a901      	add	r1, sp, #4
    4e3c:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4e3e:	e9cd 9601 	strd	r9, r6, [sp, #4]
    4e42:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4e46:	f002 fb9b 	bl	7580 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    4e4a:	4b0f      	ldr	r3, [pc, #60]	; (4e88 <usb_dc_ep_write+0xfc>)
    4e4c:	4298      	cmp	r0, r3
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4e4e:	4602      	mov	r2, r0
	if (err != NRFX_SUCCESS) {
    4e50:	d00e      	beq.n	4e70 <usb_dc_ep_write+0xe4>
		ep_ctx->write_in_progress = false;
    4e52:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
    4e56:	b10c      	cbz	r4, 4e5c <usb_dc_ep_write+0xd0>
			*ret_bytes = 0;
    4e58:	f8c4 8000 	str.w	r8, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    4e5c:	480b      	ldr	r0, [pc, #44]	; (4e8c <usb_dc_ep_write+0x100>)
    4e5e:	2145      	movs	r1, #69	; 0x45
    4e60:	f006 febb 	bl	bbda <z_log_minimal_printk>
		result = -EIO;
    4e64:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    4e68:	4806      	ldr	r0, [pc, #24]	; (4e84 <usb_dc_ep_write+0xf8>)
    4e6a:	f007 f900 	bl	c06e <k_mutex_unlock>
	return result;
    4e6e:	e7be      	b.n	4dee <usb_dc_ep_write+0x62>
		if (ret_bytes) {
    4e70:	2c00      	cmp	r4, #0
    4e72:	d0f9      	beq.n	4e68 <usb_dc_ep_write+0xdc>
			*ret_bytes = data_len;
    4e74:	6026      	str	r6, [r4, #0]
	int result = 0;
    4e76:	4644      	mov	r4, r8
    4e78:	e7f6      	b.n	4e68 <usb_dc_ep_write+0xdc>
		return -ENODEV;
    4e7a:	f06f 0412 	mvn.w	r4, #18
    4e7e:	e7b6      	b.n	4dee <usb_dc_ep_write+0x62>
    4e80:	0000f1a1 	.word	0x0000f1a1
    4e84:	200025cc 	.word	0x200025cc
    4e88:	0bad0000 	.word	0x0bad0000
    4e8c:	0000f1c5 	.word	0x0000f1c5
    4e90:	20002594 	.word	0x20002594

00004e94 <usb_dc_ep_read_wait>:
{
    4e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e98:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    4e9a:	4b25      	ldr	r3, [pc, #148]	; (4f30 <usb_dc_ep_read_wait+0x9c>)
{
    4e9c:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    4e9e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4ea2:	4680      	mov	r8, r0
    4ea4:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    4ea6:	2a00      	cmp	r2, #0
    4ea8:	d03e      	beq.n	4f28 <usb_dc_ep_read_wait+0x94>
    4eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4eae:	2b00      	cmp	r3, #0
    4eb0:	d03a      	beq.n	4f28 <usb_dc_ep_read_wait+0x94>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4eb2:	f010 0f80 	tst.w	r0, #128	; 0x80
    4eb6:	d10d      	bne.n	4ed4 <usb_dc_ep_read_wait+0x40>
	if (!data && max_data_len) {
    4eb8:	b901      	cbnz	r1, 4ebc <usb_dc_ep_read_wait+0x28>
    4eba:	b95f      	cbnz	r7, 4ed4 <usb_dc_ep_read_wait+0x40>
	ep_ctx = endpoint_ctx(ep);
    4ebc:	4640      	mov	r0, r8
    4ebe:	f7ff f9ff 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    4ec2:	4604      	mov	r4, r0
    4ec4:	b130      	cbz	r0, 4ed4 <usb_dc_ep_read_wait+0x40>
	if (!ep_ctx->cfg.en) {
    4ec6:	7a03      	ldrb	r3, [r0, #8]
    4ec8:	b93b      	cbnz	r3, 4eda <usb_dc_ep_read_wait+0x46>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    4eca:	481a      	ldr	r0, [pc, #104]	; (4f34 <usb_dc_ep_read_wait+0xa0>)
    4ecc:	4642      	mov	r2, r8
    4ece:	2145      	movs	r1, #69	; 0x45
    4ed0:	f006 fe83 	bl	bbda <z_log_minimal_printk>
		return -EINVAL;
    4ed4:	f06f 0015 	mvn.w	r0, #21
    4ed8:	e013      	b.n	4f02 <usb_dc_ep_read_wait+0x6e>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4eda:	f04f 33ff 	mov.w	r3, #4294967295
    4ede:	4816      	ldr	r0, [pc, #88]	; (4f38 <usb_dc_ep_read_wait+0xa4>)
    4ee0:	f04f 32ff 	mov.w	r2, #4294967295
    4ee4:	f007 f8c5 	bl	c072 <k_mutex_lock.constprop.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    4ee8:	68e3      	ldr	r3, [r4, #12]
    4eea:	429f      	cmp	r7, r3
    4eec:	46b8      	mov	r8, r7
    4eee:	bf28      	it	cs
    4ef0:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    4ef2:	b946      	cbnz	r6, 4f06 <usb_dc_ep_read_wait+0x72>
    4ef4:	b93f      	cbnz	r7, 4f06 <usb_dc_ep_read_wait+0x72>
		if (read_bytes) {
    4ef6:	b105      	cbz	r5, 4efa <usb_dc_ep_read_wait+0x66>
			*read_bytes = ep_ctx->buf.len;
    4ef8:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    4efa:	480f      	ldr	r0, [pc, #60]	; (4f38 <usb_dc_ep_read_wait+0xa4>)
    4efc:	f007 f8b7 	bl	c06e <k_mutex_unlock>
		return 0;
    4f00:	2000      	movs	r0, #0
}
    4f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    4f06:	69a1      	ldr	r1, [r4, #24]
    4f08:	4642      	mov	r2, r8
    4f0a:	4630      	mov	r0, r6
    4f0c:	f007 f87f 	bl	c00e <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    4f10:	69a3      	ldr	r3, [r4, #24]
    4f12:	4443      	add	r3, r8
    4f14:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    4f16:	68e3      	ldr	r3, [r4, #12]
    4f18:	eba3 0308 	sub.w	r3, r3, r8
    4f1c:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    4f1e:	2d00      	cmp	r5, #0
    4f20:	d0eb      	beq.n	4efa <usb_dc_ep_read_wait+0x66>
		*read_bytes = bytes_to_copy;
    4f22:	f8c5 8000 	str.w	r8, [r5]
    4f26:	e7e8      	b.n	4efa <usb_dc_ep_read_wait+0x66>
		return -ENODEV;
    4f28:	f06f 0012 	mvn.w	r0, #18
    4f2c:	e7e9      	b.n	4f02 <usb_dc_ep_read_wait+0x6e>
    4f2e:	bf00      	nop
    4f30:	20002594 	.word	0x20002594
    4f34:	0000f1a1 	.word	0x0000f1a1
    4f38:	200025cc 	.word	0x200025cc

00004f3c <usb_dc_ep_read_continue>:
{
    4f3c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    4f3e:	4d21      	ldr	r5, [pc, #132]	; (4fc4 <usb_dc_ep_read_continue+0x88>)
	if (!dev_attached() || !dev_ready()) {
    4f40:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    4f44:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    4f46:	2b00      	cmp	r3, #0
    4f48:	d038      	beq.n	4fbc <usb_dc_ep_read_continue+0x80>
    4f4a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    4f4e:	b3ab      	cbz	r3, 4fbc <usb_dc_ep_read_continue+0x80>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4f50:	0603      	lsls	r3, r0, #24
    4f52:	d40a      	bmi.n	4f6a <usb_dc_ep_read_continue+0x2e>
	ep_ctx = endpoint_ctx(ep);
    4f54:	f7ff f9b4 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    4f58:	4604      	mov	r4, r0
    4f5a:	b130      	cbz	r0, 4f6a <usb_dc_ep_read_continue+0x2e>
	if (!ep_ctx->cfg.en) {
    4f5c:	7a03      	ldrb	r3, [r0, #8]
    4f5e:	b93b      	cbnz	r3, 4f70 <usb_dc_ep_read_continue+0x34>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    4f60:	4819      	ldr	r0, [pc, #100]	; (4fc8 <usb_dc_ep_read_continue+0x8c>)
    4f62:	4632      	mov	r2, r6
    4f64:	2145      	movs	r1, #69	; 0x45
    4f66:	f006 fe38 	bl	bbda <z_log_minimal_printk>
		return -EINVAL;
    4f6a:	f06f 0015 	mvn.w	r0, #21
    4f6e:	e018      	b.n	4fa2 <usb_dc_ep_read_continue+0x66>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4f70:	f04f 33ff 	mov.w	r3, #4294967295
    4f74:	f04f 32ff 	mov.w	r2, #4294967295
    4f78:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4f7c:	f007 f879 	bl	c072 <k_mutex_lock.constprop.0>
	if (!ep_ctx->buf.len) {
    4f80:	68e3      	ldr	r3, [r4, #12]
    4f82:	b9b3      	cbnz	r3, 4fb2 <usb_dc_ep_read_continue+0x76>
		ep_ctx->read_complete = true;
    4f84:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4f86:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    4f88:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4f8a:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    4f8c:	7f63      	ldrb	r3, [r4, #29]
    4f8e:	b183      	cbz	r3, 4fb2 <usb_dc_ep_read_continue+0x76>
			struct usbd_event *ev = usbd_evt_alloc();
    4f90:	f7ff fa2a 	bl	43e8 <usbd_evt_alloc>
			if (!ev) {
    4f94:	b930      	cbnz	r0, 4fa4 <usb_dc_ep_read_continue+0x68>
				k_mutex_unlock(&ctx->drv_lock);
    4f96:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4f9a:	f007 f868 	bl	c06e <k_mutex_unlock>
				return -ENOMEM;
    4f9e:	f06f 000b 	mvn.w	r0, #11
}
    4fa2:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    4fa4:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    4fa6:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4fa8:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    4faa:	f7ff f9b1 	bl	4310 <usbd_evt_put>
			usbd_work_schedule();
    4fae:	f7ff f9b5 	bl	431c <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    4fb2:	4806      	ldr	r0, [pc, #24]	; (4fcc <usb_dc_ep_read_continue+0x90>)
    4fb4:	f007 f85b 	bl	c06e <k_mutex_unlock>
	return 0;
    4fb8:	2000      	movs	r0, #0
    4fba:	e7f2      	b.n	4fa2 <usb_dc_ep_read_continue+0x66>
		return -ENODEV;
    4fbc:	f06f 0012 	mvn.w	r0, #18
    4fc0:	e7ef      	b.n	4fa2 <usb_dc_ep_read_continue+0x66>
    4fc2:	bf00      	nop
    4fc4:	20002594 	.word	0x20002594
    4fc8:	0000f1a1 	.word	0x0000f1a1
    4fcc:	200025cc 	.word	0x200025cc

00004fd0 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    4fd0:	4b08      	ldr	r3, [pc, #32]	; (4ff4 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    4fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    4fd6:	b510      	push	{r4, lr}
    4fd8:	460c      	mov	r4, r1
	if (!dev_attached()) {
    4fda:	b12b      	cbz	r3, 4fe8 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    4fdc:	f7ff f970 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    4fe0:	b128      	cbz	r0, 4fee <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    4fe2:	6004      	str	r4, [r0, #0]
	return 0;
    4fe4:	2000      	movs	r0, #0
}
    4fe6:	bd10      	pop	{r4, pc}
		return -ENODEV;
    4fe8:	f06f 0012 	mvn.w	r0, #18
    4fec:	e7fb      	b.n	4fe6 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    4fee:	f06f 0015 	mvn.w	r0, #21
    4ff2:	e7f8      	b.n	4fe6 <usb_dc_ep_set_callback+0x16>
    4ff4:	20002594 	.word	0x20002594

00004ff8 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    4ff8:	4b01      	ldr	r3, [pc, #4]	; (5000 <usb_dc_set_status_callback+0x8>)
    4ffa:	6018      	str	r0, [r3, #0]
}
    4ffc:	4770      	bx	lr
    4ffe:	bf00      	nop
    5000:	20002594 	.word	0x20002594

00005004 <usb_dc_ep_mps>:
{
    5004:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    5006:	4b07      	ldr	r3, [pc, #28]	; (5024 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    5008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    500c:	b123      	cbz	r3, 5018 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    500e:	f7ff f957 	bl	42c0 <endpoint_ctx>
	if (!ep_ctx) {
    5012:	b120      	cbz	r0, 501e <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    5014:	6840      	ldr	r0, [r0, #4]
}
    5016:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5018:	f06f 0012 	mvn.w	r0, #18
    501c:	e7fb      	b.n	5016 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    501e:	f06f 0015 	mvn.w	r0, #21
    5022:	e7f8      	b.n	5016 <usb_dc_ep_mps+0x12>
    5024:	20002594 	.word	0x20002594

00005028 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5028:	b570      	push	{r4, r5, r6, lr}
    502a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    502c:	480d      	ldr	r0, [pc, #52]	; (5064 <onoff_stop+0x3c>)
    502e:	1a23      	subs	r3, r4, r0
    5030:	109a      	asrs	r2, r3, #2
    5032:	4b0d      	ldr	r3, [pc, #52]	; (5068 <onoff_stop+0x40>)
    5034:	4353      	muls	r3, r2
    5036:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    5038:	250c      	movs	r5, #12
    503a:	435d      	muls	r5, r3
    503c:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    5040:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    5042:	4418      	add	r0, r3
    5044:	2140      	movs	r1, #64	; 0x40
    5046:	f007 f82e 	bl	c0a6 <set_off_state>
	if (err < 0) {
    504a:	1e01      	subs	r1, r0, #0
    504c:	db04      	blt.n	5058 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    504e:	4b07      	ldr	r3, [pc, #28]	; (506c <onoff_stop+0x44>)
    5050:	442b      	add	r3, r5
    5052:	685b      	ldr	r3, [r3, #4]
    5054:	4798      	blx	r3
	return 0;
    5056:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    5058:	4620      	mov	r0, r4
    505a:	4633      	mov	r3, r6
}
    505c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5060:	4718      	bx	r3
    5062:	bf00      	nop
    5064:	20002834 	.word	0x20002834
    5068:	b6db6db7 	.word	0xb6db6db7
    506c:	0000d9e8 	.word	0x0000d9e8

00005070 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5074:	4c0f      	ldr	r4, [pc, #60]	; (50b4 <onoff_start+0x44>)
    5076:	4d10      	ldr	r5, [pc, #64]	; (50b8 <onoff_start+0x48>)
    5078:	1b03      	subs	r3, r0, r4
    507a:	109b      	asrs	r3, r3, #2
    507c:	435d      	muls	r5, r3
    507e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    5080:	250c      	movs	r5, #12
    5082:	435d      	muls	r5, r3
{
    5084:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    5086:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    508a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    508c:	4420      	add	r0, r4
    508e:	2140      	movs	r1, #64	; 0x40
    5090:	f007 f822 	bl	c0d8 <set_starting_state>
	if (err < 0) {
    5094:	1e01      	subs	r1, r0, #0
    5096:	db08      	blt.n	50aa <onoff_start+0x3a>
	subdata->cb = cb;
    5098:	4b08      	ldr	r3, [pc, #32]	; (50bc <onoff_start+0x4c>)
    509a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    509c:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    50a0:	4b07      	ldr	r3, [pc, #28]	; (50c0 <onoff_start+0x50>)
    50a2:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    50a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    50a8:	4718      	bx	r3
		notify(mgr, err);
    50aa:	4638      	mov	r0, r7
    50ac:	4633      	mov	r3, r6
}
    50ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    50b2:	4718      	bx	r3
    50b4:	20002834 	.word	0x20002834
    50b8:	b6db6db7 	.word	0xb6db6db7
    50bc:	0000c13b 	.word	0x0000c13b
    50c0:	0000d9e8 	.word	0x0000d9e8

000050c4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    50c4:	2200      	movs	r2, #0
{
    50c6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    50c8:	2101      	movs	r1, #1
{
    50ca:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    50cc:	4610      	mov	r0, r2
    50ce:	f7fe fbc5 	bl	385c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    50d2:	2000      	movs	r0, #0
    50d4:	f7fe fb90 	bl	37f8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    50d8:	480f      	ldr	r0, [pc, #60]	; (5118 <clk_init+0x54>)
    50da:	f001 fa51 	bl	6580 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    50de:	4b0f      	ldr	r3, [pc, #60]	; (511c <clk_init+0x58>)
    50e0:	4298      	cmp	r0, r3
    50e2:	d115      	bne.n	5110 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    50e4:	f001 fa5c 	bl	65a0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    50e8:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    50ea:	490d      	ldr	r1, [pc, #52]	; (5120 <clk_init+0x5c>)
    50ec:	4630      	mov	r0, r6
    50ee:	f006 fa1f 	bl	b530 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    50f2:	2800      	cmp	r0, #0
    50f4:	db0b      	blt.n	510e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    50f6:	2501      	movs	r5, #1
    50f8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    50fa:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    50fc:	4908      	ldr	r1, [pc, #32]	; (5120 <clk_init+0x5c>)
    50fe:	f104 001c 	add.w	r0, r4, #28
    5102:	f006 fa15 	bl	b530 <onoff_manager_init>
		if (err < 0) {
    5106:	2800      	cmp	r0, #0
    5108:	db01      	blt.n	510e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    510a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    510c:	2000      	movs	r0, #0
}
    510e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5110:	f06f 0004 	mvn.w	r0, #4
    5114:	e7fb      	b.n	510e <clk_init+0x4a>
    5116:	bf00      	nop
    5118:	00005161 	.word	0x00005161
    511c:	0bad0000 	.word	0x0bad0000
    5120:	0000da00 	.word	0x0000da00

00005124 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    5124:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    5126:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    5128:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    512a:	480b      	ldr	r0, [pc, #44]	; (5158 <clkstarted_handle.constprop.0+0x34>)
    512c:	434b      	muls	r3, r1
    512e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5130:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    5134:	2600      	movs	r6, #0
	set_on_state(&sub_data->flags);
    5136:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    5138:	63a6      	str	r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    513a:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    513c:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    513e:	f006 ffe9 	bl	c114 <set_on_state>
	if (callback) {
    5142:	b135      	cbz	r5, 5152 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5144:	9a01      	ldr	r2, [sp, #4]
    5146:	4805      	ldr	r0, [pc, #20]	; (515c <clkstarted_handle.constprop.0+0x38>)
    5148:	462b      	mov	r3, r5
}
    514a:	b002      	add	sp, #8
    514c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5150:	4718      	bx	r3
}
    5152:	b002      	add	sp, #8
    5154:	bd70      	pop	{r4, r5, r6, pc}
    5156:	bf00      	nop
    5158:	20002834 	.word	0x20002834
    515c:	0000d580 	.word	0x0000d580

00005160 <clock_event_handler>:
	switch (event) {
    5160:	b110      	cbz	r0, 5168 <clock_event_handler+0x8>
    5162:	2801      	cmp	r0, #1
    5164:	d004      	beq.n	5170 <clock_event_handler+0x10>
    5166:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5168:	4b03      	ldr	r3, [pc, #12]	; (5178 <clock_event_handler+0x18>)
    516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    516c:	075b      	lsls	r3, r3, #29
    516e:	d101      	bne.n	5174 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5170:	f7ff bfd8 	b.w	5124 <clkstarted_handle.constprop.0>
}
    5174:	4770      	bx	lr
    5176:	bf00      	nop
    5178:	20002834 	.word	0x20002834

0000517c <generic_hfclk_start>:
{
    517c:	b508      	push	{r3, lr}
	__asm__ volatile(
    517e:	f04f 0320 	mov.w	r3, #32
    5182:	f3ef 8111 	mrs	r1, BASEPRI
    5186:	f383 8812 	msr	BASEPRI_MAX, r3
    518a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    518e:	4a12      	ldr	r2, [pc, #72]	; (51d8 <generic_hfclk_start+0x5c>)
    5190:	6813      	ldr	r3, [r2, #0]
    5192:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    5196:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    519a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    519c:	d00c      	beq.n	51b8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    519e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    51a2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    51a6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    51aa:	f013 0301 	ands.w	r3, r3, #1
    51ae:	d003      	beq.n	51b8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    51b0:	480a      	ldr	r0, [pc, #40]	; (51dc <generic_hfclk_start+0x60>)
    51b2:	f006 ffaf 	bl	c114 <set_on_state>
			already_started = true;
    51b6:	2301      	movs	r3, #1
	__asm__ volatile(
    51b8:	f381 8811 	msr	BASEPRI, r1
    51bc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    51c0:	b123      	cbz	r3, 51cc <generic_hfclk_start+0x50>
}
    51c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    51c6:	2000      	movs	r0, #0
    51c8:	f7ff bfac 	b.w	5124 <clkstarted_handle.constprop.0>
}
    51cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    51d0:	2001      	movs	r0, #1
    51d2:	f001 b9f3 	b.w	65bc <nrfx_clock_start>
    51d6:	bf00      	nop
    51d8:	20002884 	.word	0x20002884
    51dc:	20002874 	.word	0x20002874

000051e0 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    51e0:	4b09      	ldr	r3, [pc, #36]	; (5208 <generic_hfclk_stop+0x28>)
    51e2:	f3bf 8f5b 	dmb	ish
    51e6:	e853 2f00 	ldrex	r2, [r3]
    51ea:	f022 0102 	bic.w	r1, r2, #2
    51ee:	e843 1000 	strex	r0, r1, [r3]
    51f2:	2800      	cmp	r0, #0
    51f4:	d1f7      	bne.n	51e6 <generic_hfclk_stop+0x6>
    51f6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    51fa:	07d3      	lsls	r3, r2, #31
    51fc:	d402      	bmi.n	5204 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    51fe:	2001      	movs	r0, #1
    5200:	f001 ba0e 	b.w	6620 <nrfx_clock_stop>
}
    5204:	4770      	bx	lr
    5206:	bf00      	nop
    5208:	20002884 	.word	0x20002884

0000520c <api_blocking_start>:
{
    520c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    520e:	2200      	movs	r2, #0
    5210:	2301      	movs	r3, #1
    5212:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5216:	ab04      	add	r3, sp, #16
    5218:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    521c:	4a09      	ldr	r2, [pc, #36]	; (5244 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    521e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5222:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5224:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5228:	f006 ffae 	bl	c188 <api_start>
	if (err < 0) {
    522c:	2800      	cmp	r0, #0
    522e:	db05      	blt.n	523c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    5230:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5234:	2300      	movs	r3, #0
    5236:	4668      	mov	r0, sp
    5238:	f003 f9dc 	bl	85f4 <z_impl_k_sem_take>
}
    523c:	b007      	add	sp, #28
    523e:	f85d fb04 	ldr.w	pc, [sp], #4
    5242:	bf00      	nop
    5244:	0000c15b 	.word	0x0000c15b

00005248 <z_nrf_clock_control_get_onoff>:
}
    5248:	4a02      	ldr	r2, [pc, #8]	; (5254 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    524a:	b2c3      	uxtb	r3, r0
}
    524c:	201c      	movs	r0, #28
    524e:	fb03 2000 	mla	r0, r3, r0, r2
    5252:	4770      	bx	lr
    5254:	20002834 	.word	0x20002834

00005258 <z_nrf_clock_control_lf_on>:
{
    5258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    525c:	493a      	ldr	r1, [pc, #232]	; (5348 <z_nrf_clock_control_lf_on+0xf0>)
    525e:	f3bf 8f5b 	dmb	ish
    5262:	4606      	mov	r6, r0
    5264:	2201      	movs	r2, #1
    5266:	e851 3f00 	ldrex	r3, [r1]
    526a:	e841 2000 	strex	r0, r2, [r1]
    526e:	2800      	cmp	r0, #0
    5270:	d1f9      	bne.n	5266 <z_nrf_clock_control_lf_on+0xe>
    5272:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5276:	b933      	cbnz	r3, 5286 <z_nrf_clock_control_lf_on+0x2e>
    5278:	4934      	ldr	r1, [pc, #208]	; (534c <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    527a:	4835      	ldr	r0, [pc, #212]	; (5350 <z_nrf_clock_control_lf_on+0xf8>)
    527c:	604b      	str	r3, [r1, #4]
    527e:	60cb      	str	r3, [r1, #12]
    5280:	608a      	str	r2, [r1, #8]
    5282:	f006 f968 	bl	b556 <onoff_request>
	switch (start_mode) {
    5286:	1e73      	subs	r3, r6, #1
    5288:	2b01      	cmp	r3, #1
    528a:	d832      	bhi.n	52f2 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    528c:	2e01      	cmp	r6, #1
    528e:	d107      	bne.n	52a0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5294:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5298:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    529c:	2b01      	cmp	r3, #1
    529e:	d028      	beq.n	52f2 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    52a0:	f007 fd0e 	bl	ccc0 <k_is_in_isr>
    52a4:	4604      	mov	r4, r0
    52a6:	b918      	cbnz	r0, 52b0 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    52a8:	4b2a      	ldr	r3, [pc, #168]	; (5354 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    52aa:	781b      	ldrb	r3, [r3, #0]
    52ac:	2b00      	cmp	r3, #0
    52ae:	d144      	bne.n	533a <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    52b0:	f04f 0320 	mov.w	r3, #32
    52b4:	f3ef 8511 	mrs	r5, BASEPRI
    52b8:	f383 8812 	msr	BASEPRI_MAX, r3
    52bc:	f3bf 8f6f 	isb	sy
    52c0:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    52c2:	4f25      	ldr	r7, [pc, #148]	; (5358 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    52c4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 535c <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52c8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 5360 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    52cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    52d0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    52d4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    52d8:	03d2      	lsls	r2, r2, #15
    52da:	d50c      	bpl.n	52f6 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    52dc:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    52e0:	2b01      	cmp	r3, #1
    52e2:	d001      	beq.n	52e8 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    52e4:	2e01      	cmp	r6, #1
    52e6:	d106      	bne.n	52f6 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    52e8:	b30c      	cbz	r4, 532e <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    52ea:	f385 8811 	msr	BASEPRI, r5
    52ee:	f3bf 8f6f 	isb	sy
}
    52f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    52f6:	b1ac      	cbz	r4, 5324 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    52f8:	4628      	mov	r0, r5
    52fa:	f7fe fa0d 	bl	3718 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    52fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5302:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5306:	2b00      	cmp	r3, #0
    5308:	d1e0      	bne.n	52cc <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    530a:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    530c:	2900      	cmp	r1, #0
    530e:	d0dd      	beq.n	52cc <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5310:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5312:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    5314:	2301      	movs	r3, #1
    5316:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    531a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    531e:	f8c9 3000 	str.w	r3, [r9]
}
    5322:	e7d3      	b.n	52cc <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    5324:	2100      	movs	r1, #0
    5326:	2021      	movs	r0, #33	; 0x21
    5328:	f003 fd9e 	bl	8e68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    532c:	e7e7      	b.n	52fe <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    532e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5332:	2202      	movs	r2, #2
    5334:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5338:	e7db      	b.n	52f2 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    533a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    533e:	2202      	movs	r2, #2
    5340:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    5344:	4605      	mov	r5, r0
}
    5346:	e7bc      	b.n	52c2 <z_nrf_clock_control_lf_on+0x6a>
    5348:	20002888 	.word	0x20002888
    534c:	20002824 	.word	0x20002824
    5350:	20002850 	.word	0x20002850
    5354:	2000321b 	.word	0x2000321b
    5358:	40000104 	.word	0x40000104
    535c:	e000e100 	.word	0xe000e100
    5360:	40000008 	.word	0x40000008

00005364 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5364:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    5366:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5368:	d002      	beq.n	5370 <nrfx_gpio_handler+0xc>
    536a:	2b01      	cmp	r3, #1
    536c:	d01d      	beq.n	53aa <nrfx_gpio_handler+0x46>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    536e:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5370:	4e0f      	ldr	r6, [pc, #60]	; (53b0 <nrfx_gpio_handler+0x4c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5372:	6933      	ldr	r3, [r6, #16]
    5374:	6859      	ldr	r1, [r3, #4]
    5376:	2900      	cmp	r1, #0
    5378:	d0f9      	beq.n	536e <nrfx_gpio_handler+0xa>
    537a:	680c      	ldr	r4, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    537c:	f000 031f 	and.w	r3, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    5380:	2501      	movs	r5, #1
    5382:	2c00      	cmp	r4, #0
    5384:	fa05 f503 	lsl.w	r5, r5, r3
	return node->next;
    5388:	bf38      	it	cc
    538a:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    538c:	688a      	ldr	r2, [r1, #8]
    538e:	402a      	ands	r2, r5
    5390:	d002      	beq.n	5398 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5392:	684b      	ldr	r3, [r1, #4]
    5394:	4630      	mov	r0, r6
    5396:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5398:	2c00      	cmp	r4, #0
    539a:	d0e8      	beq.n	536e <nrfx_gpio_handler+0xa>
    539c:	6823      	ldr	r3, [r4, #0]
    539e:	2b00      	cmp	r3, #0
    53a0:	bf38      	it	cc
    53a2:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    53a4:	4621      	mov	r1, r4
    53a6:	461c      	mov	r4, r3
    53a8:	e7f0      	b.n	538c <nrfx_gpio_handler+0x28>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    53aa:	4e02      	ldr	r6, [pc, #8]	; (53b4 <nrfx_gpio_handler+0x50>)
    53ac:	e7e1      	b.n	5372 <nrfx_gpio_handler+0xe>
    53ae:	bf00      	nop
    53b0:	0000d598 	.word	0x0000d598
    53b4:	0000d5b0 	.word	0x0000d5b0

000053b8 <gpio_nrfx_pin_interrupt_configure>:
{
    53b8:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    53ba:	6840      	ldr	r0, [r0, #4]
    53bc:	7b04      	ldrb	r4, [r0, #12]
    53be:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    53c2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    53c6:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    53ca:	b085      	sub	sp, #20
    53cc:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    53d0:	d104      	bne.n	53dc <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    53d2:	4628      	mov	r0, r5
    53d4:	f001 fbc6 	bl	6b64 <nrfx_gpiote_trigger_disable>
	return 0;
    53d8:	2000      	movs	r0, #0
    53da:	e032      	b.n	5442 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    53dc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    53e0:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    53e4:	d12f      	bne.n	5446 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    53e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    53ea:	bf0c      	ite	eq
    53ec:	2304      	moveq	r3, #4
    53ee:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    53f0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    53f4:	6883      	ldr	r3, [r0, #8]
    53f6:	fa23 f101 	lsr.w	r1, r3, r1
    53fa:	07c9      	lsls	r1, r1, #31
    53fc:	d42f      	bmi.n	545e <gpio_nrfx_pin_interrupt_configure+0xa6>
    53fe:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    5402:	d12c      	bne.n	545e <gpio_nrfx_pin_interrupt_configure+0xa6>

    return pin_number >> 5;
    5404:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    5406:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    5408:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    540c:	4a1c      	ldr	r2, [pc, #112]	; (5480 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    540e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    5412:	bf18      	it	ne
    5414:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    541c:	07db      	lsls	r3, r3, #31
    541e:	d41e      	bmi.n	545e <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5420:	f10d 0407 	add.w	r4, sp, #7
    5424:	4621      	mov	r1, r4
    5426:	4628      	mov	r0, r5
    5428:	f001 fb08 	bl	6a3c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    542c:	4b15      	ldr	r3, [pc, #84]	; (5484 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    542e:	4298      	cmp	r0, r3
    5430:	d114      	bne.n	545c <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    5432:	4620      	mov	r0, r4
    5434:	f001 fb4c 	bl	6ad0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5438:	4b13      	ldr	r3, [pc, #76]	; (5488 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    543a:	4298      	cmp	r0, r3
    543c:	d00e      	beq.n	545c <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    543e:	f06f 000b 	mvn.w	r0, #11
}
    5442:	b005      	add	sp, #20
    5444:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5446:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    544a:	d005      	beq.n	5458 <gpio_nrfx_pin_interrupt_configure+0xa0>
    544c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    5450:	bf0c      	ite	eq
    5452:	2302      	moveq	r3, #2
    5454:	2301      	movne	r3, #1
    5456:	e7cb      	b.n	53f0 <gpio_nrfx_pin_interrupt_configure+0x38>
    5458:	2303      	movs	r3, #3
    545a:	e7c9      	b.n	53f0 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    545c:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    545e:	2300      	movs	r3, #0
    5460:	4619      	mov	r1, r3
    5462:	aa02      	add	r2, sp, #8
    5464:	4628      	mov	r0, r5
    5466:	f001 f9c7 	bl	67f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    546a:	4b07      	ldr	r3, [pc, #28]	; (5488 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    546c:	4298      	cmp	r0, r3
    546e:	d104      	bne.n	547a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5470:	2101      	movs	r1, #1
    5472:	4628      	mov	r0, r5
    5474:	f001 fb32 	bl	6adc <nrfx_gpiote_trigger_enable>
    5478:	e7ae      	b.n	53d8 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    547a:	f06f 0004 	mvn.w	r0, #4
    547e:	e7e0      	b.n	5442 <gpio_nrfx_pin_interrupt_configure+0x8a>
    5480:	50000300 	.word	0x50000300
    5484:	0bad0004 	.word	0x0bad0004
    5488:	0bad0000 	.word	0x0bad0000

0000548c <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    548c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    548e:	f001 fb0f 	bl	6ab0 <nrfx_gpiote_is_init>
    5492:	4604      	mov	r4, r0
    5494:	b968      	cbnz	r0, 54b2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5496:	f001 fae3 	bl	6a60 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    549a:	4b08      	ldr	r3, [pc, #32]	; (54bc <gpio_nrfx_init+0x30>)
    549c:	4298      	cmp	r0, r3
    549e:	d10a      	bne.n	54b6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    54a0:	4807      	ldr	r0, [pc, #28]	; (54c0 <gpio_nrfx_init+0x34>)
    54a2:	4621      	mov	r1, r4
    54a4:	f001 fac4 	bl	6a30 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    54a8:	4622      	mov	r2, r4
    54aa:	2105      	movs	r1, #5
    54ac:	2006      	movs	r0, #6
    54ae:	f7fe f9d5 	bl	385c <z_arm_irq_priority_set>
		return 0;
    54b2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    54b4:	bd10      	pop	{r4, pc}
		return -EIO;
    54b6:	f06f 0004 	mvn.w	r0, #4
    54ba:	e7fb      	b.n	54b4 <gpio_nrfx_init+0x28>
    54bc:	0bad0000 	.word	0x0bad0000
    54c0:	00005365 	.word	0x00005365

000054c4 <gpio_nrfx_pin_configure>:
{
    54c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    54c8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    54ca:	7b3b      	ldrb	r3, [r7, #12]
    54cc:	f001 051f 	and.w	r5, r1, #31
{
    54d0:	b085      	sub	sp, #20
    54d2:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    54d4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    54d8:	4614      	mov	r4, r2
    54da:	b9ca      	cbnz	r2, 5510 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    54dc:	a902      	add	r1, sp, #8
    54de:	4628      	mov	r0, r5
    54e0:	f001 faac 	bl	6a3c <nrfx_gpiote_channel_get>
    54e4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    54e6:	4628      	mov	r0, r5
    54e8:	f001 fb5e 	bl	6ba8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    54ec:	4b48      	ldr	r3, [pc, #288]	; (5610 <gpio_nrfx_pin_configure+0x14c>)
    54ee:	4298      	cmp	r0, r3
    54f0:	d004      	beq.n	54fc <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    54f2:	f06f 0004 	mvn.w	r0, #4
}
    54f6:	b005      	add	sp, #20
    54f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    54fc:	4284      	cmp	r4, r0
    54fe:	d105      	bne.n	550c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    5500:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5504:	f001 fade 	bl	6ac4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5508:	42a0      	cmp	r0, r4
    550a:	d1f2      	bne.n	54f2 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    550c:	2000      	movs	r0, #0
    550e:	e7f2      	b.n	54f6 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5510:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    5514:	f10d 0103 	add.w	r1, sp, #3
    5518:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    551a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    551e:	f001 fa8d 	bl	6a3c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5522:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    5524:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5526:	aa02      	add	r2, sp, #8
    5528:	4649      	mov	r1, r9
    552a:	4628      	mov	r0, r5
    552c:	f001 f964 	bl	67f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5530:	4b37      	ldr	r3, [pc, #220]	; (5610 <gpio_nrfx_pin_configure+0x14c>)
    5532:	4298      	cmp	r0, r3
    5534:	d002      	beq.n	553c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5536:	f06f 0015 	mvn.w	r0, #21
    553a:	e7dc      	b.n	54f6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    553c:	4580      	cmp	r8, r0
    553e:	d103      	bne.n	5548 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    5540:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5544:	f001 fabe 	bl	6ac4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    5548:	05a3      	lsls	r3, r4, #22
    554a:	d54e      	bpl.n	55ea <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    554c:	4b31      	ldr	r3, [pc, #196]	; (5614 <gpio_nrfx_pin_configure+0x150>)
    554e:	4a32      	ldr	r2, [pc, #200]	; (5618 <gpio_nrfx_pin_configure+0x154>)
    5550:	4023      	ands	r3, r4
    5552:	4293      	cmp	r3, r2
    5554:	d03a      	beq.n	55cc <gpio_nrfx_pin_configure+0x108>
    5556:	d80c      	bhi.n	5572 <gpio_nrfx_pin_configure+0xae>
    5558:	2b06      	cmp	r3, #6
    555a:	d014      	beq.n	5586 <gpio_nrfx_pin_configure+0xc2>
    555c:	d804      	bhi.n	5568 <gpio_nrfx_pin_configure+0xa4>
    555e:	b193      	cbz	r3, 5586 <gpio_nrfx_pin_configure+0xc2>
    5560:	2b02      	cmp	r3, #2
    5562:	d1e8      	bne.n	5536 <gpio_nrfx_pin_configure+0x72>
    5564:	2304      	movs	r3, #4
    5566:	e00e      	b.n	5586 <gpio_nrfx_pin_configure+0xc2>
    5568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    556c:	d1e3      	bne.n	5536 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    556e:	2301      	movs	r3, #1
    5570:	e009      	b.n	5586 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5572:	4a2a      	ldr	r2, [pc, #168]	; (561c <gpio_nrfx_pin_configure+0x158>)
    5574:	4293      	cmp	r3, r2
    5576:	d02b      	beq.n	55d0 <gpio_nrfx_pin_configure+0x10c>
    5578:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    557c:	d02a      	beq.n	55d4 <gpio_nrfx_pin_configure+0x110>
    557e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    5582:	d1d8      	bne.n	5536 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    5584:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    5586:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    558a:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    558e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    5592:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    5594:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    5598:	bf54      	ite	pl
    559a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    559e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    55a0:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    55a2:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    55a6:	d517      	bpl.n	55d8 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    55a8:	687b      	ldr	r3, [r7, #4]
    55aa:	2101      	movs	r1, #1
    55ac:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    55b0:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    55b4:	2200      	movs	r2, #0
    55b6:	a901      	add	r1, sp, #4
    55b8:	4628      	mov	r0, r5
    55ba:	f001 f9c9 	bl	6950 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    55be:	4b14      	ldr	r3, [pc, #80]	; (5610 <gpio_nrfx_pin_configure+0x14c>)
    55c0:	4298      	cmp	r0, r3
    55c2:	bf14      	ite	ne
    55c4:	f06f 0015 	mvnne.w	r0, #21
    55c8:	2000      	moveq	r0, #0
    55ca:	e794      	b.n	54f6 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    55cc:	2307      	movs	r3, #7
    55ce:	e7da      	b.n	5586 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    55d0:	2305      	movs	r3, #5
    55d2:	e7d8      	b.n	5586 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    55d4:	2303      	movs	r3, #3
    55d6:	e7d6      	b.n	5586 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    55d8:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    55da:	bf41      	itttt	mi
    55dc:	687b      	ldrmi	r3, [r7, #4]
    55de:	2101      	movmi	r1, #1
    55e0:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    55e4:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    55e8:	e7e4      	b.n	55b4 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    55ea:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    55ec:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    55f0:	bf54      	ite	pl
    55f2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    55f6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    55f8:	461a      	mov	r2, r3
    55fa:	a901      	add	r1, sp, #4
    55fc:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    55fe:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5602:	f001 f8f9 	bl	67f8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5606:	4b02      	ldr	r3, [pc, #8]	; (5610 <gpio_nrfx_pin_configure+0x14c>)
    5608:	4298      	cmp	r0, r3
    560a:	f43f af7f 	beq.w	550c <gpio_nrfx_pin_configure+0x48>
    560e:	e792      	b.n	5536 <gpio_nrfx_pin_configure+0x72>
    5610:	0bad0000 	.word	0x0bad0000
    5614:	00f00006 	.word	0x00f00006
    5618:	00100006 	.word	0x00100006
    561c:	00400002 	.word	0x00400002

00005620 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    5620:	4b02      	ldr	r3, [pc, #8]	; (562c <flash_nrf_pages_layout+0xc>)
    5622:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5624:	2301      	movs	r3, #1
    5626:	6013      	str	r3, [r2, #0]
}
    5628:	4770      	bx	lr
    562a:	bf00      	nop
    562c:	200028a4 	.word	0x200028a4

00005630 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    5630:	4800      	ldr	r0, [pc, #0]	; (5634 <flash_nrf_get_parameters+0x4>)
    5632:	4770      	bx	lr
    5634:	0000da68 	.word	0x0000da68

00005638 <flash_nrf_read>:
{
    5638:	b537      	push	{r0, r1, r2, r4, r5, lr}
    563a:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
    563c:	4620      	mov	r0, r4
    563e:	4619      	mov	r1, r3
    5640:	9301      	str	r3, [sp, #4]
{
    5642:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
    5644:	f006 fe43 	bl	c2ce <is_regular_addr_valid>
    5648:	9b01      	ldr	r3, [sp, #4]
    564a:	b940      	cbnz	r0, 565e <flash_nrf_read+0x26>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    564c:	4809      	ldr	r0, [pc, #36]	; (5674 <flash_nrf_read+0x3c>)
    564e:	4622      	mov	r2, r4
    5650:	2145      	movs	r1, #69	; 0x45
    5652:	f006 fac2 	bl	bbda <z_log_minimal_printk>
    5656:	f06f 0015 	mvn.w	r0, #21
}
    565a:	b003      	add	sp, #12
    565c:	bd30      	pop	{r4, r5, pc}
	if (!len) {
    565e:	b133      	cbz	r3, 566e <flash_nrf_read+0x36>
	memcpy(data, (void *)addr, len);
    5660:	461a      	mov	r2, r3
    5662:	4621      	mov	r1, r4
    5664:	4628      	mov	r0, r5
    5666:	f006 fcd2 	bl	c00e <memcpy>
	return 0;
    566a:	2000      	movs	r0, #0
    566c:	e7f5      	b.n	565a <flash_nrf_read+0x22>
		return 0;
    566e:	4618      	mov	r0, r3
    5670:	e7f3      	b.n	565a <flash_nrf_read+0x22>
    5672:	bf00      	nop
    5674:	0000f21e 	.word	0x0000f21e

00005678 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    5678:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    567a:	2201      	movs	r2, #1
    567c:	4611      	mov	r1, r2
    567e:	4806      	ldr	r0, [pc, #24]	; (5698 <nrf_flash_init+0x20>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    5680:	4c06      	ldr	r4, [pc, #24]	; (569c <nrf_flash_init+0x24>)
    5682:	f007 fbb8 	bl	cdf6 <z_impl_k_sem_init>
    5686:	f007 f989 	bl	c99c <nrfx_nvmc_flash_page_count_get>
    568a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    568c:	f007 f982 	bl	c994 <nrfx_nvmc_flash_page_size_get>
    5690:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    5692:	2000      	movs	r0, #0
    5694:	bd10      	pop	{r4, pc}
    5696:	bf00      	nop
    5698:	200028ac 	.word	0x200028ac
    569c:	200028a4 	.word	0x200028a4

000056a0 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
    56a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    56a4:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    56a8:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    56ac:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    56b0:	f023 031f 	bic.w	r3, r3, #31
    56b4:	430b      	orrs	r3, r1
    pofcon |=
    56b6:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    56ba:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    56be:	4b02      	ldr	r3, [pc, #8]	; (56c8 <restore_pofwarn.part.0+0x28>)
    56c0:	2200      	movs	r2, #0
    56c2:	701a      	strb	r2, [r3, #0]
	}
}
    56c4:	4770      	bx	lr
    56c6:	bf00      	nop
    56c8:	20002dc4 	.word	0x20002dc4

000056cc <suspend_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
    56cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    56d0:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
	if (enabled) {
    56d4:	f012 0001 	ands.w	r0, r2, #1
    56d8:	d01a      	beq.n	5710 <suspend_pofwarn.part.0+0x44>
    uint32_t pofcon = p_reg->POFCON;
    56da:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    56de:	4b0d      	ldr	r3, [pc, #52]	; (5714 <suspend_pofwarn.part.0+0x48>)
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    56e0:	f020 001f 	bic.w	r0, r0, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    56e4:	f002 021e 	and.w	r2, r2, #30
    pofcon |=
    56e8:	4310      	orrs	r0, r2
    p_reg->POFCON = pofcon;
    56ea:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    56ee:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    56f0:	b158      	cbz	r0, 570a <suspend_pofwarn.part.0+0x3e>
    uint32_t pofcon = p_reg->POFCON;
    56f2:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    56f6:	f023 031f 	bic.w	r3, r3, #31
    56fa:	4313      	orrs	r3, r2
    pofcon |=
    56fc:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    5700:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			return -ECANCELED;
    5704:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    5708:	4770      	bx	lr
		pofcon_enabled = enabled;
    570a:	4b03      	ldr	r3, [pc, #12]	; (5718 <suspend_pofwarn.part.0+0x4c>)
    570c:	2201      	movs	r2, #1
    570e:	701a      	strb	r2, [r3, #0]
}
    5710:	4770      	bx	lr
    5712:	bf00      	nop
    5714:	40000108 	.word	0x40000108
    5718:	20002dc4 	.word	0x20002dc4

0000571c <flash_nrf_erase>:
{
    571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5720:	460e      	mov	r6, r1
    5722:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5724:	f007 f936 	bl	c994 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    5728:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    572a:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    572c:	4630      	mov	r0, r6
    572e:	f006 fdce 	bl	c2ce <is_regular_addr_valid>
    5732:	4637      	mov	r7, r6
    5734:	2800      	cmp	r0, #0
    5736:	d03c      	beq.n	57b2 <flash_nrf_erase+0x96>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    5738:	fbb6 f3f5 	udiv	r3, r6, r5
    573c:	fb05 6313 	mls	r3, r5, r3, r6
    5740:	b923      	cbnz	r3, 574c <flash_nrf_erase+0x30>
    5742:	fbb4 f2f5 	udiv	r2, r4, r5
    5746:	fb05 4212 	mls	r2, r5, r2, r4
    574a:	b142      	cbz	r2, 575e <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    574c:	481c      	ldr	r0, [pc, #112]	; (57c0 <flash_nrf_erase+0xa4>)
    574e:	4623      	mov	r3, r4
    5750:	4632      	mov	r2, r6
    5752:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
    5754:	f006 fa41 	bl	bbda <z_log_minimal_printk>
    5758:	f06f 0415 	mvn.w	r4, #21
    575c:	e01f      	b.n	579e <flash_nrf_erase+0x82>
		if (!n_pages) {
    575e:	42a5      	cmp	r5, r4
    5760:	d82c      	bhi.n	57bc <flash_nrf_erase+0xa0>
	return z_impl_k_sem_take(sem, timeout);
    5762:	f04f 32ff 	mov.w	r2, #4294967295
    5766:	f04f 33ff 	mov.w	r3, #4294967295
    576a:	4816      	ldr	r0, [pc, #88]	; (57c4 <flash_nrf_erase+0xa8>)
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    576c:	4e16      	ldr	r6, [pc, #88]	; (57c8 <flash_nrf_erase+0xac>)
	if (pofcon_enabled) {
    576e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 57d0 <flash_nrf_erase+0xb4>
    5772:	f002 ff3f 	bl	85f4 <z_impl_k_sem_take>
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5776:	f007 f90d 	bl	c994 <nrfx_nvmc_flash_page_size_get>
    577a:	4605      	mov	r5, r0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    577c:	6833      	ldr	r3, [r6, #0]
    577e:	2b08      	cmp	r3, #8
    5780:	d010      	beq.n	57a4 <flash_nrf_erase+0x88>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5782:	4638      	mov	r0, r7
    5784:	f001 fb0c 	bl	6da0 <nrfx_nvmc_page_erase>
	if (pofcon_enabled) {
    5788:	f898 3000 	ldrb.w	r3, [r8]
    578c:	b10b      	cbz	r3, 5792 <flash_nrf_erase+0x76>
    578e:	f7ff ff87 	bl	56a0 <restore_pofwarn.part.0>
	} while (e_ctx->len > 0);
    5792:	1b64      	subs	r4, r4, r5
    5794:	442f      	add	r7, r5
    5796:	d1f1      	bne.n	577c <flash_nrf_erase+0x60>
	z_impl_k_sem_give(sem);
    5798:	480a      	ldr	r0, [pc, #40]	; (57c4 <flash_nrf_erase+0xa8>)
    579a:	f002 ff05 	bl	85a8 <z_impl_k_sem_give>
}
    579e:	4620      	mov	r0, r4
    57a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
    57a4:	f7ff ff92 	bl	56cc <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
    57a8:	2800      	cmp	r0, #0
    57aa:	d0ea      	beq.n	5782 <flash_nrf_erase+0x66>
			return -ECANCELED;
    57ac:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    57b0:	e7f2      	b.n	5798 <flash_nrf_erase+0x7c>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    57b2:	4806      	ldr	r0, [pc, #24]	; (57cc <flash_nrf_erase+0xb0>)
    57b4:	4623      	mov	r3, r4
    57b6:	4632      	mov	r2, r6
    57b8:	2145      	movs	r1, #69	; 0x45
    57ba:	e7cb      	b.n	5754 <flash_nrf_erase+0x38>
			return 0;
    57bc:	4614      	mov	r4, r2
    57be:	e7ee      	b.n	579e <flash_nrf_erase+0x82>
    57c0:	0000f240 	.word	0x0000f240
    57c4:	200028ac 	.word	0x200028ac
    57c8:	10000130 	.word	0x10000130
    57cc:	0000f21e 	.word	0x0000f21e
    57d0:	20002dc4 	.word	0x20002dc4

000057d4 <flash_nrf_write>:
{
    57d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57d8:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    57da:	4630      	mov	r0, r6
    57dc:	4619      	mov	r1, r3
{
    57de:	4617      	mov	r7, r2
    57e0:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    57e2:	f006 fd74 	bl	c2ce <is_regular_addr_valid>
    57e6:	b950      	cbnz	r0, 57fe <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    57e8:	4823      	ldr	r0, [pc, #140]	; (5878 <flash_nrf_write+0xa4>)
    57ea:	4623      	mov	r3, r4
    57ec:	4632      	mov	r2, r6
    57ee:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    57f0:	f006 f9f3 	bl	bbda <z_log_minimal_printk>
		return -EINVAL;
    57f4:	f06f 0415 	mvn.w	r4, #21
}
    57f8:	4620      	mov	r0, r4
    57fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (data & 0x3) ? false : true;
    57fe:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    5802:	f015 0503 	ands.w	r5, r5, #3
    5806:	d004      	beq.n	5812 <flash_nrf_write+0x3e>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    5808:	481c      	ldr	r0, [pc, #112]	; (587c <flash_nrf_write+0xa8>)
    580a:	4623      	mov	r3, r4
    580c:	4632      	mov	r2, r6
    580e:	2145      	movs	r1, #69	; 0x45
    5810:	e7ee      	b.n	57f0 <flash_nrf_write+0x1c>
	if (!len) {
    5812:	2c00      	cmp	r4, #0
    5814:	d0f0      	beq.n	57f8 <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
    5816:	481a      	ldr	r0, [pc, #104]	; (5880 <flash_nrf_write+0xac>)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5818:	f8df 906c 	ldr.w	r9, [pc, #108]	; 5888 <flash_nrf_write+0xb4>
	if (pofcon_enabled) {
    581c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 588c <flash_nrf_write+0xb8>
    5820:	f04f 32ff 	mov.w	r2, #4294967295
    5824:	f04f 33ff 	mov.w	r3, #4294967295
    5828:	f002 fee4 	bl	85f4 <z_impl_k_sem_take>
static int write_op(void *context)
    582c:	f024 0403 	bic.w	r4, r4, #3
	while (w_ctx->len >= sizeof(uint32_t)) {
    5830:	42a5      	cmp	r5, r4
    5832:	eb05 0806 	add.w	r8, r5, r6
    5836:	d109      	bne.n	584c <flash_nrf_write+0x78>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    5838:	4a12      	ldr	r2, [pc, #72]	; (5884 <flash_nrf_write+0xb0>)
    583a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    583e:	07db      	lsls	r3, r3, #31
    5840:	d5fb      	bpl.n	583a <flash_nrf_write+0x66>
	return FLASH_OP_DONE;
    5842:	2400      	movs	r4, #0
	z_impl_k_sem_give(sem);
    5844:	480e      	ldr	r0, [pc, #56]	; (5880 <flash_nrf_write+0xac>)
    5846:	f002 feaf 	bl	85a8 <z_impl_k_sem_give>
}
    584a:	e7d5      	b.n	57f8 <flash_nrf_write+0x24>
            if (var1 == 0x08)
    584c:	f8d9 3000 	ldr.w	r3, [r9]
    5850:	2b08      	cmp	r3, #8
    5852:	d00a      	beq.n	586a <flash_nrf_write+0x96>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    5854:	5979      	ldr	r1, [r7, r5]
    5856:	4640      	mov	r0, r8
    5858:	f001 fac2 	bl	6de0 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
    585c:	f89a 3000 	ldrb.w	r3, [sl]
    5860:	b10b      	cbz	r3, 5866 <flash_nrf_write+0x92>
    5862:	f7ff ff1d 	bl	56a0 <restore_pofwarn.part.0>
	w_ctx->len -= shift;
    5866:	3504      	adds	r5, #4
}
    5868:	e7e2      	b.n	5830 <flash_nrf_write+0x5c>
                switch(var2)
    586a:	f7ff ff2f 	bl	56cc <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
    586e:	2800      	cmp	r0, #0
    5870:	d0f0      	beq.n	5854 <flash_nrf_write+0x80>
			return -ECANCELED;
    5872:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    5876:	e7e5      	b.n	5844 <flash_nrf_write+0x70>
    5878:	0000f21e 	.word	0x0000f21e
    587c:	0000f264 	.word	0x0000f264
    5880:	200028ac 	.word	0x200028ac
    5884:	4001e000 	.word	0x4001e000
    5888:	10000130 	.word	0x10000130
    588c:	20002dc4 	.word	0x20002dc4

00005890 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    5890:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    5892:	794b      	ldrb	r3, [r1, #5]
    5894:	2b01      	cmp	r3, #1
    5896:	d026      	beq.n	58e6 <uarte_nrfx_configure+0x56>
    5898:	2b03      	cmp	r3, #3
    589a:	d121      	bne.n	58e0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    589c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    589e:	798b      	ldrb	r3, [r1, #6]
    58a0:	2b03      	cmp	r3, #3
    58a2:	d11d      	bne.n	58e0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    58a4:	79cc      	ldrb	r4, [r1, #7]
    58a6:	b10c      	cbz	r4, 58ac <uarte_nrfx_configure+0x1c>
    58a8:	2c01      	cmp	r4, #1
    58aa:	d119      	bne.n	58e0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    58ac:	790a      	ldrb	r2, [r1, #4]
    58ae:	b112      	cbz	r2, 58b6 <uarte_nrfx_configure+0x26>
    58b0:	2a02      	cmp	r2, #2
    58b2:	d115      	bne.n	58e0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    58b4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    58b6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    58b8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    58ba:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    58be:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    58c0:	d065      	beq.n	598e <uarte_nrfx_configure+0xfe>
    58c2:	d82d      	bhi.n	5920 <uarte_nrfx_configure+0x90>
    58c4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    58c8:	d064      	beq.n	5994 <uarte_nrfx_configure+0x104>
    58ca:	d816      	bhi.n	58fa <uarte_nrfx_configure+0x6a>
    58cc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    58d0:	d062      	beq.n	5998 <uarte_nrfx_configure+0x108>
    58d2:	d80a      	bhi.n	58ea <uarte_nrfx_configure+0x5a>
    58d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    58d8:	d061      	beq.n	599e <uarte_nrfx_configure+0x10e>
    58da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    58de:	d061      	beq.n	59a4 <uarte_nrfx_configure+0x114>
    58e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    58e4:	e052      	b.n	598c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    58e6:	2600      	movs	r6, #0
    58e8:	e7d9      	b.n	589e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    58ea:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    58ee:	d05c      	beq.n	59aa <uarte_nrfx_configure+0x11a>
    58f0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    58f4:	d1f4      	bne.n	58e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    58f6:	4b37      	ldr	r3, [pc, #220]	; (59d4 <uarte_nrfx_configure+0x144>)
    58f8:	e03c      	b.n	5974 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    58fa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    58fe:	d057      	beq.n	59b0 <uarte_nrfx_configure+0x120>
    5900:	d807      	bhi.n	5912 <uarte_nrfx_configure+0x82>
    5902:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    5906:	d055      	beq.n	59b4 <uarte_nrfx_configure+0x124>
    5908:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    590c:	d1e8      	bne.n	58e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    590e:	4b32      	ldr	r3, [pc, #200]	; (59d8 <uarte_nrfx_configure+0x148>)
    5910:	e030      	b.n	5974 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5912:	f647 2712 	movw	r7, #31250	; 0x7a12
    5916:	42bb      	cmp	r3, r7
    5918:	d1e2      	bne.n	58e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    591a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    591e:	e029      	b.n	5974 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5920:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    5924:	d048      	beq.n	59b8 <uarte_nrfx_configure+0x128>
    5926:	d813      	bhi.n	5950 <uarte_nrfx_configure+0xc0>
    5928:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    592c:	d047      	beq.n	59be <uarte_nrfx_configure+0x12e>
    592e:	d809      	bhi.n	5944 <uarte_nrfx_configure+0xb4>
    5930:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    5934:	42bb      	cmp	r3, r7
    5936:	d044      	beq.n	59c2 <uarte_nrfx_configure+0x132>
    5938:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    593c:	d1d0      	bne.n	58e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    593e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5942:	e017      	b.n	5974 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5944:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    5948:	d1ca      	bne.n	58e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    594a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    594e:	e011      	b.n	5974 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5950:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    5954:	d038      	beq.n	59c8 <uarte_nrfx_configure+0x138>
    5956:	d808      	bhi.n	596a <uarte_nrfx_configure+0xda>
    5958:	4f20      	ldr	r7, [pc, #128]	; (59dc <uarte_nrfx_configure+0x14c>)
    595a:	42bb      	cmp	r3, r7
    595c:	d037      	beq.n	59ce <uarte_nrfx_configure+0x13e>
    595e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    5962:	d1bd      	bne.n	58e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5964:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5968:	e004      	b.n	5974 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    596a:	4f1d      	ldr	r7, [pc, #116]	; (59e0 <uarte_nrfx_configure+0x150>)
    596c:	42bb      	cmp	r3, r7
    596e:	d1b7      	bne.n	58e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5970:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5974:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    5978:	6903      	ldr	r3, [r0, #16]
    597a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    597c:	4334      	orrs	r4, r6
    597e:	4322      	orrs	r2, r4
    5980:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5982:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    5986:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    598a:	2000      	movs	r0, #0
}
    598c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    598e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5992:	e7ef      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5994:	4b13      	ldr	r3, [pc, #76]	; (59e4 <uarte_nrfx_configure+0x154>)
    5996:	e7ed      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5998:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    599c:	e7ea      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    599e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    59a2:	e7e7      	b.n	5974 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    59a4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    59a8:	e7e4      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    59aa:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    59ae:	e7e1      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    59b0:	4b0d      	ldr	r3, [pc, #52]	; (59e8 <uarte_nrfx_configure+0x158>)
    59b2:	e7df      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    59b4:	4b0d      	ldr	r3, [pc, #52]	; (59ec <uarte_nrfx_configure+0x15c>)
    59b6:	e7dd      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    59b8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    59bc:	e7da      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    59be:	4b0c      	ldr	r3, [pc, #48]	; (59f0 <uarte_nrfx_configure+0x160>)
    59c0:	e7d8      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    59c2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    59c6:	e7d5      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    59c8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    59cc:	e7d2      	b.n	5974 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    59ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    59d2:	e7cf      	b.n	5974 <uarte_nrfx_configure+0xe4>
    59d4:	0013b000 	.word	0x0013b000
    59d8:	004ea000 	.word	0x004ea000
    59dc:	0003d090 	.word	0x0003d090
    59e0:	000f4240 	.word	0x000f4240
    59e4:	00275000 	.word	0x00275000
    59e8:	0075c000 	.word	0x0075c000
    59ec:	003af000 	.word	0x003af000
    59f0:	013a9000 	.word	0x013a9000

000059f4 <nrf_gpio_cfg_input>:
    *p_pin = pin_number & 0x1F;
    59f4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    59f8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    59fa:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    59fc:	4b04      	ldr	r3, [pc, #16]	; (5a10 <nrf_gpio_cfg_input+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    59fe:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    5a02:	bf18      	it	ne
    5a04:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5a08:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    5a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5a0e:	4770      	bx	lr
    5a10:	50000300 	.word	0x50000300

00005a14 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    5a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    5a16:	6906      	ldr	r6, [r0, #16]
{
    5a18:	4605      	mov	r5, r0
    5a1a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5a1c:	f007 f950 	bl	ccc0 <k_is_in_isr>
    5a20:	b910      	cbnz	r0, 5a28 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    5a22:	4b20      	ldr	r3, [pc, #128]	; (5aa4 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    5a24:	781b      	ldrb	r3, [r3, #0]
    5a26:	b983      	cbnz	r3, 5a4a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    5a28:	f04f 0320 	mov.w	r3, #32
    5a2c:	f3ef 8411 	mrs	r4, BASEPRI
    5a30:	f383 8812 	msr	BASEPRI_MAX, r3
    5a34:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    5a38:	4628      	mov	r0, r5
    5a3a:	f006 fd30 	bl	c49e <is_tx_ready>
    5a3e:	bb28      	cbnz	r0, 5a8c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    5a40:	f384 8811 	msr	BASEPRI, r4
    5a44:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    5a48:	e7ee      	b.n	5a28 <uarte_nrfx_poll_out+0x14>
{
    5a4a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5a4c:	4628      	mov	r0, r5
    5a4e:	f006 fd26 	bl	c49e <is_tx_ready>
    5a52:	b970      	cbnz	r0, 5a72 <uarte_nrfx_poll_out+0x5e>
    5a54:	2001      	movs	r0, #1
    5a56:	f006 ff3f 	bl	c8d8 <nrfx_busy_wait>
    5a5a:	3c01      	subs	r4, #1
    5a5c:	d1f6      	bne.n	5a4c <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    5a5e:	2100      	movs	r1, #0
    5a60:	2021      	movs	r0, #33	; 0x21
    5a62:	f003 fa01 	bl	8e68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5a66:	e7f0      	b.n	5a4a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    5a68:	f384 8811 	msr	BASEPRI, r4
    5a6c:	f3bf 8f6f 	isb	sy
}
    5a70:	e7f5      	b.n	5a5e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    5a72:	f04f 0320 	mov.w	r3, #32
    5a76:	f3ef 8411 	mrs	r4, BASEPRI
    5a7a:	f383 8812 	msr	BASEPRI_MAX, r3
    5a7e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5a82:	4628      	mov	r0, r5
    5a84:	f006 fd0b 	bl	c49e <is_tx_ready>
    5a88:	2800      	cmp	r0, #0
    5a8a:	d0ed      	beq.n	5a68 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    5a8c:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    5a8e:	2201      	movs	r2, #1
	data->char_out = c;
    5a90:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    5a94:	4628      	mov	r0, r5
    5a96:	f006 fd93 	bl	c5c0 <tx_start>
	__asm__ volatile(
    5a9a:	f384 8811 	msr	BASEPRI, r4
    5a9e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    5aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5aa4:	2000321b 	.word	0x2000321b

00005aa8 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    5aa8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    5aac:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5aae:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    5ab0:	4b04      	ldr	r3, [pc, #16]	; (5ac4 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    5ab2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    5ab6:	bf18      	it	ne
    5ab8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5abc:	2103      	movs	r1, #3
    5abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5ac2:	4770      	bx	lr
    5ac4:	50000300 	.word	0x50000300

00005ac8 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    5ac8:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    5acc:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5ace:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    5ad0:	4b04      	ldr	r3, [pc, #16]	; (5ae4 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5ad2:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    5ad6:	bf18      	it	ne
    5ad8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5adc:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    5ade:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    5ae2:	4770      	bx	lr
    5ae4:	50000300 	.word	0x50000300

00005ae8 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    5ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    5aec:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    5af0:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    5af2:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5af6:	2300      	movs	r3, #0
    5af8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5afc:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    5afe:	6845      	ldr	r5, [r0, #4]
static int uarte_instance_init(const struct device *dev,
    5b00:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5b02:	68e8      	ldr	r0, [r5, #12]
    5b04:	1c42      	adds	r2, r0, #1
    5b06:	d004      	beq.n	5b12 <uarte_instance_init.isra.0+0x2a>
        nrf_gpio_pin_set(pin_number);
    5b08:	f7ff ffde 	bl	5ac8 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->tx_pin);
    5b0c:	68e8      	ldr	r0, [r5, #12]
    5b0e:	f7ff ffcb 	bl	5aa8 <nrf_gpio_cfg_output>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5b12:	6928      	ldr	r0, [r5, #16]
    5b14:	1c43      	adds	r3, r0, #1
    5b16:	d006      	beq.n	5b26 <uarte_instance_init.isra.0+0x3e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    5b18:	7f2b      	ldrb	r3, [r5, #28]
    5b1a:	2b00      	cmp	r3, #0
    5b1c:	bf14      	ite	ne
    5b1e:	2103      	movne	r1, #3
    5b20:	2100      	moveq	r1, #0
    5b22:	f7ff ff67 	bl	59f4 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5b26:	6968      	ldr	r0, [r5, #20]
    5b28:	1c42      	adds	r2, r0, #1
    5b2a:	d004      	beq.n	5b36 <uarte_instance_init.isra.0+0x4e>
    5b2c:	f7ff ffcc 	bl	5ac8 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->rts_pin);
    5b30:	6968      	ldr	r0, [r5, #20]
    5b32:	f7ff ffb9 	bl	5aa8 <nrf_gpio_cfg_output>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    5b36:	69a8      	ldr	r0, [r5, #24]
    5b38:	1c43      	adds	r3, r0, #1
    5b3a:	d006      	beq.n	5b4a <uarte_instance_init.isra.0+0x62>
			nrf_gpio_cfg_input(cfg->cts_pin,
    5b3c:	7f6b      	ldrb	r3, [r5, #29]
    5b3e:	2b00      	cmp	r3, #0
    5b40:	bf14      	ite	ne
    5b42:	2103      	movne	r1, #3
    5b44:	2100      	moveq	r1, #0
    5b46:	f7ff ff55 	bl	59f4 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    5b4a:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    5b4e:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    5b50:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    5b54:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    5b58:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    5b5c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5b60:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    5b62:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    5b66:	3104      	adds	r1, #4
    5b68:	4630      	mov	r0, r6
    5b6a:	f7ff fe91 	bl	5890 <uarte_nrfx_configure>
	if (err) {
    5b6e:	4605      	mov	r5, r0
    5b70:	b980      	cbnz	r0, 5b94 <uarte_instance_init.isra.0+0xac>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5b72:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5b76:	0799      	lsls	r1, r3, #30
    5b78:	d522      	bpl.n	5bc0 <uarte_instance_init.isra.0+0xd8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    5b7a:	f107 0016 	add.w	r0, r7, #22
    5b7e:	f001 f9e3 	bl	6f48 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    5b82:	4b24      	ldr	r3, [pc, #144]	; (5c14 <uarte_instance_init.isra.0+0x12c>)
    5b84:	4298      	cmp	r0, r3
    5b86:	d008      	beq.n	5b9a <uarte_instance_init.isra.0+0xb2>
		LOG_ERR("Failed to allocate PPI Channel");
    5b88:	4823      	ldr	r0, [pc, #140]	; (5c18 <uarte_instance_init.isra.0+0x130>)
    5b8a:	2145      	movs	r1, #69	; 0x45
    5b8c:	f006 f825 	bl	bbda <z_log_minimal_printk>
		return -EIO;
    5b90:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5b94:	4628      	mov	r0, r5
    5b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    5b9a:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5b9c:	00c3      	lsls	r3, r0, #3
    5b9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5ba2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    5ba6:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5baa:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5bae:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    5bb2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    5bb6:	4a19      	ldr	r2, [pc, #100]	; (5c1c <uarte_instance_init.isra.0+0x134>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5bb8:	2301      	movs	r3, #1
    5bba:	4083      	lsls	r3, r0
    5bbc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5bc0:	2308      	movs	r3, #8
    5bc2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    5bc6:	f898 3008 	ldrb.w	r3, [r8, #8]
    5bca:	b95b      	cbnz	r3, 5be4 <uarte_instance_init.isra.0+0xfc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bcc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    5bd0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    5bd4:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5bd8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5bdc:	2301      	movs	r3, #1
    5bde:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5be2:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5be4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5be8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    5bea:	bf5c      	itt	pl
    5bec:	f44f 7280 	movpl.w	r2, #256	; 0x100
    5bf0:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5bf4:	06db      	lsls	r3, r3, #27
    5bf6:	bf44      	itt	mi
    5bf8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    5bfc:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    5c00:	3714      	adds	r7, #20
    p_reg->TXD.MAXCNT = length;
    5c02:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5c04:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5c08:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c0c:	2301      	movs	r3, #1
    5c0e:	60a3      	str	r3, [r4, #8]
    5c10:	60e3      	str	r3, [r4, #12]
	return 0;
    5c12:	e7bf      	b.n	5b94 <uarte_instance_init.isra.0+0xac>
    5c14:	0bad0000 	.word	0x0bad0000
    5c18:	0000f291 	.word	0x0000f291
    5c1c:	4001f000 	.word	0x4001f000

00005c20 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5c20:	4919      	ldr	r1, [pc, #100]	; (5c88 <sys_clock_timeout_handler+0x68>)
{
    5c22:	b570      	push	{r4, r5, r6, lr}
    5c24:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    5c26:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5c2a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    5c2c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5c30:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5c34:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    5c36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5c3a:	f04f 0500 	mov.w	r5, #0
    5c3e:	d20a      	bcs.n	5c56 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5c40:	4b12      	ldr	r3, [pc, #72]	; (5c8c <sys_clock_timeout_handler+0x6c>)
    5c42:	6819      	ldr	r1, [r3, #0]
    5c44:	060a      	lsls	r2, r1, #24
    5c46:	0a0b      	lsrs	r3, r1, #8
    5c48:	1992      	adds	r2, r2, r6
    5c4a:	4911      	ldr	r1, [pc, #68]	; (5c90 <sys_clock_timeout_handler+0x70>)
    5c4c:	f143 0300 	adc.w	r3, r3, #0
    5c50:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    5c54:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5c56:	f003 fa8f 	bl	9178 <sys_clock_announce>
    return p_reg->CC[ch];
    5c5a:	00a3      	lsls	r3, r4, #2
    5c5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5c60:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5c64:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    5c68:	42b2      	cmp	r2, r6
    5c6a:	d10b      	bne.n	5c84 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    5c6c:	b91d      	cbnz	r5, 5c76 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    5c6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    5c72:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
    5c76:	4b07      	ldr	r3, [pc, #28]	; (5c94 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5c78:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    5c7c:	fa00 f404 	lsl.w	r4, r0, r4
    5c80:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5c84:	bd70      	pop	{r4, r5, r6, pc}
    5c86:	bf00      	nop
    5c88:	20000958 	.word	0x20000958
    5c8c:	200028cc 	.word	0x200028cc
    5c90:	20000940 	.word	0x20000940
    5c94:	40011000 	.word	0x40011000

00005c98 <compare_int_lock>:
{
    5c98:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5c9a:	2301      	movs	r3, #1
    5c9c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5c9e:	4a11      	ldr	r2, [pc, #68]	; (5ce4 <compare_int_lock+0x4c>)
    5ca0:	f3bf 8f5b 	dmb	ish
    5ca4:	43dc      	mvns	r4, r3
    5ca6:	e852 1f00 	ldrex	r1, [r2]
    5caa:	ea01 0c04 	and.w	ip, r1, r4
    5cae:	e842 ce00 	strex	lr, ip, [r2]
    5cb2:	f1be 0f00 	cmp.w	lr, #0
    5cb6:	d1f6      	bne.n	5ca6 <compare_int_lock+0xe>
    5cb8:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5cbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5cc0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5cc4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5cc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5ccc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5cd0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5cd4:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    5cd8:	420b      	tst	r3, r1
}
    5cda:	bf14      	ite	ne
    5cdc:	2001      	movne	r0, #1
    5cde:	2000      	moveq	r0, #0
    5ce0:	bd10      	pop	{r4, pc}
    5ce2:	bf00      	nop
    5ce4:	200028c8 	.word	0x200028c8

00005ce8 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    5ce8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5cea:	4a12      	ldr	r2, [pc, #72]	; (5d34 <compare_int_unlock.part.0+0x4c>)
    5cec:	f3bf 8f5b 	dmb	ish
    5cf0:	4083      	lsls	r3, r0
    5cf2:	e852 1f00 	ldrex	r1, [r2]
    5cf6:	4319      	orrs	r1, r3
    5cf8:	e842 1c00 	strex	ip, r1, [r2]
    5cfc:	f1bc 0f00 	cmp.w	ip, #0
    5d00:	d1f7      	bne.n	5cf2 <compare_int_unlock.part.0+0xa>
    5d02:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    5d06:	4a0c      	ldr	r2, [pc, #48]	; (5d38 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5d0c:	4083      	lsls	r3, r0
    5d0e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5d12:	4b0a      	ldr	r3, [pc, #40]	; (5d3c <compare_int_unlock.part.0+0x54>)
    5d14:	f3bf 8f5b 	dmb	ish
    5d18:	681b      	ldr	r3, [r3, #0]
    5d1a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5d1e:	fa23 f000 	lsr.w	r0, r3, r0
    5d22:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d24:	bf42      	ittt	mi
    5d26:	4b06      	ldrmi	r3, [pc, #24]	; (5d40 <compare_int_unlock.part.0+0x58>)
    5d28:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    5d2c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5d30:	4770      	bx	lr
    5d32:	bf00      	nop
    5d34:	200028c8 	.word	0x200028c8
    5d38:	40011000 	.word	0x40011000
    5d3c:	200028c4 	.word	0x200028c4
    5d40:	e000e100 	.word	0xe000e100

00005d44 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5d44:	4b0d      	ldr	r3, [pc, #52]	; (5d7c <z_nrf_rtc_timer_read+0x38>)
    5d46:	681b      	ldr	r3, [r3, #0]
    5d48:	0a19      	lsrs	r1, r3, #8
    5d4a:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5d4c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5d50:	4b0b      	ldr	r3, [pc, #44]	; (5d80 <z_nrf_rtc_timer_read+0x3c>)
    5d52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5d56:	18c0      	adds	r0, r0, r3
    5d58:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5d60:	d20a      	bcs.n	5d78 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5d62:	4b08      	ldr	r3, [pc, #32]	; (5d84 <z_nrf_rtc_timer_read+0x40>)
    5d64:	e9d3 2300 	ldrd	r2, r3, [r3]
    5d68:	4299      	cmp	r1, r3
    5d6a:	bf08      	it	eq
    5d6c:	4290      	cmpeq	r0, r2
    5d6e:	d203      	bcs.n	5d78 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5d70:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5d74:	f141 0100 	adc.w	r1, r1, #0
}
    5d78:	4770      	bx	lr
    5d7a:	bf00      	nop
    5d7c:	200028cc 	.word	0x200028cc
    5d80:	40011000 	.word	0x40011000
    5d84:	20000940 	.word	0x20000940

00005d88 <compare_set>:
{
    5d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d8c:	b085      	sub	sp, #20
    5d8e:	4616      	mov	r6, r2
    5d90:	461f      	mov	r7, r3
    5d92:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    5d94:	f7ff ff80 	bl	5c98 <compare_int_lock>
    5d98:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5d9a:	f7ff ffd3 	bl	5d44 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5d9e:	42b9      	cmp	r1, r7
    5da0:	bf08      	it	eq
    5da2:	42b0      	cmpeq	r0, r6
    5da4:	d27f      	bcs.n	5ea6 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    5da6:	ebb6 0800 	subs.w	r8, r6, r0
    5daa:	eb67 0901 	sbc.w	r9, r7, r1
    5dae:	2300      	movs	r3, #0
    5db0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5db4:	454b      	cmp	r3, r9
    5db6:	bf08      	it	eq
    5db8:	4542      	cmpeq	r2, r8
    5dba:	f0c0 8085 	bcc.w	5ec8 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    5dbe:	4b44      	ldr	r3, [pc, #272]	; (5ed0 <compare_set+0x148>)
    5dc0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    5dc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5dc8:	429f      	cmp	r7, r3
    5dca:	bf08      	it	eq
    5dcc:	4296      	cmpeq	r6, r2
    5dce:	d054      	beq.n	5e7a <compare_set+0xf2>
    5dd0:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5dd4:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    5dd8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5ddc:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5de0:	fa0b f205 	lsl.w	r2, fp, r5
    5de4:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5de8:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5dec:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5df0:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    5df2:	4a38      	ldr	r2, [pc, #224]	; (5ed4 <compare_set+0x14c>)
    return p_reg->CC[ch];
    5df4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    5df8:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5dfc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    5e00:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5e04:	461c      	mov	r4, r3
    5e06:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    5e08:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5e0c:	eba0 000a 	sub.w	r0, r0, sl
    5e10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5e14:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    5e18:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    5e1a:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    5e1e:	d105      	bne.n	5e2c <compare_set+0xa4>
    5e20:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    5e22:	2013      	movs	r0, #19
    5e24:	f007 f973 	bl	d10e <z_impl_k_busy_wait>
    5e28:	4a2a      	ldr	r2, [pc, #168]	; (5ed4 <compare_set+0x14c>)
    5e2a:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    5e2c:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5e2e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    5e32:	eba4 000c 	sub.w	r0, r4, ip
    5e36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    5e3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5e3e:	bf88      	it	hi
    5e40:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5e42:	2000      	movs	r0, #0
    5e44:	f8c8 0000 	str.w	r0, [r8]
    5e48:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    5e4c:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5e50:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5e54:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    5e58:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5e5c:	4582      	cmp	sl, r0
    5e5e:	d006      	beq.n	5e6e <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    5e60:	1a20      	subs	r0, r4, r0
    5e62:	3802      	subs	r0, #2
    5e64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    5e68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5e6c:	d819      	bhi.n	5ea2 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    5e6e:	1ae4      	subs	r4, r4, r3
    5e70:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5e74:	1932      	adds	r2, r6, r4
    5e76:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    5e7a:	4c15      	ldr	r4, [pc, #84]	; (5ed0 <compare_set+0x148>)
    5e7c:	0129      	lsls	r1, r5, #4
    5e7e:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    5e82:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    5e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    5e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    5e8a:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    5e8c:	6043      	str	r3, [r0, #4]
	return ret;
    5e8e:	2400      	movs	r4, #0
	if (key) {
    5e90:	9b01      	ldr	r3, [sp, #4]
    5e92:	b113      	cbz	r3, 5e9a <compare_set+0x112>
    5e94:	4628      	mov	r0, r5
    5e96:	f7ff ff27 	bl	5ce8 <compare_int_unlock.part.0>
}
    5e9a:	4620      	mov	r0, r4
    5e9c:	b005      	add	sp, #20
    5e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ea2:	4620      	mov	r0, r4
    5ea4:	e7b0      	b.n	5e08 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    5ea6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5ea8:	4a0b      	ldr	r2, [pc, #44]	; (5ed8 <compare_set+0x150>)
    5eaa:	f3bf 8f5b 	dmb	ish
    5eae:	40ab      	lsls	r3, r5
    5eb0:	e852 1f00 	ldrex	r1, [r2]
    5eb4:	4319      	orrs	r1, r3
    5eb6:	e842 1000 	strex	r0, r1, [r2]
    5eba:	2800      	cmp	r0, #0
    5ebc:	d1f8      	bne.n	5eb0 <compare_set+0x128>
    5ebe:	f3bf 8f5b 	dmb	ish
    5ec2:	4632      	mov	r2, r6
    5ec4:	463b      	mov	r3, r7
    5ec6:	e7d8      	b.n	5e7a <compare_set+0xf2>
			return -EINVAL;
    5ec8:	f06f 0415 	mvn.w	r4, #21
    5ecc:	e7e0      	b.n	5e90 <compare_set+0x108>
    5ece:	bf00      	nop
    5ed0:	20000948 	.word	0x20000948
    5ed4:	40011000 	.word	0x40011000
    5ed8:	200028c4 	.word	0x200028c4

00005edc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    5edc:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5ede:	4b19      	ldr	r3, [pc, #100]	; (5f44 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    5ee0:	4d19      	ldr	r5, [pc, #100]	; (5f48 <sys_clock_driver_init+0x6c>)
    5ee2:	2400      	movs	r4, #0
    5ee4:	f04f 30ff 	mov.w	r0, #4294967295
    5ee8:	f04f 31ff 	mov.w	r1, #4294967295
    5eec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    5ef0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    5ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5ef8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5efc:	4b13      	ldr	r3, [pc, #76]	; (5f4c <sys_clock_driver_init+0x70>)
    5efe:	2602      	movs	r6, #2
    5f00:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5f04:	2101      	movs	r1, #1
    5f06:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    5f0a:	2011      	movs	r0, #17
    5f0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5f10:	4622      	mov	r2, r4
    5f12:	f7fd fca3 	bl	385c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5f16:	2011      	movs	r0, #17
    5f18:	f7fd fc6e 	bl	37f8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5f1c:	4a0c      	ldr	r2, [pc, #48]	; (5f50 <sys_clock_driver_init+0x74>)
    5f1e:	2301      	movs	r3, #1
    5f20:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5f22:	4a0c      	ldr	r2, [pc, #48]	; (5f54 <sys_clock_driver_init+0x78>)
    5f24:	602b      	str	r3, [r5, #0]
    5f26:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5f28:	4b0b      	ldr	r3, [pc, #44]	; (5f58 <sys_clock_driver_init+0x7c>)
    5f2a:	4a0c      	ldr	r2, [pc, #48]	; (5f5c <sys_clock_driver_init+0x80>)
    5f2c:	9300      	str	r3, [sp, #0]
    5f2e:	9401      	str	r4, [sp, #4]
    5f30:	2300      	movs	r3, #0
    5f32:	4620      	mov	r0, r4
    5f34:	f7ff ff28 	bl	5d88 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5f38:	4630      	mov	r0, r6
    5f3a:	f7ff f98d 	bl	5258 <z_nrf_clock_control_lf_on>

	return 0;
}
    5f3e:	4620      	mov	r0, r4
    5f40:	b002      	add	sp, #8
    5f42:	bd70      	pop	{r4, r5, r6, pc}
    5f44:	20000948 	.word	0x20000948
    5f48:	40011000 	.word	0x40011000
    5f4c:	e000e100 	.word	0xe000e100
    5f50:	40011008 	.word	0x40011008
    5f54:	200028c8 	.word	0x200028c8
    5f58:	00005c21 	.word	0x00005c21
    5f5c:	007fffff 	.word	0x007fffff

00005f60 <rtc_nrf_isr>:
{
    5f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5f64:	4c34      	ldr	r4, [pc, #208]	; (6038 <rtc_nrf_isr+0xd8>)
    5f66:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5f6a:	079a      	lsls	r2, r3, #30
    5f6c:	d509      	bpl.n	5f82 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f6e:	4b33      	ldr	r3, [pc, #204]	; (603c <rtc_nrf_isr+0xdc>)
    5f70:	681a      	ldr	r2, [r3, #0]
    5f72:	b132      	cbz	r2, 5f82 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5f74:	2200      	movs	r2, #0
    5f76:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    5f78:	4a31      	ldr	r2, [pc, #196]	; (6040 <rtc_nrf_isr+0xe0>)
    5f7a:	681b      	ldr	r3, [r3, #0]
    5f7c:	6813      	ldr	r3, [r2, #0]
    5f7e:	3301      	adds	r3, #1
    5f80:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    5f82:	f04f 0320 	mov.w	r3, #32
    5f86:	f3ef 8211 	mrs	r2, BASEPRI
    5f8a:	f383 8812 	msr	BASEPRI_MAX, r3
    5f8e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    5f92:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5f96:	03db      	lsls	r3, r3, #15
    5f98:	d512      	bpl.n	5fc0 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5f9a:	f3bf 8f5b 	dmb	ish
    5f9e:	4b29      	ldr	r3, [pc, #164]	; (6044 <rtc_nrf_isr+0xe4>)
    5fa0:	e853 1f00 	ldrex	r1, [r3]
    5fa4:	f021 0001 	bic.w	r0, r1, #1
    5fa8:	e843 0600 	strex	r6, r0, [r3]
    5fac:	2e00      	cmp	r6, #0
    5fae:	d1f7      	bne.n	5fa0 <rtc_nrf_isr+0x40>
    5fb0:	f3bf 8f5b 	dmb	ish
    5fb4:	4b24      	ldr	r3, [pc, #144]	; (6048 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5fb6:	2900      	cmp	r1, #0
    5fb8:	d139      	bne.n	602e <rtc_nrf_isr+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5fba:	6819      	ldr	r1, [r3, #0]
		if (result) {
    5fbc:	2900      	cmp	r1, #0
    5fbe:	d136      	bne.n	602e <rtc_nrf_isr+0xce>
{
    5fc0:	2300      	movs	r3, #0
	__asm__ volatile(
    5fc2:	f382 8811 	msr	BASEPRI, r2
    5fc6:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    5fca:	b36b      	cbz	r3, 6028 <rtc_nrf_isr+0xc8>
		curr_time = z_nrf_rtc_timer_read();
    5fcc:	f7ff feba 	bl	5d44 <z_nrf_rtc_timer_read>
    5fd0:	4606      	mov	r6, r0
    5fd2:	460f      	mov	r7, r1
	__asm__ volatile(
    5fd4:	f04f 0320 	mov.w	r3, #32
    5fd8:	f3ef 8011 	mrs	r0, BASEPRI
    5fdc:	f383 8812 	msr	BASEPRI_MAX, r3
    5fe0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    5fe4:	4b19      	ldr	r3, [pc, #100]	; (604c <rtc_nrf_isr+0xec>)
    5fe6:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5fea:	4549      	cmp	r1, r9
    5fec:	bf08      	it	eq
    5fee:	4546      	cmpeq	r6, r8
    5ff0:	f04f 0200 	mov.w	r2, #0
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5ff4:	bf21      	itttt	cs
    5ff6:	f04f 36ff 	movcs.w	r6, #4294967295
    5ffa:	f04f 37ff 	movcs.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    5ffe:	e9d3 1500 	ldrdcs	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6002:	e9c3 6702 	strdcs	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    6006:	bf23      	ittte	cs
    6008:	601a      	strcs	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    600a:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
    600e:	f8c4 3348 	strcs.w	r3, [r4, #840]	; 0x348
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    6012:	4611      	movcc	r1, r2
	__asm__ volatile(
    6014:	f380 8811 	msr	BASEPRI, r0
    6018:	f3bf 8f6f 	isb	sy
		if (handler) {
    601c:	b121      	cbz	r1, 6028 <rtc_nrf_isr+0xc8>
			handler(chan, expire_time, user_context);
    601e:	9500      	str	r5, [sp, #0]
    6020:	4642      	mov	r2, r8
    6022:	464b      	mov	r3, r9
    6024:	2000      	movs	r0, #0
    6026:	4788      	blx	r1
}
    6028:	b003      	add	sp, #12
    602a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    602e:	2100      	movs	r1, #0
    6030:	6019      	str	r1, [r3, #0]
    6032:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6034:	2301      	movs	r3, #1
}
    6036:	e7c4      	b.n	5fc2 <rtc_nrf_isr+0x62>
    6038:	40011000 	.word	0x40011000
    603c:	40011104 	.word	0x40011104
    6040:	200028cc 	.word	0x200028cc
    6044:	200028c4 	.word	0x200028c4
    6048:	40011140 	.word	0x40011140
    604c:	20000948 	.word	0x20000948

00006050 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6050:	4b14      	ldr	r3, [pc, #80]	; (60a4 <sys_clock_set_timeout+0x54>)
{
    6052:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6054:	f1b0 3fff 	cmp.w	r0, #4294967295
    6058:	bf08      	it	eq
    605a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    605c:	1e44      	subs	r4, r0, #1
    605e:	2c00      	cmp	r4, #0
    6060:	dd1e      	ble.n	60a0 <sys_clock_set_timeout+0x50>
    6062:	429c      	cmp	r4, r3
    6064:	bfa8      	it	ge
    6066:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6068:	f7ff fe6c 	bl	5d44 <z_nrf_rtc_timer_read>
    606c:	4b0e      	ldr	r3, [pc, #56]	; (60a8 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    606e:	490f      	ldr	r1, [pc, #60]	; (60ac <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6070:	e9d3 2300 	ldrd	r2, r3, [r3]
    6074:	1a80      	subs	r0, r0, r2
		ticks = 0;
    6076:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    607a:	bf28      	it	cs
    607c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    607e:	3001      	adds	r0, #1
    6080:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    6082:	4808      	ldr	r0, [pc, #32]	; (60a4 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6084:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    6086:	4284      	cmp	r4, r0
    6088:	bf28      	it	cs
    608a:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    608c:	1912      	adds	r2, r2, r4
    608e:	f04f 0000 	mov.w	r0, #0
    6092:	9001      	str	r0, [sp, #4]
    6094:	f143 0300 	adc.w	r3, r3, #0
    6098:	f7ff fe76 	bl	5d88 <compare_set>
}
    609c:	b002      	add	sp, #8
    609e:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    60a0:	2400      	movs	r4, #0
    60a2:	e7e1      	b.n	6068 <sys_clock_set_timeout+0x18>
    60a4:	007fffff 	.word	0x007fffff
    60a8:	20000958 	.word	0x20000958
    60ac:	00005c21 	.word	0x00005c21

000060b0 <sys_clock_elapsed>:
{
    60b0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    60b2:	f7ff fe47 	bl	5d44 <z_nrf_rtc_timer_read>
    60b6:	4b02      	ldr	r3, [pc, #8]	; (60c0 <sys_clock_elapsed+0x10>)
    60b8:	681b      	ldr	r3, [r3, #0]
}
    60ba:	1ac0      	subs	r0, r0, r3
    60bc:	bd08      	pop	{r3, pc}
    60be:	bf00      	nop
    60c0:	20000958 	.word	0x20000958

000060c4 <fprotect_set_permission>:
	return 0;
}

static int fprotect_set_permission(uint32_t start, size_t length,
				   size_t permission)
{
    60c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    60c6:	4c28      	ldr	r4, [pc, #160]	; (6168 <fprotect_set_permission+0xa4>)
}

NRF_STATIC_INLINE nrf_acl_perm_t nrf_acl_region_perm_get(NRF_ACL_Type const * p_reg,
                                                         uint32_t             region_id)
{
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    60c8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 616c <fprotect_set_permission+0xa8>
    60cc:	6823      	ldr	r3, [r4, #0]
	while (nrf_acl_region_perm_get(NRF_ACL, idx) != 0) {
    60ce:	2600      	movs	r6, #0
    60d0:	eb0c 1703 	add.w	r7, ip, r3, lsl #4
    60d4:	011d      	lsls	r5, r3, #4
    60d6:	f8d7 7808 	ldr.w	r7, [r7, #2056]	; 0x808
    60da:	f017 0fff 	tst.w	r7, #255	; 0xff
    60de:	d10c      	bne.n	60fa <fprotect_set_permission+0x36>
    60e0:	b106      	cbz	r6, 60e4 <fprotect_set_permission+0x20>
    60e2:	6023      	str	r3, [r4, #0]
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    60e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    60e8:	691e      	ldr	r6, [r3, #16]

	if (result != 0) {
		return result;
	}

	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    60ea:	fbb0 f4f6 	udiv	r4, r0, r6
    60ee:	fb06 0414 	mls	r4, r6, r4, r0
    60f2:	b15c      	cbz	r4, 610c <fprotect_set_permission+0x48>
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
		return -EINVAL;
    60f4:	f06f 0015 	mvn.w	r0, #21
    60f8:	e007      	b.n	610a <fprotect_set_permission+0x46>
		idx++;
    60fa:	3301      	adds	r3, #1
		if (idx >= ACL_REGIONS_COUNT) {
    60fc:	2b07      	cmp	r3, #7
    60fe:	f04f 0601 	mov.w	r6, #1
    6102:	d9e5      	bls.n	60d0 <fprotect_set_permission+0xc>
    6104:	6023      	str	r3, [r4, #0]
			return -ENOSPC;
    6106:	f06f 001b 	mvn.w	r0, #27
		|| (nrf_acl_region_perm_get(NRF_ACL, region_idx) != permission)) {
		return -EFAULT;
	}

	return 0;
}
    610a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    610c:	691e      	ldr	r6, [r3, #16]
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    610e:	fbb1 f4f6 	udiv	r4, r1, r6
    6112:	fb06 1414 	mls	r4, r6, r4, r1
	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    6116:	2c00      	cmp	r4, #0
    6118:	d1ec      	bne.n	60f4 <fprotect_set_permission+0x30>
    611a:	691c      	ldr	r4, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
    611c:	695b      	ldr	r3, [r3, #20]
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    611e:	4363      	muls	r3, r4
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    6120:	428b      	cmp	r3, r1
    6122:	d3e7      	bcc.n	60f4 <fprotect_set_permission+0x30>
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    6124:	2900      	cmp	r1, #0
    6126:	d0e5      	beq.n	60f4 <fprotect_set_permission+0x30>
    p_reg->ACL[region_id].ADDR = address;
    6128:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    612c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    p_reg->ACL[region_id].PERM = perm;
    6130:	461c      	mov	r4, r3
    p_reg->ACL[region_id].ADDR = address;
    6132:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
    p_reg->ACL[region_id].SIZE = size;
    6136:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
    p_reg->ACL[region_id].PERM = perm;
    613a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
    return (uint32_t)p_reg->ACL[region_id].ADDR;
    613e:	f8d3 5800 	ldr.w	r5, [r3, #2048]	; 0x800
	if ((nrf_acl_region_address_get(NRF_ACL, region_idx) != start)
    6142:	42a8      	cmp	r0, r5
    6144:	d10c      	bne.n	6160 <fprotect_set_permission+0x9c>
    return (size_t)p_reg->ACL[region_id].SIZE;
    6146:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
		|| (nrf_acl_region_size_get(NRF_ACL, region_idx) != length)
    614a:	4299      	cmp	r1, r3
    614c:	d108      	bne.n	6160 <fprotect_set_permission+0x9c>
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    614e:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
		|| (nrf_acl_region_perm_get(NRF_ACL, region_idx) != permission)) {
    6152:	b2db      	uxtb	r3, r3
		return -EFAULT;
    6154:	4293      	cmp	r3, r2
    6156:	bf0c      	ite	eq
    6158:	2000      	moveq	r0, #0
    615a:	f06f 000d 	mvnne.w	r0, #13
    615e:	e7d4      	b.n	610a <fprotect_set_permission+0x46>
    6160:	f06f 000d 	mvn.w	r0, #13
    6164:	e7d1      	b.n	610a <fprotect_set_permission+0x46>
    6166:	bf00      	nop
    6168:	200028d0 	.word	0x200028d0
    616c:	4001e000 	.word	0x4001e000

00006170 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    6170:	4803      	ldr	r0, [pc, #12]	; (6180 <k_sys_fatal_error_handler+0x10>)
{
    6172:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    6174:	2145      	movs	r1, #69	; 0x45
    6176:	f005 fd30 	bl	bbda <z_log_minimal_printk>
		sys_arch_reboot(0);
    617a:	2000      	movs	r0, #0
    617c:	f7fe f858 	bl	4230 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    6180:	0000f2d3 	.word	0x0000f2d3

00006184 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    6184:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    6186:	4a05      	ldr	r2, [pc, #20]	; (619c <boot_write_magic+0x18>)
{
    6188:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    618a:	3910      	subs	r1, #16
    618c:	2310      	movs	r3, #16
    618e:	f005 fe24 	bl	bdda <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    6192:	3800      	subs	r0, #0
    6194:	bf18      	it	ne
    6196:	2001      	movne	r0, #1
    6198:	bd08      	pop	{r3, pc}
    619a:	bf00      	nop
    619c:	0000dafc 	.word	0x0000dafc

000061a0 <boot_read_swap_state>:
{
    61a0:	b530      	push	{r4, r5, lr}
    61a2:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    61a4:	6881      	ldr	r1, [r0, #8]
{
    61a6:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    61a8:	2310      	movs	r3, #16
    61aa:	aa02      	add	r2, sp, #8
    61ac:	3910      	subs	r1, #16
{
    61ae:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    61b0:	f005 fdf7 	bl	bda2 <flash_area_read>
    if (rc < 0) {
    61b4:	2800      	cmp	r0, #0
    61b6:	db11      	blt.n	61dc <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
    61b8:	2210      	movs	r2, #16
    61ba:	a902      	add	r1, sp, #8
    61bc:	4628      	mov	r0, r5
    61be:	f006 faa2 	bl	c706 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    61c2:	b168      	cbz	r0, 61e0 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
    61c4:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    61c6:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    61c8:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    61ca:	2301      	movs	r3, #1
    61cc:	f10d 0207 	add.w	r2, sp, #7
    61d0:	3928      	subs	r1, #40	; 0x28
    61d2:	4628      	mov	r0, r5
    61d4:	f005 fde5 	bl	bda2 <flash_area_read>
    if (rc < 0) {
    61d8:	2800      	cmp	r0, #0
    61da:	da0b      	bge.n	61f4 <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
    61dc:	2001      	movs	r0, #1
    61de:	e02a      	b.n	6236 <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    61e0:	4916      	ldr	r1, [pc, #88]	; (623c <boot_read_swap_state+0x9c>)
    61e2:	2210      	movs	r2, #16
    61e4:	a802      	add	r0, sp, #8
    61e6:	f005 ff02 	bl	bfee <memcmp>
    61ea:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
    61ec:	bf14      	ite	ne
    61ee:	2302      	movne	r3, #2
    61f0:	2301      	moveq	r3, #1
    61f2:	e7e8      	b.n	61c6 <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    61f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61f8:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    61fc:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    61fe:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    6200:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    6202:	2201      	movs	r2, #1
    6204:	f10d 0107 	add.w	r1, sp, #7
    6208:	4628      	mov	r0, r5
    620a:	f006 fa7c 	bl	c706 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    620e:	b910      	cbnz	r0, 6216 <boot_read_swap_state+0x76>
    6210:	7863      	ldrb	r3, [r4, #1]
    6212:	2b04      	cmp	r3, #4
    6214:	d903      	bls.n	621e <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    6216:	2301      	movs	r3, #1
    6218:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    621a:	2300      	movs	r3, #0
    621c:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    621e:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    6220:	1ca1      	adds	r1, r4, #2
    6222:	3a20      	subs	r2, #32
    6224:	4628      	mov	r0, r5
    6226:	f006 fa96 	bl	c756 <boot_read_flag>
    if (rc) {
    622a:	2800      	cmp	r0, #0
    622c:	d1d6      	bne.n	61dc <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
    622e:	1ce1      	adds	r1, r4, #3
    6230:	4628      	mov	r0, r5
    6232:	f006 faeb 	bl	c80c <boot_read_image_ok>
}
    6236:	b007      	add	sp, #28
    6238:	bd30      	pop	{r4, r5, pc}
    623a:	bf00      	nop
    623c:	0000dafc 	.word	0x0000dafc

00006240 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    6240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6244:	b085      	sub	sp, #20
    6246:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6248:	4669      	mov	r1, sp
    624a:	2002      	movs	r0, #2
    624c:	f006 fae2 	bl	c814 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    6250:	4604      	mov	r4, r0
    6252:	b118      	cbz	r0, 625c <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    6254:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    6256:	b005      	add	sp, #20
    6258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    625c:	a902      	add	r1, sp, #8
    625e:	2005      	movs	r0, #5
    6260:	f006 fad8 	bl	c814 <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    6264:	2801      	cmp	r0, #1
    6266:	d138      	bne.n	62da <boot_swap_type_multi+0x9a>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    6268:	4829      	ldr	r0, [pc, #164]	; (6310 <boot_swap_type_multi+0xd0>)
    626a:	462a      	mov	r2, r5
    626c:	2149      	movs	r1, #73	; 0x49
    626e:	f005 fcb4 	bl	bbda <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    6272:	4b28      	ldr	r3, [pc, #160]	; (6314 <boot_swap_type_multi+0xd4>)
    6274:	9302      	str	r3, [sp, #8]
        secondary_slot.image_num = 0;
    6276:	f88d 400c 	strb.w	r4, [sp, #12]
        if (boot_magic_compatible_check(table->magic_primary_slot,
    627a:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    627e:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    6282:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    6286:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    628a:	f89d 9002 	ldrb.w	r9, [sp, #2]
    628e:	4c22      	ldr	r4, [pc, #136]	; (6318 <boot_swap_type_multi+0xd8>)
    6290:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    6292:	7820      	ldrb	r0, [r4, #0]
    6294:	4629      	mov	r1, r5
    6296:	f006 fa4a 	bl	c72e <boot_magic_compatible_check>
    629a:	b318      	cbz	r0, 62e4 <boot_swap_type_multi+0xa4>
            boot_magic_compatible_check(table->magic_secondary_slot,
    629c:	7860      	ldrb	r0, [r4, #1]
    629e:	4631      	mov	r1, r6
    62a0:	f006 fa45 	bl	c72e <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    62a4:	b1f0      	cbz	r0, 62e4 <boot_swap_type_multi+0xa4>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    62a6:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    62a8:	2b04      	cmp	r3, #4
    62aa:	d001      	beq.n	62b0 <boot_swap_type_multi+0x70>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    62ac:	42bb      	cmp	r3, r7
    62ae:	d119      	bne.n	62e4 <boot_swap_type_multi+0xa4>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    62b0:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    62b2:	2b04      	cmp	r3, #4
    62b4:	d001      	beq.n	62ba <boot_swap_type_multi+0x7a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    62b6:	4543      	cmp	r3, r8
    62b8:	d114      	bne.n	62e4 <boot_swap_type_multi+0xa4>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    62ba:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    62bc:	2b04      	cmp	r3, #4
    62be:	d10f      	bne.n	62e0 <boot_swap_type_multi+0xa0>
            BOOT_LOG_INF("Swap type: %s",
    62c0:	7963      	ldrb	r3, [r4, #5]
    62c2:	2b02      	cmp	r3, #2
    62c4:	d119      	bne.n	62fa <boot_swap_type_multi+0xba>
    62c6:	4a15      	ldr	r2, [pc, #84]	; (631c <boot_swap_type_multi+0xdc>)
    62c8:	4815      	ldr	r0, [pc, #84]	; (6320 <boot_swap_type_multi+0xe0>)
    62ca:	2149      	movs	r1, #73	; 0x49
    62cc:	f005 fc85 	bl	bbda <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    62d0:	7960      	ldrb	r0, [r4, #5]
    62d2:	1e83      	subs	r3, r0, #2
    62d4:	2b02      	cmp	r3, #2
    62d6:	d9be      	bls.n	6256 <boot_swap_type_multi+0x16>
    62d8:	e7bc      	b.n	6254 <boot_swap_type_multi+0x14>
    } else if (rc) {
    62da:	2800      	cmp	r0, #0
    62dc:	d0cd      	beq.n	627a <boot_swap_type_multi+0x3a>
    62de:	e7b9      	b.n	6254 <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    62e0:	454b      	cmp	r3, r9
    62e2:	d0ed      	beq.n	62c0 <boot_swap_type_multi+0x80>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    62e4:	3201      	adds	r2, #1
    62e6:	2a03      	cmp	r2, #3
    62e8:	f104 0406 	add.w	r4, r4, #6
    62ec:	d1d1      	bne.n	6292 <boot_swap_type_multi+0x52>
    BOOT_LOG_INF("Swap type: none");
    62ee:	480d      	ldr	r0, [pc, #52]	; (6324 <boot_swap_type_multi+0xe4>)
    62f0:	2149      	movs	r1, #73	; 0x49
    62f2:	f005 fc72 	bl	bbda <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    62f6:	2001      	movs	r0, #1
    62f8:	e7ad      	b.n	6256 <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    62fa:	2b03      	cmp	r3, #3
    62fc:	d005      	beq.n	630a <boot_swap_type_multi+0xca>
    62fe:	4a0a      	ldr	r2, [pc, #40]	; (6328 <boot_swap_type_multi+0xe8>)
    6300:	490a      	ldr	r1, [pc, #40]	; (632c <boot_swap_type_multi+0xec>)
    6302:	2b04      	cmp	r3, #4
    6304:	bf18      	it	ne
    6306:	460a      	movne	r2, r1
    6308:	e7de      	b.n	62c8 <boot_swap_type_multi+0x88>
    630a:	4a09      	ldr	r2, [pc, #36]	; (6330 <boot_swap_type_multi+0xf0>)
    630c:	e7dc      	b.n	62c8 <boot_swap_type_multi+0x88>
    630e:	bf00      	nop
    6310:	0000f318 	.word	0x0000f318
    6314:	03030103 	.word	0x03030103
    6318:	0000f38b 	.word	0x0000f38b
    631c:	0000f2fc 	.word	0x0000f2fc
    6320:	0000f363 	.word	0x0000f363
    6324:	0000f376 	.word	0x0000f376
    6328:	0000f2f5 	.word	0x0000f2f5
    632c:	0000f306 	.word	0x0000f306
    6330:	0000f301 	.word	0x0000f301

00006334 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6334:	4b03      	ldr	r3, [pc, #12]	; (6344 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    6336:	6818      	ldr	r0, [r3, #0]
}
    6338:	f1a0 0308 	sub.w	r3, r0, #8
    633c:	4258      	negs	r0, r3
    633e:	4158      	adcs	r0, r3
    6340:	4770      	bx	lr
    6342:	bf00      	nop
    6344:	10000130 	.word	0x10000130

00006348 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6348:	4b06      	ldr	r3, [pc, #24]	; (6364 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    634a:	681b      	ldr	r3, [r3, #0]
    634c:	2b08      	cmp	r3, #8
    634e:	d106      	bne.n	635e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6350:	4b05      	ldr	r3, [pc, #20]	; (6368 <nrf52_errata_103+0x20>)
    6352:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    6354:	2b05      	cmp	r3, #5
    6356:	d802      	bhi.n	635e <nrf52_errata_103+0x16>
    6358:	4a04      	ldr	r2, [pc, #16]	; (636c <nrf52_errata_103+0x24>)
    635a:	5cd0      	ldrb	r0, [r2, r3]
    635c:	4770      	bx	lr
        return false;
    635e:	2000      	movs	r0, #0
}
    6360:	4770      	bx	lr
    6362:	bf00      	nop
    6364:	10000130 	.word	0x10000130
    6368:	10000134 	.word	0x10000134
    636c:	0000f3a3 	.word	0x0000f3a3

00006370 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    6370:	b508      	push	{r3, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    6372:	f7ff ffdf 	bl	6334 <nrf52_errata_136>
    6376:	b140      	cbz	r0, 638a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    6378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    637c:	2200      	movs	r2, #0
    637e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    6382:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6386:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    638a:	f7ff ffd3 	bl	6334 <nrf52_errata_136>
    638e:	2800      	cmp	r0, #0
    6390:	d046      	beq.n	6420 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6396:	4b4a      	ldr	r3, [pc, #296]	; (64c0 <SystemInit+0x150>)
    6398:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    639c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    63a0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    63a4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    63a8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    63ac:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    63b0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    63b4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    63b8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    63bc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    63c0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    63c4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    63c8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    63cc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    63d0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    63d4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    63d8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    63dc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    63e0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    63e4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    63e8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    63ec:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    63f0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    63f4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    63f8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    63fc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6400:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    6404:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    6408:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    640c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6410:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    6414:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    6418:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    641c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    6420:	f7ff ff92 	bl	6348 <nrf52_errata_103>
    6424:	b110      	cbz	r0, 642c <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    6426:	4b27      	ldr	r3, [pc, #156]	; (64c4 <SystemInit+0x154>)
    6428:	4a27      	ldr	r2, [pc, #156]	; (64c8 <SystemInit+0x158>)
    642a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    642c:	f7ff ff8c 	bl	6348 <nrf52_errata_103>
    6430:	b118      	cbz	r0, 643a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    6432:	4b26      	ldr	r3, [pc, #152]	; (64cc <SystemInit+0x15c>)
    6434:	22fb      	movs	r2, #251	; 0xfb
    6436:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    643a:	f7ff ff85 	bl	6348 <nrf52_errata_103>
    643e:	b148      	cbz	r0, 6454 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    6440:	4923      	ldr	r1, [pc, #140]	; (64d0 <SystemInit+0x160>)
    6442:	4b24      	ldr	r3, [pc, #144]	; (64d4 <SystemInit+0x164>)
    6444:	680a      	ldr	r2, [r1, #0]
    6446:	681b      	ldr	r3, [r3, #0]
    6448:	f022 020f 	bic.w	r2, r2, #15
    644c:	f003 030f 	and.w	r3, r3, #15
    6450:	4313      	orrs	r3, r2
    6452:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    6454:	f7ff ff78 	bl	6348 <nrf52_errata_103>
    6458:	b118      	cbz	r0, 6462 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    645a:	4b1f      	ldr	r3, [pc, #124]	; (64d8 <SystemInit+0x168>)
    645c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6460:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    6462:	f7ff ff67 	bl	6334 <nrf52_errata_136>
    6466:	b148      	cbz	r0, 647c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    646c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6470:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    6472:	bf44      	itt	mi
    6474:	f06f 0201 	mvnmi.w	r2, #1
    6478:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    647c:	4a17      	ldr	r2, [pc, #92]	; (64dc <SystemInit+0x16c>)
    647e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    6482:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    6486:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    648a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    648e:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6492:	4b13      	ldr	r3, [pc, #76]	; (64e0 <SystemInit+0x170>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    6494:	681b      	ldr	r3, [r3, #0]
    6496:	2b08      	cmp	r3, #8
    6498:	d10e      	bne.n	64b8 <SystemInit+0x148>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    649a:	4b12      	ldr	r3, [pc, #72]	; (64e4 <SystemInit+0x174>)
    649c:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    649e:	2b05      	cmp	r3, #5
    64a0:	d802      	bhi.n	64a8 <SystemInit+0x138>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    64a2:	4a11      	ldr	r2, [pc, #68]	; (64e8 <SystemInit+0x178>)
    64a4:	5cd3      	ldrb	r3, [r2, r3]
    64a6:	b13b      	cbz	r3, 64b8 <SystemInit+0x148>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    64a8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    64ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    64b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64b4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    64b8:	4b0c      	ldr	r3, [pc, #48]	; (64ec <SystemInit+0x17c>)
    64ba:	4a0d      	ldr	r2, [pc, #52]	; (64f0 <SystemInit+0x180>)
    64bc:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    64be:	bd08      	pop	{r3, pc}
    64c0:	4000c000 	.word	0x4000c000
    64c4:	4000568c 	.word	0x4000568c
    64c8:	00038148 	.word	0x00038148
    64cc:	4000f000 	.word	0x4000f000
    64d0:	40000ee4 	.word	0x40000ee4
    64d4:	10000258 	.word	0x10000258
    64d8:	40029640 	.word	0x40029640
    64dc:	e000ed00 	.word	0xe000ed00
    64e0:	10000130 	.word	0x10000130
    64e4:	10000134 	.word	0x10000134
    64e8:	0000f39d 	.word	0x0000f39d
    64ec:	200003a0 	.word	0x200003a0
    64f0:	03d09000 	.word	0x03d09000

000064f4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    64f4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    64f6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    64f8:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    64fa:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    64fe:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    6500:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    6504:	d014      	beq.n	6530 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6506:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    650a:	fa05 f204 	lsl.w	r2, r5, r4
    650e:	ea23 0202 	bic.w	r2, r3, r2
    6512:	e850 6f00 	ldrex	r6, [r0]
    6516:	429e      	cmp	r6, r3
    6518:	d104      	bne.n	6524 <nrfx_flag32_alloc+0x30>
    651a:	e840 2c00 	strex	ip, r2, [r0]
    651e:	f1bc 0f00 	cmp.w	ip, #0
    6522:	d1f6      	bne.n	6512 <nrfx_flag32_alloc+0x1e>
    6524:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6528:	d1e6      	bne.n	64f8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    652a:	4802      	ldr	r0, [pc, #8]	; (6534 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    652c:	700c      	strb	r4, [r1, #0]
}
    652e:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    6530:	4801      	ldr	r0, [pc, #4]	; (6538 <nrfx_flag32_alloc+0x44>)
    6532:	e7fc      	b.n	652e <nrfx_flag32_alloc+0x3a>
    6534:	0bad0000 	.word	0x0bad0000
    6538:	0bad0002 	.word	0x0bad0002

0000653c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    653c:	6803      	ldr	r3, [r0, #0]
    653e:	40cb      	lsrs	r3, r1
    6540:	07db      	lsls	r3, r3, #31
{
    6542:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    6544:	d415      	bmi.n	6572 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    6546:	2301      	movs	r3, #1
    6548:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    654c:	6803      	ldr	r3, [r0, #0]
    654e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    6552:	ea41 0203 	orr.w	r2, r1, r3
    6556:	e850 4f00 	ldrex	r4, [r0]
    655a:	429c      	cmp	r4, r3
    655c:	d104      	bne.n	6568 <nrfx_flag32_free+0x2c>
    655e:	e840 2c00 	strex	ip, r2, [r0]
    6562:	f1bc 0f00 	cmp.w	ip, #0
    6566:	d1f6      	bne.n	6556 <nrfx_flag32_free+0x1a>
    6568:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    656c:	d1ee      	bne.n	654c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    656e:	4802      	ldr	r0, [pc, #8]	; (6578 <nrfx_flag32_free+0x3c>)
}
    6570:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6572:	4802      	ldr	r0, [pc, #8]	; (657c <nrfx_flag32_free+0x40>)
    6574:	e7fc      	b.n	6570 <nrfx_flag32_free+0x34>
    6576:	bf00      	nop
    6578:	0bad0000 	.word	0x0bad0000
    657c:	0bad0004 	.word	0x0bad0004

00006580 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6580:	4b04      	ldr	r3, [pc, #16]	; (6594 <nrfx_clock_init+0x14>)
    6582:	791a      	ldrb	r2, [r3, #4]
    6584:	b922      	cbnz	r2, 6590 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    6586:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    6588:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    658a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    658c:	4802      	ldr	r0, [pc, #8]	; (6598 <nrfx_clock_init+0x18>)
    658e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6590:	4802      	ldr	r0, [pc, #8]	; (659c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6592:	4770      	bx	lr
    6594:	200028d4 	.word	0x200028d4
    6598:	0bad0000 	.word	0x0bad0000
    659c:	0bad000c 	.word	0x0bad000c

000065a0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    65a0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    65a2:	2000      	movs	r0, #0
    65a4:	f7fd f94c 	bl	3840 <arch_irq_is_enabled>
    65a8:	b908      	cbnz	r0, 65ae <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    65aa:	f7fd f925 	bl	37f8 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    65ae:	4b02      	ldr	r3, [pc, #8]	; (65b8 <nrfx_clock_enable+0x18>)
    65b0:	2201      	movs	r2, #1
    65b2:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    65b4:	bd08      	pop	{r3, pc}
    65b6:	bf00      	nop
    65b8:	20002e05 	.word	0x20002e05

000065bc <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    65bc:	b110      	cbz	r0, 65c4 <nrfx_clock_start+0x8>
    65be:	2801      	cmp	r0, #1
    65c0:	d020      	beq.n	6604 <nrfx_clock_start+0x48>
    65c2:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    65c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65c8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    65cc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    65d0:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    65d4:	4619      	mov	r1, r3
    65d6:	d011      	beq.n	65fc <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    65d8:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    65dc:	2a01      	cmp	r2, #1
    65de:	d10d      	bne.n	65fc <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    65e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65e4:	4b0c      	ldr	r3, [pc, #48]	; (6618 <nrfx_clock_start+0x5c>)
    65e6:	2200      	movs	r2, #0
    65e8:	601a      	str	r2, [r3, #0]
    65ea:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    65ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65f0:	2202      	movs	r2, #2
    65f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65f6:	2201      	movs	r2, #1
    65f8:	609a      	str	r2, [r3, #8]
}
    65fa:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    65fc:	2300      	movs	r3, #0
    65fe:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    6602:	e7ef      	b.n	65e4 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6604:	4b05      	ldr	r3, [pc, #20]	; (661c <nrfx_clock_start+0x60>)
    6606:	2200      	movs	r2, #0
    6608:	601a      	str	r2, [r3, #0]
    660a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    660c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6610:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6614:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    6616:	4770      	bx	lr
    6618:	40000104 	.word	0x40000104
    661c:	40000100 	.word	0x40000100

00006620 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    6620:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    6622:	b110      	cbz	r0, 662a <nrfx_clock_stop+0xa>
    6624:	2801      	cmp	r0, #1
    6626:	d018      	beq.n	665a <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    6628:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    662a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    662e:	2202      	movs	r2, #2
    6630:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6634:	4a18      	ldr	r2, [pc, #96]	; (6698 <nrfx_clock_stop+0x78>)
    6636:	6010      	str	r0, [r2, #0]
    6638:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    663a:	4a18      	ldr	r2, [pc, #96]	; (669c <nrfx_clock_stop+0x7c>)
    663c:	2101      	movs	r1, #1
    663e:	6011      	str	r1, [r2, #0]
    6640:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6644:	461c      	mov	r4, r3
    6646:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    664a:	03db      	lsls	r3, r3, #15
    664c:	d5ec      	bpl.n	6628 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    664e:	2001      	movs	r0, #1
    6650:	f006 f942 	bl	c8d8 <nrfx_busy_wait>
    6654:	3d01      	subs	r5, #1
    6656:	d1f6      	bne.n	6646 <nrfx_clock_stop+0x26>
    6658:	e7e6      	b.n	6628 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    665a:	4b11      	ldr	r3, [pc, #68]	; (66a0 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    665c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6660:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    6662:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6666:	601a      	str	r2, [r3, #0]
    6668:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    666a:	4b0e      	ldr	r3, [pc, #56]	; (66a4 <nrfx_clock_stop+0x84>)
    666c:	f242 7510 	movw	r5, #10000	; 0x2710
    6670:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6672:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6676:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    667a:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    667c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6680:	d505      	bpl.n	668e <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    6682:	b123      	cbz	r3, 668e <nrfx_clock_stop+0x6e>
    6684:	2001      	movs	r0, #1
    6686:	f006 f927 	bl	c8d8 <nrfx_busy_wait>
    668a:	3d01      	subs	r5, #1
    668c:	d1f1      	bne.n	6672 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    668e:	4b06      	ldr	r3, [pc, #24]	; (66a8 <nrfx_clock_stop+0x88>)
    6690:	2200      	movs	r2, #0
    6692:	715a      	strb	r2, [r3, #5]
    6694:	e7c8      	b.n	6628 <nrfx_clock_stop+0x8>
    6696:	bf00      	nop
    6698:	40000104 	.word	0x40000104
    669c:	4000000c 	.word	0x4000000c
    66a0:	40000100 	.word	0x40000100
    66a4:	40000004 	.word	0x40000004
    66a8:	200028d4 	.word	0x200028d4

000066ac <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    66ac:	4b16      	ldr	r3, [pc, #88]	; (6708 <nrfx_clock_irq_handler+0x5c>)
    66ae:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    66b0:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    66b2:	b16a      	cbz	r2, 66d0 <nrfx_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66b4:	2200      	movs	r2, #0
    66b6:	601a      	str	r2, [r3, #0]
    66b8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    66ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66be:	2201      	movs	r2, #1
    66c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    66c4:	4b11      	ldr	r3, [pc, #68]	; (670c <nrfx_clock_irq_handler+0x60>)
    66c6:	7958      	ldrb	r0, [r3, #5]
    66c8:	b910      	cbnz	r0, 66d0 <nrfx_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    66ca:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    66cc:	681b      	ldr	r3, [r3, #0]
    66ce:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    66d0:	4b0f      	ldr	r3, [pc, #60]	; (6710 <nrfx_clock_irq_handler+0x64>)
    66d2:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    66d4:	b172      	cbz	r2, 66f4 <nrfx_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66d6:	2200      	movs	r2, #0
    66d8:	601a      	str	r2, [r3, #0]
    66da:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    66dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66e0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    66e4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    66e8:	0792      	lsls	r2, r2, #30
    66ea:	d104      	bne.n	66f6 <nrfx_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    66ec:	2201      	movs	r2, #1
    66ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66f2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    66f4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    66f6:	2202      	movs	r2, #2
    66f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    66fc:	4b03      	ldr	r3, [pc, #12]	; (670c <nrfx_clock_irq_handler+0x60>)
}
    66fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6702:	681b      	ldr	r3, [r3, #0]
    6704:	2001      	movs	r0, #1
    6706:	4718      	bx	r3
    6708:	40000100 	.word	0x40000100
    670c:	200028d4 	.word	0x200028d4
    6710:	40000104 	.word	0x40000104

00006714 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6714:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    6716:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    671a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    671c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    671e:	6002      	str	r2, [r0, #0]
}
    6720:	4802      	ldr	r0, [pc, #8]	; (672c <nrf_gpio_pin_port_decode+0x18>)
    6722:	bf18      	it	ne
    6724:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    6728:	4770      	bx	lr
    672a:	bf00      	nop
    672c:	50000300 	.word	0x50000300

00006730 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6730:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6732:	f100 0308 	add.w	r3, r0, #8
    6736:	4c0c      	ldr	r4, [pc, #48]	; (6768 <call_handler+0x38>)
    6738:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    673c:	05da      	lsls	r2, r3, #23
{
    673e:	4605      	mov	r5, r0
    6740:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6742:	d507      	bpl.n	6754 <call_handler+0x24>
    6744:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6748:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    674c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6750:	6852      	ldr	r2, [r2, #4]
    6752:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    6754:	68a3      	ldr	r3, [r4, #8]
    6756:	b12b      	cbz	r3, 6764 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6758:	68e2      	ldr	r2, [r4, #12]
    675a:	4631      	mov	r1, r6
    675c:	4628      	mov	r0, r5
    }
}
    675e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6762:	4718      	bx	r3
}
    6764:	bd70      	pop	{r4, r5, r6, pc}
    6766:	bf00      	nop
    6768:	200003a4 	.word	0x200003a4

0000676c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    676c:	4b13      	ldr	r3, [pc, #76]	; (67bc <release_handler+0x50>)
    676e:	3008      	adds	r0, #8
{
    6770:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6772:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    6776:	05d1      	lsls	r1, r2, #23
    6778:	d51c      	bpl.n	67b4 <release_handler+0x48>
    677a:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    677e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    6782:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6786:	f103 0410 	add.w	r4, r3, #16
    678a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    678c:	f834 2b02 	ldrh.w	r2, [r4], #2
    6790:	f412 7f80 	tst.w	r2, #256	; 0x100
    6794:	d003      	beq.n	679e <release_handler+0x32>
    6796:	f3c2 2243 	ubfx	r2, r2, #9, #4
    679a:	4291      	cmp	r1, r2
    679c:	d00a      	beq.n	67b4 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    679e:	3001      	adds	r0, #1
    67a0:	2830      	cmp	r0, #48	; 0x30
    67a2:	d1f3      	bne.n	678c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    67a4:	2200      	movs	r2, #0
    67a6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    67aa:	4805      	ldr	r0, [pc, #20]	; (67c0 <release_handler+0x54>)
}
    67ac:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    67b0:	f7ff bec4 	b.w	653c <nrfx_flag32_free>
}
    67b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    67b8:	4770      	bx	lr
    67ba:	bf00      	nop
    67bc:	200003a4 	.word	0x200003a4
    67c0:	20000418 	.word	0x20000418

000067c4 <pin_handler_trigger_uninit>:
{
    67c4:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    67c6:	4c0a      	ldr	r4, [pc, #40]	; (67f0 <pin_handler_trigger_uninit+0x2c>)
    67c8:	f100 0508 	add.w	r5, r0, #8
    67cc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    67d0:	069a      	lsls	r2, r3, #26
    67d2:	d506      	bpl.n	67e2 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    67d4:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    67d6:	4a07      	ldr	r2, [pc, #28]	; (67f4 <pin_handler_trigger_uninit+0x30>)
    67d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    67dc:	2100      	movs	r1, #0
    67de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    67e2:	f7ff ffc3 	bl	676c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    67e6:	2300      	movs	r3, #0
    67e8:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    67ec:	bd38      	pop	{r3, r4, r5, pc}
    67ee:	bf00      	nop
    67f0:	200003a4 	.word	0x200003a4
    67f4:	40006000 	.word	0x40006000

000067f8 <nrfx_gpiote_input_configure>:
{
    67f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    67fc:	4604      	mov	r4, r0
    67fe:	4617      	mov	r7, r2
    6800:	461d      	mov	r5, r3
    if (p_input_config)
    6802:	b311      	cbz	r1, 684a <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6804:	4e4d      	ldr	r6, [pc, #308]	; (693c <nrfx_gpiote_input_configure+0x144>)
    6806:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
    680a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    680e:	f003 0322 	and.w	r3, r3, #34	; 0x22
    6812:	2b22      	cmp	r3, #34	; 0x22
    6814:	d103      	bne.n	681e <nrfx_gpiote_input_configure+0x26>
                return NRFX_ERROR_INVALID_PARAM;
    6816:	484a      	ldr	r0, [pc, #296]	; (6940 <nrfx_gpiote_input_configure+0x148>)
}
    6818:	b004      	add	sp, #16
    681a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    681e:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6820:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6824:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    6828:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    682c:	f10d 020f 	add.w	r2, sp, #15
    6830:	460b      	mov	r3, r1
    6832:	f10d 010e 	add.w	r1, sp, #14
    6836:	f006 f851 	bl	c8dc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    683a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    683e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6842:	f043 0301 	orr.w	r3, r3, #1
    6846:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    684a:	b197      	cbz	r7, 6872 <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    684c:	483b      	ldr	r0, [pc, #236]	; (693c <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    684e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6850:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6852:	f104 0308 	add.w	r3, r4, #8
    6856:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
        if (pin_is_output(pin))
    685a:	078f      	lsls	r7, r1, #30
    685c:	d50c      	bpl.n	6878 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    685e:	2a00      	cmp	r2, #0
    6860:	d1d9      	bne.n	6816 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6862:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
    6866:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    686a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    686e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (p_handler_config)
    6872:	bbcd      	cbnz	r5, 68e8 <nrfx_gpiote_input_configure+0xf0>
    return NRFX_SUCCESS;
    6874:	4833      	ldr	r0, [pc, #204]	; (6944 <nrfx_gpiote_input_configure+0x14c>)
    6876:	e7cf      	b.n	6818 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6878:	f021 0120 	bic.w	r1, r1, #32
    687c:	04c9      	lsls	r1, r1, #19
    687e:	0cc9      	lsrs	r1, r1, #19
    6880:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            if (use_evt)
    6884:	2a00      	cmp	r2, #0
    6886:	d0ec      	beq.n	6862 <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
    6888:	2e03      	cmp	r6, #3
    688a:	d8c4      	bhi.n	6816 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    688c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    688e:	b92e      	cbnz	r6, 689c <nrfx_gpiote_input_configure+0xa4>
    6890:	4a2d      	ldr	r2, [pc, #180]	; (6948 <nrfx_gpiote_input_configure+0x150>)
    6892:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    6896:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    689a:	e7e2      	b.n	6862 <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    689c:	00ba      	lsls	r2, r7, #2
    689e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    68a2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    68a6:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    68aa:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    68ae:	f02c 0c03 	bic.w	ip, ip, #3
    68b2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    68b6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    68ba:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    68be:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    68c2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    68c6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    68ca:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
    68ce:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    68d2:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    68d6:	ea4c 0c0e 	orr.w	ip, ip, lr
    68da:	f041 0120 	orr.w	r1, r1, #32
    68de:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    68e2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    68e6:	e7bc      	b.n	6862 <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    68e8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    68ec:	4620      	mov	r0, r4
    68ee:	f7ff ff3d 	bl	676c <release_handler>
    if (!handler)
    68f2:	2e00      	cmp	r6, #0
    68f4:	d0be      	beq.n	6874 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    68f6:	4d11      	ldr	r5, [pc, #68]	; (693c <nrfx_gpiote_input_configure+0x144>)
    68f8:	682b      	ldr	r3, [r5, #0]
    68fa:	429e      	cmp	r6, r3
    68fc:	d104      	bne.n	6908 <nrfx_gpiote_input_configure+0x110>
    68fe:	686b      	ldr	r3, [r5, #4]
    6900:	429f      	cmp	r7, r3
    6902:	d101      	bne.n	6908 <nrfx_gpiote_input_configure+0x110>
    6904:	2200      	movs	r2, #0
    6906:	e00a      	b.n	691e <nrfx_gpiote_input_configure+0x126>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6908:	4810      	ldr	r0, [pc, #64]	; (694c <nrfx_gpiote_input_configure+0x154>)
    690a:	f10d 010f 	add.w	r1, sp, #15
    690e:	f7ff fdf1 	bl	64f4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6912:	4b0c      	ldr	r3, [pc, #48]	; (6944 <nrfx_gpiote_input_configure+0x14c>)
    6914:	4298      	cmp	r0, r3
    6916:	f47f af7f 	bne.w	6818 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    691a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    691e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6922:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6926:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6928:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    692a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    692e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6936:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    693a:	e79b      	b.n	6874 <nrfx_gpiote_input_configure+0x7c>
    693c:	200003a4 	.word	0x200003a4
    6940:	0bad0004 	.word	0x0bad0004
    6944:	0bad0000 	.word	0x0bad0000
    6948:	40006000 	.word	0x40006000
    694c:	20000418 	.word	0x20000418

00006950 <nrfx_gpiote_output_configure>:
{
    6950:	b5f0      	push	{r4, r5, r6, r7, lr}
    6952:	4604      	mov	r4, r0
    6954:	b085      	sub	sp, #20
    6956:	4615      	mov	r5, r2
    if (p_config)
    6958:	b309      	cbz	r1, 699e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    695a:	f100 0708 	add.w	r7, r0, #8
    695e:	4e31      	ldr	r6, [pc, #196]	; (6a24 <nrfx_gpiote_output_configure+0xd4>)
    6960:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6964:	0798      	lsls	r0, r3, #30
    6966:	d401      	bmi.n	696c <nrfx_gpiote_output_configure+0x1c>
    6968:	069a      	lsls	r2, r3, #26
    696a:	d458      	bmi.n	6a1e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    696c:	f013 0f1c 	tst.w	r3, #28
    6970:	d002      	beq.n	6978 <nrfx_gpiote_output_configure+0x28>
    6972:	784b      	ldrb	r3, [r1, #1]
    6974:	2b01      	cmp	r3, #1
    6976:	d052      	beq.n	6a1e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    6978:	2301      	movs	r3, #1
    697a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    697e:	2300      	movs	r3, #0
    6980:	e9cd 1300 	strd	r1, r3, [sp]
    6984:	1c4a      	adds	r2, r1, #1
    6986:	1c8b      	adds	r3, r1, #2
    6988:	4620      	mov	r0, r4
    698a:	f10d 010f 	add.w	r1, sp, #15
    698e:	f005 ffa5 	bl	c8dc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6992:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    6996:	f043 0303 	orr.w	r3, r3, #3
    699a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    699e:	b915      	cbnz	r5, 69a6 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    69a0:	4821      	ldr	r0, [pc, #132]	; (6a28 <nrfx_gpiote_output_configure+0xd8>)
}
    69a2:	b005      	add	sp, #20
    69a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    69a6:	4e1f      	ldr	r6, [pc, #124]	; (6a24 <nrfx_gpiote_output_configure+0xd4>)
    69a8:	f104 0708 	add.w	r7, r4, #8
    69ac:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    69b0:	0783      	lsls	r3, r0, #30
    69b2:	d534      	bpl.n	6a1e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    69b4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    69b8:	4661      	mov	r1, ip
    69ba:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    69bc:	f020 0020 	bic.w	r0, r0, #32
    69c0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    69c4:	04c0      	lsls	r0, r0, #19
    69c6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    69ca:	0cc0      	lsrs	r0, r0, #19
    69cc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    69d0:	2300      	movs	r3, #0
    69d2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    69d6:	786a      	ldrb	r2, [r5, #1]
    69d8:	2a00      	cmp	r2, #0
    69da:	d0e1      	beq.n	69a0 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    69dc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    69e0:	78ad      	ldrb	r5, [r5, #2]
    69e2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    69e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    69ea:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69ee:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    69f2:	0223      	lsls	r3, r4, #8
    69f4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    69f8:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69fa:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    69fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6a02:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6a04:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6a06:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6a0a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6a0e:	432b      	orrs	r3, r5
    6a10:	f040 0020 	orr.w	r0, r0, #32
    6a14:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6a18:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6a1c:	e7c0      	b.n	69a0 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    6a1e:	4803      	ldr	r0, [pc, #12]	; (6a2c <nrfx_gpiote_output_configure+0xdc>)
    6a20:	e7bf      	b.n	69a2 <nrfx_gpiote_output_configure+0x52>
    6a22:	bf00      	nop
    6a24:	200003a4 	.word	0x200003a4
    6a28:	0bad0000 	.word	0x0bad0000
    6a2c:	0bad0004 	.word	0x0bad0004

00006a30 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6a30:	4b01      	ldr	r3, [pc, #4]	; (6a38 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6a32:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6a36:	4770      	bx	lr
    6a38:	200003a4 	.word	0x200003a4

00006a3c <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6a3c:	3008      	adds	r0, #8
    6a3e:	4b05      	ldr	r3, [pc, #20]	; (6a54 <nrfx_gpiote_channel_get+0x18>)
    6a40:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    6a44:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6a46:	bf43      	ittte	mi
    6a48:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    6a4a:	4803      	ldrmi	r0, [pc, #12]	; (6a58 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6a4c:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    6a4e:	4803      	ldrpl	r0, [pc, #12]	; (6a5c <nrfx_gpiote_channel_get+0x20>)
}
    6a50:	4770      	bx	lr
    6a52:	bf00      	nop
    6a54:	200003a4 	.word	0x200003a4
    6a58:	0bad0000 	.word	0x0bad0000
    6a5c:	0bad0004 	.word	0x0bad0004

00006a60 <nrfx_gpiote_init>:
{
    6a60:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6a62:	4c0e      	ldr	r4, [pc, #56]	; (6a9c <nrfx_gpiote_init+0x3c>)
    6a64:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    6a68:	b9b5      	cbnz	r5, 6a98 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6a6a:	2260      	movs	r2, #96	; 0x60
    6a6c:	4629      	mov	r1, r5
    6a6e:	f104 0010 	add.w	r0, r4, #16
    6a72:	f005 fad7 	bl	c024 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6a76:	2006      	movs	r0, #6
    6a78:	f7fc febe 	bl	37f8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6a7c:	4b08      	ldr	r3, [pc, #32]	; (6aa0 <nrfx_gpiote_init+0x40>)
    return err_code;
    6a7e:	4809      	ldr	r0, [pc, #36]	; (6aa4 <nrfx_gpiote_init+0x44>)
    6a80:	601d      	str	r5, [r3, #0]
    6a82:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6a84:	4b08      	ldr	r3, [pc, #32]	; (6aa8 <nrfx_gpiote_init+0x48>)
    6a86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6a8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6a8e:	2301      	movs	r3, #1
    6a90:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6a94:	6763      	str	r3, [r4, #116]	; 0x74
}
    6a96:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6a98:	4804      	ldr	r0, [pc, #16]	; (6aac <nrfx_gpiote_init+0x4c>)
    6a9a:	e7fc      	b.n	6a96 <nrfx_gpiote_init+0x36>
    6a9c:	200003a4 	.word	0x200003a4
    6aa0:	4000617c 	.word	0x4000617c
    6aa4:	0bad0000 	.word	0x0bad0000
    6aa8:	40006000 	.word	0x40006000
    6aac:	0bad0005 	.word	0x0bad0005

00006ab0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6ab0:	4b03      	ldr	r3, [pc, #12]	; (6ac0 <nrfx_gpiote_is_init+0x10>)
    6ab2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6ab6:	3800      	subs	r0, #0
    6ab8:	bf18      	it	ne
    6aba:	2001      	movne	r0, #1
    6abc:	4770      	bx	lr
    6abe:	bf00      	nop
    6ac0:	200003a4 	.word	0x200003a4

00006ac4 <nrfx_gpiote_channel_free>:
{
    6ac4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6ac6:	4801      	ldr	r0, [pc, #4]	; (6acc <nrfx_gpiote_channel_free+0x8>)
    6ac8:	f7ff bd38 	b.w	653c <nrfx_flag32_free>
    6acc:	20000414 	.word	0x20000414

00006ad0 <nrfx_gpiote_channel_alloc>:
{
    6ad0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6ad2:	4801      	ldr	r0, [pc, #4]	; (6ad8 <nrfx_gpiote_channel_alloc+0x8>)
    6ad4:	f7ff bd0e 	b.w	64f4 <nrfx_flag32_alloc>
    6ad8:	20000414 	.word	0x20000414

00006adc <nrfx_gpiote_trigger_enable>:
{
    6adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6ade:	4b1f      	ldr	r3, [pc, #124]	; (6b5c <nrfx_gpiote_trigger_enable+0x80>)
    6ae0:	f100 0208 	add.w	r2, r0, #8
{
    6ae4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6ae6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6aea:	069a      	lsls	r2, r3, #26
    6aec:	d51d      	bpl.n	6b2a <nrfx_gpiote_trigger_enable+0x4e>
    6aee:	f013 0502 	ands.w	r5, r3, #2
    6af2:	d11a      	bne.n	6b2a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6af4:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6af6:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6af8:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    6afc:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    6b00:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6b04:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6b08:	6005      	str	r5, [r0, #0]
    6b0a:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6b0c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6b10:	f040 0001 	orr.w	r0, r0, #1
    6b14:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    6b18:	b129      	cbz	r1, 6b26 <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6b1a:	2201      	movs	r2, #1
    6b1c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    6b20:	4a0f      	ldr	r2, [pc, #60]	; (6b60 <nrfx_gpiote_trigger_enable+0x84>)
    6b22:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6b26:	b003      	add	sp, #12
    6b28:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6b2a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6b2e:	2b04      	cmp	r3, #4
    6b30:	d010      	beq.n	6b54 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6b32:	2b05      	cmp	r3, #5
    6b34:	d010      	beq.n	6b58 <nrfx_gpiote_trigger_enable+0x7c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6b36:	a801      	add	r0, sp, #4
    6b38:	9401      	str	r4, [sp, #4]
    6b3a:	f7ff fdeb 	bl	6714 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6b3e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    6b40:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6b44:	40d9      	lsrs	r1, r3
    6b46:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6b4a:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6b4c:	4620      	mov	r0, r4
    6b4e:	f005 ff0c 	bl	c96a <nrf_gpio_cfg_sense_set>
}
    6b52:	e7e8      	b.n	6b26 <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6b54:	2103      	movs	r1, #3
    6b56:	e7f9      	b.n	6b4c <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6b58:	2102      	movs	r1, #2
    6b5a:	e7f7      	b.n	6b4c <nrfx_gpiote_trigger_enable+0x70>
    6b5c:	200003a4 	.word	0x200003a4
    6b60:	40006000 	.word	0x40006000

00006b64 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6b64:	4b0e      	ldr	r3, [pc, #56]	; (6ba0 <nrfx_gpiote_trigger_disable+0x3c>)
    6b66:	f100 0208 	add.w	r2, r0, #8
    6b6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6b6e:	0699      	lsls	r1, r3, #26
    6b70:	d513      	bpl.n	6b9a <nrfx_gpiote_trigger_disable+0x36>
    6b72:	079a      	lsls	r2, r3, #30
    6b74:	d411      	bmi.n	6b9a <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6b76:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6b78:	2201      	movs	r2, #1
    6b7a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    6b7c:	009b      	lsls	r3, r3, #2
    6b7e:	4909      	ldr	r1, [pc, #36]	; (6ba4 <nrfx_gpiote_trigger_disable+0x40>)
    6b80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6b84:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6b88:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6b8c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    6b90:	f022 0203 	bic.w	r2, r2, #3
    6b94:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    6b98:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6b9a:	2100      	movs	r1, #0
    6b9c:	f005 bee5 	b.w	c96a <nrf_gpio_cfg_sense_set>
    6ba0:	200003a4 	.word	0x200003a4
    6ba4:	40006000 	.word	0x40006000

00006ba8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6ba8:	4b0e      	ldr	r3, [pc, #56]	; (6be4 <nrfx_gpiote_pin_uninit+0x3c>)
    6baa:	f100 0208 	add.w	r2, r0, #8
{
    6bae:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6bb0:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6bb4:	07db      	lsls	r3, r3, #31
{
    6bb6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6bb8:	d511      	bpl.n	6bde <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    6bba:	f7ff ffd3 	bl	6b64 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6bbe:	4620      	mov	r0, r4
    6bc0:	f7ff fe00 	bl	67c4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6bc4:	a801      	add	r0, sp, #4
    6bc6:	9401      	str	r4, [sp, #4]
    6bc8:	f7ff fda4 	bl	6714 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6bcc:	9b01      	ldr	r3, [sp, #4]
    6bce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6bd2:	2202      	movs	r2, #2
    6bd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6bd8:	4803      	ldr	r0, [pc, #12]	; (6be8 <nrfx_gpiote_pin_uninit+0x40>)
}
    6bda:	b002      	add	sp, #8
    6bdc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6bde:	4803      	ldr	r0, [pc, #12]	; (6bec <nrfx_gpiote_pin_uninit+0x44>)
    6be0:	e7fb      	b.n	6bda <nrfx_gpiote_pin_uninit+0x32>
    6be2:	bf00      	nop
    6be4:	200003a4 	.word	0x200003a4
    6be8:	0bad0000 	.word	0x0bad0000
    6bec:	0bad0004 	.word	0x0bad0004

00006bf0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    6bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bf4:	4b64      	ldr	r3, [pc, #400]	; (6d88 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    6bf6:	4865      	ldr	r0, [pc, #404]	; (6d8c <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6bf8:	4965      	ldr	r1, [pc, #404]	; (6d90 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    6bfa:	2500      	movs	r5, #0
{
    6bfc:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6bfe:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6c00:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c02:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6c04:	b136      	cbz	r6, 6c14 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    6c06:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    6c0a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6c0c:	bf1e      	ittt	ne
    6c0e:	601c      	strne	r4, [r3, #0]
    6c10:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    6c12:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    6c14:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6c16:	428b      	cmp	r3, r1
        mask <<= 1;
    6c18:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6c1c:	d1f1      	bne.n	6c02 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c1e:	4f5d      	ldr	r7, [pc, #372]	; (6d94 <nrfx_gpiote_irq_handler+0x1a4>)
    6c20:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6c22:	b37b      	cbz	r3, 6c84 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    6c24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6c28:	4e5b      	ldr	r6, [pc, #364]	; (6d98 <nrfx_gpiote_irq_handler+0x1a8>)
    6c2a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6c2e:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6c30:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6c34:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    6c38:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6c3a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6c3e:	9600      	str	r6, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6c40:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6c44:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    6c48:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    6c4c:	f8d9 3000 	ldr.w	r3, [r9]
    6c50:	b9f3      	cbnz	r3, 6c90 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6c52:	f108 0820 	add.w	r8, r8, #32
    6c56:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    6c5a:	f109 0904 	add.w	r9, r9, #4
    6c5e:	d1f5      	bne.n	6c4c <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6c60:	603b      	str	r3, [r7, #0]
    6c62:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    6c64:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
    6c66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6c6a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6c6e:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6c70:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6c74:	9b00      	ldr	r3, [sp, #0]
    6c76:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    6c7a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6c7c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    6c80:	4313      	orrs	r3, r2
    6c82:	d1dd      	bne.n	6c40 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    6c84:	2401      	movs	r4, #1
    while (mask)
    6c86:	2d00      	cmp	r5, #0
    6c88:	d166      	bne.n	6d58 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6c8a:	b007      	add	sp, #28
    6c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    6c90:	fa93 f3a3 	rbit	r3, r3
    6c94:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    6c98:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6c9c:	f106 0208 	add.w	r2, r6, #8
    6ca0:	4b3e      	ldr	r3, [pc, #248]	; (6d9c <nrfx_gpiote_irq_handler+0x1ac>)
    6ca2:	9603      	str	r6, [sp, #12]
    6ca4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    6ca8:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6cac:	08f4      	lsrs	r4, r6, #3
    6cae:	9301      	str	r3, [sp, #4]
    6cb0:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    6cb2:	ab04      	add	r3, sp, #16
    bit = BITMASK_RELBIT_GET(bit);
    6cb4:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6cb8:	fa0b fc00 	lsl.w	ip, fp, r0
    6cbc:	5d18      	ldrb	r0, [r3, r4]
    6cbe:	ea20 000c 	bic.w	r0, r0, ip
    6cc2:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6cc4:	a803      	add	r0, sp, #12
    6cc6:	0891      	lsrs	r1, r2, #2
    6cc8:	f7ff fd24 	bl	6714 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6ccc:	9c03      	ldr	r4, [sp, #12]
    6cce:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    if (is_level(trigger))
    6cd2:	074b      	lsls	r3, r1, #29
    6cd4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6cd8:	f3c4 4401 	ubfx	r4, r4, #16, #2
    6cdc:	d523      	bpl.n	6d26 <nrfx_gpiote_irq_handler+0x136>
        call_handler(pin, trigger);
    6cde:	4651      	mov	r1, sl
    6ce0:	4630      	mov	r0, r6
    6ce2:	f7ff fd25 	bl	6730 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6ce6:	a803      	add	r0, sp, #12
    6ce8:	9603      	str	r6, [sp, #12]
    6cea:	f7ff fd13 	bl	6714 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6cee:	9a03      	ldr	r2, [sp, #12]
    6cf0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    6cf4:	b2e4      	uxtb	r4, r4
    6cf6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6cfa:	f3c2 4201 	ubfx	r2, r2, #16, #2
    6cfe:	4294      	cmp	r4, r2
    6d00:	d107      	bne.n	6d12 <nrfx_gpiote_irq_handler+0x122>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6d02:	2100      	movs	r1, #0
    6d04:	4630      	mov	r0, r6
    6d06:	f005 fe30 	bl	c96a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6d0a:	4621      	mov	r1, r4
    6d0c:	4630      	mov	r0, r6
    6d0e:	f005 fe2c 	bl	c96a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6d12:	a803      	add	r0, sp, #12
    6d14:	9603      	str	r6, [sp, #12]
    6d16:	f7ff fcfd 	bl	6714 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    6d1a:	9b03      	ldr	r3, [sp, #12]
    6d1c:	fa0b f303 	lsl.w	r3, fp, r3
    6d20:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    6d24:	e792      	b.n	6c4c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6d26:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6d28:	bf0c      	ite	eq
    6d2a:	2103      	moveq	r1, #3
    6d2c:	2102      	movne	r1, #2
    6d2e:	4630      	mov	r0, r6
    6d30:	f005 fe1b 	bl	c96a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6d34:	9b01      	ldr	r3, [sp, #4]
    6d36:	2b03      	cmp	r3, #3
    6d38:	d004      	beq.n	6d44 <nrfx_gpiote_irq_handler+0x154>
    6d3a:	2c02      	cmp	r4, #2
    6d3c:	d107      	bne.n	6d4e <nrfx_gpiote_irq_handler+0x15e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6d3e:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6d42:	d1e6      	bne.n	6d12 <nrfx_gpiote_irq_handler+0x122>
            call_handler(pin, trigger);
    6d44:	4651      	mov	r1, sl
    6d46:	4630      	mov	r0, r6
    6d48:	f7ff fcf2 	bl	6730 <call_handler>
    6d4c:	e7e1      	b.n	6d12 <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6d4e:	2c03      	cmp	r4, #3
    6d50:	d1df      	bne.n	6d12 <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6d52:	f1ba 0f02 	cmp.w	sl, #2
    6d56:	e7f4      	b.n	6d42 <nrfx_gpiote_irq_handler+0x152>
        uint32_t ch = NRF_CTZ(mask);
    6d58:	fa95 f3a5 	rbit	r3, r5
    6d5c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6d60:	fa04 f203 	lsl.w	r2, r4, r3
    6d64:	009b      	lsls	r3, r3, #2
    6d66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6d6a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6d6e:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6d72:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6d76:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6d7a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    6d7e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    6d82:	f7ff fcd5 	bl	6730 <call_handler>
    6d86:	e77e      	b.n	6c86 <nrfx_gpiote_irq_handler+0x96>
    6d88:	40006100 	.word	0x40006100
    6d8c:	40006000 	.word	0x40006000
    6d90:	40006120 	.word	0x40006120
    6d94:	4000617c 	.word	0x4000617c
    6d98:	50000300 	.word	0x50000300
    6d9c:	200003a4 	.word	0x200003a4

00006da0 <nrfx_nvmc_page_erase>:
    return p_reg->CODEPAGESIZE;
    6da0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6da4:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
    6da6:	fbb0 f3f2 	udiv	r3, r0, r2
    6daa:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    6dae:	b973      	cbnz	r3, 6dce <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    6db0:	4b08      	ldr	r3, [pc, #32]	; (6dd4 <nrfx_nvmc_page_erase+0x34>)
    6db2:	2202      	movs	r2, #2
    6db4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    6db8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    6dbc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    6dc0:	07d2      	lsls	r2, r2, #31
    6dc2:	d5fb      	bpl.n	6dbc <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
    6dc4:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    6dc6:	4804      	ldr	r0, [pc, #16]	; (6dd8 <nrfx_nvmc_page_erase+0x38>)
    6dc8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    6dcc:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    6dce:	4803      	ldr	r0, [pc, #12]	; (6ddc <nrfx_nvmc_page_erase+0x3c>)
}
    6dd0:	4770      	bx	lr
    6dd2:	bf00      	nop
    6dd4:	4001e000 	.word	0x4001e000
    6dd8:	0bad0000 	.word	0x0bad0000
    6ddc:	0bad000a 	.word	0x0bad000a

00006de0 <nrfx_nvmc_word_write>:
    6de0:	4b07      	ldr	r3, [pc, #28]	; (6e00 <nrfx_nvmc_word_write+0x20>)
    6de2:	2201      	movs	r2, #1
    6de4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    6de8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    6dec:	07d2      	lsls	r2, r2, #31
    6dee:	d5fb      	bpl.n	6de8 <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
    6df0:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    6df2:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
    6df6:	2200      	movs	r2, #0
    6df8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
    6dfc:	4770      	bx	lr
    6dfe:	bf00      	nop
    6e00:	4001e000 	.word	0x4001e000

00006e04 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    6e04:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    6e06:	4c16      	ldr	r4, [pc, #88]	; (6e60 <nrfx_power_init+0x5c>)
    6e08:	7823      	ldrb	r3, [r4, #0]
    6e0a:	bb33      	cbnz	r3, 6e5a <nrfx_power_init+0x56>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    6e0c:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    6e0e:	0791      	lsls	r1, r2, #30
    6e10:	f3c2 0340 	ubfx	r3, r2, #1, #1
    6e14:	d50d      	bpl.n	6e32 <nrfx_power_init+0x2e>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6e16:	4b13      	ldr	r3, [pc, #76]	; (6e64 <nrfx_power_init+0x60>)
            if (var1 == 0x08)
    6e18:	681b      	ldr	r3, [r3, #0]
    6e1a:	2b08      	cmp	r3, #8
    6e1c:	d11b      	bne.n	6e56 <nrfx_power_init+0x52>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6e1e:	4b12      	ldr	r3, [pc, #72]	; (6e68 <nrfx_power_init+0x64>)
    6e20:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    6e22:	2b05      	cmp	r3, #5
    6e24:	d817      	bhi.n	6e56 <nrfx_power_init+0x52>
    6e26:	4911      	ldr	r1, [pc, #68]	; (6e6c <nrfx_power_init+0x68>)
    6e28:	5cc9      	ldrb	r1, [r1, r3]
    6e2a:	2301      	movs	r3, #1
    6e2c:	b109      	cbz	r1, 6e32 <nrfx_power_init+0x2e>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    6e2e:	4910      	ldr	r1, [pc, #64]	; (6e70 <nrfx_power_init+0x6c>)
    6e30:	600b      	str	r3, [r1, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6e32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6e36:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6e3a:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6e3e:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6e40:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
    6e44:	f7fc fcfc 	bl	3840 <arch_irq_is_enabled>
    6e48:	b908      	cbnz	r0, 6e4e <nrfx_power_init+0x4a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6e4a:	f7fc fcd5 	bl	37f8 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    6e4e:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    6e50:	4808      	ldr	r0, [pc, #32]	; (6e74 <nrfx_power_init+0x70>)
    m_initialized = true;
    6e52:	7023      	strb	r3, [r4, #0]
}
    6e54:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6e56:	2301      	movs	r3, #1
    6e58:	e7eb      	b.n	6e32 <nrfx_power_init+0x2e>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    6e5a:	4807      	ldr	r0, [pc, #28]	; (6e78 <nrfx_power_init+0x74>)
    6e5c:	e7fa      	b.n	6e54 <nrfx_power_init+0x50>
    6e5e:	bf00      	nop
    6e60:	20002e06 	.word	0x20002e06
    6e64:	10000130 	.word	0x10000130
    6e68:	10000134 	.word	0x10000134
    6e6c:	0000f3a9 	.word	0x0000f3a9
    6e70:	40000638 	.word	0x40000638
    6e74:	0bad0000 	.word	0x0bad0000
    6e78:	0bad000c 	.word	0x0bad000c

00006e7c <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    6e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e80:	f44f 7260 	mov.w	r2, #896	; 0x380
    6e84:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    6e88:	4b01      	ldr	r3, [pc, #4]	; (6e90 <nrfx_power_usbevt_uninit+0x14>)
    6e8a:	2200      	movs	r2, #0
    6e8c:	601a      	str	r2, [r3, #0]
}
    6e8e:	4770      	bx	lr
    6e90:	200028e4 	.word	0x200028e4

00006e94 <nrfx_power_usbevt_init>:
{
    6e94:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    6e96:	f7ff fff1 	bl	6e7c <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    6e9a:	6803      	ldr	r3, [r0, #0]
    6e9c:	b10b      	cbz	r3, 6ea2 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    6e9e:	4a01      	ldr	r2, [pc, #4]	; (6ea4 <nrfx_power_usbevt_init+0x10>)
    6ea0:	6013      	str	r3, [r2, #0]
}
    6ea2:	bd08      	pop	{r3, pc}
    6ea4:	200028e4 	.word	0x200028e4

00006ea8 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    6ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    6eac:	b510      	push	{r4, lr}
    6eae:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6eb2:	0762      	lsls	r2, r4, #29
    6eb4:	d507      	bpl.n	6ec6 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    6eb6:	f44f 7084 	mov.w	r0, #264	; 0x108
    6eba:	f005 fd73 	bl	c9a4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6ebe:	b110      	cbz	r0, 6ec6 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    6ec0:	4b1e      	ldr	r3, [pc, #120]	; (6f3c <nrfx_power_irq_handler+0x94>)
    6ec2:	681b      	ldr	r3, [r3, #0]
    6ec4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6ec6:	06a3      	lsls	r3, r4, #26
    6ec8:	d508      	bpl.n	6edc <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    6eca:	f44f 708a 	mov.w	r0, #276	; 0x114
    6ece:	f005 fd69 	bl	c9a4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6ed2:	b118      	cbz	r0, 6edc <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    6ed4:	4b1a      	ldr	r3, [pc, #104]	; (6f40 <nrfx_power_irq_handler+0x98>)
    6ed6:	2000      	movs	r0, #0
    6ed8:	681b      	ldr	r3, [r3, #0]
    6eda:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6edc:	0660      	lsls	r0, r4, #25
    6ede:	d508      	bpl.n	6ef2 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    6ee0:	f44f 708c 	mov.w	r0, #280	; 0x118
    6ee4:	f005 fd5e 	bl	c9a4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6ee8:	b118      	cbz	r0, 6ef2 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    6eea:	4b15      	ldr	r3, [pc, #84]	; (6f40 <nrfx_power_irq_handler+0x98>)
    6eec:	2001      	movs	r0, #1
    6eee:	681b      	ldr	r3, [r3, #0]
    6ef0:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    6ef2:	0621      	lsls	r1, r4, #24
    6ef4:	d508      	bpl.n	6f08 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    6ef6:	f44f 708e 	mov.w	r0, #284	; 0x11c
    6efa:	f005 fd53 	bl	c9a4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    6efe:	b118      	cbz	r0, 6f08 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    6f00:	4b10      	ldr	r3, [pc, #64]	; (6f44 <nrfx_power_irq_handler+0x9c>)
    6f02:	2000      	movs	r0, #0
    6f04:	681b      	ldr	r3, [r3, #0]
    6f06:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    6f08:	05e2      	lsls	r2, r4, #23
    6f0a:	d508      	bpl.n	6f1e <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    6f0c:	f44f 7090 	mov.w	r0, #288	; 0x120
    6f10:	f005 fd48 	bl	c9a4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    6f14:	b118      	cbz	r0, 6f1e <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    6f16:	4b0b      	ldr	r3, [pc, #44]	; (6f44 <nrfx_power_irq_handler+0x9c>)
    6f18:	2001      	movs	r0, #1
    6f1a:	681b      	ldr	r3, [r3, #0]
    6f1c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    6f1e:	05a3      	lsls	r3, r4, #22
    6f20:	d50a      	bpl.n	6f38 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    6f22:	f44f 7092 	mov.w	r0, #292	; 0x124
    6f26:	f005 fd3d 	bl	c9a4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    6f2a:	b128      	cbz	r0, 6f38 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6f2c:	4b05      	ldr	r3, [pc, #20]	; (6f44 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    6f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6f32:	681b      	ldr	r3, [r3, #0]
    6f34:	2002      	movs	r0, #2
    6f36:	4718      	bx	r3
}
    6f38:	bd10      	pop	{r4, pc}
    6f3a:	bf00      	nop
    6f3c:	200028dc 	.word	0x200028dc
    6f40:	200028e0 	.word	0x200028e0
    6f44:	200028e4 	.word	0x200028e4

00006f48 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6f48:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6f4a:	4801      	ldr	r0, [pc, #4]	; (6f50 <nrfx_ppi_channel_alloc+0x8>)
    6f4c:	f7ff bad2 	b.w	64f4 <nrfx_flag32_alloc>
    6f50:	20000420 	.word	0x20000420

00006f54 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6f54:	4b03      	ldr	r3, [pc, #12]	; (6f64 <nrf52_errata_166+0x10>)
            if (var1 == 0x08)
    6f56:	6818      	ldr	r0, [r3, #0]
}
    6f58:	f1a0 0308 	sub.w	r3, r0, #8
    6f5c:	4258      	negs	r0, r3
    6f5e:	4158      	adcs	r0, r3
    6f60:	4770      	bx	lr
    6f62:	bf00      	nop
    6f64:	10000130 	.word	0x10000130

00006f68 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6f68:	4b07      	ldr	r3, [pc, #28]	; (6f88 <nrf52_errata_187+0x20>)
            if (var1 == 0x08)
    6f6a:	681b      	ldr	r3, [r3, #0]
    6f6c:	2b08      	cmp	r3, #8
    6f6e:	d106      	bne.n	6f7e <nrf52_errata_187+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6f70:	4b06      	ldr	r3, [pc, #24]	; (6f8c <nrf52_errata_187+0x24>)
    6f72:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    6f74:	2b05      	cmp	r3, #5
    6f76:	d804      	bhi.n	6f82 <nrf52_errata_187+0x1a>
    6f78:	4a05      	ldr	r2, [pc, #20]	; (6f90 <nrf52_errata_187+0x28>)
    6f7a:	5cd0      	ldrb	r0, [r2, r3]
    6f7c:	4770      	bx	lr
        return false;
    6f7e:	2000      	movs	r0, #0
    6f80:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6f82:	2001      	movs	r0, #1
}
    6f84:	4770      	bx	lr
    6f86:	bf00      	nop
    6f88:	10000130 	.word	0x10000130
    6f8c:	10000134 	.word	0x10000134
    6f90:	0000f3af 	.word	0x0000f3af

00006f94 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6f94:	4b05      	ldr	r3, [pc, #20]	; (6fac <ep_state_access+0x18>)
    6f96:	f010 0f80 	tst.w	r0, #128	; 0x80
    6f9a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    6f9e:	bf08      	it	eq
    6fa0:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    6fa2:	f000 000f 	and.w	r0, r0, #15
}
    6fa6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6faa:	4770      	bx	lr
    6fac:	20002a58 	.word	0x20002a58

00006fb0 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
    6fb0:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    6fb2:	f7ff ffcf 	bl	6f54 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    6fb6:	b110      	cbz	r0, 6fbe <usbd_dma_pending_clear+0xe>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    6fb8:	4b03      	ldr	r3, [pc, #12]	; (6fc8 <usbd_dma_pending_clear+0x18>)
    6fba:	2200      	movs	r2, #0
    6fbc:	601a      	str	r2, [r3, #0]
    }
    m_dma_pending = false;
    6fbe:	4b03      	ldr	r3, [pc, #12]	; (6fcc <usbd_dma_pending_clear+0x1c>)
    6fc0:	2200      	movs	r2, #0
    6fc2:	701a      	strb	r2, [r3, #0]
}
    6fc4:	bd08      	pop	{r3, pc}
    6fc6:	bf00      	nop
    6fc8:	40027c1c 	.word	0x40027c1c
    6fcc:	20002e08 	.word	0x20002e08

00006fd0 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    6fd0:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    6fd2:	4a09      	ldr	r2, [pc, #36]	; (6ff8 <ev_usbreset_handler+0x28>)
    6fd4:	2300      	movs	r3, #0
    6fd6:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6fd8:	4a08      	ldr	r2, [pc, #32]	; (6ffc <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
    6fda:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6fde:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    6fe0:	f88d 3007 	strb.w	r3, [sp, #7]
    6fe4:	2301      	movs	r3, #1
    6fe6:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    6fea:	4b05      	ldr	r3, [pc, #20]	; (7000 <ev_usbreset_handler+0x30>)
    6fec:	a801      	add	r0, sp, #4
    6fee:	681b      	ldr	r3, [r3, #0]
    6ff0:	4798      	blx	r3
}
    6ff2:	b003      	add	sp, #12
    6ff4:	f85d fb04 	ldr.w	pc, [sp], #4
    6ff8:	20002e07 	.word	0x20002e07
    6ffc:	20002e0a 	.word	0x20002e0a
    7000:	20002ae8 	.word	0x20002ae8

00007004 <usbd_errata_187_211_begin>:

/**
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    7004:	b510      	push	{r4, lr}
	__asm__ volatile(
    7006:	f04f 0320 	mov.w	r3, #32
    700a:	f3ef 8411 	mrs	r4, BASEPRI
    700e:	f383 8812 	msr	BASEPRI_MAX, r3
    7012:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7016:	4b08      	ldr	r3, [pc, #32]	; (7038 <usbd_errata_187_211_begin+0x34>)
    7018:	4a08      	ldr	r2, [pc, #32]	; (703c <usbd_errata_187_211_begin+0x38>)
    701a:	6818      	ldr	r0, [r3, #0]
    701c:	2103      	movs	r1, #3
    701e:	b948      	cbnz	r0, 7034 <usbd_errata_187_211_begin+0x30>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7020:	f249 3075 	movw	r0, #37749	; 0x9375
    7024:	6018      	str	r0, [r3, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    7026:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7028:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
    702a:	f384 8811 	msr	BASEPRI, r4
    702e:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    7032:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    7034:	6011      	str	r1, [r2, #0]
    7036:	e7f8      	b.n	702a <usbd_errata_187_211_begin+0x26>
    7038:	4006ec00 	.word	0x4006ec00
    703c:	4006ed14 	.word	0x4006ed14

00007040 <usbd_errata_187_211_end>:

/**
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    7040:	b510      	push	{r4, lr}
	__asm__ volatile(
    7042:	f04f 0320 	mov.w	r3, #32
    7046:	f3ef 8411 	mrs	r4, BASEPRI
    704a:	f383 8812 	msr	BASEPRI_MAX, r3
    704e:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7052:	4b08      	ldr	r3, [pc, #32]	; (7074 <usbd_errata_187_211_end+0x34>)
    7054:	4a08      	ldr	r2, [pc, #32]	; (7078 <usbd_errata_187_211_end+0x38>)
    7056:	6818      	ldr	r0, [r3, #0]
    7058:	b948      	cbnz	r0, 706e <usbd_errata_187_211_end+0x2e>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    705a:	f249 3175 	movw	r1, #37749	; 0x9375
    705e:	6019      	str	r1, [r3, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    7060:	6010      	str	r0, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7062:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
    7064:	f384 8811 	msr	BASEPRI, r4
    7068:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    706c:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    706e:	2300      	movs	r3, #0
    7070:	6013      	str	r3, [r2, #0]
    7072:	e7f7      	b.n	7064 <usbd_errata_187_211_end+0x24>
    7074:	4006ec00 	.word	0x4006ec00
    7078:	4006ed14 	.word	0x4006ed14

0000707c <nrfx_usbd_feeder_flash>:
{
    707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    707e:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    7080:	4f0b      	ldr	r7, [pc, #44]	; (70b0 <nrfx_usbd_feeder_flash+0x34>)
    7082:	4293      	cmp	r3, r2
{
    7084:	460c      	mov	r4, r1
    7086:	bf28      	it	cs
    7088:	4613      	movcs	r3, r2
    708a:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    708c:	461a      	mov	r2, r3
    708e:	6809      	ldr	r1, [r1, #0]
    7090:	4638      	mov	r0, r7
    7092:	461d      	mov	r5, r3
    7094:	f004 ffbb 	bl	c00e <memcpy>
    p_transfer->size -= tx_size;
    7098:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    709a:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    709c:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    709e:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    70a2:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    70a4:	6060      	str	r0, [r4, #4]
}
    70a6:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    70a8:	6022      	str	r2, [r4, #0]
}
    70aa:	bf18      	it	ne
    70ac:	2001      	movne	r0, #1
    70ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70b0:	20002aec 	.word	0x20002aec

000070b4 <nrfx_usbd_feeder_flash_zlp>:
{
    70b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    70b6:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    70b8:	4293      	cmp	r3, r2
    70ba:	bf28      	it	cs
    70bc:	4613      	movcs	r3, r2
{
    70be:	4606      	mov	r6, r0
    70c0:	460d      	mov	r5, r1
    70c2:	461c      	mov	r4, r3
    if (tx_size != 0)
    70c4:	b18b      	cbz	r3, 70ea <nrfx_usbd_feeder_flash_zlp+0x36>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    70c6:	4f0a      	ldr	r7, [pc, #40]	; (70f0 <nrfx_usbd_feeder_flash_zlp+0x3c>)
    70c8:	6809      	ldr	r1, [r1, #0]
    70ca:	461a      	mov	r2, r3
    70cc:	4638      	mov	r0, r7
    70ce:	f004 ff9e 	bl	c00e <memcpy>
        p_next->p_data.tx = p_buffer;
    70d2:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    70d4:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    70d6:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    70d8:	1b1b      	subs	r3, r3, r4
    70da:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    70dc:	682b      	ldr	r3, [r5, #0]
}
    70de:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    70e0:	4423      	add	r3, r4
    70e2:	602b      	str	r3, [r5, #0]
}
    70e4:	bf18      	it	ne
    70e6:	2001      	movne	r0, #1
    70e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    70ea:	6003      	str	r3, [r0, #0]
    70ec:	e7f2      	b.n	70d4 <nrfx_usbd_feeder_flash_zlp+0x20>
    70ee:	bf00      	nop
    70f0:	20002aec 	.word	0x20002aec

000070f4 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    70f4:	4b21      	ldr	r3, [pc, #132]	; (717c <ev_usbevent_handler+0x88>)
{
    70f6:	b513      	push	{r0, r1, r4, lr}
    70f8:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    70fc:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    7100:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    7102:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7106:	d50e      	bpl.n	7126 <ev_usbevent_handler+0x32>
        m_bus_suspend = true;
    7108:	4b1d      	ldr	r3, [pc, #116]	; (7180 <ev_usbevent_handler+0x8c>)
    710a:	2201      	movs	r2, #1
    710c:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    710e:	2300      	movs	r3, #0
    7110:	f8ad 3005 	strh.w	r3, [sp, #5]
    7114:	f88d 3007 	strb.w	r3, [sp, #7]
    7118:	2302      	movs	r3, #2
    711a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    711e:	4b19      	ldr	r3, [pc, #100]	; (7184 <ev_usbevent_handler+0x90>)
    7120:	a801      	add	r0, sp, #4
    7122:	681b      	ldr	r3, [r3, #0]
    7124:	4798      	blx	r3
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    7126:	05a2      	lsls	r2, r4, #22
    7128:	d50d      	bpl.n	7146 <ev_usbevent_handler+0x52>
        m_bus_suspend = false;
    712a:	4a15      	ldr	r2, [pc, #84]	; (7180 <ev_usbevent_handler+0x8c>)
    712c:	2300      	movs	r3, #0
    712e:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    7130:	f8ad 3005 	strh.w	r3, [sp, #5]
    7134:	f88d 3007 	strb.w	r3, [sp, #7]
    7138:	2303      	movs	r3, #3
    713a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    713e:	4b11      	ldr	r3, [pc, #68]	; (7184 <ev_usbevent_handler+0x90>)
    7140:	a801      	add	r0, sp, #4
    7142:	681b      	ldr	r3, [r3, #0]
    7144:	4798      	blx	r3
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    7146:	0563      	lsls	r3, r4, #21
    7148:	d516      	bpl.n	7178 <ev_usbevent_handler+0x84>
        if (m_bus_suspend)
    714a:	4a0d      	ldr	r2, [pc, #52]	; (7180 <ev_usbevent_handler+0x8c>)
    714c:	7813      	ldrb	r3, [r2, #0]
    714e:	b19b      	cbz	r3, 7178 <ev_usbevent_handler+0x84>
            m_bus_suspend = false;
    7150:	2300      	movs	r3, #0
    7152:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    7154:	4a09      	ldr	r2, [pc, #36]	; (717c <ev_usbevent_handler+0x88>)
    7156:	2101      	movs	r1, #1
    7158:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    715c:	6591      	str	r1, [r2, #88]	; 0x58
    715e:	3258      	adds	r2, #88	; 0x58
            m_event_handler(&evt);
    7160:	a801      	add	r0, sp, #4
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7162:	6812      	ldr	r2, [r2, #0]
            const nrfx_usbd_evt_t evt = {
    7164:	f8ad 3005 	strh.w	r3, [sp, #5]
    7168:	f88d 3007 	strb.w	r3, [sp, #7]
    716c:	2304      	movs	r3, #4
    716e:	f88d 3004 	strb.w	r3, [sp, #4]
            m_event_handler(&evt);
    7172:	4b04      	ldr	r3, [pc, #16]	; (7184 <ev_usbevent_handler+0x90>)
    7174:	681b      	ldr	r3, [r3, #0]
    7176:	4798      	blx	r3
}
    7178:	b002      	add	sp, #8
    717a:	bd10      	pop	{r4, pc}
    717c:	40027000 	.word	0x40027000
    7180:	20002e07 	.word	0x20002e07
    7184:	20002ae8 	.word	0x20002ae8

00007188 <ev_sof_handler>:
{
    7188:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    718a:	2300      	movs	r3, #0
    718c:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    7190:	4b0b      	ldr	r3, [pc, #44]	; (71c0 <ev_sof_handler+0x38>)
    7192:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    7196:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    719a:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    719e:	4a09      	ldr	r2, [pc, #36]	; (71c4 <ev_sof_handler+0x3c>)
    if (size_isoout == 0)
    71a0:	2b00      	cmp	r3, #0
    71a2:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    71a4:	bf0c      	ite	eq
    71a6:	f44f 7180 	moveq.w	r1, #256	; 0x100
    71aa:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    71ae:	430b      	orrs	r3, r1
    71b0:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    71b2:	4b05      	ldr	r3, [pc, #20]	; (71c8 <ev_sof_handler+0x40>)
    71b4:	a801      	add	r0, sp, #4
    71b6:	681b      	ldr	r3, [r3, #0]
    71b8:	4798      	blx	r3
}
    71ba:	b003      	add	sp, #12
    71bc:	f85d fb04 	ldr.w	pc, [sp], #4
    71c0:	40027000 	.word	0x40027000
    71c4:	200029c4 	.word	0x200029c4
    71c8:	20002ae8 	.word	0x20002ae8

000071cc <atomic_and.constprop.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    71cc:	4b07      	ldr	r3, [pc, #28]	; (71ec <atomic_and.constprop.0+0x20>)
}
    71ce:	f3bf 8f5b 	dmb	ish
    71d2:	4602      	mov	r2, r0
    71d4:	e853 0f00 	ldrex	r0, [r3]
    71d8:	ea00 0102 	and.w	r1, r0, r2
    71dc:	e843 1c00 	strex	ip, r1, [r3]
    71e0:	f1bc 0f00 	cmp.w	ip, #0
    71e4:	d1f6      	bne.n	71d4 <atomic_and.constprop.0+0x8>
    71e6:	f3bf 8f5b 	dmb	ish
    71ea:	4770      	bx	lr
    71ec:	20002954 	.word	0x20002954

000071f0 <nrf_usbd_ep0in_dma_handler>:
{
    71f0:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    71f2:	f7ff fedd 	bl	6fb0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    71f6:	4b08      	ldr	r3, [pc, #32]	; (7218 <nrf_usbd_ep0in_dma_handler+0x28>)
    71f8:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    71fc:	2a03      	cmp	r2, #3
    71fe:	d105      	bne.n	720c <nrf_usbd_ep0in_dma_handler+0x1c>
}
    7200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7204:	f06f 0001 	mvn.w	r0, #1
    7208:	f7ff bfe0 	b.w	71cc <atomic_and.constprop.0>
    else if (p_state->handler.feeder == NULL)
    720c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7210:	2b00      	cmp	r3, #0
    7212:	d0f5      	beq.n	7200 <nrf_usbd_ep0in_dma_handler+0x10>
}
    7214:	bd08      	pop	{r3, pc}
    7216:	bf00      	nop
    7218:	200029c8 	.word	0x200029c8

0000721c <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    721c:	2201      	movs	r2, #1
{
    721e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    7220:	fa02 f501 	lsl.w	r5, r2, r1
    7224:	491c      	ldr	r1, [pc, #112]	; (7298 <usbd_ep_data_handler+0x7c>)
    7226:	4e1d      	ldr	r6, [pc, #116]	; (729c <usbd_ep_data_handler+0x80>)
    7228:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    722a:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    722e:	ea43 0305 	orr.w	r3, r3, r5
{
    7232:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    7234:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7236:	d024      	beq.n	7282 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7238:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    723c:	4b18      	ldr	r3, [pc, #96]	; (72a0 <usbd_ep_data_handler+0x84>)
    723e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7242:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7246:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    724a:	681a      	ldr	r2, [r3, #0]
    if (ret)
    724c:	b132      	cbz	r2, 725c <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    724e:	2200      	movs	r2, #0
    7250:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    7252:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7254:	681b      	ldr	r3, [r3, #0]
    7256:	d011      	beq.n	727c <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    7258:	f005 fc0e 	bl	ca78 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    725c:	6831      	ldr	r1, [r6, #0]
    725e:	4029      	ands	r1, r5
    7260:	d10a      	bne.n	7278 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7262:	2306      	movs	r3, #6
    7264:	f88d 3004 	strb.w	r3, [sp, #4]
    7268:	f88d 4006 	strb.w	r4, [sp, #6]
    726c:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    7270:	4b0c      	ldr	r3, [pc, #48]	; (72a4 <usbd_ep_data_handler+0x88>)
    7272:	a801      	add	r0, sp, #4
    7274:	681b      	ldr	r3, [r3, #0]
    7276:	4798      	blx	r3
}
    7278:	b002      	add	sp, #8
    727a:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    727c:	f7ff ffb8 	bl	71f0 <nrf_usbd_ep0in_dma_handler>
    7280:	e7ec      	b.n	725c <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7282:	6833      	ldr	r3, [r6, #0]
    7284:	421d      	tst	r5, r3
    7286:	d1f7      	bne.n	7278 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    7288:	2306      	movs	r3, #6
    728a:	f88d 3004 	strb.w	r3, [sp, #4]
    728e:	f88d 0006 	strb.w	r0, [sp, #6]
    7292:	f88d 2007 	strb.w	r2, [sp, #7]
    7296:	e7eb      	b.n	7270 <usbd_ep_data_handler+0x54>
    7298:	200029c4 	.word	0x200029c4
    729c:	20002954 	.word	0x20002954
    72a0:	0000dd10 	.word	0x0000dd10
    72a4:	20002ae8 	.word	0x20002ae8

000072a8 <ev_setup_data_handler>:
{
    72a8:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    72aa:	4b05      	ldr	r3, [pc, #20]	; (72c0 <ev_setup_data_handler+0x18>)
    72ac:	781a      	ldrb	r2, [r3, #0]
    72ae:	4610      	mov	r0, r2
    72b0:	f005 fbd6 	bl	ca60 <ep2bit>
}
    72b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    72b8:	4601      	mov	r1, r0
    72ba:	4610      	mov	r0, r2
    72bc:	f7ff bfae 	b.w	721c <usbd_ep_data_handler>
    72c0:	20002e0a 	.word	0x20002e0a

000072c4 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    72c4:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    72c6:	f7ff fe73 	bl	6fb0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    72ca:	4b0f      	ldr	r3, [pc, #60]	; (7308 <ev_dma_epin8_handler+0x44>)
    72cc:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    72d0:	2a03      	cmp	r2, #3
    72d2:	d106      	bne.n	72e2 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    72d4:	f46f 7080 	mvn.w	r0, #256	; 0x100
    72d8:	f7ff ff78 	bl	71cc <atomic_and.constprop.0>
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    72dc:	b003      	add	sp, #12
    72de:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (p_state->handler.feeder == NULL)
    72e2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    72e6:	2b00      	cmp	r3, #0
    72e8:	d1f8      	bne.n	72dc <ev_dma_epin8_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    72ea:	f46f 7080 	mvn.w	r0, #256	; 0x100
    72ee:	f7ff ff6d 	bl	71cc <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    72f2:	2306      	movs	r3, #6
    72f4:	f88d 3004 	strb.w	r3, [sp, #4]
    72f8:	2388      	movs	r3, #136	; 0x88
    72fa:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    72fe:	4b03      	ldr	r3, [pc, #12]	; (730c <ev_dma_epin8_handler+0x48>)
    7300:	a801      	add	r0, sp, #4
    7302:	681b      	ldr	r3, [r3, #0]
    7304:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7306:	e7e9      	b.n	72dc <ev_dma_epin8_handler+0x18>
    7308:	200029c8 	.word	0x200029c8
    730c:	20002ae8 	.word	0x20002ae8

00007310 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7310:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    7312:	f7ff fe4d 	bl	6fb0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7316:	4b0c      	ldr	r3, [pc, #48]	; (7348 <ev_dma_epout8_handler+0x38>)
    7318:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    731c:	2a03      	cmp	r2, #3
    731e:	d010      	beq.n	7342 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    7320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    7324:	b96b      	cbnz	r3, 7342 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7326:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    732a:	f7ff ff4f 	bl	71cc <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    732e:	2306      	movs	r3, #6
    7330:	f88d 3004 	strb.w	r3, [sp, #4]
    7334:	2308      	movs	r3, #8
    7336:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    733a:	4b04      	ldr	r3, [pc, #16]	; (734c <ev_dma_epout8_handler+0x3c>)
    733c:	a801      	add	r0, sp, #4
    733e:	681b      	ldr	r3, [r3, #0]
    7340:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7342:	b003      	add	sp, #12
    7344:	f85d fb04 	ldr.w	pc, [sp], #4
    7348:	200029c8 	.word	0x200029c8
    734c:	20002ae8 	.word	0x20002ae8

00007350 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    7350:	4a02      	ldr	r2, [pc, #8]	; (735c <nrfx_usbd_uninit+0xc>)
    7352:	2300      	movs	r3, #0
    7354:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    7356:	4a02      	ldr	r2, [pc, #8]	; (7360 <nrfx_usbd_uninit+0x10>)
    7358:	7013      	strb	r3, [r2, #0]
    return;
}
    735a:	4770      	bx	lr
    735c:	20002ae8 	.word	0x20002ae8
    7360:	20002e09 	.word	0x20002e09

00007364 <nrfx_usbd_enable>:
    p_reg->EVENTCAUSE = flags;
    7364:	4b43      	ldr	r3, [pc, #268]	; (7474 <nrfx_usbd_enable+0x110>)
    7366:	f44f 6200 	mov.w	r2, #2048	; 0x800


void nrfx_usbd_enable(void)
{
    736a:	b510      	push	{r4, lr}
    736c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    7370:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    7374:	f7ff fdf8 	bl	6f68 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    7378:	b108      	cbz	r0, 737e <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    737a:	f7ff fe43 	bl	7004 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    737e:	f7ff fde9 	bl	6f54 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    7382:	b1b0      	cbz	r0, 73b2 <nrfx_usbd_enable+0x4e>
	__asm__ volatile(
    7384:	f04f 0320 	mov.w	r3, #32
    7388:	f3ef 8411 	mrs	r4, BASEPRI
    738c:	f383 8812 	msr	BASEPRI_MAX, r3
    7390:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7394:	4b38      	ldr	r3, [pc, #224]	; (7478 <nrfx_usbd_enable+0x114>)
    7396:	4a39      	ldr	r2, [pc, #228]	; (747c <nrfx_usbd_enable+0x118>)
    7398:	6818      	ldr	r0, [r3, #0]
    739a:	21c0      	movs	r1, #192	; 0xc0
    739c:	2800      	cmp	r0, #0
    739e:	d163      	bne.n	7468 <nrfx_usbd_enable+0x104>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    73a0:	f249 3075 	movw	r0, #37749	; 0x9375
    73a4:	6018      	str	r0, [r3, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    73a6:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    73a8:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
    73aa:	f384 8811 	msr	BASEPRI, r4
    73ae:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    73b2:	4b30      	ldr	r3, [pc, #192]	; (7474 <nrfx_usbd_enable+0x110>)
    73b4:	2201      	movs	r2, #1
    73b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    73ba:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    73be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    73c2:	0512      	lsls	r2, r2, #20
    73c4:	d5fb      	bpl.n	73be <nrfx_usbd_enable+0x5a>
    p_reg->EVENTCAUSE = flags;
    73c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    73ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    73ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    73d2:	f7ff fdbf 	bl	6f54 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    73d6:	b1a8      	cbz	r0, 7404 <nrfx_usbd_enable+0xa0>
	__asm__ volatile(
    73d8:	f04f 0320 	mov.w	r3, #32
    73dc:	f3ef 8411 	mrs	r4, BASEPRI
    73e0:	f383 8812 	msr	BASEPRI_MAX, r3
    73e4:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    73e8:	4b23      	ldr	r3, [pc, #140]	; (7478 <nrfx_usbd_enable+0x114>)
    73ea:	4a24      	ldr	r2, [pc, #144]	; (747c <nrfx_usbd_enable+0x118>)
    73ec:	6818      	ldr	r0, [r3, #0]
    73ee:	2800      	cmp	r0, #0
    73f0:	d13c      	bne.n	746c <nrfx_usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    73f2:	f249 3175 	movw	r1, #37749	; 0x9375
    73f6:	6019      	str	r1, [r3, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    73f8:	6010      	str	r0, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    73fa:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
    73fc:	f384 8811 	msr	BASEPRI, r4
    7400:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    7404:	f7ff fdb0 	bl	6f68 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    7408:	b130      	cbz	r0, 7418 <nrfx_usbd_enable+0xb4>
        usbd_errata_187_211_end();
    740a:	f7ff fe19 	bl	7040 <usbd_errata_187_211_end>
    740e:	f7ff fdab 	bl	6f68 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    7412:	b108      	cbz	r0, 7418 <nrfx_usbd_enable+0xb4>
#endif
    {
        usbd_errata_187_211_begin();
    7414:	f7ff fdf6 	bl	7004 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    7418:	f7ff fd9c 	bl	6f54 <nrf52_errata_166>
    }

    if (nrfx_usbd_errata_166())
    741c:	b148      	cbz	r0, 7432 <nrfx_usbd_enable+0xce>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    741e:	4b18      	ldr	r3, [pc, #96]	; (7480 <nrfx_usbd_enable+0x11c>)
    7420:	f240 72e3 	movw	r2, #2019	; 0x7e3
    7424:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    7426:	2240      	movs	r2, #64	; 0x40
    7428:	605a      	str	r2, [r3, #4]
  __ASM volatile ("isb 0xF":::"memory");
    742a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    742e:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    7432:	4b10      	ldr	r3, [pc, #64]	; (7474 <nrfx_usbd_enable+0x110>)
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    7434:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    7436:	2280      	movs	r2, #128	; 0x80
    7438:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    743c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    7440:	4b10      	ldr	r3, [pc, #64]	; (7484 <nrfx_usbd_enable+0x120>)
    7442:	f240 12ff 	movw	r2, #511	; 0x1ff
    7446:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    7448:	4b0f      	ldr	r3, [pc, #60]	; (7488 <nrfx_usbd_enable+0x124>)
    744a:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    744c:	f7ff fdb0 	bl	6fb0 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    7450:	4b0e      	ldr	r3, [pc, #56]	; (748c <nrfx_usbd_enable+0x128>)
    7452:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    7454:	4b0e      	ldr	r3, [pc, #56]	; (7490 <nrfx_usbd_enable+0x12c>)
    7456:	2202      	movs	r2, #2
    7458:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    745a:	f7ff fd85 	bl	6f68 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    745e:	b140      	cbz	r0, 7472 <nrfx_usbd_enable+0x10e>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    7460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        usbd_errata_187_211_end();
    7464:	f7ff bdec 	b.w	7040 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    7468:	6011      	str	r1, [r2, #0]
    746a:	e79e      	b.n	73aa <nrfx_usbd_enable+0x46>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    746c:	2300      	movs	r3, #0
    746e:	6013      	str	r3, [r2, #0]
    7470:	e7c4      	b.n	73fc <nrfx_usbd_enable+0x98>
}
    7472:	bd10      	pop	{r4, pc}
    7474:	40027000 	.word	0x40027000
    7478:	4006ec00 	.word	0x4006ec00
    747c:	4006ec14 	.word	0x4006ec14
    7480:	40027800 	.word	0x40027800
    7484:	200029c4 	.word	0x200029c4
    7488:	20002954 	.word	0x20002954
    748c:	20002e0a 	.word	0x20002e0a
    7490:	20002e09 	.word	0x20002e09

00007494 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    7494:	4b0a      	ldr	r3, [pc, #40]	; (74c0 <nrfx_usbd_start+0x2c>)
    7496:	2200      	movs	r2, #0
{
    7498:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    749a:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    749c:	4b09      	ldr	r3, [pc, #36]	; (74c4 <nrfx_usbd_start+0x30>)
    749e:	4a0a      	ldr	r2, [pc, #40]	; (74c8 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    74a0:	4c0a      	ldr	r4, [pc, #40]	; (74cc <nrfx_usbd_start+0x38>)
    74a2:	2800      	cmp	r0, #0
    74a4:	bf0c      	ite	eq
    74a6:	4618      	moveq	r0, r3
    74a8:	4610      	movne	r0, r2
    74aa:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    74ae:	2027      	movs	r0, #39	; 0x27
    74b0:	f7fc f9a2 	bl	37f8 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    74b4:	2301      	movs	r3, #1
    74b6:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    74ba:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    74be:	bd10      	pop	{r4, pc}
    74c0:	20002e07 	.word	0x20002e07
    74c4:	01c01407 	.word	0x01c01407
    74c8:	01e01407 	.word	0x01e01407
    74cc:	40027000 	.word	0x40027000

000074d0 <nrfx_usbd_is_initialized>:
    }
}

bool nrfx_usbd_is_initialized(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
    74d0:	4b02      	ldr	r3, [pc, #8]	; (74dc <nrfx_usbd_is_initialized+0xc>)
    74d2:	7818      	ldrb	r0, [r3, #0]
}
    74d4:	3800      	subs	r0, #0
    74d6:	bf18      	it	ne
    74d8:	2001      	movne	r0, #1
    74da:	4770      	bx	lr
    74dc:	20002e09 	.word	0x20002e09

000074e0 <nrfx_usbd_is_enabled>:

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    74e0:	4b03      	ldr	r3, [pc, #12]	; (74f0 <nrfx_usbd_is_enabled+0x10>)
    74e2:	7818      	ldrb	r0, [r3, #0]
}
    74e4:	2801      	cmp	r0, #1
    74e6:	bf94      	ite	ls
    74e8:	2000      	movls	r0, #0
    74ea:	2001      	movhi	r0, #1
    74ec:	4770      	bx	lr
    74ee:	bf00      	nop
    74f0:	20002e09 	.word	0x20002e09

000074f4 <nrfx_usbd_init>:
{
    74f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    74f6:	4b1e      	ldr	r3, [pc, #120]	; (7570 <nrfx_usbd_init+0x7c>)
    74f8:	781c      	ldrb	r4, [r3, #0]
    74fa:	2c00      	cmp	r4, #0
    74fc:	d135      	bne.n	756a <nrfx_usbd_init+0x76>
    m_event_handler = event_handler;
    74fe:	4a1d      	ldr	r2, [pc, #116]	; (7574 <nrfx_usbd_init+0x80>)
    7500:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7502:	2201      	movs	r2, #1
    7504:	701a      	strb	r2, [r3, #0]
    7506:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7508:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    750c:	4626      	mov	r6, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    750e:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    7512:	f065 007f 	orn	r0, r5, #127	; 0x7f
    7516:	b2c0      	uxtb	r0, r0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7518:	bf14      	ite	ne
    751a:	4639      	movne	r1, r7
    751c:	2140      	moveq	r1, #64	; 0x40
    751e:	9001      	str	r0, [sp, #4]
    7520:	f005 fad8 	bl	cad4 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7524:	9801      	ldr	r0, [sp, #4]
    7526:	f7ff fd35 	bl	6f94 <ep_state_access>
        p_state->status = NRFX_USBD_EP_OK;
    752a:	3501      	adds	r5, #1
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    752c:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    752e:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    7530:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    7532:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7534:	d1eb      	bne.n	750e <nrfx_usbd_init+0x1a>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7536:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    7538:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    753a:	f240 16ff 	movw	r6, #511	; 0x1ff
    753e:	4620      	mov	r0, r4
    7540:	f005 fac8 	bl	cad4 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7544:	4620      	mov	r0, r4
    7546:	f7ff fd25 	bl	6f94 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    754a:	3401      	adds	r4, #1
    754c:	b2e4      	uxtb	r4, r4
    754e:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    7550:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    7552:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    7554:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    7556:	d102      	bne.n	755e <nrfx_usbd_init+0x6a>
    return NRFX_SUCCESS;
    7558:	4807      	ldr	r0, [pc, #28]	; (7578 <nrfx_usbd_init+0x84>)
}
    755a:	b003      	add	sp, #12
    755c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    755e:	f014 0f08 	tst.w	r4, #8
    7562:	bf14      	ite	ne
    7564:	4631      	movne	r1, r6
    7566:	2140      	moveq	r1, #64	; 0x40
    7568:	e7e9      	b.n	753e <nrfx_usbd_init+0x4a>
        return NRFX_ERROR_INVALID_STATE;
    756a:	4804      	ldr	r0, [pc, #16]	; (757c <nrfx_usbd_init+0x88>)
    756c:	e7f5      	b.n	755a <nrfx_usbd_init+0x66>
    756e:	bf00      	nop
    7570:	20002e09 	.word	0x20002e09
    7574:	20002ae8 	.word	0x20002ae8
    7578:	0bad0000 	.word	0x0bad0000
    757c:	0bad0005 	.word	0x0bad0005

00007580 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    7580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7584:	4605      	mov	r5, r0
	__asm__ volatile(
    7586:	f04f 0320 	mov.w	r3, #32
    758a:	f3ef 8711 	mrs	r7, BASEPRI
    758e:	f383 8812 	msr	BASEPRI_MAX, r3
    7592:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    7596:	f010 040f 	ands.w	r4, r0, #15
    759a:	d103      	bne.n	75a4 <nrfx_usbd_ep_transfer+0x24>
    759c:	4b28      	ldr	r3, [pc, #160]	; (7640 <nrfx_usbd_ep_transfer+0xc0>)
    759e:	781b      	ldrb	r3, [r3, #0]
    75a0:	4283      	cmp	r3, r0
    75a2:	d149      	bne.n	7638 <nrfx_usbd_ep_transfer+0xb8>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    75a4:	4b27      	ldr	r3, [pc, #156]	; (7644 <nrfx_usbd_ep_transfer+0xc4>)
    75a6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 7674 <nrfx_usbd_ep_transfer+0xf4>
    75aa:	681a      	ldr	r2, [r3, #0]
    75ac:	f8d9 6000 	ldr.w	r6, [r9]
    75b0:	43d2      	mvns	r2, r2
    75b2:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    75b4:	4628      	mov	r0, r5
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    75b6:	4332      	orrs	r2, r6
    const uint8_t ep_bitpos = ep2bit(ep);
    75b8:	f005 fa52 	bl	ca60 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    75bc:	f04f 0801 	mov.w	r8, #1
    75c0:	fa08 f800 	lsl.w	r8, r8, r0
    75c4:	ea12 0f08 	tst.w	r2, r8
    75c8:	d138      	bne.n	763c <nrfx_usbd_ep_transfer+0xbc>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    75ca:	4628      	mov	r0, r5
    75cc:	f7ff fce2 	bl	6f94 <ep_state_access>
    75d0:	220c      	movs	r2, #12
    75d2:	4354      	muls	r4, r2
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    75d4:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    75d6:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    75d8:	d52a      	bpl.n	7630 <nrfx_usbd_ep_transfer+0xb0>
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    75da:	4a1b      	ldr	r2, [pc, #108]	; (7648 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    75dc:	6808      	ldr	r0, [r1, #0]
    75de:	4414      	add	r4, r2
    75e0:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    75e4:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    75e6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    75ea:	f002 0201 	and.w	r2, r2, #1
    75ee:	d11a      	bne.n	7626 <nrfx_usbd_ep_transfer+0xa6>
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    75f0:	b9ba      	cbnz	r2, 7622 <nrfx_usbd_ep_transfer+0xa2>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    75f2:	4a16      	ldr	r2, [pc, #88]	; (764c <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    75f4:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    75f6:	c907      	ldmia	r1, {r0, r1, r2}
    75f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    75fc:	2200      	movs	r2, #0
    75fe:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    7600:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
    7602:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7604:	4b12      	ldr	r3, [pc, #72]	; (7650 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    7606:	4813      	ldr	r0, [pc, #76]	; (7654 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    7608:	ea46 0608 	orr.w	r6, r6, r8
    760c:	2280      	movs	r2, #128	; 0x80
    760e:	f8c9 6000 	str.w	r6, [r9]
    7612:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    7616:	f387 8811 	msr	BASEPRI, r7
    761a:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    761e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    7622:	4a0d      	ldr	r2, [pc, #52]	; (7658 <nrfx_usbd_ep_transfer+0xd8>)
    7624:	e7e6      	b.n	75f4 <nrfx_usbd_ep_transfer+0x74>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7626:	b90a      	cbnz	r2, 762c <nrfx_usbd_ep_transfer+0xac>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    7628:	4a0c      	ldr	r2, [pc, #48]	; (765c <nrfx_usbd_ep_transfer+0xdc>)
    762a:	e7e3      	b.n	75f4 <nrfx_usbd_ep_transfer+0x74>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    762c:	4a0c      	ldr	r2, [pc, #48]	; (7660 <nrfx_usbd_ep_transfer+0xe0>)
    762e:	e7e1      	b.n	75f4 <nrfx_usbd_ep_transfer+0x74>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    7630:	4a0c      	ldr	r2, [pc, #48]	; (7664 <nrfx_usbd_ep_transfer+0xe4>)
    7632:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    7634:	4a0c      	ldr	r2, [pc, #48]	; (7668 <nrfx_usbd_ep_transfer+0xe8>)
    7636:	e7dd      	b.n	75f4 <nrfx_usbd_ep_transfer+0x74>
        ret = NRFX_ERROR_INVALID_ADDR;
    7638:	480c      	ldr	r0, [pc, #48]	; (766c <nrfx_usbd_ep_transfer+0xec>)
    763a:	e7ec      	b.n	7616 <nrfx_usbd_ep_transfer+0x96>
        ret = NRFX_ERROR_BUSY;
    763c:	480c      	ldr	r0, [pc, #48]	; (7670 <nrfx_usbd_ep_transfer+0xf0>)
    763e:	e7ea      	b.n	7616 <nrfx_usbd_ep_transfer+0x96>
    7640:	20002e0a 	.word	0x20002e0a
    7644:	200029c4 	.word	0x200029c4
    7648:	20002958 	.word	0x20002958
    764c:	0000ca15 	.word	0x0000ca15
    7650:	e000e100 	.word	0xe000e100
    7654:	0bad0000 	.word	0x0bad0000
    7658:	0000ca37 	.word	0x0000ca37
    765c:	0000707d 	.word	0x0000707d
    7660:	000070b5 	.word	0x000070b5
    7664:	200028e8 	.word	0x200028e8
    7668:	0000c9e7 	.word	0x0000c9e7
    766c:	0bad000a 	.word	0x0bad000a
    7670:	0bad000b 	.word	0x0bad000b
    7674:	20002954 	.word	0x20002954

00007678 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    7678:	f010 0f08 	tst.w	r0, #8
    767c:	4b07      	ldr	r3, [pc, #28]	; (769c <nrfx_usbd_epout_size_get+0x24>)
    767e:	d006      	beq.n	768e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    7680:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    7684:	f410 3f80 	tst.w	r0, #65536	; 0x10000
            size_isoout = 0;
    7688:	bf18      	it	ne
    768a:	2000      	movne	r0, #0
    768c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    768e:	f000 000f 	and.w	r0, r0, #15
    7692:	f500 7094 	add.w	r0, r0, #296	; 0x128
    7696:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    769a:	4770      	bx	lr
    769c:	40027000 	.word	0x40027000

000076a0 <usbd_dmareq_process>:
{
    76a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    76a4:	4b56      	ldr	r3, [pc, #344]	; (7800 <usbd_dmareq_process+0x160>)
{
    76a6:	b087      	sub	sp, #28
    if (!m_dma_pending)
    76a8:	781a      	ldrb	r2, [r3, #0]
    76aa:	9301      	str	r3, [sp, #4]
    76ac:	2a00      	cmp	r2, #0
    76ae:	d16c      	bne.n	778a <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    76b0:	f8df 9168 	ldr.w	r9, [pc, #360]	; 781c <usbd_dmareq_process+0x17c>
    76b4:	f8df b168 	ldr.w	fp, [pc, #360]	; 7820 <usbd_dmareq_process+0x180>
    76b8:	46ca      	mov	sl, r9
    76ba:	f8db 1000 	ldr.w	r1, [fp]
    76be:	f8d9 6000 	ldr.w	r6, [r9]
    76c2:	4031      	ands	r1, r6
    76c4:	d061      	beq.n	778a <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    76c6:	f011 2601 	ands.w	r6, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    76ca:	bf14      	ite	ne
    76cc:	fa96 f1a6 	rbitne	r1, r6
    76d0:	fa91 f1a1 	rbiteq	r1, r1
    76d4:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    76d8:	290f      	cmp	r1, #15
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    76da:	bf86      	itte	hi
    76dc:	f1a1 0410 	subhi.w	r4, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    76e0:	b2e4      	uxtbhi	r4, r4
    76e2:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    76e6:	4620      	mov	r0, r4
    76e8:	f7ff fc54 	bl	6f94 <ep_state_access>
    76ec:	2601      	movs	r6, #1
            if (NRF_USBD_EPIN_CHECK(ep))
    76ee:	fa4f f884 	sxtb.w	r8, r4
    76f2:	408e      	lsls	r6, r1
    76f4:	43f3      	mvns	r3, r6
    76f6:	f1b8 0f00 	cmp.w	r8, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    76fa:	4605      	mov	r5, r0
            if (NRF_USBD_EPIN_CHECK(ep))
    76fc:	9300      	str	r3, [sp, #0]
    76fe:	da47      	bge.n	7790 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
    7700:	6803      	ldr	r3, [r0, #0]
    7702:	8982      	ldrh	r2, [r0, #12]
    7704:	6841      	ldr	r1, [r0, #4]
    7706:	a804      	add	r0, sp, #16
    7708:	4798      	blx	r3
                if (!continue_transfer)
    770a:	b900      	cbnz	r0, 770e <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    770c:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    770e:	f7ff fc21 	bl	6f54 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    7712:	b110      	cbz	r0, 771a <usbd_dmareq_process+0x7a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    7714:	4b3b      	ldr	r3, [pc, #236]	; (7804 <usbd_dmareq_process+0x164>)
    7716:	2282      	movs	r2, #130	; 0x82
    7718:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    771a:	9a01      	ldr	r2, [sp, #4]
            m_ep_ready &= ~(1U << pos);
    771c:	9e00      	ldr	r6, [sp, #0]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    771e:	9804      	ldr	r0, [sp, #16]
    m_dma_pending = true;
    7720:	2301      	movs	r3, #1
    7722:	7013      	strb	r3, [r2, #0]
            m_ep_ready &= ~(1U << pos);
    7724:	f8da 3000 	ldr.w	r3, [sl]
            p_state->transfer_cnt += transfer.size;
    7728:	9a05      	ldr	r2, [sp, #20]
            m_ep_ready &= ~(1U << pos);
    772a:	401e      	ands	r6, r3
            p_state->transfer_cnt += transfer.size;
    772c:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    772e:	f8ca 6000 	str.w	r6, [sl]
            p_state->transfer_cnt += transfer.size;
    7732:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    7734:	f1b8 0f00 	cmp.w	r8, #0
    7738:	60ab      	str	r3, [r5, #8]
    773a:	f004 0108 	and.w	r1, r4, #8
    773e:	4b32      	ldr	r3, [pc, #200]	; (7808 <usbd_dmareq_process+0x168>)
    7740:	f004 040f 	and.w	r4, r4, #15
    7744:	da4d      	bge.n	77e2 <usbd_dmareq_process+0x142>
        if (NRF_USBD_EPISO_CHECK(ep))
    7746:	2900      	cmp	r1, #0
    7748:	d043      	beq.n	77d2 <usbd_dmareq_process+0x132>
            p_reg->ISOIN.PTR    = ptr;
    774a:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    774e:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    7752:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7754:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    775c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7760:	2201      	movs	r2, #1
    7762:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7764:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7766:	4a29      	ldr	r2, [pc, #164]	; (780c <usbd_dmareq_process+0x16c>)
    7768:	4b29      	ldr	r3, [pc, #164]	; (7810 <usbd_dmareq_process+0x170>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    776a:	492a      	ldr	r1, [pc, #168]	; (7814 <usbd_dmareq_process+0x174>)
    776c:	ea13 0828 	ands.w	r8, r3, r8, asr #32
    7770:	bf38      	it	cc
    7772:	4690      	movcc	r8, r2
    7774:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7778:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    777c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7780:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    7782:	b912      	cbnz	r2, 778a <usbd_dmareq_process+0xea>
    7784:	680a      	ldr	r2, [r1, #0]
    7786:	2a00      	cmp	r2, #0
    7788:	d0fa      	beq.n	7780 <usbd_dmareq_process+0xe0>
}
    778a:	b007      	add	sp, #28
    778c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    7790:	4620      	mov	r0, r4
    7792:	f7ff ff71 	bl	7678 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    7796:	89aa      	ldrh	r2, [r5, #12]
    7798:	6869      	ldr	r1, [r5, #4]
    779a:	682e      	ldr	r6, [r5, #0]
    779c:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    779e:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    77a0:	a804      	add	r0, sp, #16
    77a2:	47b0      	blx	r6
                if (transfer.p_data.rx == NULL)
    77a4:	9a04      	ldr	r2, [sp, #16]
    77a6:	2a00      	cmp	r2, #0
    77a8:	d0af      	beq.n	770a <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    77aa:	9a05      	ldr	r2, [sp, #20]
    77ac:	4297      	cmp	r7, r2
    77ae:	d9ac      	bls.n	770a <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    77b0:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    77b2:	9800      	ldr	r0, [sp, #0]
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    77b4:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    77b6:	f7ff fd09 	bl	71cc <atomic_and.constprop.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    77ba:	2306      	movs	r3, #6
    77bc:	f88d 300c 	strb.w	r3, [sp, #12]
                    m_event_handler(&evt);
    77c0:	4b15      	ldr	r3, [pc, #84]	; (7818 <usbd_dmareq_process+0x178>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    77c2:	f88d 400e 	strb.w	r4, [sp, #14]
                    m_event_handler(&evt);
    77c6:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    77c8:	f88d 700f 	strb.w	r7, [sp, #15]
                    m_event_handler(&evt);
    77cc:	a803      	add	r0, sp, #12
    77ce:	4798      	blx	r3
                    continue;
    77d0:	e773      	b.n	76ba <usbd_dmareq_process+0x1a>
            p_reg->EPIN[epnr].PTR    = ptr;
    77d2:	2114      	movs	r1, #20
    77d4:	fb01 3304 	mla	r3, r1, r4, r3
    77d8:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    77dc:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    77e0:	e7b7      	b.n	7752 <usbd_dmareq_process+0xb2>
        if (NRF_USBD_EPISO_CHECK(ep))
    77e2:	b129      	cbz	r1, 77f0 <usbd_dmareq_process+0x150>
            p_reg->ISOOUT.PTR    = ptr;
    77e4:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    77e8:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    77ec:	2328      	movs	r3, #40	; 0x28
    77ee:	e7b1      	b.n	7754 <usbd_dmareq_process+0xb4>
            p_reg->EPOUT[epnr].PTR    = ptr;
    77f0:	2114      	movs	r1, #20
    77f2:	fb01 3304 	mla	r3, r1, r4, r3
    77f6:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    77fa:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    77fe:	e7f5      	b.n	77ec <usbd_dmareq_process+0x14c>
    7800:	20002e08 	.word	0x20002e08
    7804:	40027c1c 	.word	0x40027c1c
    7808:	40027000 	.word	0x40027000
    780c:	0000dd22 	.word	0x0000dd22
    7810:	0000dd10 	.word	0x0000dd10
    7814:	40027100 	.word	0x40027100
    7818:	20002ae8 	.word	0x20002ae8
    781c:	200029c4 	.word	0x200029c4
    7820:	20002954 	.word	0x20002954

00007824 <ev_epdata_handler>:
{
    7824:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    7826:	4b0f      	ldr	r3, [pc, #60]	; (7864 <ev_epdata_handler+0x40>)
    7828:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    782c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    7830:	2501      	movs	r5, #1
    while (dataepstatus)
    7832:	b91c      	cbnz	r4, 783c <ev_epdata_handler+0x18>
}
    7834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    7838:	f7ff bf32 	b.w	76a0 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    783c:	fa94 f3a4 	rbit	r3, r4
    7840:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7844:	2b0f      	cmp	r3, #15
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    7846:	bfc8      	it	gt
    7848:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    784c:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    784e:	bfd4      	ite	le
    7850:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    7854:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    7856:	fa05 f303 	lsl.w	r3, r5, r3
    785a:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    785e:	f7ff fcdd 	bl	721c <usbd_ep_data_handler>
    7862:	e7e6      	b.n	7832 <ev_epdata_handler+0xe>
    7864:	40027000 	.word	0x40027000

00007868 <nrf_usbd_epout_dma_handler>:
{
    7868:	b537      	push	{r0, r1, r2, r4, r5, lr}
    786a:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
    786c:	f7ff fba0 	bl	6fb0 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7870:	4620      	mov	r0, r4
    7872:	f7ff fb8f 	bl	6f94 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7876:	7b83      	ldrb	r3, [r0, #14]
    7878:	2b03      	cmp	r3, #3
    787a:	d10c      	bne.n	7896 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    787c:	4620      	mov	r0, r4
    787e:	f005 f8ef 	bl	ca60 <ep2bit>
    7882:	2301      	movs	r3, #1
    7884:	fa03 f000 	lsl.w	r0, r3, r0
    7888:	43c0      	mvns	r0, r0
    788a:	f7ff fc9f 	bl	71cc <atomic_and.constprop.0>
    usbd_dmareq_process();
    788e:	f7ff ff07 	bl	76a0 <usbd_dmareq_process>
}
    7892:	b003      	add	sp, #12
    7894:	bd30      	pop	{r4, r5, pc}
    else if (p_state->handler.consumer == NULL)
    7896:	6805      	ldr	r5, [r0, #0]
    7898:	2d00      	cmp	r5, #0
    789a:	d1f8      	bne.n	788e <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    789c:	4620      	mov	r0, r4
    789e:	f005 f8df 	bl	ca60 <ep2bit>
    78a2:	2301      	movs	r3, #1
    78a4:	fa03 f000 	lsl.w	r0, r3, r0
    78a8:	43c0      	mvns	r0, r0
    78aa:	f7ff fc8f 	bl	71cc <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    78ae:	2306      	movs	r3, #6
    78b0:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    78b4:	4b04      	ldr	r3, [pc, #16]	; (78c8 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    78b6:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    78ba:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    78bc:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    78c0:	a801      	add	r0, sp, #4
    78c2:	4798      	blx	r3
    78c4:	e7e3      	b.n	788e <nrf_usbd_epout_dma_handler+0x26>
    78c6:	bf00      	nop
    78c8:	20002ae8 	.word	0x20002ae8

000078cc <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    78cc:	4b02      	ldr	r3, [pc, #8]	; (78d8 <nrfx_usbd_ep_stall+0xc>)
    78ce:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    78d2:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    78d6:	4770      	bx	lr
    78d8:	40027000 	.word	0x40027000

000078dc <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    78dc:	0702      	lsls	r2, r0, #28
    78de:	d413      	bmi.n	7908 <nrfx_usbd_ep_stall_check+0x2c>
    if (NRF_USBD_EPIN_CHECK(ep))
    78e0:	f000 030f 	and.w	r3, r0, #15
    78e4:	f010 0f80 	tst.w	r0, #128	; 0x80
    78e8:	4a08      	ldr	r2, [pc, #32]	; (790c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    78ea:	bf0b      	itete	eq
    78ec:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    78f0:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    78f4:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    78f8:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    78fc:	bf08      	it	eq
    78fe:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    7900:	1e43      	subs	r3, r0, #1
    7902:	4258      	negs	r0, r3
    7904:	4158      	adcs	r0, r3
    7906:	4770      	bx	lr
        return false;
    7908:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    790a:	4770      	bx	lr
    790c:	40027000 	.word	0x40027000

00007910 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    7910:	4b04      	ldr	r3, [pc, #16]	; (7924 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    7912:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    7916:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    791a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    791e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    7922:	4770      	bx	lr
    7924:	40027000 	.word	0x40027000

00007928 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    7928:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    792a:	2208      	movs	r2, #8
    792c:	2100      	movs	r1, #0
{
    792e:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    7930:	f004 fb78 	bl	c024 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7934:	4b0e      	ldr	r3, [pc, #56]	; (7970 <nrfx_usbd_setup_get+0x48>)
    7936:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    793a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    793c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    7940:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    7942:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    7946:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    794a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    794e:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    7950:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    7954:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    7958:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    795c:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    795e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    7962:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    7966:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    796a:	80e3      	strh	r3, [r4, #6]
}
    796c:	bd10      	pop	{r4, pc}
    796e:	bf00      	nop
    7970:	40027000 	.word	0x40027000

00007974 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7974:	4b02      	ldr	r3, [pc, #8]	; (7980 <nrfx_usbd_setup_data_clear+0xc>)
    7976:	2201      	movs	r2, #1
    7978:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    797a:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    797c:	4770      	bx	lr
    797e:	bf00      	nop
    7980:	4002704c 	.word	0x4002704c

00007984 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    7984:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    7986:	f7ff fb13 	bl	6fb0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    798a:	4b0e      	ldr	r3, [pc, #56]	; (79c4 <ev_dma_epout0_handler+0x40>)
    798c:	7b9a      	ldrb	r2, [r3, #14]
    798e:	2a03      	cmp	r2, #3
    7990:	d105      	bne.n	799e <ev_dma_epout0_handler+0x1a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7992:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    7996:	f7ff fc19 	bl	71cc <atomic_and.constprop.0>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    799a:	b002      	add	sp, #8
    799c:	bd10      	pop	{r4, pc}
    else if (p_state->handler.consumer == NULL)
    799e:	681c      	ldr	r4, [r3, #0]
    79a0:	b96c      	cbnz	r4, 79be <ev_dma_epout0_handler+0x3a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    79a2:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    79a6:	f7ff fc11 	bl	71cc <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    79aa:	2306      	movs	r3, #6
    79ac:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    79b0:	4b05      	ldr	r3, [pc, #20]	; (79c8 <ev_dma_epout0_handler+0x44>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    79b2:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    79b6:	681b      	ldr	r3, [r3, #0]
    79b8:	a801      	add	r0, sp, #4
    79ba:	4798      	blx	r3
    79bc:	e7ed      	b.n	799a <ev_dma_epout0_handler+0x16>
        nrfx_usbd_setup_data_clear();
    79be:	f7ff ffd9 	bl	7974 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    79c2:	e7ea      	b.n	799a <ev_dma_epout0_handler+0x16>
    79c4:	200029c8 	.word	0x200029c8
    79c8:	20002ae8 	.word	0x20002ae8

000079cc <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    79cc:	4b02      	ldr	r3, [pc, #8]	; (79d8 <nrfx_usbd_setup_clear+0xc>)
    79ce:	2201      	movs	r2, #1
    79d0:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    79d2:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    79d4:	4770      	bx	lr
    79d6:	bf00      	nop
    79d8:	40027050 	.word	0x40027050

000079dc <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    79dc:	4b02      	ldr	r3, [pc, #8]	; (79e8 <nrfx_usbd_setup_stall+0xc>)
    79de:	2201      	movs	r2, #1
    79e0:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    79e2:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    79e4:	4770      	bx	lr
    79e6:	bf00      	nop
    79e8:	40027054 	.word	0x40027054

000079ec <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    79ec:	4b01      	ldr	r3, [pc, #4]	; (79f4 <nrfx_usbd_last_setup_dir_get+0x8>)
    79ee:	7818      	ldrb	r0, [r3, #0]
    79f0:	4770      	bx	lr
    79f2:	bf00      	nop
    79f4:	20002e0a 	.word	0x20002e0a

000079f8 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    79f8:	b538      	push	{r3, r4, r5, lr}
    79fa:	4602      	mov	r2, r0
	__asm__ volatile(
    79fc:	f04f 0320 	mov.w	r3, #32
    7a00:	f3ef 8511 	mrs	r5, BASEPRI
    7a04:	f383 8812 	msr	BASEPRI_MAX, r3
    7a08:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    7a0c:	f005 f828 	bl	ca60 <ep2bit>
    7a10:	4c0d      	ldr	r4, [pc, #52]	; (7a48 <nrfx_usbd_transfer_out_drop+0x50>)
    7a12:	2101      	movs	r1, #1
    7a14:	6823      	ldr	r3, [r4, #0]
    7a16:	fa01 f000 	lsl.w	r0, r1, r0
    7a1a:	ea23 0300 	bic.w	r3, r3, r0
    if (!NRF_USBD_EPISO_CHECK(ep))
    7a1e:	f012 0108 	ands.w	r1, r2, #8
    m_ep_ready &= ~(1U << ep2bit(ep));
    7a22:	6023      	str	r3, [r4, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    7a24:	d10a      	bne.n	7a3c <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    7a26:	f002 030f 	and.w	r3, r2, #15
    7a2a:	009b      	lsls	r3, r3, #2
    7a2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7a30:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    7a34:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    7a38:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    7a3c:	f385 8811 	msr	BASEPRI, r5
    7a40:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    7a44:	bd38      	pop	{r3, r4, r5, pc}
    7a46:	bf00      	nop
    7a48:	200029c4 	.word	0x200029c4

00007a4c <usbd_ep_abort>:
{
    7a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7a4e:	4601      	mov	r1, r0
	__asm__ volatile(
    7a50:	f04f 0320 	mov.w	r3, #32
    7a54:	f3ef 8511 	mrs	r5, BASEPRI
    7a58:	f383 8812 	msr	BASEPRI_MAX, r3
    7a5c:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7a60:	f7ff fa98 	bl	6f94 <ep_state_access>
    7a64:	4606      	mov	r6, r0
    if (NRF_USBD_EPOUT_CHECK(ep))
    7a66:	4608      	mov	r0, r1
    7a68:	f004 fffa 	bl	ca60 <ep2bit>
    7a6c:	2301      	movs	r3, #1
    7a6e:	f011 0f80 	tst.w	r1, #128	; 0x80
    7a72:	4f2b      	ldr	r7, [pc, #172]	; (7b20 <usbd_ep_abort+0xd4>)
    7a74:	fa03 f300 	lsl.w	r3, r3, r0
    7a78:	d118      	bne.n	7aac <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7a7a:	683a      	ldr	r2, [r7, #0]
    7a7c:	ea33 0002 	bics.w	r0, r3, r2
    7a80:	d00a      	beq.n	7a98 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    7a82:	4608      	mov	r0, r1
    7a84:	f7ff ffb8 	bl	79f8 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    7a88:	2303      	movs	r3, #3
    7a8a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    7a8c:	f385 8811 	msr	BASEPRI, r5
    7a90:	f3bf 8f6f 	isb	sy
}
    7a94:	b003      	add	sp, #12
    7a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7a98:	ea22 0203 	bic.w	r2, r2, r3
            p_state->handler.consumer = NULL;
    7a9c:	6030      	str	r0, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7a9e:	603a      	str	r2, [r7, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    7aa0:	4a20      	ldr	r2, [pc, #128]	; (7b24 <usbd_ep_abort+0xd8>)
    7aa2:	6810      	ldr	r0, [r2, #0]
    7aa4:	ea20 0003 	bic.w	r0, r0, r3
    7aa8:	6010      	str	r0, [r2, #0]
    7aaa:	e7ed      	b.n	7a88 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    7aac:	070a      	lsls	r2, r1, #28
    7aae:	d411      	bmi.n	7ad4 <usbd_ep_abort+0x88>
            if(ep != NRFX_USBD_EPIN0)
    7ab0:	2980      	cmp	r1, #128	; 0x80
    7ab2:	4c1d      	ldr	r4, [pc, #116]	; (7b28 <usbd_ep_abort+0xdc>)
    7ab4:	4a1d      	ldr	r2, [pc, #116]	; (7b2c <usbd_ep_abort+0xe0>)
    7ab6:	d02a      	beq.n	7b0e <usbd_ep_abort+0xc2>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    7ab8:	f001 000f 	and.w	r0, r1, #15
    7abc:	f200 30da 	addw	r0, r0, #986	; 0x3da
    7ac0:	0040      	lsls	r0, r0, #1
    7ac2:	6020      	str	r0, [r4, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7ac4:	6814      	ldr	r4, [r2, #0]
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7ac6:	6810      	ldr	r0, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7ac8:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7aca:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7ace:	4304      	orrs	r4, r0
    7ad0:	6014      	str	r4, [r2, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7ad2:	6812      	ldr	r2, [r2, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7ad4:	4c13      	ldr	r4, [pc, #76]	; (7b24 <usbd_ep_abort+0xd8>)
    7ad6:	683a      	ldr	r2, [r7, #0]
    7ad8:	6820      	ldr	r0, [r4, #0]
    7ada:	ea62 0c00 	orn	ip, r2, r0
    7ade:	ea1c 0f03 	tst.w	ip, r3
    7ae2:	d0d3      	beq.n	7a8c <usbd_ep_abort+0x40>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7ae4:	ea22 0203 	bic.w	r2, r2, r3
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7ae8:	4318      	orrs	r0, r3
            p_state->handler.feeder = NULL;
    7aea:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7aec:	603a      	str	r2, [r7, #0]
            p_state->handler.feeder = NULL;
    7aee:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    7af0:	2303      	movs	r3, #3
    7af2:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7af4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    7af8:	4b0d      	ldr	r3, [pc, #52]	; (7b30 <usbd_ep_abort+0xe4>)
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7afa:	6020      	str	r0, [r4, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7afc:	2206      	movs	r2, #6
            m_event_handler(&evt);
    7afe:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7b00:	f88d 2004 	strb.w	r2, [sp, #4]
    7b04:	f88d 1006 	strb.w	r1, [sp, #6]
            m_event_handler(&evt);
    7b08:	a801      	add	r0, sp, #4
    7b0a:	4798      	blx	r3
    7b0c:	e7be      	b.n	7a8c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    7b0e:	f240 70b4 	movw	r0, #1972	; 0x7b4
    7b12:	6020      	str	r0, [r4, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7b14:	6814      	ldr	r4, [r2, #0]
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7b16:	6810      	ldr	r0, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7b18:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7b1a:	f044 0404 	orr.w	r4, r4, #4
    7b1e:	e7d6      	b.n	7ace <usbd_ep_abort+0x82>
    7b20:	20002954 	.word	0x20002954
    7b24:	200029c4 	.word	0x200029c4
    7b28:	40027800 	.word	0x40027800
    7b2c:	40027804 	.word	0x40027804
    7b30:	20002ae8 	.word	0x20002ae8

00007b34 <ev_setup_handler>:
{
    7b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7b36:	4b18      	ldr	r3, [pc, #96]	; (7b98 <ev_setup_handler+0x64>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7b38:	4c18      	ldr	r4, [pc, #96]	; (7b9c <ev_setup_handler+0x68>)
    7b3a:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    7b3e:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    7b40:	4d17      	ldr	r5, [pc, #92]	; (7ba0 <ev_setup_handler+0x6c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7b42:	43da      	mvns	r2, r3
    7b44:	4b17      	ldr	r3, [pc, #92]	; (7ba4 <ev_setup_handler+0x70>)
        & (1U <<ep2bit(m_last_setup_dir)))
    7b46:	782f      	ldrb	r7, [r5, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7b48:	681b      	ldr	r3, [r3, #0]
    7b4a:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    7b4c:	4638      	mov	r0, r7
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7b4e:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    7b50:	f004 ff86 	bl	ca60 <ep2bit>
    7b54:	2301      	movs	r3, #1
    7b56:	fa03 f000 	lsl.w	r0, r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7b5a:	4210      	tst	r0, r2
    7b5c:	d002      	beq.n	7b64 <ev_setup_handler+0x30>
        usbd_ep_abort(m_last_setup_dir);
    7b5e:	4638      	mov	r0, r7
    7b60:	f7ff ff74 	bl	7a4c <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    7b64:	f006 0680 	and.w	r6, r6, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    7b68:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    7b6c:	702e      	strb	r6, [r5, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    7b6e:	f7ff fb2d 	bl	71cc <atomic_and.constprop.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    7b72:	6823      	ldr	r3, [r4, #0]
    7b74:	f043 0301 	orr.w	r3, r3, #1
    7b78:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    7b7a:	2300      	movs	r3, #0
    7b7c:	f8ad 3005 	strh.w	r3, [sp, #5]
    7b80:	f88d 3007 	strb.w	r3, [sp, #7]
    7b84:	2305      	movs	r3, #5
    7b86:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    7b8a:	4b07      	ldr	r3, [pc, #28]	; (7ba8 <ev_setup_handler+0x74>)
    7b8c:	a801      	add	r0, sp, #4
    7b8e:	681b      	ldr	r3, [r3, #0]
    7b90:	4798      	blx	r3
}
    7b92:	b003      	add	sp, #12
    7b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b96:	bf00      	nop
    7b98:	40027000 	.word	0x40027000
    7b9c:	200029c4 	.word	0x200029c4
    7ba0:	20002e0a 	.word	0x20002e0a
    7ba4:	20002954 	.word	0x20002954
    7ba8:	20002ae8 	.word	0x20002ae8

00007bac <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    7bac:	4b1b      	ldr	r3, [pc, #108]	; (7c1c <nrfx_usbd_irq_handler+0x70>)
    7bae:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    7bb2:	2300      	movs	r3, #0
{
    7bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bb8:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7bba:	461d      	mov	r5, r3
    while (to_process)
    7bbc:	b970      	cbnz	r0, 7bdc <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    7bbe:	4f18      	ldr	r7, [pc, #96]	; (7c20 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    7bc0:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    7bc4:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    7bc8:	f04f 0801 	mov.w	r8, #1
    while (active)
    7bcc:	b9bc      	cbnz	r4, 7bfe <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    7bce:	f7ff fd67 	bl	76a0 <usbd_dmareq_process>
    if (setup_active)
    7bd2:	b306      	cbz	r6, 7c16 <nrfx_usbd_irq_handler+0x6a>
}
    7bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    7bd8:	f7ff bfac 	b.w	7b34 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    7bdc:	fa90 f2a0 	rbit	r2, r0
    7be0:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7be4:	490f      	ldr	r1, [pc, #60]	; (7c24 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    7be6:	0096      	lsls	r6, r2, #2
    7be8:	4431      	add	r1, r6
    7bea:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7bee:	680e      	ldr	r6, [r1, #0]
    if (ret)
    7bf0:	b116      	cbz	r6, 7bf8 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7bf2:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7bf4:	6809      	ldr	r1, [r1, #0]
            active |= 1UL << event_nr;
    7bf6:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    7bf8:	ea20 0002 	bic.w	r0, r0, r2
    7bfc:	e7de      	b.n	7bbc <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    7bfe:	fa94 f5a4 	rbit	r5, r4
    7c02:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    7c06:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    7c0a:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    7c0e:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    7c10:	ea24 0405 	bic.w	r4, r4, r5
    7c14:	e7da      	b.n	7bcc <nrfx_usbd_irq_handler+0x20>
}
    7c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c1a:	bf00      	nop
    7c1c:	40027000 	.word	0x40027000
    7c20:	0000db0c 	.word	0x0000db0c
    7c24:	40027100 	.word	0x40027100

00007c28 <usbd_ep_abort_all>:
{
    7c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    7c2a:	4e10      	ldr	r6, [pc, #64]	; (7c6c <usbd_ep_abort_all+0x44>)
    7c2c:	4a10      	ldr	r2, [pc, #64]	; (7c70 <usbd_ep_abort_all+0x48>)
    7c2e:	6834      	ldr	r4, [r6, #0]
    7c30:	6812      	ldr	r2, [r2, #0]
    7c32:	0c24      	lsrs	r4, r4, #16
    7c34:	0424      	lsls	r4, r4, #16
    7c36:	4314      	orrs	r4, r2
        ep_waiting &= ~(1U << bitpos);
    7c38:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    7c3a:	b91c      	cbnz	r4, 7c44 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    7c3c:	f240 13ff 	movw	r3, #511	; 0x1ff
    7c40:	6033      	str	r3, [r6, #0]
}
    7c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    7c44:	fa94 f5a4 	rbit	r5, r4
    7c48:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7c4c:	2d0f      	cmp	r5, #15
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    7c4e:	bfc6      	itte	gt
    7c50:	f1a5 0010 	subgt.w	r0, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7c54:	b2c0      	uxtbgt	r0, r0
    7c56:	f045 0080 	orrle.w	r0, r5, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    7c5a:	0703      	lsls	r3, r0, #28
    7c5c:	d401      	bmi.n	7c62 <usbd_ep_abort_all+0x3a>
            usbd_ep_abort(bit2ep(bitpos));
    7c5e:	f7ff fef5 	bl	7a4c <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    7c62:	fa07 f505 	lsl.w	r5, r7, r5
    7c66:	ea24 0405 	bic.w	r4, r4, r5
    7c6a:	e7e6      	b.n	7c3a <usbd_ep_abort_all+0x12>
    7c6c:	200029c4 	.word	0x200029c4
    7c70:	20002954 	.word	0x20002954

00007c74 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c74:	4b0c      	ldr	r3, [pc, #48]	; (7ca8 <nrfx_usbd_stop+0x34>)
    7c76:	2280      	movs	r2, #128	; 0x80
{
    7c78:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    7c7a:	2027      	movs	r0, #39	; 0x27
    7c7c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    7c80:	f7fb fdde 	bl	3840 <arch_irq_is_enabled>
    7c84:	b170      	cbz	r0, 7ca4 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    7c86:	4c09      	ldr	r4, [pc, #36]	; (7cac <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    7c88:	f7ff ffce 	bl	7c28 <usbd_ep_abort_all>
    7c8c:	2300      	movs	r3, #0
    7c8e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    7c92:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    7c94:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    7c98:	f7fb fdbe 	bl	3818 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    7c9c:	f04f 33ff 	mov.w	r3, #4294967295
    7ca0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    7ca4:	bd10      	pop	{r4, pc}
    7ca6:	bf00      	nop
    7ca8:	e000e100 	.word	0xe000e100
    7cac:	40027000 	.word	0x40027000

00007cb0 <nrfx_usbd_disable>:
{
    7cb0:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    7cb2:	f7ff ffdf 	bl	7c74 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    7cb6:	4b08      	ldr	r3, [pc, #32]	; (7cd8 <nrfx_usbd_disable+0x28>)
    7cb8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    7cbc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    7cc0:	2200      	movs	r2, #0
    7cc2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    7cc6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    7cca:	f7ff f971 	bl	6fb0 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7cce:	4b03      	ldr	r3, [pc, #12]	; (7cdc <nrfx_usbd_disable+0x2c>)
    7cd0:	2201      	movs	r2, #1
    7cd2:	701a      	strb	r2, [r3, #0]
}
    7cd4:	bd08      	pop	{r3, pc}
    7cd6:	bf00      	nop
    7cd8:	40027000 	.word	0x40027000
    7cdc:	20002e09 	.word	0x20002e09

00007ce0 <nrfx_usbd_suspend>:
{
    7ce0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7ce2:	f04f 0320 	mov.w	r3, #32
    7ce6:	f3ef 8511 	mrs	r5, BASEPRI
    7cea:	f383 8812 	msr	BASEPRI_MAX, r3
    7cee:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    7cf2:	4b11      	ldr	r3, [pc, #68]	; (7d38 <nrfx_usbd_suspend+0x58>)
    7cf4:	781b      	ldrb	r3, [r3, #0]
    7cf6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7cfa:	b933      	cbnz	r3, 7d0a <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    7cfc:	2400      	movs	r4, #0
	__asm__ volatile(
    7cfe:	f385 8811 	msr	BASEPRI, r5
    7d02:	f3bf 8f6f 	isb	sy
}
    7d06:	4620      	mov	r0, r4
    7d08:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    7d0a:	f7ff ff8d 	bl	7c28 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    7d0e:	4b0b      	ldr	r3, [pc, #44]	; (7d3c <nrfx_usbd_suspend+0x5c>)
    7d10:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    7d14:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    7d18:	d1f0      	bne.n	7cfc <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    7d1a:	2101      	movs	r1, #1
    7d1c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    7d20:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    7d24:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    7d28:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    7d2a:	bf42      	ittt	mi
    7d2c:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    7d30:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    7d34:	4614      	movmi	r4, r2
}
    7d36:	e7e2      	b.n	7cfe <nrfx_usbd_suspend+0x1e>
    7d38:	20002e07 	.word	0x20002e07
    7d3c:	40027000 	.word	0x40027000

00007d40 <nrfx_usbd_ep_disable>:
{
    7d40:	b510      	push	{r4, lr}
    7d42:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    7d44:	f7ff fe82 	bl	7a4c <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7d48:	4a10      	ldr	r2, [pc, #64]	; (7d8c <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    7d4a:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7d4e:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    7d52:	f04f 0301 	mov.w	r3, #1
    7d56:	bf14      	ite	ne
    7d58:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7d5c:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
    7d60:	fa03 f300 	lsl.w	r3, r3, r0
    7d64:	ea6f 0303 	mvn.w	r3, r3
        p_reg->EPINEN &= ~(1UL << epnr);
    7d68:	bf15      	itete	ne
    7d6a:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7d6c:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    7d6e:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7d72:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7d76:	bf14      	ite	ne
    7d78:	4b05      	ldrne	r3, [pc, #20]	; (7d90 <nrfx_usbd_ep_disable+0x50>)
    7d7a:	4b06      	ldreq	r3, [pc, #24]	; (7d94 <nrfx_usbd_ep_disable+0x54>)
    7d7c:	5c1a      	ldrb	r2, [r3, r0]
    7d7e:	2301      	movs	r3, #1
    7d80:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    7d82:	4a02      	ldr	r2, [pc, #8]	; (7d8c <nrfx_usbd_ep_disable+0x4c>)
    7d84:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    7d88:	bd10      	pop	{r4, pc}
    7d8a:	bf00      	nop
    7d8c:	40027000 	.word	0x40027000
    7d90:	0000f3b5 	.word	0x0000f3b5
    7d94:	0000f3be 	.word	0x0000f3be

00007d98 <nrfx_usbd_ep_enable>:
{
    7d98:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7d9a:	b243      	sxtb	r3, r0
    7d9c:	2b00      	cmp	r3, #0
    7d9e:	4b23      	ldr	r3, [pc, #140]	; (7e2c <nrfx_usbd_ep_enable+0x94>)
    7da0:	4a23      	ldr	r2, [pc, #140]	; (7e30 <nrfx_usbd_ep_enable+0x98>)
    7da2:	bfa8      	it	ge
    7da4:	461a      	movge	r2, r3
    7da6:	f000 030f 	and.w	r3, r0, #15
    7daa:	f04f 0401 	mov.w	r4, #1
    7dae:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    7db0:	4a20      	ldr	r2, [pc, #128]	; (7e34 <nrfx_usbd_ep_enable+0x9c>)
    7db2:	fa04 f101 	lsl.w	r1, r4, r1
{
    7db6:	4605      	mov	r5, r0
    7db8:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    7dbc:	da0c      	bge.n	7dd8 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    7dbe:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    7dc2:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    7dc4:	07c8      	lsls	r0, r1, #31
    7dc6:	d406      	bmi.n	7dd6 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    7dc8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7dcc:	fa04 f303 	lsl.w	r3, r4, r3
    7dd0:	4303      	orrs	r3, r0
    7dd2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    7dd6:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    7dd8:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    7ddc:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    7dde:	07c9      	lsls	r1, r1, #31
    7de0:	d4f9      	bmi.n	7dd6 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    7de2:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    7de6:	fa04 f103 	lsl.w	r1, r4, r3
    7dea:	4331      	orrs	r1, r6
    7dec:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    7df0:	2b00      	cmp	r3, #0
    7df2:	d0f0      	beq.n	7dd6 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    7df4:	0703      	lsls	r3, r0, #28
    7df6:	d4ee      	bmi.n	7dd6 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    7df8:	f04f 0320 	mov.w	r3, #32
    7dfc:	f3ef 8611 	mrs	r6, BASEPRI
    7e00:	f383 8812 	msr	BASEPRI_MAX, r3
    7e04:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    7e08:	f7ff fdf6 	bl	79f8 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7e0c:	4628      	mov	r0, r5
    7e0e:	f004 fe27 	bl	ca60 <ep2bit>
    7e12:	4a09      	ldr	r2, [pc, #36]	; (7e38 <nrfx_usbd_ep_enable+0xa0>)
    7e14:	6813      	ldr	r3, [r2, #0]
    7e16:	fa04 f000 	lsl.w	r0, r4, r0
    7e1a:	ea23 0000 	bic.w	r0, r3, r0
    7e1e:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    7e20:	f386 8811 	msr	BASEPRI, r6
    7e24:	f3bf 8f6f 	isb	sy
}
    7e28:	e7d5      	b.n	7dd6 <nrfx_usbd_ep_enable+0x3e>
    7e2a:	bf00      	nop
    7e2c:	0000f3be 	.word	0x0000f3be
    7e30:	0000f3b5 	.word	0x0000f3b5
    7e34:	40027000 	.word	0x40027000
    7e38:	20002954 	.word	0x20002954

00007e3c <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    7e3c:	0603      	lsls	r3, r0, #24
{
    7e3e:	b510      	push	{r4, lr}
    7e40:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    7e42:	d405      	bmi.n	7e50 <nrfx_usbd_ep_stall_clear+0x14>
    7e44:	f7ff fd4a 	bl	78dc <nrfx_usbd_ep_stall_check>
    7e48:	b110      	cbz	r0, 7e50 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    7e4a:	4620      	mov	r0, r4
    7e4c:	f7ff fdd4 	bl	79f8 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    7e50:	4b01      	ldr	r3, [pc, #4]	; (7e58 <nrfx_usbd_ep_stall_clear+0x1c>)
    7e52:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    7e56:	bd10      	pop	{r4, pc}
    7e58:	40027000 	.word	0x40027000

00007e5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    7e5c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7e5e:	4c14      	ldr	r4, [pc, #80]	; (7eb0 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    7e60:	4a14      	ldr	r2, [pc, #80]	; (7eb4 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    7e62:	4915      	ldr	r1, [pc, #84]	; (7eb8 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7e64:	2303      	movs	r3, #3
    7e66:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    7e68:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7e6a:	4b14      	ldr	r3, [pc, #80]	; (7ebc <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    7e6c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7e6e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    7e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
    7e74:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    7e76:	2300      	movs	r3, #0
    7e78:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    7e7a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7e7c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    7e7e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    7e80:	4a0f      	ldr	r2, [pc, #60]	; (7ec0 <_DoInit+0x64>)
    7e82:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    7e84:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    7e86:	2210      	movs	r2, #16
    7e88:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    7e8a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    7e8c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7e8e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    7e90:	f004 f890 	bl	bfb4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7e94:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    7e98:	490a      	ldr	r1, [pc, #40]	; (7ec4 <_DoInit+0x68>)
    7e9a:	4620      	mov	r0, r4
    7e9c:	f004 f88a 	bl	bfb4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7ea0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    7ea4:	2320      	movs	r3, #32
    7ea6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7ea8:	f3bf 8f5f 	dmb	sy
}
    7eac:	bd10      	pop	{r4, pc}
    7eae:	bf00      	nop
    7eb0:	20002b2c 	.word	0x20002b2c
    7eb4:	0000f3c7 	.word	0x0000f3c7
    7eb8:	0000f3d0 	.word	0x0000f3d0
    7ebc:	20002e1b 	.word	0x20002e1b
    7ec0:	20002e0b 	.word	0x20002e0b
    7ec4:	0000f3d4 	.word	0x0000f3d4

00007ec8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7ec8:	4b0e      	ldr	r3, [pc, #56]	; (7f04 <z_sys_init_run_level+0x3c>)
{
    7eca:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7ecc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7ed0:	3001      	adds	r0, #1
    7ed2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    7ed6:	42a6      	cmp	r6, r4
    7ed8:	d800      	bhi.n	7edc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    7eda:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    7edc:	e9d4 3500 	ldrd	r3, r5, [r4]
    7ee0:	4628      	mov	r0, r5
    7ee2:	4798      	blx	r3
		if (dev != NULL) {
    7ee4:	b165      	cbz	r5, 7f00 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    7ee6:	68eb      	ldr	r3, [r5, #12]
    7ee8:	b130      	cbz	r0, 7ef8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    7eea:	2800      	cmp	r0, #0
    7eec:	bfb8      	it	lt
    7eee:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    7ef0:	28ff      	cmp	r0, #255	; 0xff
    7ef2:	bfa8      	it	ge
    7ef4:	20ff      	movge	r0, #255	; 0xff
    7ef6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    7ef8:	785a      	ldrb	r2, [r3, #1]
    7efa:	f042 0201 	orr.w	r2, r2, #1
    7efe:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7f00:	3408      	adds	r4, #8
    7f02:	e7e8      	b.n	7ed6 <z_sys_init_run_level+0xe>
    7f04:	0000db70 	.word	0x0000db70

00007f08 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    7f08:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    7f0a:	4605      	mov	r5, r0
    7f0c:	b910      	cbnz	r0, 7f14 <z_impl_device_get_binding+0xc>
		return NULL;
    7f0e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    7f10:	4620      	mov	r0, r4
    7f12:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    7f14:	7803      	ldrb	r3, [r0, #0]
    7f16:	2b00      	cmp	r3, #0
    7f18:	d0f9      	beq.n	7f0e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    7f1a:	4a0f      	ldr	r2, [pc, #60]	; (7f58 <z_impl_device_get_binding+0x50>)
    7f1c:	4c0f      	ldr	r4, [pc, #60]	; (7f5c <z_impl_device_get_binding+0x54>)
    7f1e:	4616      	mov	r6, r2
    7f20:	4294      	cmp	r4, r2
    7f22:	d108      	bne.n	7f36 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    7f24:	4c0d      	ldr	r4, [pc, #52]	; (7f5c <z_impl_device_get_binding+0x54>)
    7f26:	42b4      	cmp	r4, r6
    7f28:	d0f1      	beq.n	7f0e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7f2a:	4620      	mov	r0, r4
    7f2c:	f004 fe0d 	bl	cb4a <z_device_ready>
    7f30:	b950      	cbnz	r0, 7f48 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    7f32:	3418      	adds	r4, #24
    7f34:	e7f7      	b.n	7f26 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    7f36:	4620      	mov	r0, r4
    7f38:	f004 fe07 	bl	cb4a <z_device_ready>
    7f3c:	b110      	cbz	r0, 7f44 <z_impl_device_get_binding+0x3c>
    7f3e:	6823      	ldr	r3, [r4, #0]
    7f40:	42ab      	cmp	r3, r5
    7f42:	d0e5      	beq.n	7f10 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    7f44:	3418      	adds	r4, #24
    7f46:	e7eb      	b.n	7f20 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7f48:	6821      	ldr	r1, [r4, #0]
    7f4a:	4628      	mov	r0, r5
    7f4c:	f004 f843 	bl	bfd6 <strcmp>
    7f50:	2800      	cmp	r0, #0
    7f52:	d1ee      	bne.n	7f32 <z_impl_device_get_binding+0x2a>
    7f54:	e7dc      	b.n	7f10 <z_impl_device_get_binding+0x8>
    7f56:	bf00      	nop
    7f58:	0000d628 	.word	0x0000d628
    7f5c:	0000d580 	.word	0x0000d580

00007f60 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7f62:	4605      	mov	r5, r0
    7f64:	460e      	mov	r6, r1
	__asm__ volatile(
    7f66:	f04f 0320 	mov.w	r3, #32
    7f6a:	f3ef 8711 	mrs	r7, BASEPRI
    7f6e:	f383 8812 	msr	BASEPRI_MAX, r3
    7f72:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7f76:	f000 ff91 	bl	8e9c <z_impl_z_current_get>
    7f7a:	2d04      	cmp	r5, #4
    7f7c:	bf96      	itet	ls
    7f7e:	4b18      	ldrls	r3, [pc, #96]	; (7fe0 <z_fatal_error+0x80>)
    7f80:	4b18      	ldrhi	r3, [pc, #96]	; (7fe4 <z_fatal_error+0x84>)
    7f82:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7f86:	2200      	movs	r2, #0
    7f88:	4604      	mov	r4, r0
    7f8a:	9200      	str	r2, [sp, #0]
    7f8c:	4816      	ldr	r0, [pc, #88]	; (7fe8 <z_fatal_error+0x88>)
    7f8e:	462a      	mov	r2, r5
    7f90:	2145      	movs	r1, #69	; 0x45
    7f92:	f003 fe22 	bl	bbda <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7f96:	b13e      	cbz	r6, 7fa8 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    7f98:	69f3      	ldr	r3, [r6, #28]
    7f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7f9e:	b11b      	cbz	r3, 7fa8 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
    7fa0:	4812      	ldr	r0, [pc, #72]	; (7fec <z_fatal_error+0x8c>)
    7fa2:	2145      	movs	r1, #69	; 0x45
    7fa4:	f003 fe19 	bl	bbda <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7fa8:	b12c      	cbz	r4, 7fb6 <z_fatal_error+0x56>
    7faa:	4620      	mov	r0, r4
    7fac:	f004 fe91 	bl	ccd2 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    7fb0:	b108      	cbz	r0, 7fb6 <z_fatal_error+0x56>
    7fb2:	7803      	ldrb	r3, [r0, #0]
    7fb4:	b903      	cbnz	r3, 7fb8 <z_fatal_error+0x58>
		thread_name = "unknown";
    7fb6:	480e      	ldr	r0, [pc, #56]	; (7ff0 <z_fatal_error+0x90>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    7fb8:	4603      	mov	r3, r0
    7fba:	4622      	mov	r2, r4
    7fbc:	480d      	ldr	r0, [pc, #52]	; (7ff4 <z_fatal_error+0x94>)
    7fbe:	2145      	movs	r1, #69	; 0x45
    7fc0:	f003 fe0b 	bl	bbda <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7fc4:	4631      	mov	r1, r6
    7fc6:	4628      	mov	r0, r5
    7fc8:	f7fe f8d2 	bl	6170 <k_sys_fatal_error_handler>
	__asm__ volatile(
    7fcc:	f387 8811 	msr	BASEPRI, r7
    7fd0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7fd4:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7fd6:	b003      	add	sp, #12
    7fd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    7fdc:	f7fc b834 	b.w	4048 <z_impl_k_thread_abort>
    7fe0:	0000db88 	.word	0x0000db88
    7fe4:	0000f3db 	.word	0x0000f3db
    7fe8:	0000f3f1 	.word	0x0000f3f1
    7fec:	0000f41e 	.word	0x0000f41e
    7ff0:	0000f3e9 	.word	0x0000f3e9
    7ff4:	0000f444 	.word	0x0000f444

00007ff8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7ff8:	b530      	push	{r4, r5, lr}
	struct k_thread *thread = &z_idle_threads[i];
    7ffa:	4b11      	ldr	r3, [pc, #68]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    7ffc:	4911      	ldr	r1, [pc, #68]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
    7ffe:	24c8      	movs	r4, #200	; 0xc8
{
    8000:	b087      	sub	sp, #28
	struct k_thread *thread = &z_idle_threads[i];
    8002:	fb04 3400 	mla	r4, r4, r0, r3
	z_setup_new_thread(thread, stack,
    8006:	2201      	movs	r2, #1
    8008:	2300      	movs	r3, #0
    800a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    800e:	220f      	movs	r2, #15
    8010:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8014:	4a0c      	ldr	r2, [pc, #48]	; (8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
	z_setup_new_thread(thread, stack,
    8016:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8018:	2318      	movs	r3, #24
    801a:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    801e:	f44f 75c0 	mov.w	r5, #384	; 0x180
    8022:	9300      	str	r3, [sp, #0]
    8024:	fb05 1100 	mla	r1, r5, r0, r1
    8028:	4b08      	ldr	r3, [pc, #32]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    802a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    802e:	4620      	mov	r0, r4
    8030:	f000 f906 	bl	8240 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8034:	7b63      	ldrb	r3, [r4, #13]
    8036:	f023 0304 	bic.w	r3, r3, #4
    803a:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    803c:	b007      	add	sp, #28
    803e:	bd30      	pop	{r4, r5, pc}
    8040:	20000960 	.word	0x20000960
    8044:	20006580 	.word	0x20006580
    8048:	20002bd4 	.word	0x20002bd4
    804c:	0000ccdb 	.word	0x0000ccdb

00008050 <bg_thread_main>:
{
    8050:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    8052:	4b0a      	ldr	r3, [pc, #40]	; (807c <bg_thread_main+0x2c>)
    8054:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8056:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    8058:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    805a:	f7ff ff35 	bl	7ec8 <z_sys_init_run_level>
	boot_banner();
    805e:	f005 fa0f 	bl	d480 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    8062:	2003      	movs	r0, #3
    8064:	f7ff ff30 	bl	7ec8 <z_sys_init_run_level>
	z_init_static_threads();
    8068:	f000 f948 	bl	82fc <z_init_static_threads>
	main();
    806c:	f7f8 f9c4 	bl	3f8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8070:	4a03      	ldr	r2, [pc, #12]	; (8080 <bg_thread_main+0x30>)
    8072:	7b13      	ldrb	r3, [r2, #12]
    8074:	f023 0301 	bic.w	r3, r3, #1
    8078:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    807a:	bd08      	pop	{r3, pc}
    807c:	2000321b 	.word	0x2000321b
    8080:	20000a28 	.word	0x20000a28

00008084 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    8084:	4802      	ldr	r0, [pc, #8]	; (8090 <z_bss_zero+0xc>)
    8086:	4a03      	ldr	r2, [pc, #12]	; (8094 <z_bss_zero+0x10>)
    8088:	2100      	movs	r1, #0
    808a:	1a12      	subs	r2, r2, r0
    808c:	f003 bfca 	b.w	c024 <memset>
    8090:	20000738 	.word	0x20000738
    8094:	200033d8 	.word	0x200033d8

00008098 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    8098:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    809a:	4f2f      	ldr	r7, [pc, #188]	; (8158 <z_cstart+0xc0>)
    809c:	b0ba      	sub	sp, #232	; 0xe8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    809e:	f387 8808 	msr	MSP, r7
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    80a2:	4d2e      	ldr	r5, [pc, #184]	; (815c <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    80a4:	4e2e      	ldr	r6, [pc, #184]	; (8160 <z_cstart+0xc8>)
    80a6:	696b      	ldr	r3, [r5, #20]
    80a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    80ac:	2400      	movs	r4, #0
    80ae:	616b      	str	r3, [r5, #20]
    80b0:	23e0      	movs	r3, #224	; 0xe0
    80b2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    80b6:	77ec      	strb	r4, [r5, #31]
    80b8:	762c      	strb	r4, [r5, #24]
    80ba:	766c      	strb	r4, [r5, #25]
    80bc:	76ac      	strb	r4, [r5, #26]
    80be:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    80c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    80c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    80c8:	626b      	str	r3, [r5, #36]	; 0x24
    80ca:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    80ce:	f7fb ff31 	bl	3f34 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    80d2:	f7fb fb0d 	bl	36f0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    80d6:	f04f 33ff 	mov.w	r3, #4294967295
    80da:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    80dc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    80de:	f7fc f865 	bl	41ac <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    80e2:	f7fb ffc3 	bl	406c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    80e6:	f240 1301 	movw	r3, #257	; 0x101
    80ea:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
    80ee:	ab08      	add	r3, sp, #32
    80f0:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    80f2:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    80f6:	f004 fd27 	bl	cb48 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    80fa:	4620      	mov	r0, r4
    80fc:	f7ff fee4 	bl	7ec8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8100:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    8102:	4d18      	ldr	r5, [pc, #96]	; (8164 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8104:	f7ff fee0 	bl	7ec8 <z_sys_init_run_level>
	z_sched_init();
    8108:	f000 fe14 	bl	8d34 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    810c:	4a16      	ldr	r2, [pc, #88]	; (8168 <z_cstart+0xd0>)
    810e:	9205      	str	r2, [sp, #20]
    8110:	2201      	movs	r2, #1
    8112:	4b16      	ldr	r3, [pc, #88]	; (816c <z_cstart+0xd4>)
    8114:	4916      	ldr	r1, [pc, #88]	; (8170 <z_cstart+0xd8>)
    8116:	9400      	str	r4, [sp, #0]
    8118:	e9cd 4203 	strd	r4, r2, [sp, #12]
    811c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    8120:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    8124:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    8126:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8128:	f000 f88a 	bl	8240 <z_setup_new_thread>
    812c:	7b6a      	ldrb	r2, [r5, #13]
    812e:	9007      	str	r0, [sp, #28]
    8130:	f022 0204 	bic.w	r2, r2, #4
    8134:	736a      	strb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    8136:	4628      	mov	r0, r5
    8138:	f004 fef9 	bl	cf2e <z_ready_thread>
		init_idle_thread(i);
    813c:	4620      	mov	r0, r4
    813e:	f7ff ff5b 	bl	7ff8 <init_idle_thread>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8142:	4b0a      	ldr	r3, [pc, #40]	; (816c <z_cstart+0xd4>)
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    8144:	4a0b      	ldr	r2, [pc, #44]	; (8174 <z_cstart+0xdc>)
    8146:	60f2      	str	r2, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8148:	9907      	ldr	r1, [sp, #28]
		_kernel.cpus[i].id = i;
    814a:	7534      	strb	r4, [r6, #20]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    814c:	461a      	mov	r2, r3
    814e:	4628      	mov	r0, r5
		_kernel.cpus[i].irq_stack =
    8150:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8152:	f7fb fcc7 	bl	3ae4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    8156:	bf00      	nop
    8158:	20006f80 	.word	0x20006f80
    815c:	e000ed00 	.word	0xe000ed00
    8160:	20002bd4 	.word	0x20002bd4
    8164:	20000a28 	.word	0x20000a28
    8168:	0000f4ab 	.word	0x0000f4ab
    816c:	00008051 	.word	0x00008051
    8170:	20003d00 	.word	0x20003d00
    8174:	20000960 	.word	0x20000960

00008178 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8178:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    817a:	4c06      	ldr	r4, [pc, #24]	; (8194 <statics_init+0x1c>)
    817c:	4d06      	ldr	r5, [pc, #24]	; (8198 <statics_init+0x20>)
    817e:	42ac      	cmp	r4, r5
    8180:	d301      	bcc.n	8186 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8182:	2000      	movs	r0, #0
    8184:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8186:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    818a:	4620      	mov	r0, r4
    818c:	f004 fce7 	bl	cb5e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8190:	3414      	adds	r4, #20
    8192:	e7f4      	b.n	817e <statics_init+0x6>
    8194:	200004cc 	.word	0x200004cc
    8198:	200004cc 	.word	0x200004cc

0000819c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    819c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    819e:	4b0e      	ldr	r3, [pc, #56]	; (81d8 <init_mem_slab_module+0x3c>)
    81a0:	4c0e      	ldr	r4, [pc, #56]	; (81dc <init_mem_slab_module+0x40>)
    81a2:	42a3      	cmp	r3, r4
    81a4:	d301      	bcc.n	81aa <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    81a6:	2000      	movs	r0, #0
	return rc;
}
    81a8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    81aa:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    81ae:	ea41 0200 	orr.w	r2, r1, r0
    81b2:	f012 0203 	ands.w	r2, r2, #3
    81b6:	d10b      	bne.n	81d0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    81b8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    81ba:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    81bc:	42aa      	cmp	r2, r5
    81be:	d101      	bne.n	81c4 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    81c0:	331c      	adds	r3, #28
    81c2:	e7ee      	b.n	81a2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    81c4:	695e      	ldr	r6, [r3, #20]
    81c6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    81c8:	3201      	adds	r2, #1
		slab->free_list = p;
    81ca:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    81cc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    81ce:	e7f5      	b.n	81bc <init_mem_slab_module+0x20>
		return -EINVAL;
    81d0:	f06f 0015 	mvn.w	r0, #21
	return rc;
    81d4:	e7e8      	b.n	81a8 <init_mem_slab_module+0xc>
    81d6:	bf00      	nop
    81d8:	200004b0 	.word	0x200004b0
    81dc:	200004cc 	.word	0x200004cc

000081e0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    81e0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    81e2:	460c      	mov	r4, r1
    81e4:	4616      	mov	r6, r2
    81e6:	461f      	mov	r7, r3
	__asm__ volatile(
    81e8:	f04f 0320 	mov.w	r3, #32
    81ec:	f3ef 8111 	mrs	r1, BASEPRI
    81f0:	f383 8812 	msr	BASEPRI_MAX, r3
    81f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    81f8:	6943      	ldr	r3, [r0, #20]
    81fa:	b15b      	cbz	r3, 8214 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    81fc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    81fe:	681b      	ldr	r3, [r3, #0]
    8200:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    8202:	6983      	ldr	r3, [r0, #24]
    8204:	3301      	adds	r3, #1
    8206:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    8208:	2000      	movs	r0, #0
	__asm__ volatile(
    820a:	f381 8811 	msr	BASEPRI, r1
    820e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    8212:	e011      	b.n	8238 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    8214:	ea56 0207 	orrs.w	r2, r6, r7
    8218:	d103      	bne.n	8222 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    821a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    821c:	f06f 000b 	mvn.w	r0, #11
    8220:	e7f3      	b.n	820a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    8222:	4602      	mov	r2, r0
    8224:	e9cd 6700 	strd	r6, r7, [sp]
    8228:	3008      	adds	r0, #8
    822a:	f000 fcd5 	bl	8bd8 <z_pend_curr>
		if (result == 0) {
    822e:	b918      	cbnz	r0, 8238 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    8230:	4b02      	ldr	r3, [pc, #8]	; (823c <k_mem_slab_alloc+0x5c>)
    8232:	689b      	ldr	r3, [r3, #8]
    8234:	695b      	ldr	r3, [r3, #20]
    8236:	6023      	str	r3, [r4, #0]
}
    8238:	b002      	add	sp, #8
    823a:	bdd0      	pop	{r4, r6, r7, pc}
    823c:	20002bd4 	.word	0x20002bd4

00008240 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    8240:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    8244:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8246:	7306      	strb	r6, [r0, #12]
{
    8248:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    824a:	3207      	adds	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    824c:	f100 0558 	add.w	r5, r0, #88	; 0x58
    8250:	f022 0207 	bic.w	r2, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    8254:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    8256:	3720      	adds	r7, #32
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    8258:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	new_thread->stack_info.size = stack_buf_size;
    825c:	e9c0 721a 	strd	r7, r2, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    8260:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
    8262:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8264:	f102 0820 	add.w	r8, r2, #32

	thread_base->prio = priority;
    8268:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    826a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    826c:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    826e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
    8272:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
    8274:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    8276:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8278:	9202      	str	r2, [sp, #8]
    827a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    827c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    827e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8282:	9200      	str	r2, [sp, #0]
    8284:	4642      	mov	r2, r8
{
    8286:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8288:	f7fb fba4 	bl	39d4 <arch_new_thread>
	if (!_current) {
    828c:	4b04      	ldr	r3, [pc, #16]	; (82a0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    828e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    8290:	689b      	ldr	r3, [r3, #8]
    8292:	b103      	cbz	r3, 8296 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    8294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    8296:	6763      	str	r3, [r4, #116]	; 0x74
}
    8298:	4640      	mov	r0, r8
    829a:	b004      	add	sp, #16
    829c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82a0:	20002bd4 	.word	0x20002bd4

000082a4 <z_impl_k_thread_create>:
{
    82a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    82a6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    82a8:	2500      	movs	r5, #0
    82aa:	9505      	str	r5, [sp, #20]
    82ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
    82ae:	9504      	str	r5, [sp, #16]
    82b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    82b2:	9503      	str	r5, [sp, #12]
    82b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    82b6:	9502      	str	r5, [sp, #8]
{
    82b8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    82bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    82be:	9501      	str	r5, [sp, #4]
    82c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    82c2:	9500      	str	r5, [sp, #0]
{
    82c4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    82c6:	f7ff ffbb 	bl	8240 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    82ca:	1c7b      	adds	r3, r7, #1
    82cc:	bf08      	it	eq
    82ce:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    82d2:	d005      	beq.n	82e0 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    82d4:	ea56 0307 	orrs.w	r3, r6, r7
    82d8:	d105      	bne.n	82e6 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    82da:	4620      	mov	r0, r4
    82dc:	f000 fc20 	bl	8b20 <z_sched_start>
}
    82e0:	4620      	mov	r0, r4
    82e2:	b007      	add	sp, #28
    82e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    82e6:	4904      	ldr	r1, [pc, #16]	; (82f8 <z_impl_k_thread_create+0x54>)
    82e8:	4632      	mov	r2, r6
    82ea:	463b      	mov	r3, r7
    82ec:	f104 0018 	add.w	r0, r4, #24
    82f0:	f000 feba 	bl	9068 <z_add_timeout>
    82f4:	e7f4      	b.n	82e0 <z_impl_k_thread_create+0x3c>
    82f6:	bf00      	nop
    82f8:	0000cf4f 	.word	0x0000cf4f

000082fc <z_init_static_threads>:
{
    82fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    8300:	4e2a      	ldr	r6, [pc, #168]	; (83ac <z_init_static_threads+0xb0>)
    8302:	4d2b      	ldr	r5, [pc, #172]	; (83b0 <z_init_static_threads+0xb4>)
{
    8304:	b086      	sub	sp, #24
    8306:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    8308:	42b5      	cmp	r5, r6
    830a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    830e:	d310      	bcc.n	8332 <z_init_static_threads+0x36>
	k_sched_lock();
    8310:	f000 fb1a 	bl	8948 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8314:	4c26      	ldr	r4, [pc, #152]	; (83b0 <z_init_static_threads+0xb4>)
    8316:	f8df a09c 	ldr.w	sl, [pc, #156]	; 83b4 <z_init_static_threads+0xb8>
    831a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    831e:	f240 36e7 	movw	r6, #999	; 0x3e7
    8322:	2700      	movs	r7, #0
    8324:	4544      	cmp	r4, r8
    8326:	d321      	bcc.n	836c <z_init_static_threads+0x70>
}
    8328:	b006      	add	sp, #24
    832a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    832e:	f000 bce5 	b.w	8cfc <k_sched_unlock>
		z_setup_new_thread(
    8332:	f854 3c04 	ldr.w	r3, [r4, #-4]
    8336:	9305      	str	r3, [sp, #20]
    8338:	f854 3c10 	ldr.w	r3, [r4, #-16]
    833c:	9304      	str	r3, [sp, #16]
    833e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    8342:	9303      	str	r3, [sp, #12]
    8344:	f854 3c18 	ldr.w	r3, [r4, #-24]
    8348:	9302      	str	r3, [sp, #8]
    834a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    834e:	9301      	str	r3, [sp, #4]
    8350:	f854 3c20 	ldr.w	r3, [r4, #-32]
    8354:	9300      	str	r3, [sp, #0]
    8356:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    835a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    835e:	f7ff ff6f 	bl	8240 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    8362:	f854 3c30 	ldr.w	r3, [r4, #-48]
    8366:	655d      	str	r5, [r3, #84]	; 0x54
    8368:	4625      	mov	r5, r4
    836a:	e7cd      	b.n	8308 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    836c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    836e:	1c5a      	adds	r2, r3, #1
    8370:	d00d      	beq.n	838e <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    8372:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8376:	4630      	mov	r0, r6
    8378:	4639      	mov	r1, r7
    837a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    837e:	42b9      	cmp	r1, r7
    8380:	bf08      	it	eq
    8382:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    8384:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8386:	d104      	bne.n	8392 <z_init_static_threads+0x96>
	z_sched_start(thread);
    8388:	4628      	mov	r0, r5
    838a:	f000 fbc9 	bl	8b20 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    838e:	3430      	adds	r4, #48	; 0x30
    8390:	e7c8      	b.n	8324 <z_init_static_threads+0x28>
    8392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8396:	2300      	movs	r3, #0
    8398:	f7f7 feb2 	bl	100 <__aeabi_uldivmod>
    839c:	4602      	mov	r2, r0
    839e:	460b      	mov	r3, r1
    83a0:	f105 0018 	add.w	r0, r5, #24
    83a4:	4651      	mov	r1, sl
    83a6:	f000 fe5f 	bl	9068 <z_add_timeout>
    83aa:	e7f0      	b.n	838e <z_init_static_threads+0x92>
    83ac:	200004b0 	.word	0x200004b0
    83b0:	200004b0 	.word	0x200004b0
    83b4:	0000cf4f 	.word	0x0000cf4f

000083b8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    83b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    83bc:	4604      	mov	r4, r0
    83be:	4616      	mov	r6, r2
    83c0:	461f      	mov	r7, r3
	__asm__ volatile(
    83c2:	f04f 0320 	mov.w	r3, #32
    83c6:	f3ef 8811 	mrs	r8, BASEPRI
    83ca:	f383 8812 	msr	BASEPRI_MAX, r3
    83ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    83d2:	68c3      	ldr	r3, [r0, #12]
    83d4:	4a35      	ldr	r2, [pc, #212]	; (84ac <z_impl_k_mutex_lock+0xf4>)
    83d6:	b16b      	cbz	r3, 83f4 <z_impl_k_mutex_lock+0x3c>
    83d8:	6880      	ldr	r0, [r0, #8]
    83da:	6891      	ldr	r1, [r2, #8]
    83dc:	4288      	cmp	r0, r1
    83de:	d019      	beq.n	8414 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    83e0:	ea56 0307 	orrs.w	r3, r6, r7
    83e4:	d118      	bne.n	8418 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    83e6:	f388 8811 	msr	BASEPRI, r8
    83ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    83ee:	f06f 000f 	mvn.w	r0, #15
    83f2:	e00c      	b.n	840e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    83f4:	6891      	ldr	r1, [r2, #8]
    83f6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    83fa:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    83fc:	3301      	adds	r3, #1
    83fe:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    8400:	6893      	ldr	r3, [r2, #8]
    8402:	60a3      	str	r3, [r4, #8]
    8404:	f388 8811 	msr	BASEPRI, r8
    8408:	f3bf 8f6f 	isb	sy
		return 0;
    840c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    840e:	b002      	add	sp, #8
    8410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    8414:	6921      	ldr	r1, [r4, #16]
    8416:	e7f0      	b.n	83fa <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8418:	f991 100e 	ldrsb.w	r1, [r1, #14]
    841c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    8420:	4299      	cmp	r1, r3
    8422:	bfa8      	it	ge
    8424:	4619      	movge	r1, r3
    8426:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    842a:	4291      	cmp	r1, r2
    842c:	bfb8      	it	lt
    842e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    8430:	428b      	cmp	r3, r1
    8432:	dd2f      	ble.n	8494 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    8434:	f000 fbe4 	bl	8c00 <z_set_prio>
    8438:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    843a:	e9cd 6700 	strd	r6, r7, [sp]
    843e:	481c      	ldr	r0, [pc, #112]	; (84b0 <z_impl_k_mutex_lock+0xf8>)
    8440:	4622      	mov	r2, r4
    8442:	4641      	mov	r1, r8
    8444:	f000 fbc8 	bl	8bd8 <z_pend_curr>
	if (got_mutex == 0) {
    8448:	2800      	cmp	r0, #0
    844a:	d0e0      	beq.n	840e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    844c:	f04f 0320 	mov.w	r3, #32
    8450:	f3ef 8611 	mrs	r6, BASEPRI
    8454:	f383 8812 	msr	BASEPRI_MAX, r3
    8458:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    845c:	6823      	ldr	r3, [r4, #0]
    845e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8460:	429c      	cmp	r4, r3
    8462:	d00a      	beq.n	847a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8464:	b14b      	cbz	r3, 847a <z_impl_k_mutex_lock+0xc2>
    8466:	f993 300e 	ldrsb.w	r3, [r3, #14]
    846a:	4299      	cmp	r1, r3
    846c:	bfa8      	it	ge
    846e:	4619      	movge	r1, r3
    8470:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    8474:	4299      	cmp	r1, r3
    8476:	bfb8      	it	lt
    8478:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    847a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    847c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8480:	4299      	cmp	r1, r3
    8482:	d109      	bne.n	8498 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    8484:	b16d      	cbz	r5, 84a2 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    8486:	480a      	ldr	r0, [pc, #40]	; (84b0 <z_impl_k_mutex_lock+0xf8>)
    8488:	4631      	mov	r1, r6
    848a:	f000 fa4b 	bl	8924 <z_reschedule>
	return -EAGAIN;
    848e:	f06f 000a 	mvn.w	r0, #10
    8492:	e7bc      	b.n	840e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    8494:	2500      	movs	r5, #0
    8496:	e7d0      	b.n	843a <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    8498:	f000 fbb2 	bl	8c00 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    849c:	2800      	cmp	r0, #0
    849e:	d1f2      	bne.n	8486 <z_impl_k_mutex_lock+0xce>
    84a0:	e7f0      	b.n	8484 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    84a2:	f386 8811 	msr	BASEPRI, r6
    84a6:	f3bf 8f6f 	isb	sy
    84aa:	e7f0      	b.n	848e <z_impl_k_mutex_lock+0xd6>
    84ac:	20002bd4 	.word	0x20002bd4
    84b0:	2000321c 	.word	0x2000321c

000084b4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    84b4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    84b6:	6883      	ldr	r3, [r0, #8]
{
    84b8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    84ba:	2b00      	cmp	r3, #0
    84bc:	d036      	beq.n	852c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    84be:	4a1e      	ldr	r2, [pc, #120]	; (8538 <z_impl_k_mutex_unlock+0x84>)
    84c0:	6892      	ldr	r2, [r2, #8]
    84c2:	4293      	cmp	r3, r2
    84c4:	d135      	bne.n	8532 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    84c6:	7bda      	ldrb	r2, [r3, #15]
    84c8:	3a01      	subs	r2, #1
    84ca:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    84cc:	68c3      	ldr	r3, [r0, #12]
    84ce:	2b01      	cmp	r3, #1
    84d0:	d905      	bls.n	84de <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    84d2:	3b01      	subs	r3, #1
    84d4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    84d6:	f000 fc11 	bl	8cfc <k_sched_unlock>

	return 0;
    84da:	2000      	movs	r0, #0
}
    84dc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    84de:	f04f 0320 	mov.w	r3, #32
    84e2:	f3ef 8511 	mrs	r5, BASEPRI
    84e6:	f383 8812 	msr	BASEPRI_MAX, r3
    84ea:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    84ee:	6901      	ldr	r1, [r0, #16]
    84f0:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    84f2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    84f6:	4299      	cmp	r1, r3
    84f8:	d001      	beq.n	84fe <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    84fa:	f000 fb81 	bl	8c00 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    84fe:	4620      	mov	r0, r4
    8500:	f004 fd89 	bl	d016 <z_unpend_first_thread>
	mutex->owner = new_owner;
    8504:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    8506:	b158      	cbz	r0, 8520 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    8508:	f990 200e 	ldrsb.w	r2, [r0, #14]
    850c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    850e:	2200      	movs	r2, #0
    8510:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    8512:	f004 fd0c 	bl	cf2e <z_ready_thread>
		z_reschedule(&lock, key);
    8516:	4809      	ldr	r0, [pc, #36]	; (853c <z_impl_k_mutex_unlock+0x88>)
    8518:	4629      	mov	r1, r5
    851a:	f000 fa03 	bl	8924 <z_reschedule>
    851e:	e7da      	b.n	84d6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    8520:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    8522:	f385 8811 	msr	BASEPRI, r5
    8526:	f3bf 8f6f 	isb	sy
    852a:	e7d4      	b.n	84d6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    852c:	f06f 0015 	mvn.w	r0, #21
    8530:	e7d4      	b.n	84dc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    8532:	f04f 30ff 	mov.w	r0, #4294967295
    8536:	e7d1      	b.n	84dc <z_impl_k_mutex_unlock+0x28>
    8538:	20002bd4 	.word	0x20002bd4
    853c:	2000321c 	.word	0x2000321c

00008540 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    8540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8542:	4616      	mov	r6, r2
    8544:	461f      	mov	r7, r3
	__asm__ volatile(
    8546:	f04f 0320 	mov.w	r3, #32
    854a:	f3ef 8511 	mrs	r5, BASEPRI
    854e:	f383 8812 	msr	BASEPRI_MAX, r3
    8552:	f3bf 8f6f 	isb	sy
    8556:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    8558:	b19c      	cbz	r4, 8582 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    855a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    855c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    855e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    8562:	4294      	cmp	r4, r2
	list->head = node;
    8564:	6003      	str	r3, [r0, #0]
	list->tail = node;
    8566:	bf08      	it	eq
    8568:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    856a:	2101      	movs	r1, #1
    856c:	4620      	mov	r0, r4
    856e:	f004 fc2b 	bl	cdc8 <z_queue_node_peek>
    8572:	4604      	mov	r4, r0
	__asm__ volatile(
    8574:	f385 8811 	msr	BASEPRI, r5
    8578:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    857c:	4620      	mov	r0, r4
    857e:	b003      	add	sp, #12
    8580:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8582:	ea56 0307 	orrs.w	r3, r6, r7
    8586:	d0f5      	beq.n	8574 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    8588:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    858c:	e9cd 6700 	strd	r6, r7, [sp]
    8590:	4629      	mov	r1, r5
    8592:	4610      	mov	r0, r2
    8594:	f000 fb20 	bl	8bd8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    8598:	2800      	cmp	r0, #0
    859a:	d1ef      	bne.n	857c <z_impl_k_queue_get+0x3c>
    859c:	4b01      	ldr	r3, [pc, #4]	; (85a4 <z_impl_k_queue_get+0x64>)
    859e:	689b      	ldr	r3, [r3, #8]
    85a0:	695c      	ldr	r4, [r3, #20]
    85a2:	e7eb      	b.n	857c <z_impl_k_queue_get+0x3c>
    85a4:	20002bd4 	.word	0x20002bd4

000085a8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    85a8:	b538      	push	{r3, r4, r5, lr}
    85aa:	4604      	mov	r4, r0
	__asm__ volatile(
    85ac:	f04f 0320 	mov.w	r3, #32
    85b0:	f3ef 8511 	mrs	r5, BASEPRI
    85b4:	f383 8812 	msr	BASEPRI_MAX, r3
    85b8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    85bc:	f004 fd2b 	bl	d016 <z_unpend_first_thread>

	if (thread != NULL) {
    85c0:	b148      	cbz	r0, 85d6 <z_impl_k_sem_give+0x2e>
    85c2:	2200      	movs	r2, #0
    85c4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    85c6:	f004 fcb2 	bl	cf2e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    85ca:	4629      	mov	r1, r5
    85cc:	4808      	ldr	r0, [pc, #32]	; (85f0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    85ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    85d2:	f000 b9a7 	b.w	8924 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    85d6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    85da:	429a      	cmp	r2, r3
    85dc:	bf18      	it	ne
    85de:	3301      	addne	r3, #1
    85e0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    85e2:	2102      	movs	r1, #2
    85e4:	f104 0010 	add.w	r0, r4, #16
    85e8:	f004 ff2d 	bl	d446 <z_handle_obj_poll_events>
}
    85ec:	e7ed      	b.n	85ca <z_impl_k_sem_give+0x22>
    85ee:	bf00      	nop
    85f0:	2000321c 	.word	0x2000321c

000085f4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    85f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    85f6:	4614      	mov	r4, r2
    85f8:	461d      	mov	r5, r3
    85fa:	f04f 0320 	mov.w	r3, #32
    85fe:	f3ef 8111 	mrs	r1, BASEPRI
    8602:	f383 8812 	msr	BASEPRI_MAX, r3
    8606:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    860a:	6883      	ldr	r3, [r0, #8]
    860c:	b143      	cbz	r3, 8620 <z_impl_k_sem_take+0x2c>
		sem->count--;
    860e:	3b01      	subs	r3, #1
    8610:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    8612:	f381 8811 	msr	BASEPRI, r1
    8616:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    861a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    861c:	b003      	add	sp, #12
    861e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8620:	ea54 0305 	orrs.w	r3, r4, r5
    8624:	d106      	bne.n	8634 <z_impl_k_sem_take+0x40>
    8626:	f381 8811 	msr	BASEPRI, r1
    862a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    862e:	f06f 000f 	mvn.w	r0, #15
    8632:	e7f3      	b.n	861c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8634:	4602      	mov	r2, r0
    8636:	e9cd 4500 	strd	r4, r5, [sp]
    863a:	4802      	ldr	r0, [pc, #8]	; (8644 <z_impl_k_sem_take+0x50>)
    863c:	f000 facc 	bl	8bd8 <z_pend_curr>
	return ret;
    8640:	e7ec      	b.n	861c <z_impl_k_sem_take+0x28>
    8642:	bf00      	nop
    8644:	2000321c 	.word	0x2000321c

00008648 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    8648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    864c:	4e4b      	ldr	r6, [pc, #300]	; (877c <work_queue_main+0x134>)
{
    864e:	b085      	sub	sp, #20
    8650:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    8652:	f04f 38ff 	mov.w	r8, #4294967295
    8656:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    865a:	f04f 0320 	mov.w	r3, #32
    865e:	f3ef 8711 	mrs	r7, BASEPRI
    8662:	f383 8812 	msr	BASEPRI_MAX, r3
    8666:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    866a:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
	return list->head;
    866e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    8672:	b985      	cbnz	r5, 8696 <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
    8674:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
    8678:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
    867a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		} else if (flag_test_and_clear(&queue->flags,
    867e:	d433      	bmi.n	86e8 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    8680:	2300      	movs	r3, #0
    8682:	e9cd 8900 	strd	r8, r9, [sp]
    8686:	9302      	str	r3, [sp, #8]
    8688:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    868c:	4639      	mov	r1, r7
    868e:	483c      	ldr	r0, [pc, #240]	; (8780 <work_queue_main+0x138>)
    8690:	f000 fc6c 	bl	8f6c <z_sched_wait>
			continue;
    8694:	e7e1      	b.n	865a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8696:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
    869a:	6829      	ldr	r1, [r5, #0]
	list->head = node;
    869c:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    86a0:	4295      	cmp	r5, r2
    86a2:	d101      	bne.n	86a8 <work_queue_main+0x60>
	list->tail = node;
    86a4:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
    86a8:	f043 0302 	orr.w	r3, r3, #2
    86ac:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
    86b0:	68eb      	ldr	r3, [r5, #12]
    86b2:	f023 0304 	bic.w	r3, r3, #4
    86b6:	f043 0301 	orr.w	r3, r3, #1
    86ba:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    86bc:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    86be:	f387 8811 	msr	BASEPRI, r7
    86c2:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    86c6:	4628      	mov	r0, r5
    86c8:	4798      	blx	r3
	__asm__ volatile(
    86ca:	f04f 0320 	mov.w	r3, #32
    86ce:	f3ef 8b11 	mrs	fp, BASEPRI
    86d2:	f383 8812 	msr	BASEPRI_MAX, r3
    86d6:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    86da:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    86dc:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    86de:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    86e2:	d40b      	bmi.n	86fc <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
    86e4:	60ea      	str	r2, [r5, #12]
    86e6:	e00e      	b.n	8706 <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    86e8:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    86ec:	2200      	movs	r2, #0
    86ee:	2101      	movs	r1, #1
    86f0:	4628      	mov	r0, r5
    86f2:	f004 fcb8 	bl	d066 <z_sched_wake>
    86f6:	2800      	cmp	r0, #0
    86f8:	d1f8      	bne.n	86ec <work_queue_main+0xa4>
    86fa:	e7c1      	b.n	8680 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    86fc:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    86fe:	f023 0303 	bic.w	r3, r3, #3
    8702:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8704:	b970      	cbnz	r0, 8724 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
    8706:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    870a:	f023 0302 	bic.w	r3, r3, #2
    870e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
    8712:	f38b 8811 	msr	BASEPRI, fp
    8716:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    871a:	05d8      	lsls	r0, r3, #23
    871c:	d49d      	bmi.n	865a <work_queue_main+0x12>
	z_impl_k_yield();
    871e:	f000 fb15 	bl	8d4c <z_impl_k_yield>
}
    8722:	e79a      	b.n	865a <work_queue_main+0x12>
	return node->next;
    8724:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8726:	f04f 0a00 	mov.w	sl, #0
    872a:	2f00      	cmp	r7, #0
    872c:	bf38      	it	cc
    872e:	2700      	movcc	r7, #0
	parent->next = child;
    8730:	4653      	mov	r3, sl
		if (wc->work == work) {
    8732:	6842      	ldr	r2, [r0, #4]
    8734:	4295      	cmp	r5, r2
    8736:	4601      	mov	r1, r0
    8738:	d10e      	bne.n	8758 <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    873a:	6801      	ldr	r1, [r0, #0]
    873c:	f1ba 0f00 	cmp.w	sl, #0
    8740:	d114      	bne.n	876c <work_queue_main+0x124>
    8742:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    8744:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    8746:	4290      	cmp	r0, r2
    8748:	d100      	bne.n	874c <work_queue_main+0x104>
	list->tail = node;
    874a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    874c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    8750:	f7ff ff2a 	bl	85a8 <z_impl_k_sem_give>
}
    8754:	4651      	mov	r1, sl
    8756:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8758:	2f00      	cmp	r7, #0
    875a:	d0d4      	beq.n	8706 <work_queue_main+0xbe>
	return node->next;
    875c:	683a      	ldr	r2, [r7, #0]
    875e:	2a00      	cmp	r2, #0
    8760:	bf38      	it	cc
    8762:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8764:	4638      	mov	r0, r7
    8766:	468a      	mov	sl, r1
    8768:	4617      	mov	r7, r2
    876a:	e7e2      	b.n	8732 <work_queue_main+0xea>
	parent->next = child;
    876c:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
    8770:	6872      	ldr	r2, [r6, #4]
    8772:	4290      	cmp	r0, r2
	list->tail = node;
    8774:	bf08      	it	eq
    8776:	f8c6 a004 	streq.w	sl, [r6, #4]
}
    877a:	e7e7      	b.n	874c <work_queue_main+0x104>
    877c:	20002bfc 	.word	0x20002bfc
    8780:	2000321c 	.word	0x2000321c

00008784 <submit_to_queue_locked>:
{
    8784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8786:	68c3      	ldr	r3, [r0, #12]
    8788:	079a      	lsls	r2, r3, #30
{
    878a:	4604      	mov	r4, r0
    878c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    878e:	f3c3 0540 	ubfx	r5, r3, #1, #1
    8792:	d41f      	bmi.n	87d4 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    8794:	075f      	lsls	r7, r3, #29
    8796:	d41f      	bmi.n	87d8 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    8798:	680a      	ldr	r2, [r1, #0]
    879a:	b90a      	cbnz	r2, 87a0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    879c:	6882      	ldr	r2, [r0, #8]
    879e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    87a0:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    87a2:	bf44      	itt	mi
    87a4:	68a3      	ldrmi	r3, [r4, #8]
    87a6:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    87a8:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    87aa:	bf4c      	ite	mi
    87ac:	2502      	movmi	r5, #2
		ret = 1;
    87ae:	2501      	movpl	r5, #1
	if (queue == NULL) {
    87b0:	b37f      	cbz	r7, 8812 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    87b2:	4b1b      	ldr	r3, [pc, #108]	; (8820 <submit_to_queue_locked+0x9c>)
    87b4:	689b      	ldr	r3, [r3, #8]
    87b6:	42bb      	cmp	r3, r7
    87b8:	d111      	bne.n	87de <submit_to_queue_locked+0x5a>
    87ba:	f004 fa81 	bl	ccc0 <k_is_in_isr>
    87be:	f080 0001 	eor.w	r0, r0, #1
    87c2:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    87c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    87c8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    87ca:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    87ce:	d523      	bpl.n	8818 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    87d0:	b13a      	cbz	r2, 87e2 <submit_to_queue_locked+0x5e>
    87d2:	b940      	cbnz	r0, 87e6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    87d4:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    87d8:	2300      	movs	r3, #0
    87da:	6033      	str	r3, [r6, #0]
	return ret;
    87dc:	e013      	b.n	8806 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    87de:	2000      	movs	r0, #0
    87e0:	e7f0      	b.n	87c4 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    87e2:	071b      	lsls	r3, r3, #28
    87e4:	d4f6      	bmi.n	87d4 <submit_to_queue_locked+0x50>
	parent->next = child;
    87e6:	2300      	movs	r3, #0
    87e8:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    87ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    87ee:	b963      	cbnz	r3, 880a <submit_to_queue_locked+0x86>
	list->head = node;
    87f0:	e9c7 4432 	strd	r4, r4, [r7, #200]	; 0xc8
		(void)notify_queue_locked(queue);
    87f4:	4638      	mov	r0, r7
    87f6:	f004 fb0e 	bl	ce16 <notify_queue_locked>
	*flagp |= BIT(bit);
    87fa:	68e3      	ldr	r3, [r4, #12]
    87fc:	f043 0304 	orr.w	r3, r3, #4
    8800:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    8802:	6833      	ldr	r3, [r6, #0]
    8804:	60a3      	str	r3, [r4, #8]
}
    8806:	4628      	mov	r0, r5
    8808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    880a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    880c:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
}
    8810:	e7f0      	b.n	87f4 <submit_to_queue_locked+0x70>
		return -EINVAL;
    8812:	f06f 0515 	mvn.w	r5, #21
    8816:	e7df      	b.n	87d8 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    8818:	f06f 0512 	mvn.w	r5, #18
    881c:	e7dc      	b.n	87d8 <submit_to_queue_locked+0x54>
    881e:	bf00      	nop
    8820:	20002bd4 	.word	0x20002bd4

00008824 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    8824:	b5f0      	push	{r4, r5, r6, r7, lr}
    8826:	b089      	sub	sp, #36	; 0x24
    8828:	4604      	mov	r4, r0
	list->head = NULL;
    882a:	2000      	movs	r0, #0
	list->tail = NULL;
    882c:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
    8830:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8832:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
    8836:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
    883a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    883e:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    8842:	b31d      	cbz	r5, 888c <k_work_queue_start+0x68>
    8844:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    8846:	2800      	cmp	r0, #0
    8848:	f240 1001 	movw	r0, #257	; 0x101
    884c:	bf08      	it	eq
    884e:	2001      	moveq	r0, #1
	*flagp = flags;
    8850:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8854:	2000      	movs	r0, #0
    8856:	f04f 36ff 	mov.w	r6, #4294967295
    885a:	f04f 37ff 	mov.w	r7, #4294967295
    885e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    8862:	e9cd 0001 	strd	r0, r0, [sp, #4]
    8866:	e9cd 6706 	strd	r6, r7, [sp, #24]
    886a:	4b09      	ldr	r3, [pc, #36]	; (8890 <k_work_queue_start+0x6c>)
    886c:	9400      	str	r4, [sp, #0]
    886e:	4620      	mov	r0, r4
    8870:	f7ff fd18 	bl	82a4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    8874:	b125      	cbz	r5, 8880 <k_work_queue_start+0x5c>
    8876:	6829      	ldr	r1, [r5, #0]
    8878:	b111      	cbz	r1, 8880 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    887a:	4620      	mov	r0, r4
    887c:	f004 fa26 	bl	cccc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    8880:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    8882:	b009      	add	sp, #36	; 0x24
    8884:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8888:	f004 ba25 	b.w	ccd6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    888c:	2001      	movs	r0, #1
    888e:	e7df      	b.n	8850 <k_work_queue_start+0x2c>
    8890:	00008649 	.word	0x00008649

00008894 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    8894:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    8896:	4c08      	ldr	r4, [pc, #32]	; (88b8 <z_reset_time_slice+0x24>)
    8898:	6823      	ldr	r3, [r4, #0]
    889a:	b15b      	cbz	r3, 88b4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    889c:	f7fd fc08 	bl	60b0 <sys_clock_elapsed>
    88a0:	6822      	ldr	r2, [r4, #0]
    88a2:	4906      	ldr	r1, [pc, #24]	; (88bc <z_reset_time_slice+0x28>)
    88a4:	4410      	add	r0, r2
    88a6:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
    88a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    88ac:	2100      	movs	r1, #0
    88ae:	4610      	mov	r0, r2
    88b0:	f004 bc0c 	b.w	d0cc <z_set_timeout_expiry>
}
    88b4:	bd10      	pop	{r4, pc}
    88b6:	bf00      	nop
    88b8:	20002c0c 	.word	0x20002c0c
    88bc:	20002bd4 	.word	0x20002bd4

000088c0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    88c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88c2:	4604      	mov	r4, r0
    88c4:	460d      	mov	r5, r1
	__asm__ volatile(
    88c6:	f04f 0320 	mov.w	r3, #32
    88ca:	f3ef 8611 	mrs	r6, BASEPRI
    88ce:	f383 8812 	msr	BASEPRI_MAX, r3
    88d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    88d6:	4b10      	ldr	r3, [pc, #64]	; (8918 <k_sched_time_slice_set+0x58>)
    88d8:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    88da:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    88de:	f240 30e7 	movw	r0, #999	; 0x3e7
    88e2:	2100      	movs	r1, #0
    88e4:	611a      	str	r2, [r3, #16]
    88e6:	fbe7 0104 	umlal	r0, r1, r7, r4
    88ea:	2300      	movs	r3, #0
    88ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    88f0:	f7f7 fc06 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    88f4:	2c00      	cmp	r4, #0
    88f6:	4b09      	ldr	r3, [pc, #36]	; (891c <k_sched_time_slice_set+0x5c>)
    88f8:	dc09      	bgt.n	890e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    88fa:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    88fc:	4b08      	ldr	r3, [pc, #32]	; (8920 <k_sched_time_slice_set+0x60>)
    88fe:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    8900:	f7ff ffc8 	bl	8894 <z_reset_time_slice>
	__asm__ volatile(
    8904:	f386 8811 	msr	BASEPRI, r6
    8908:	f3bf 8f6f 	isb	sy
	}
}
    890c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    890e:	2802      	cmp	r0, #2
    8910:	bfb8      	it	lt
    8912:	2002      	movlt	r0, #2
    8914:	e7f1      	b.n	88fa <k_sched_time_slice_set+0x3a>
    8916:	bf00      	nop
    8918:	20002bd4 	.word	0x20002bd4
    891c:	20002c0c 	.word	0x20002c0c
    8920:	20002c08 	.word	0x20002c08

00008924 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8924:	b949      	cbnz	r1, 893a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8926:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    892a:	b930      	cbnz	r0, 893a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    892c:	4b05      	ldr	r3, [pc, #20]	; (8944 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    892e:	699a      	ldr	r2, [r3, #24]
    8930:	689b      	ldr	r3, [r3, #8]
    8932:	429a      	cmp	r2, r3
    8934:	d001      	beq.n	893a <z_reschedule+0x16>
	ret = arch_swap(key);
    8936:	f7fa bfdb 	b.w	38f0 <arch_swap>
    893a:	f381 8811 	msr	BASEPRI, r1
    893e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    8942:	4770      	bx	lr
    8944:	20002bd4 	.word	0x20002bd4

00008948 <k_sched_lock>:
	__asm__ volatile(
    8948:	f04f 0320 	mov.w	r3, #32
    894c:	f3ef 8111 	mrs	r1, BASEPRI
    8950:	f383 8812 	msr	BASEPRI_MAX, r3
    8954:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    8958:	4b04      	ldr	r3, [pc, #16]	; (896c <k_sched_lock+0x24>)
    895a:	689a      	ldr	r2, [r3, #8]
    895c:	7bd3      	ldrb	r3, [r2, #15]
    895e:	3b01      	subs	r3, #1
    8960:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    8962:	f381 8811 	msr	BASEPRI, r1
    8966:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    896a:	4770      	bx	lr
    896c:	20002bd4 	.word	0x20002bd4

00008970 <update_cache>:
{
    8970:	b538      	push	{r3, r4, r5, lr}
    8972:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    8974:	480c      	ldr	r0, [pc, #48]	; (89a8 <update_cache+0x38>)
    8976:	4d0d      	ldr	r5, [pc, #52]	; (89ac <update_cache+0x3c>)
    8978:	f004 facf 	bl	cf1a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    897c:	4604      	mov	r4, r0
    897e:	b900      	cbnz	r0, 8982 <update_cache+0x12>
    8980:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    8982:	68ab      	ldr	r3, [r5, #8]
    8984:	b94a      	cbnz	r2, 899a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    8986:	7b5a      	ldrb	r2, [r3, #13]
    8988:	06d2      	lsls	r2, r2, #27
    898a:	d106      	bne.n	899a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    898c:	69a2      	ldr	r2, [r4, #24]
    898e:	b922      	cbnz	r2, 899a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    8990:	89da      	ldrh	r2, [r3, #14]
    8992:	2a7f      	cmp	r2, #127	; 0x7f
    8994:	d901      	bls.n	899a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    8996:	61ab      	str	r3, [r5, #24]
}
    8998:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    899a:	429c      	cmp	r4, r3
    899c:	d001      	beq.n	89a2 <update_cache+0x32>
			z_reset_time_slice();
    899e:	f7ff ff79 	bl	8894 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    89a2:	61ac      	str	r4, [r5, #24]
}
    89a4:	e7f8      	b.n	8998 <update_cache+0x28>
    89a6:	bf00      	nop
    89a8:	20002bf0 	.word	0x20002bf0
    89ac:	20002bd4 	.word	0x20002bd4

000089b0 <move_thread_to_end_of_prio_q>:
{
    89b0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    89b2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    89b6:	7b43      	ldrb	r3, [r0, #13]
    89b8:	2a00      	cmp	r2, #0
{
    89ba:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    89bc:	da04      	bge.n	89c8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    89be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    89c2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    89c4:	f004 fa54 	bl	ce70 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    89c8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    89ca:	4a17      	ldr	r2, [pc, #92]	; (8a28 <move_thread_to_end_of_prio_q+0x78>)
    89cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    89d0:	4610      	mov	r0, r2
    89d2:	734b      	strb	r3, [r1, #13]
    89d4:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    89d8:	6a15      	ldr	r5, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89da:	4283      	cmp	r3, r0
    89dc:	bf08      	it	eq
    89de:	2300      	moveq	r3, #0
    89e0:	2b00      	cmp	r3, #0
    89e2:	bf38      	it	cc
    89e4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    89e6:	b1cb      	cbz	r3, 8a1c <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    89e8:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    89ec:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    89f0:	42a6      	cmp	r6, r4
    89f2:	d00f      	beq.n	8a14 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    89f4:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    89f6:	2c00      	cmp	r4, #0
    89f8:	dd0c      	ble.n	8a14 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    89fa:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    89fc:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    8a00:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    8a02:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    8a04:	6890      	ldr	r0, [r2, #8]
    8a06:	1a43      	subs	r3, r0, r1
    8a08:	4258      	negs	r0, r3
}
    8a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    8a0e:	4158      	adcs	r0, r3
    8a10:	f7ff bfae 	b.w	8970 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8a14:	42ab      	cmp	r3, r5
    8a16:	d001      	beq.n	8a1c <move_thread_to_end_of_prio_q+0x6c>
    8a18:	681b      	ldr	r3, [r3, #0]
    8a1a:	e7e4      	b.n	89e6 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    8a1c:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    8a20:	6029      	str	r1, [r5, #0]
	list->tail = node;
    8a22:	6211      	str	r1, [r2, #32]
}
    8a24:	e7ee      	b.n	8a04 <move_thread_to_end_of_prio_q+0x54>
    8a26:	bf00      	nop
    8a28:	20002bd4 	.word	0x20002bd4

00008a2c <z_time_slice>:
{
    8a2c:	b570      	push	{r4, r5, r6, lr}
    8a2e:	4601      	mov	r1, r0
	__asm__ volatile(
    8a30:	f04f 0320 	mov.w	r3, #32
    8a34:	f3ef 8411 	mrs	r4, BASEPRI
    8a38:	f383 8812 	msr	BASEPRI_MAX, r3
    8a3c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    8a40:	4b16      	ldr	r3, [pc, #88]	; (8a9c <z_time_slice+0x70>)
    8a42:	4a17      	ldr	r2, [pc, #92]	; (8aa0 <z_time_slice+0x74>)
    8a44:	6898      	ldr	r0, [r3, #8]
    8a46:	6815      	ldr	r5, [r2, #0]
    8a48:	42a8      	cmp	r0, r5
    8a4a:	461d      	mov	r5, r3
    8a4c:	d106      	bne.n	8a5c <z_time_slice+0x30>
			z_reset_time_slice();
    8a4e:	f7ff ff21 	bl	8894 <z_reset_time_slice>
	__asm__ volatile(
    8a52:	f384 8811 	msr	BASEPRI, r4
    8a56:	f3bf 8f6f 	isb	sy
}
    8a5a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    8a5c:	2600      	movs	r6, #0
    8a5e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    8a60:	4a10      	ldr	r2, [pc, #64]	; (8aa4 <z_time_slice+0x78>)
    8a62:	6812      	ldr	r2, [r2, #0]
    8a64:	b1ba      	cbz	r2, 8a96 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    8a66:	89c2      	ldrh	r2, [r0, #14]
    8a68:	2a7f      	cmp	r2, #127	; 0x7f
    8a6a:	d814      	bhi.n	8a96 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    8a6c:	7b42      	ldrb	r2, [r0, #13]
    8a6e:	06d2      	lsls	r2, r2, #27
    8a70:	d111      	bne.n	8a96 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8a72:	4a0d      	ldr	r2, [pc, #52]	; (8aa8 <z_time_slice+0x7c>)
    8a74:	f990 600e 	ldrsb.w	r6, [r0, #14]
    8a78:	6812      	ldr	r2, [r2, #0]
    8a7a:	4296      	cmp	r6, r2
    8a7c:	db0b      	blt.n	8a96 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    8a7e:	4a0b      	ldr	r2, [pc, #44]	; (8aac <z_time_slice+0x80>)
    8a80:	4290      	cmp	r0, r2
    8a82:	d008      	beq.n	8a96 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    8a84:	691a      	ldr	r2, [r3, #16]
    8a86:	428a      	cmp	r2, r1
    8a88:	dc02      	bgt.n	8a90 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    8a8a:	f7ff ff91 	bl	89b0 <move_thread_to_end_of_prio_q>
    8a8e:	e7de      	b.n	8a4e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    8a90:	1a52      	subs	r2, r2, r1
    8a92:	611a      	str	r2, [r3, #16]
    8a94:	e7dd      	b.n	8a52 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    8a96:	2300      	movs	r3, #0
    8a98:	612b      	str	r3, [r5, #16]
    8a9a:	e7da      	b.n	8a52 <z_time_slice+0x26>
    8a9c:	20002bd4 	.word	0x20002bd4
    8aa0:	20002c04 	.word	0x20002c04
    8aa4:	20002c0c 	.word	0x20002c0c
    8aa8:	20002c08 	.word	0x20002c08
    8aac:	20000960 	.word	0x20000960

00008ab0 <ready_thread>:
{
    8ab0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8ab2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8ab6:	7b42      	ldrb	r2, [r0, #13]
    8ab8:	2b00      	cmp	r3, #0
    8aba:	db2d      	blt.n	8b18 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8abc:	06d3      	lsls	r3, r2, #27
    8abe:	d12b      	bne.n	8b18 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    8ac0:	6983      	ldr	r3, [r0, #24]
    8ac2:	bb4b      	cbnz	r3, 8b18 <ready_thread+0x68>
	return list->head == list;
    8ac4:	4915      	ldr	r1, [pc, #84]	; (8b1c <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    8ac6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    8aca:	7342      	strb	r2, [r0, #13]
    8acc:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8ace:	6a0d      	ldr	r5, [r1, #32]
	return list->head == list;
    8ad0:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8ad4:	4294      	cmp	r4, r2
    8ad6:	bf18      	it	ne
    8ad8:	4623      	movne	r3, r4
    8ada:	2b00      	cmp	r3, #0
    8adc:	bf38      	it	cc
    8ade:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8ae0:	b1ab      	cbz	r3, 8b0e <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    8ae2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    8ae6:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    8aea:	42a6      	cmp	r6, r4
    8aec:	d00b      	beq.n	8b06 <ready_thread+0x56>
		return b2 - b1;
    8aee:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    8af0:	2c00      	cmp	r4, #0
    8af2:	dd08      	ble.n	8b06 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    8af4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8af6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    8afa:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    8afc:	6058      	str	r0, [r3, #4]
}
    8afe:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    8b00:	2000      	movs	r0, #0
    8b02:	f7ff bf35 	b.w	8970 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8b06:	42ab      	cmp	r3, r5
    8b08:	d001      	beq.n	8b0e <ready_thread+0x5e>
    8b0a:	681b      	ldr	r3, [r3, #0]
    8b0c:	e7e8      	b.n	8ae0 <ready_thread+0x30>
	node->prev = tail;
    8b0e:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    8b12:	6028      	str	r0, [r5, #0]
	list->tail = node;
    8b14:	6208      	str	r0, [r1, #32]
}
    8b16:	e7f2      	b.n	8afe <ready_thread+0x4e>
}
    8b18:	bc70      	pop	{r4, r5, r6}
    8b1a:	4770      	bx	lr
    8b1c:	20002bd4 	.word	0x20002bd4

00008b20 <z_sched_start>:
{
    8b20:	b510      	push	{r4, lr}
	__asm__ volatile(
    8b22:	f04f 0220 	mov.w	r2, #32
    8b26:	f3ef 8411 	mrs	r4, BASEPRI
    8b2a:	f382 8812 	msr	BASEPRI_MAX, r2
    8b2e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    8b32:	7b42      	ldrb	r2, [r0, #13]
    8b34:	0751      	lsls	r1, r2, #29
    8b36:	d404      	bmi.n	8b42 <z_sched_start+0x22>
	__asm__ volatile(
    8b38:	f384 8811 	msr	BASEPRI, r4
    8b3c:	f3bf 8f6f 	isb	sy
}
    8b40:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8b42:	f022 0204 	bic.w	r2, r2, #4
    8b46:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    8b48:	f7ff ffb2 	bl	8ab0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8b4c:	4621      	mov	r1, r4
    8b4e:	4802      	ldr	r0, [pc, #8]	; (8b58 <z_sched_start+0x38>)
}
    8b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    8b54:	f7ff bee6 	b.w	8924 <z_reschedule>
    8b58:	2000321c 	.word	0x2000321c

00008b5c <unready_thread>:
{
    8b5c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    8b5e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    8b62:	7b43      	ldrb	r3, [r0, #13]
    8b64:	2a00      	cmp	r2, #0
{
    8b66:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8b68:	da04      	bge.n	8b74 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8b6e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8b70:	f004 f97e 	bl	ce70 <sys_dlist_remove>
	update_cache(thread == _current);
    8b74:	4b04      	ldr	r3, [pc, #16]	; (8b88 <unready_thread+0x2c>)
    8b76:	6898      	ldr	r0, [r3, #8]
    8b78:	1a43      	subs	r3, r0, r1
    8b7a:	4258      	negs	r0, r3
    8b7c:	4158      	adcs	r0, r3
}
    8b7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    8b82:	f7ff bef5 	b.w	8970 <update_cache>
    8b86:	bf00      	nop
    8b88:	20002bd4 	.word	0x20002bd4

00008b8c <pend>:
{
    8b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b90:	4606      	mov	r6, r0
    8b92:	4614      	mov	r4, r2
    8b94:	461d      	mov	r5, r3
	__asm__ volatile(
    8b96:	f04f 0320 	mov.w	r3, #32
    8b9a:	f3ef 8711 	mrs	r7, BASEPRI
    8b9e:	f383 8812 	msr	BASEPRI_MAX, r3
    8ba2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    8ba6:	f004 f9f4 	bl	cf92 <add_to_waitq_locked>
	__asm__ volatile(
    8baa:	f387 8811 	msr	BASEPRI, r7
    8bae:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8bb2:	1c6b      	adds	r3, r5, #1
    8bb4:	bf08      	it	eq
    8bb6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    8bba:	d008      	beq.n	8bce <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8bbc:	4622      	mov	r2, r4
    8bbe:	462b      	mov	r3, r5
    8bc0:	f106 0018 	add.w	r0, r6, #24
    8bc4:	4903      	ldr	r1, [pc, #12]	; (8bd4 <pend+0x48>)
}
    8bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8bca:	f000 ba4d 	b.w	9068 <z_add_timeout>
    8bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8bd2:	bf00      	nop
    8bd4:	0000cf4f 	.word	0x0000cf4f

00008bd8 <z_pend_curr>:
{
    8bd8:	b510      	push	{r4, lr}
	pending_current = _current;
    8bda:	4b07      	ldr	r3, [pc, #28]	; (8bf8 <z_pend_curr+0x20>)
    8bdc:	6898      	ldr	r0, [r3, #8]
    8bde:	4b07      	ldr	r3, [pc, #28]	; (8bfc <z_pend_curr+0x24>)
{
    8be0:	460c      	mov	r4, r1
	pending_current = _current;
    8be2:	6018      	str	r0, [r3, #0]
{
    8be4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    8be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8bea:	f7ff ffcf 	bl	8b8c <pend>
    8bee:	4620      	mov	r0, r4
}
    8bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8bf4:	f7fa be7c 	b.w	38f0 <arch_swap>
    8bf8:	20002bd4 	.word	0x20002bd4
    8bfc:	20002c04 	.word	0x20002c04

00008c00 <z_set_prio>:
{
    8c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c02:	4604      	mov	r4, r0
	__asm__ volatile(
    8c04:	f04f 0320 	mov.w	r3, #32
    8c08:	f3ef 8611 	mrs	r6, BASEPRI
    8c0c:	f383 8812 	msr	BASEPRI_MAX, r3
    8c10:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8c14:	7b43      	ldrb	r3, [r0, #13]
    8c16:	06da      	lsls	r2, r3, #27
    8c18:	b249      	sxtb	r1, r1
    8c1a:	d138      	bne.n	8c8e <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
    8c1c:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    8c1e:	2d00      	cmp	r5, #0
    8c20:	d135      	bne.n	8c8e <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8c26:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8c28:	f004 f922 	bl	ce70 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8c2c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    8c2e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8c34:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    8c36:	4817      	ldr	r0, [pc, #92]	; (8c94 <z_set_prio+0x94>)
    8c38:	4603      	mov	r3, r0
    8c3a:	f853 7f1c 	ldr.w	r7, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c3e:	429f      	cmp	r7, r3
    8c40:	bf18      	it	ne
    8c42:	463d      	movne	r5, r7
    8c44:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8c46:	6a07      	ldr	r7, [r0, #32]
    8c48:	461a      	mov	r2, r3
    8c4a:	462b      	mov	r3, r5
    8c4c:	bf38      	it	cc
    8c4e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8c50:	b1c3      	cbz	r3, 8c84 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    8c52:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    8c56:	42a9      	cmp	r1, r5
    8c58:	d010      	beq.n	8c7c <z_set_prio+0x7c>
		return b2 - b1;
    8c5a:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    8c5c:	2d00      	cmp	r5, #0
    8c5e:	dd0d      	ble.n	8c7c <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    8c60:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8c62:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8c66:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8c68:	605c      	str	r4, [r3, #4]
			update_cache(1);
    8c6a:	2001      	movs	r0, #1
    8c6c:	f7ff fe80 	bl	8970 <update_cache>
    8c70:	2001      	movs	r0, #1
	__asm__ volatile(
    8c72:	f386 8811 	msr	BASEPRI, r6
    8c76:	f3bf 8f6f 	isb	sy
}
    8c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    8c7c:	42bb      	cmp	r3, r7
    8c7e:	d001      	beq.n	8c84 <z_set_prio+0x84>
    8c80:	681b      	ldr	r3, [r3, #0]
    8c82:	e7e5      	b.n	8c50 <z_set_prio+0x50>
	node->prev = tail;
    8c84:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    8c88:	603c      	str	r4, [r7, #0]
	list->tail = node;
    8c8a:	6204      	str	r4, [r0, #32]
}
    8c8c:	e7ed      	b.n	8c6a <z_set_prio+0x6a>
			thread->base.prio = prio;
    8c8e:	73a1      	strb	r1, [r4, #14]
    8c90:	2000      	movs	r0, #0
    8c92:	e7ee      	b.n	8c72 <z_set_prio+0x72>
    8c94:	20002bd4 	.word	0x20002bd4

00008c98 <z_impl_k_thread_suspend>:
{
    8c98:	b570      	push	{r4, r5, r6, lr}
    8c9a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8c9c:	3018      	adds	r0, #24
    8c9e:	f004 f9ff 	bl	d0a0 <z_abort_timeout>
	__asm__ volatile(
    8ca2:	f04f 0320 	mov.w	r3, #32
    8ca6:	f3ef 8611 	mrs	r6, BASEPRI
    8caa:	f383 8812 	msr	BASEPRI_MAX, r3
    8cae:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    8cb2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    8cb6:	7b63      	ldrb	r3, [r4, #13]
    8cb8:	2a00      	cmp	r2, #0
    8cba:	da05      	bge.n	8cc8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8cc0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8cc2:	4620      	mov	r0, r4
    8cc4:	f004 f8d4 	bl	ce70 <sys_dlist_remove>
		update_cache(thread == _current);
    8cc8:	4d0b      	ldr	r5, [pc, #44]	; (8cf8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8cca:	7b63      	ldrb	r3, [r4, #13]
    8ccc:	68a8      	ldr	r0, [r5, #8]
    8cce:	f043 0310 	orr.w	r3, r3, #16
    8cd2:	7363      	strb	r3, [r4, #13]
    8cd4:	1b03      	subs	r3, r0, r4
    8cd6:	4258      	negs	r0, r3
    8cd8:	4158      	adcs	r0, r3
    8cda:	f7ff fe49 	bl	8970 <update_cache>
	__asm__ volatile(
    8cde:	f386 8811 	msr	BASEPRI, r6
    8ce2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    8ce6:	68ab      	ldr	r3, [r5, #8]
    8ce8:	42a3      	cmp	r3, r4
    8cea:	d103      	bne.n	8cf4 <z_impl_k_thread_suspend+0x5c>
}
    8cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8cf0:	f004 b909 	b.w	cf06 <z_reschedule_unlocked>
}
    8cf4:	bd70      	pop	{r4, r5, r6, pc}
    8cf6:	bf00      	nop
    8cf8:	20002bd4 	.word	0x20002bd4

00008cfc <k_sched_unlock>:
{
    8cfc:	b510      	push	{r4, lr}
	__asm__ volatile(
    8cfe:	f04f 0320 	mov.w	r3, #32
    8d02:	f3ef 8411 	mrs	r4, BASEPRI
    8d06:	f383 8812 	msr	BASEPRI_MAX, r3
    8d0a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    8d0e:	4b08      	ldr	r3, [pc, #32]	; (8d30 <k_sched_unlock+0x34>)
    8d10:	689a      	ldr	r2, [r3, #8]
    8d12:	7bd3      	ldrb	r3, [r2, #15]
    8d14:	3301      	adds	r3, #1
    8d16:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8d18:	2000      	movs	r0, #0
    8d1a:	f7ff fe29 	bl	8970 <update_cache>
	__asm__ volatile(
    8d1e:	f384 8811 	msr	BASEPRI, r4
    8d22:	f3bf 8f6f 	isb	sy
}
    8d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    8d2a:	f004 b8ec 	b.w	cf06 <z_reschedule_unlocked>
    8d2e:	bf00      	nop
    8d30:	20002bd4 	.word	0x20002bd4

00008d34 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8d34:	4b04      	ldr	r3, [pc, #16]	; (8d48 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8d36:	2100      	movs	r1, #0
    8d38:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    8d3c:	e9c3 2207 	strd	r2, r2, [r3, #28]
    8d40:	4608      	mov	r0, r1
    8d42:	f7ff bdbd 	b.w	88c0 <k_sched_time_slice_set>
    8d46:	bf00      	nop
    8d48:	20002bd4 	.word	0x20002bd4

00008d4c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    8d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    8d4e:	f04f 0320 	mov.w	r3, #32
    8d52:	f3ef 8411 	mrs	r4, BASEPRI
    8d56:	f383 8812 	msr	BASEPRI_MAX, r3
    8d5a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    8d5e:	491b      	ldr	r1, [pc, #108]	; (8dcc <z_impl_k_yield+0x80>)
    8d60:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8d62:	7b43      	ldrb	r3, [r0, #13]
    8d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8d68:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8d6a:	f004 f881 	bl	ce70 <sys_dlist_remove>
	}
	queue_thread(_current);
    8d6e:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8d70:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    8d72:	4608      	mov	r0, r1
    8d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8d78:	7353      	strb	r3, [r2, #13]
    8d7a:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8d7e:	6a0e      	ldr	r6, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d80:	4283      	cmp	r3, r0
    8d82:	bf08      	it	eq
    8d84:	2300      	moveq	r3, #0
    8d86:	2b00      	cmp	r3, #0
    8d88:	bf38      	it	cc
    8d8a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8d8c:	b1cb      	cbz	r3, 8dc2 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    8d8e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    8d92:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    8d96:	42af      	cmp	r7, r5
    8d98:	d00f      	beq.n	8dba <z_impl_k_yield+0x6e>
		return b2 - b1;
    8d9a:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    8d9c:	2d00      	cmp	r5, #0
    8d9e:	dd0c      	ble.n	8dba <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    8da0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    8da2:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    8da6:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    8da8:	605a      	str	r2, [r3, #4]
	update_cache(1);
    8daa:	2001      	movs	r0, #1
    8dac:	f7ff fde0 	bl	8970 <update_cache>
    8db0:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    8db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8db6:	f7fa bd9b 	b.w	38f0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8dba:	42b3      	cmp	r3, r6
    8dbc:	d001      	beq.n	8dc2 <z_impl_k_yield+0x76>
    8dbe:	681b      	ldr	r3, [r3, #0]
    8dc0:	e7e4      	b.n	8d8c <z_impl_k_yield+0x40>
	node->prev = tail;
    8dc2:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    8dc6:	6032      	str	r2, [r6, #0]
	list->tail = node;
    8dc8:	620a      	str	r2, [r1, #32]
}
    8dca:	e7ee      	b.n	8daa <z_impl_k_yield+0x5e>
    8dcc:	20002bd4 	.word	0x20002bd4

00008dd0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    8dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8dd4:	4604      	mov	r4, r0
    8dd6:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8dd8:	ea54 0105 	orrs.w	r1, r4, r5
    8ddc:	d104      	bne.n	8de8 <z_tick_sleep+0x18>
	z_impl_k_yield();
    8dde:	f7ff ffb5 	bl	8d4c <z_impl_k_yield>
		k_yield();
		return 0;
    8de2:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    8de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    8de8:	f06f 0101 	mvn.w	r1, #1
    8dec:	1a0a      	subs	r2, r1, r0
    8dee:	f04f 31ff 	mov.w	r1, #4294967295
    8df2:	eb61 0305 	sbc.w	r3, r1, r5
    8df6:	2a01      	cmp	r2, #1
    8df8:	f173 0300 	sbcs.w	r3, r3, #0
    8dfc:	da2a      	bge.n	8e54 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8dfe:	f004 f980 	bl	d102 <sys_clock_tick_get_32>
    8e02:	1906      	adds	r6, r0, r4
    8e04:	f04f 0320 	mov.w	r3, #32
    8e08:	f3ef 8811 	mrs	r8, BASEPRI
    8e0c:	f383 8812 	msr	BASEPRI_MAX, r3
    8e10:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    8e14:	4f11      	ldr	r7, [pc, #68]	; (8e5c <z_tick_sleep+0x8c>)
    8e16:	4b12      	ldr	r3, [pc, #72]	; (8e60 <z_tick_sleep+0x90>)
    8e18:	68b8      	ldr	r0, [r7, #8]
    8e1a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    8e1c:	f7ff fe9e 	bl	8b5c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8e20:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8e22:	4910      	ldr	r1, [pc, #64]	; (8e64 <z_tick_sleep+0x94>)
    8e24:	4622      	mov	r2, r4
    8e26:	462b      	mov	r3, r5
    8e28:	3018      	adds	r0, #24
    8e2a:	f000 f91d 	bl	9068 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8e2e:	68ba      	ldr	r2, [r7, #8]
    8e30:	7b53      	ldrb	r3, [r2, #13]
    8e32:	f043 0310 	orr.w	r3, r3, #16
    8e36:	7353      	strb	r3, [r2, #13]
    8e38:	4640      	mov	r0, r8
    8e3a:	f7fa fd59 	bl	38f0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8e3e:	f004 f960 	bl	d102 <sys_clock_tick_get_32>
    8e42:	1a30      	subs	r0, r6, r0
    8e44:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    8e48:	2801      	cmp	r0, #1
    8e4a:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    8e4e:	bfb8      	it	lt
    8e50:	2000      	movlt	r0, #0
    8e52:	e7c7      	b.n	8de4 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8e54:	f06f 0601 	mvn.w	r6, #1
    8e58:	1a36      	subs	r6, r6, r0
    8e5a:	e7d3      	b.n	8e04 <z_tick_sleep+0x34>
    8e5c:	20002bd4 	.word	0x20002bd4
    8e60:	20002c04 	.word	0x20002c04
    8e64:	0000cf4f 	.word	0x0000cf4f

00008e68 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    8e68:	b508      	push	{r3, lr}
    8e6a:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8e6c:	3301      	adds	r3, #1
    8e6e:	bf08      	it	eq
    8e70:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    8e74:	d106      	bne.n	8e84 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    8e76:	4b08      	ldr	r3, [pc, #32]	; (8e98 <z_impl_k_sleep+0x30>)
    8e78:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8e7a:	f7ff ff0d 	bl	8c98 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8e7e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8e82:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    8e84:	f7ff ffa4 	bl	8dd0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    8e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8e8c:	fb80 0103 	smull	r0, r1, r0, r3
    8e90:	0bc3      	lsrs	r3, r0, #15
    8e92:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
	return ret;
    8e96:	e7f4      	b.n	8e82 <z_impl_k_sleep+0x1a>
    8e98:	20002bd4 	.word	0x20002bd4

00008e9c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8e9c:	4b01      	ldr	r3, [pc, #4]	; (8ea4 <z_impl_z_current_get+0x8>)
    8e9e:	6898      	ldr	r0, [r3, #8]
    8ea0:	4770      	bx	lr
    8ea2:	bf00      	nop
    8ea4:	20002bd4 	.word	0x20002bd4

00008ea8 <z_impl_k_is_preempt_thread>:
    8ea8:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    8eac:	b93b      	cbnz	r3, 8ebe <z_impl_k_is_preempt_thread+0x16>
    8eae:	4b05      	ldr	r3, [pc, #20]	; (8ec4 <z_impl_k_is_preempt_thread+0x1c>)
    8eb0:	689b      	ldr	r3, [r3, #8]
    8eb2:	89d8      	ldrh	r0, [r3, #14]
    8eb4:	287f      	cmp	r0, #127	; 0x7f
    8eb6:	bf8c      	ite	hi
    8eb8:	2000      	movhi	r0, #0
    8eba:	2001      	movls	r0, #1
    8ebc:	4770      	bx	lr
    8ebe:	2000      	movs	r0, #0
}
    8ec0:	4770      	bx	lr
    8ec2:	bf00      	nop
    8ec4:	20002bd4 	.word	0x20002bd4

00008ec8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ecc:	4604      	mov	r4, r0
    8ece:	f04f 0320 	mov.w	r3, #32
    8ed2:	f3ef 8611 	mrs	r6, BASEPRI
    8ed6:	f383 8812 	msr	BASEPRI_MAX, r3
    8eda:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8ede:	7b43      	ldrb	r3, [r0, #13]
    8ee0:	071a      	lsls	r2, r3, #28
    8ee2:	d505      	bpl.n	8ef0 <z_thread_abort+0x28>
	__asm__ volatile(
    8ee4:	f386 8811 	msr	BASEPRI, r6
    8ee8:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8ef0:	f023 0220 	bic.w	r2, r3, #32
    8ef4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8ef8:	09d2      	lsrs	r2, r2, #7
    8efa:	d120      	bne.n	8f3e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8efc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    8efe:	68a3      	ldr	r3, [r4, #8]
    8f00:	b113      	cbz	r3, 8f08 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    8f02:	4620      	mov	r0, r4
    8f04:	f003 ffbc 	bl	ce80 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8f08:	f104 0018 	add.w	r0, r4, #24
    8f0c:	f004 f8c8 	bl	d0a0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8f10:	f104 0758 	add.w	r7, r4, #88	; 0x58
    8f14:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8f18:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8f1a:	42bd      	cmp	r5, r7
    8f1c:	d000      	beq.n	8f20 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8f1e:	b9b5      	cbnz	r5, 8f4e <z_thread_abort+0x86>
		update_cache(1);
    8f20:	2001      	movs	r0, #1
    8f22:	f7ff fd25 	bl	8970 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    8f26:	4b10      	ldr	r3, [pc, #64]	; (8f68 <z_thread_abort+0xa0>)
    8f28:	689b      	ldr	r3, [r3, #8]
    8f2a:	42a3      	cmp	r3, r4
    8f2c:	d1da      	bne.n	8ee4 <z_thread_abort+0x1c>
    8f2e:	f3ef 8305 	mrs	r3, IPSR
    8f32:	2b00      	cmp	r3, #0
    8f34:	d1d6      	bne.n	8ee4 <z_thread_abort+0x1c>
    8f36:	4630      	mov	r0, r6
    8f38:	f7fa fcda 	bl	38f0 <arch_swap>
	return ret;
    8f3c:	e7d2      	b.n	8ee4 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8f3e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8f42:	f043 0308 	orr.w	r3, r3, #8
    8f46:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8f48:	f003 ff92 	bl	ce70 <sys_dlist_remove>
}
    8f4c:	e7d7      	b.n	8efe <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    8f4e:	4628      	mov	r0, r5
    8f50:	f003 ff96 	bl	ce80 <unpend_thread_no_timeout>
    8f54:	f105 0018 	add.w	r0, r5, #24
    8f58:	f004 f8a2 	bl	d0a0 <z_abort_timeout>
    8f5c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    8f60:	4628      	mov	r0, r5
    8f62:	f7ff fda5 	bl	8ab0 <ready_thread>
    8f66:	e7d7      	b.n	8f18 <z_thread_abort+0x50>
    8f68:	20002bd4 	.word	0x20002bd4

00008f6c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    8f6c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8f6e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    8f72:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8f74:	e9cd 6700 	strd	r6, r7, [sp]
    8f78:	f7ff fe2e 	bl	8bd8 <z_pend_curr>

	if (data != NULL) {
    8f7c:	b11c      	cbz	r4, 8f86 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    8f7e:	4b03      	ldr	r3, [pc, #12]	; (8f8c <z_sched_wait+0x20>)
    8f80:	689b      	ldr	r3, [r3, #8]
    8f82:	695b      	ldr	r3, [r3, #20]
    8f84:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    8f86:	b002      	add	sp, #8
    8f88:	bdd0      	pop	{r4, r6, r7, pc}
    8f8a:	bf00      	nop
    8f8c:	20002bd4 	.word	0x20002bd4

00008f90 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    8f90:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    8f92:	4806      	ldr	r0, [pc, #24]	; (8fac <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    8f94:	4a06      	ldr	r2, [pc, #24]	; (8fb0 <z_data_copy+0x20>)
    8f96:	4907      	ldr	r1, [pc, #28]	; (8fb4 <z_data_copy+0x24>)
    8f98:	1a12      	subs	r2, r2, r0
    8f9a:	f003 f838 	bl	c00e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8f9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8fa2:	4a05      	ldr	r2, [pc, #20]	; (8fb8 <z_data_copy+0x28>)
    8fa4:	4905      	ldr	r1, [pc, #20]	; (8fbc <z_data_copy+0x2c>)
    8fa6:	4806      	ldr	r0, [pc, #24]	; (8fc0 <z_data_copy+0x30>)
    8fa8:	f003 b831 	b.w	c00e <memcpy>
    8fac:	20000000 	.word	0x20000000
    8fb0:	20000734 	.word	0x20000734
    8fb4:	0000f4bc 	.word	0x0000f4bc
    8fb8:	00000000 	.word	0x00000000
    8fbc:	0000f4bc 	.word	0x0000f4bc
    8fc0:	20000000 	.word	0x20000000

00008fc4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8fc4:	4b03      	ldr	r3, [pc, #12]	; (8fd4 <elapsed+0x10>)
    8fc6:	681b      	ldr	r3, [r3, #0]
    8fc8:	b90b      	cbnz	r3, 8fce <elapsed+0xa>
    8fca:	f7fd b871 	b.w	60b0 <sys_clock_elapsed>
}
    8fce:	2000      	movs	r0, #0
    8fd0:	4770      	bx	lr
    8fd2:	bf00      	nop
    8fd4:	20002c10 	.word	0x20002c10

00008fd8 <remove_timeout>:
{
    8fd8:	b530      	push	{r4, r5, lr}
    8fda:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8fdc:	b168      	cbz	r0, 8ffa <remove_timeout+0x22>
    8fde:	4a0a      	ldr	r2, [pc, #40]	; (9008 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    8fe0:	6852      	ldr	r2, [r2, #4]
    8fe2:	4290      	cmp	r0, r2
    8fe4:	d009      	beq.n	8ffa <remove_timeout+0x22>
	if (next(t) != NULL) {
    8fe6:	b143      	cbz	r3, 8ffa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    8fe8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    8fec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    8ff0:	1912      	adds	r2, r2, r4
    8ff2:	eb45 0101 	adc.w	r1, r5, r1
    8ff6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8ffa:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    8ffc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8ffe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9000:	2300      	movs	r3, #0
	node->prev = NULL;
    9002:	e9c0 3300 	strd	r3, r3, [r0]
}
    9006:	bd30      	pop	{r4, r5, pc}
    9008:	20000424 	.word	0x20000424

0000900c <next_timeout>:
	return list->head == list;
    900c:	4b14      	ldr	r3, [pc, #80]	; (9060 <next_timeout+0x54>)

static int32_t next_timeout(void)
{
    900e:	b510      	push	{r4, lr}
    9010:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9012:	429c      	cmp	r4, r3
    9014:	bf08      	it	eq
    9016:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    9018:	f7ff ffd4 	bl	8fc4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    901c:	b1d4      	cbz	r4, 9054 <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    901e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9022:	1a12      	subs	r2, r2, r0
    9024:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    9028:	2a01      	cmp	r2, #1
    902a:	f173 0100 	sbcs.w	r1, r3, #0
    902e:	db14      	blt.n	905a <next_timeout+0x4e>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    9030:	4610      	mov	r0, r2
    9032:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    9036:	4619      	mov	r1, r3
    9038:	4282      	cmp	r2, r0
    903a:	f04f 0300 	mov.w	r3, #0
    903e:	eb73 0401 	sbcs.w	r4, r3, r1
    9042:	da00      	bge.n	9046 <next_timeout+0x3a>
    9044:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    9046:	4b07      	ldr	r3, [pc, #28]	; (9064 <next_timeout+0x58>)
    9048:	691b      	ldr	r3, [r3, #16]
    904a:	b113      	cbz	r3, 9052 <next_timeout+0x46>
    904c:	4298      	cmp	r0, r3
    904e:	bfa8      	it	ge
    9050:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    9052:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    9054:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9058:	e7f5      	b.n	9046 <next_timeout+0x3a>
    905a:	2000      	movs	r0, #0
    905c:	e7f3      	b.n	9046 <next_timeout+0x3a>
    905e:	bf00      	nop
    9060:	20000424 	.word	0x20000424
    9064:	20002bd4 	.word	0x20002bd4

00009068 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9068:	f1b3 3fff 	cmp.w	r3, #4294967295
    906c:	bf08      	it	eq
    906e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    9072:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9076:	4604      	mov	r4, r0
    9078:	4692      	mov	sl, r2
    907a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    907c:	d073      	beq.n	9166 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    907e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    9080:	f04f 0320 	mov.w	r3, #32
    9084:	f3ef 8511 	mrs	r5, BASEPRI
    9088:	f383 8812 	msr	BASEPRI_MAX, r3
    908c:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    9090:	f06f 0301 	mvn.w	r3, #1
    9094:	ebb3 080a 	subs.w	r8, r3, sl
    9098:	f04f 32ff 	mov.w	r2, #4294967295
    909c:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    90a0:	f1b8 0f00 	cmp.w	r8, #0
    90a4:	f179 0100 	sbcs.w	r1, r9, #0
    90a8:	db1c      	blt.n	90e4 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    90aa:	4830      	ldr	r0, [pc, #192]	; (916c <z_add_timeout+0x104>)
    90ac:	e9d0 1000 	ldrd	r1, r0, [r0]
    90b0:	1a5b      	subs	r3, r3, r1
    90b2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    90b6:	ebb3 060a 	subs.w	r6, r3, sl
    90ba:	eb62 070b 	sbc.w	r7, r2, fp
    90be:	2e01      	cmp	r6, #1
    90c0:	f177 0300 	sbcs.w	r3, r7, #0
    90c4:	bfbc      	itt	lt
    90c6:	2601      	movlt	r6, #1
    90c8:	2700      	movlt	r7, #0
    90ca:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    90ce:	4a28      	ldr	r2, [pc, #160]	; (9170 <z_add_timeout+0x108>)
    90d0:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    90d4:	4293      	cmp	r3, r2
    90d6:	d11e      	bne.n	9116 <z_add_timeout+0xae>
	node->prev = tail;
    90d8:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    90dc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    90e0:	6054      	str	r4, [r2, #4]
}
    90e2:	e02d      	b.n	9140 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    90e4:	f7ff ff6e 	bl	8fc4 <elapsed>
    90e8:	f11a 0301 	adds.w	r3, sl, #1
    90ec:	9300      	str	r3, [sp, #0]
    90ee:	f14b 0300 	adc.w	r3, fp, #0
    90f2:	9301      	str	r3, [sp, #4]
    90f4:	e9dd 2300 	ldrd	r2, r3, [sp]
    90f8:	1812      	adds	r2, r2, r0
    90fa:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    90fe:	e9c4 2304 	strd	r2, r3, [r4, #16]
    9102:	e7e4      	b.n	90ce <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    9104:	ebb6 0008 	subs.w	r0, r6, r8
    9108:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    910c:	4563      	cmp	r3, ip
    910e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    9112:	d0e1      	beq.n	90d8 <z_add_timeout+0x70>
    9114:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    9116:	2b00      	cmp	r3, #0
    9118:	d0de      	beq.n	90d8 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    911a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    911e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    9122:	4546      	cmp	r6, r8
    9124:	eb77 0109 	sbcs.w	r1, r7, r9
    9128:	daec      	bge.n	9104 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    912a:	ebb8 0006 	subs.w	r0, r8, r6
    912e:	eb69 0107 	sbc.w	r1, r9, r7
    9132:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    9136:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    9138:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    913c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    913e:	605c      	str	r4, [r3, #4]
	return list->head == list;
    9140:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9142:	4293      	cmp	r3, r2
    9144:	d00b      	beq.n	915e <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    9146:	429c      	cmp	r4, r3
    9148:	d109      	bne.n	915e <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    914a:	f7ff ff5f 	bl	900c <next_timeout>

			if (next_time == 0 ||
    914e:	b118      	cbz	r0, 9158 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    9150:	4b08      	ldr	r3, [pc, #32]	; (9174 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    9152:	691b      	ldr	r3, [r3, #16]
    9154:	4283      	cmp	r3, r0
    9156:	d002      	beq.n	915e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    9158:	2100      	movs	r1, #0
    915a:	f7fc ff79 	bl	6050 <sys_clock_set_timeout>
	__asm__ volatile(
    915e:	f385 8811 	msr	BASEPRI, r5
    9162:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    9166:	b003      	add	sp, #12
    9168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    916c:	20000af0 	.word	0x20000af0
    9170:	20000424 	.word	0x20000424
    9174:	20002bd4 	.word	0x20002bd4

00009178 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    9178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    917c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    917e:	f7ff fc55 	bl	8a2c <z_time_slice>
	__asm__ volatile(
    9182:	f04f 0320 	mov.w	r3, #32
    9186:	f3ef 8411 	mrs	r4, BASEPRI
    918a:	f383 8812 	msr	BASEPRI_MAX, r3
    918e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    9192:	4d2c      	ldr	r5, [pc, #176]	; (9244 <sys_clock_announce+0xcc>)
    9194:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 9248 <sys_clock_announce+0xd0>
	return list->head == list;
    9198:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 924c <sys_clock_announce+0xd4>
    919c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    919e:	4651      	mov	r1, sl
    91a0:	f8d5 c000 	ldr.w	ip, [r5]
    91a4:	f8db 0000 	ldr.w	r0, [fp]
    91a8:	4662      	mov	r2, ip
    91aa:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    91ac:	4558      	cmp	r0, fp
    91ae:	e9da 8900 	ldrd	r8, r9, [sl]
    91b2:	e9cd 2300 	strd	r2, r3, [sp]
    91b6:	d00d      	beq.n	91d4 <sys_clock_announce+0x5c>
    91b8:	b160      	cbz	r0, 91d4 <sys_clock_announce+0x5c>
    91ba:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    91be:	45b4      	cmp	ip, r6
    91c0:	41bb      	sbcs	r3, r7
    91c2:	da1e      	bge.n	9202 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    91c4:	9b00      	ldr	r3, [sp, #0]
    91c6:	ebb6 0c03 	subs.w	ip, r6, r3
    91ca:	9b01      	ldr	r3, [sp, #4]
    91cc:	eb67 0603 	sbc.w	r6, r7, r3
    91d0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    91d4:	9b00      	ldr	r3, [sp, #0]
    91d6:	eb13 0208 	adds.w	r2, r3, r8
    91da:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    91dc:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    91e0:	eb43 0309 	adc.w	r3, r3, r9
    91e4:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    91e8:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    91ea:	f7ff ff0f 	bl	900c <next_timeout>
    91ee:	4631      	mov	r1, r6
    91f0:	f7fc ff2e 	bl	6050 <sys_clock_set_timeout>
	__asm__ volatile(
    91f4:	f384 8811 	msr	BASEPRI, r4
    91f8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    91fc:	b003      	add	sp, #12
    91fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    9202:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    9206:	f04f 0200 	mov.w	r2, #0
    920a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    920e:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    9212:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    9216:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    921a:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    921e:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    9220:	f7ff feda 	bl	8fd8 <remove_timeout>
    9224:	f384 8811 	msr	BASEPRI, r4
    9228:	f3bf 8f6f 	isb	sy
		t->fn(t);
    922c:	6883      	ldr	r3, [r0, #8]
    922e:	4798      	blx	r3
	__asm__ volatile(
    9230:	f04f 0320 	mov.w	r3, #32
    9234:	f3ef 8411 	mrs	r4, BASEPRI
    9238:	f383 8812 	msr	BASEPRI_MAX, r3
    923c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    9240:	4901      	ldr	r1, [pc, #4]	; (9248 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    9242:	e7ad      	b.n	91a0 <sys_clock_announce+0x28>
    9244:	20002c10 	.word	0x20002c10
    9248:	20000af0 	.word	0x20000af0
    924c:	20000424 	.word	0x20000424

00009250 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9250:	b510      	push	{r4, lr}
    9252:	f04f 0320 	mov.w	r3, #32
    9256:	f3ef 8411 	mrs	r4, BASEPRI
    925a:	f383 8812 	msr	BASEPRI_MAX, r3
    925e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    9262:	f7fc ff25 	bl	60b0 <sys_clock_elapsed>
    9266:	4b06      	ldr	r3, [pc, #24]	; (9280 <sys_clock_tick_get+0x30>)
    9268:	e9d3 2300 	ldrd	r2, r3, [r3]
    926c:	1812      	adds	r2, r2, r0
    926e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    9272:	f384 8811 	msr	BASEPRI, r4
    9276:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    927a:	4610      	mov	r0, r2
    927c:	4619      	mov	r1, r3
    927e:	bd10      	pop	{r4, pc}
    9280:	20000af0 	.word	0x20000af0

00009284 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9286:	4604      	mov	r4, r0
	__asm__ volatile(
    9288:	f04f 0320 	mov.w	r3, #32
    928c:	f3ef 8511 	mrs	r5, BASEPRI
    9290:	f383 8812 	msr	BASEPRI_MAX, r3
    9294:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9298:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    929c:	1c56      	adds	r6, r2, #1
    929e:	f143 0700 	adc.w	r7, r3, #0
    92a2:	2f00      	cmp	r7, #0
    92a4:	bf08      	it	eq
    92a6:	2e02      	cmpeq	r6, #2
    92a8:	d302      	bcc.n	92b0 <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    92aa:	4917      	ldr	r1, [pc, #92]	; (9308 <z_timer_expiration_handler+0x84>)
    92ac:	f7ff fedc 	bl	9068 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    92b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    92b2:	3301      	adds	r3, #1
    92b4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    92b6:	6a23      	ldr	r3, [r4, #32]
    92b8:	b173      	cbz	r3, 92d8 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    92ba:	f385 8811 	msr	BASEPRI, r5
    92be:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    92c2:	6a23      	ldr	r3, [r4, #32]
    92c4:	4620      	mov	r0, r4
    92c6:	4798      	blx	r3
	__asm__ volatile(
    92c8:	f04f 0320 	mov.w	r3, #32
    92cc:	f3ef 8511 	mrs	r5, BASEPRI
    92d0:	f383 8812 	msr	BASEPRI_MAX, r3
    92d4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    92d8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    92dc:	42a6      	cmp	r6, r4
    92de:	d000      	beq.n	92e2 <z_timer_expiration_handler+0x5e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    92e0:	b926      	cbnz	r6, 92ec <z_timer_expiration_handler+0x68>
	__asm__ volatile(
    92e2:	f385 8811 	msr	BASEPRI, r5
    92e6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    92ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    92ec:	4630      	mov	r0, r6
    92ee:	f003 fdda 	bl	cea6 <z_unpend_thread_no_timeout>
    92f2:	2300      	movs	r3, #0
    92f4:	67f3      	str	r3, [r6, #124]	; 0x7c
    92f6:	f385 8811 	msr	BASEPRI, r5
    92fa:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    92fe:	4630      	mov	r0, r6
}
    9300:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    9304:	f003 be13 	b.w	cf2e <z_ready_thread>
    9308:	00009285 	.word	0x00009285

0000930c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    930c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    9310:	4619      	mov	r1, r3
    9312:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9314:	1c4c      	adds	r4, r1, #1
{
    9316:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9318:	bf08      	it	eq
    931a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    931e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    9322:	4680      	mov	r8, r0
    9324:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9326:	d04c      	beq.n	93c2 <z_impl_k_timer_start+0xb6>
    9328:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    932a:	1c6b      	adds	r3, r5, #1
    932c:	bf08      	it	eq
    932e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    9332:	4614      	mov	r4, r2
    9334:	d019      	beq.n	936a <z_impl_k_timer_start+0x5e>
    9336:	ea54 0305 	orrs.w	r3, r4, r5
    933a:	d016      	beq.n	936a <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    933c:	f06f 0301 	mvn.w	r3, #1
    9340:	ebb3 0a02 	subs.w	sl, r3, r2
    9344:	f04f 33ff 	mov.w	r3, #4294967295
    9348:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    934c:	f1ba 0f00 	cmp.w	sl, #0
    9350:	f17b 0300 	sbcs.w	r3, fp, #0
    9354:	da09      	bge.n	936a <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    9356:	f112 34ff 	adds.w	r4, r2, #4294967295
    935a:	f145 35ff 	adc.w	r5, r5, #4294967295
    935e:	2c01      	cmp	r4, #1
    9360:	f175 0300 	sbcs.w	r3, r5, #0
    9364:	bfbc      	itt	lt
    9366:	2401      	movlt	r4, #1
    9368:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    936a:	f06f 0301 	mvn.w	r3, #1
    936e:	1a1b      	subs	r3, r3, r0
    9370:	9300      	str	r3, [sp, #0]
    9372:	f04f 33ff 	mov.w	r3, #4294967295
    9376:	eb63 0301 	sbc.w	r3, r3, r1
    937a:	9301      	str	r3, [sp, #4]
    937c:	e9dd 2300 	ldrd	r2, r3, [sp]
    9380:	2a00      	cmp	r2, #0
    9382:	f173 0300 	sbcs.w	r3, r3, #0
    9386:	da0c      	bge.n	93a2 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    9388:	f110 38ff 	adds.w	r8, r0, #4294967295
    938c:	f141 39ff 	adc.w	r9, r1, #4294967295
    9390:	f1b8 0f00 	cmp.w	r8, #0
    9394:	f179 0300 	sbcs.w	r3, r9, #0
    9398:	bfbc      	itt	lt
    939a:	f04f 0800 	movlt.w	r8, #0
    939e:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    93a2:	4630      	mov	r0, r6
    93a4:	f003 fe7c 	bl	d0a0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    93a8:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    93aa:	4907      	ldr	r1, [pc, #28]	; (93c8 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    93ac:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    93ae:	4642      	mov	r2, r8
    93b0:	464b      	mov	r3, r9
    93b2:	4630      	mov	r0, r6
	timer->period = period;
    93b4:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    93b8:	b002      	add	sp, #8
    93ba:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    93be:	f7ff be53 	b.w	9068 <z_add_timeout>
}
    93c2:	b002      	add	sp, #8
    93c4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    93c8:	00009285 	.word	0x00009285

000093cc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    93cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    93d0:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    93d2:	4b29      	ldr	r3, [pc, #164]	; (9478 <z_impl_k_poll+0xac>)
    93d4:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
    93d6:	2301      	movs	r3, #1
    93d8:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
    93dc:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    93e0:	ea52 0307 	orrs.w	r3, r2, r7
{
    93e4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    93e6:	bf0c      	ite	eq
    93e8:	2301      	moveq	r3, #1
    93ea:	2300      	movne	r3, #0
    93ec:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
    93f0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    93f2:	f003 ff44 	bl	d27e <register_events>
    93f6:	4681      	mov	r9, r0
	__asm__ volatile(
    93f8:	f04f 0320 	mov.w	r3, #32
    93fc:	f3ef 8a11 	mrs	sl, BASEPRI
    9400:	f383 8812 	msr	BASEPRI_MAX, r3
    9404:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    9408:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
    940c:	b964      	cbnz	r4, 9428 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    940e:	4601      	mov	r1, r0
    9410:	4652      	mov	r2, sl
    9412:	4640      	mov	r0, r8
    9414:	f003 fed1 	bl	d1ba <clear_event_registrations>
	__asm__ volatile(
    9418:	f38a 8811 	msr	BASEPRI, sl
    941c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    9420:	4620      	mov	r0, r4
    9422:	b002      	add	sp, #8
    9424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    9428:	2300      	movs	r3, #0
    942a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    942e:	ea56 0307 	orrs.w	r3, r6, r7
    9432:	d106      	bne.n	9442 <z_impl_k_poll+0x76>
    9434:	f38a 8811 	msr	BASEPRI, sl
    9438:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    943c:	f06f 040a 	mvn.w	r4, #10
    9440:	e7ee      	b.n	9420 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    9442:	e9cd 6700 	strd	r6, r7, [sp]
    9446:	4a0d      	ldr	r2, [pc, #52]	; (947c <z_impl_k_poll+0xb0>)
    9448:	480d      	ldr	r0, [pc, #52]	; (9480 <z_impl_k_poll+0xb4>)
    944a:	4651      	mov	r1, sl
    944c:	f7ff fbc4 	bl	8bd8 <z_pend_curr>
    9450:	4604      	mov	r4, r0
	__asm__ volatile(
    9452:	f04f 0320 	mov.w	r3, #32
    9456:	f3ef 8511 	mrs	r5, BASEPRI
    945a:	f383 8812 	msr	BASEPRI_MAX, r3
    945e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    9462:	462a      	mov	r2, r5
    9464:	4649      	mov	r1, r9
    9466:	4640      	mov	r0, r8
    9468:	f003 fea7 	bl	d1ba <clear_event_registrations>
	__asm__ volatile(
    946c:	f385 8811 	msr	BASEPRI, r5
    9470:	f3bf 8f6f 	isb	sy
	return swap_rc;
    9474:	e7d4      	b.n	9420 <z_impl_k_poll+0x54>
    9476:	bf00      	nop
    9478:	20002bd4 	.word	0x20002bd4
    947c:	2000042c 	.word	0x2000042c
    9480:	2000321c 	.word	0x2000321c

00009484 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    9484:	b538      	push	{r3, r4, r5, lr}
    9486:	4603      	mov	r3, r0
	__asm__ volatile(
    9488:	f04f 0220 	mov.w	r2, #32
    948c:	f3ef 8511 	mrs	r5, BASEPRI
    9490:	f382 8812 	msr	BASEPRI_MAX, r2
    9494:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    9498:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    949a:	2101      	movs	r1, #1
    949c:	6081      	str	r1, [r0, #8]
	return list->head == list;
    949e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    94a0:	4283      	cmp	r3, r0
    94a2:	d106      	bne.n	94b2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    94a4:	f385 8811 	msr	BASEPRI, r5
    94a8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    94ac:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    94ae:	4620      	mov	r0, r4
    94b0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    94b2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    94b6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    94b8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    94ba:	2300      	movs	r3, #0
	node->prev = NULL;
    94bc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    94c0:	f003 ff54 	bl	d36c <signal_poll_event>
	z_reschedule(&lock, key);
    94c4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    94c6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    94c8:	4801      	ldr	r0, [pc, #4]	; (94d0 <z_impl_k_poll_signal_raise+0x4c>)
    94ca:	f7ff fa2b 	bl	8924 <z_reschedule>
	return rc;
    94ce:	e7ee      	b.n	94ae <z_impl_k_poll_signal_raise+0x2a>
    94d0:	2000321c 	.word	0x2000321c

000094d4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    94d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    94d6:	4606      	mov	r6, r0
    94d8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    94da:	f003 fbf1 	bl	ccc0 <k_is_in_isr>
    94de:	b980      	cbnz	r0, 9502 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    94e0:	4b0b      	ldr	r3, [pc, #44]	; (9510 <z_thread_aligned_alloc+0x3c>)
    94e2:	689b      	ldr	r3, [r3, #8]
    94e4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
    94e6:	b184      	cbz	r4, 950a <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    94e8:	2204      	movs	r2, #4
    94ea:	18aa      	adds	r2, r5, r2
    94ec:	d209      	bcs.n	9502 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    94ee:	2000      	movs	r0, #0
    94f0:	2100      	movs	r1, #0
    94f2:	e9cd 0100 	strd	r0, r1, [sp]
    94f6:	f046 0104 	orr.w	r1, r6, #4
    94fa:	4620      	mov	r0, r4
    94fc:	f003 fb38 	bl	cb70 <k_heap_aligned_alloc>
	if (mem == NULL) {
    9500:	b908      	cbnz	r0, 9506 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    9502:	2400      	movs	r4, #0
	}

	return ret;
    9504:	e001      	b.n	950a <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
    9506:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    9508:	1d04      	adds	r4, r0, #4
}
    950a:	4620      	mov	r0, r4
    950c:	b002      	add	sp, #8
    950e:	bd70      	pop	{r4, r5, r6, pc}
    9510:	20002bd4 	.word	0x20002bd4

00009514 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    9514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    9516:	4b09      	ldr	r3, [pc, #36]	; (953c <k_sys_work_q_init+0x28>)
    9518:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    951a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    951c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    951e:	9300      	str	r3, [sp, #0]
    9520:	4907      	ldr	r1, [pc, #28]	; (9540 <k_sys_work_q_init+0x2c>)
    9522:	4808      	ldr	r0, [pc, #32]	; (9544 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    9524:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    9528:	f04f 33ff 	mov.w	r3, #4294967295
    952c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9530:	f7ff f978 	bl	8824 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    9534:	4620      	mov	r0, r4
    9536:	b004      	add	sp, #16
    9538:	bd10      	pop	{r4, pc}
    953a:	bf00      	nop
    953c:	0000f4b3 	.word	0x0000f4b3
    9540:	20006f80 	.word	0x20006f80
    9544:	20000af8 	.word	0x20000af8

00009548 <nrf_cc3xx_platform_init_no_rng>:
    9548:	b510      	push	{r4, lr}
    954a:	4c0a      	ldr	r4, [pc, #40]	; (9574 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    954c:	6823      	ldr	r3, [r4, #0]
    954e:	b11b      	cbz	r3, 9558 <nrf_cc3xx_platform_init_no_rng+0x10>
    9550:	2301      	movs	r3, #1
    9552:	6023      	str	r3, [r4, #0]
    9554:	2000      	movs	r0, #0
    9556:	bd10      	pop	{r4, pc}
    9558:	f000 f8e0 	bl	971c <CC_LibInitNoRng>
    955c:	2800      	cmp	r0, #0
    955e:	d0f7      	beq.n	9550 <nrf_cc3xx_platform_init_no_rng+0x8>
    9560:	3801      	subs	r0, #1
    9562:	2806      	cmp	r0, #6
    9564:	d803      	bhi.n	956e <nrf_cc3xx_platform_init_no_rng+0x26>
    9566:	4b04      	ldr	r3, [pc, #16]	; (9578 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9568:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    956c:	bd10      	pop	{r4, pc}
    956e:	4803      	ldr	r0, [pc, #12]	; (957c <nrf_cc3xx_platform_init_no_rng+0x34>)
    9570:	bd10      	pop	{r4, pc}
    9572:	bf00      	nop
    9574:	20002c14 	.word	0x20002c14
    9578:	0000db9c 	.word	0x0000db9c
    957c:	ffff8ffe 	.word	0xffff8ffe

00009580 <nrf_cc3xx_platform_abort>:
    9580:	f3bf 8f4f 	dsb	sy
    9584:	4905      	ldr	r1, [pc, #20]	; (959c <nrf_cc3xx_platform_abort+0x1c>)
    9586:	4b06      	ldr	r3, [pc, #24]	; (95a0 <nrf_cc3xx_platform_abort+0x20>)
    9588:	68ca      	ldr	r2, [r1, #12]
    958a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    958e:	4313      	orrs	r3, r2
    9590:	60cb      	str	r3, [r1, #12]
    9592:	f3bf 8f4f 	dsb	sy
    9596:	bf00      	nop
    9598:	e7fd      	b.n	9596 <nrf_cc3xx_platform_abort+0x16>
    959a:	bf00      	nop
    959c:	e000ed00 	.word	0xe000ed00
    95a0:	05fa0004 	.word	0x05fa0004

000095a4 <CC_PalAbort>:
    95a4:	b4f0      	push	{r4, r5, r6, r7}
    95a6:	4f09      	ldr	r7, [pc, #36]	; (95cc <CC_PalAbort+0x28>)
    95a8:	4e09      	ldr	r6, [pc, #36]	; (95d0 <CC_PalAbort+0x2c>)
    95aa:	4c0a      	ldr	r4, [pc, #40]	; (95d4 <CC_PalAbort+0x30>)
    95ac:	4a0a      	ldr	r2, [pc, #40]	; (95d8 <CC_PalAbort+0x34>)
    95ae:	4d0b      	ldr	r5, [pc, #44]	; (95dc <CC_PalAbort+0x38>)
    95b0:	490b      	ldr	r1, [pc, #44]	; (95e0 <CC_PalAbort+0x3c>)
    95b2:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    95b6:	603b      	str	r3, [r7, #0]
    95b8:	6852      	ldr	r2, [r2, #4]
    95ba:	6033      	str	r3, [r6, #0]
    95bc:	6023      	str	r3, [r4, #0]
    95be:	2400      	movs	r4, #0
    95c0:	602b      	str	r3, [r5, #0]
    95c2:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    95c6:	bcf0      	pop	{r4, r5, r6, r7}
    95c8:	4710      	bx	r2
    95ca:	bf00      	nop
    95cc:	5002b400 	.word	0x5002b400
    95d0:	5002b404 	.word	0x5002b404
    95d4:	5002b408 	.word	0x5002b408
    95d8:	20000434 	.word	0x20000434
    95dc:	5002b40c 	.word	0x5002b40c
    95e0:	5002a000 	.word	0x5002a000

000095e4 <nrf_cc3xx_platform_set_abort>:
    95e4:	e9d0 1200 	ldrd	r1, r2, [r0]
    95e8:	4b01      	ldr	r3, [pc, #4]	; (95f0 <nrf_cc3xx_platform_set_abort+0xc>)
    95ea:	e9c3 1200 	strd	r1, r2, [r3]
    95ee:	4770      	bx	lr
    95f0:	20000434 	.word	0x20000434

000095f4 <mutex_free>:
    95f4:	b510      	push	{r4, lr}
    95f6:	4604      	mov	r4, r0
    95f8:	b130      	cbz	r0, 9608 <mutex_free+0x14>
    95fa:	6863      	ldr	r3, [r4, #4]
    95fc:	06db      	lsls	r3, r3, #27
    95fe:	d502      	bpl.n	9606 <mutex_free+0x12>
    9600:	2300      	movs	r3, #0
    9602:	6023      	str	r3, [r4, #0]
    9604:	6063      	str	r3, [r4, #4]
    9606:	bd10      	pop	{r4, pc}
    9608:	4b02      	ldr	r3, [pc, #8]	; (9614 <mutex_free+0x20>)
    960a:	4803      	ldr	r0, [pc, #12]	; (9618 <mutex_free+0x24>)
    960c:	685b      	ldr	r3, [r3, #4]
    960e:	4798      	blx	r3
    9610:	e7f3      	b.n	95fa <mutex_free+0x6>
    9612:	bf00      	nop
    9614:	20000434 	.word	0x20000434
    9618:	0000dbb8 	.word	0x0000dbb8

0000961c <mutex_unlock>:
    961c:	b168      	cbz	r0, 963a <mutex_unlock+0x1e>
    961e:	6843      	ldr	r3, [r0, #4]
    9620:	b13b      	cbz	r3, 9632 <mutex_unlock+0x16>
    9622:	06db      	lsls	r3, r3, #27
    9624:	d507      	bpl.n	9636 <mutex_unlock+0x1a>
    9626:	f3bf 8f5f 	dmb	sy
    962a:	2300      	movs	r3, #0
    962c:	6003      	str	r3, [r0, #0]
    962e:	4618      	mov	r0, r3
    9630:	4770      	bx	lr
    9632:	4803      	ldr	r0, [pc, #12]	; (9640 <mutex_unlock+0x24>)
    9634:	4770      	bx	lr
    9636:	4803      	ldr	r0, [pc, #12]	; (9644 <mutex_unlock+0x28>)
    9638:	4770      	bx	lr
    963a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    963e:	4770      	bx	lr
    9640:	ffff8fea 	.word	0xffff8fea
    9644:	ffff8fe9 	.word	0xffff8fe9

00009648 <mutex_init>:
    9648:	b510      	push	{r4, lr}
    964a:	4604      	mov	r4, r0
    964c:	b120      	cbz	r0, 9658 <mutex_init+0x10>
    964e:	2200      	movs	r2, #0
    9650:	2311      	movs	r3, #17
    9652:	6022      	str	r2, [r4, #0]
    9654:	6063      	str	r3, [r4, #4]
    9656:	bd10      	pop	{r4, pc}
    9658:	4801      	ldr	r0, [pc, #4]	; (9660 <mutex_init+0x18>)
    965a:	f7ff ffa3 	bl	95a4 <CC_PalAbort>
    965e:	e7f6      	b.n	964e <mutex_init+0x6>
    9660:	0000dbe0 	.word	0x0000dbe0

00009664 <mutex_lock>:
    9664:	b1c0      	cbz	r0, 9698 <mutex_lock+0x34>
    9666:	6843      	ldr	r3, [r0, #4]
    9668:	b1a3      	cbz	r3, 9694 <mutex_lock+0x30>
    966a:	06db      	lsls	r3, r3, #27
    966c:	d510      	bpl.n	9690 <mutex_lock+0x2c>
    966e:	2201      	movs	r2, #1
    9670:	f3bf 8f5b 	dmb	ish
    9674:	e850 3f00 	ldrex	r3, [r0]
    9678:	e840 2100 	strex	r1, r2, [r0]
    967c:	2900      	cmp	r1, #0
    967e:	d1f9      	bne.n	9674 <mutex_lock+0x10>
    9680:	f3bf 8f5b 	dmb	ish
    9684:	2b01      	cmp	r3, #1
    9686:	d0f3      	beq.n	9670 <mutex_lock+0xc>
    9688:	f3bf 8f5f 	dmb	sy
    968c:	2000      	movs	r0, #0
    968e:	4770      	bx	lr
    9690:	4803      	ldr	r0, [pc, #12]	; (96a0 <mutex_lock+0x3c>)
    9692:	4770      	bx	lr
    9694:	4803      	ldr	r0, [pc, #12]	; (96a4 <mutex_lock+0x40>)
    9696:	4770      	bx	lr
    9698:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    969c:	4770      	bx	lr
    969e:	bf00      	nop
    96a0:	ffff8fe9 	.word	0xffff8fe9
    96a4:	ffff8fea 	.word	0xffff8fea

000096a8 <nrf_cc3xx_platform_set_mutexes>:
    96a8:	b570      	push	{r4, r5, r6, lr}
    96aa:	e9d0 2300 	ldrd	r2, r3, [r0]
    96ae:	4c13      	ldr	r4, [pc, #76]	; (96fc <nrf_cc3xx_platform_set_mutexes+0x54>)
    96b0:	4d13      	ldr	r5, [pc, #76]	; (9700 <nrf_cc3xx_platform_set_mutexes+0x58>)
    96b2:	e9c4 2300 	strd	r2, r3, [r4]
    96b6:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    96ba:	e9c4 6302 	strd	r6, r3, [r4, #8]
    96be:	4b11      	ldr	r3, [pc, #68]	; (9704 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    96c0:	6808      	ldr	r0, [r1, #0]
    96c2:	6018      	str	r0, [r3, #0]
    96c4:	6848      	ldr	r0, [r1, #4]
    96c6:	6058      	str	r0, [r3, #4]
    96c8:	6888      	ldr	r0, [r1, #8]
    96ca:	6098      	str	r0, [r3, #8]
    96cc:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    96d0:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    96d4:	60de      	str	r6, [r3, #12]
    96d6:	6118      	str	r0, [r3, #16]
    96d8:	06cb      	lsls	r3, r1, #27
    96da:	d50d      	bpl.n	96f8 <nrf_cc3xx_platform_set_mutexes+0x50>
    96dc:	2300      	movs	r3, #0
    96de:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    96e2:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    96e6:	f505 7088 	add.w	r0, r5, #272	; 0x110
    96ea:	4790      	blx	r2
    96ec:	6823      	ldr	r3, [r4, #0]
    96ee:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    96f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    96f6:	4718      	bx	r3
    96f8:	bd70      	pop	{r4, r5, r6, pc}
    96fa:	bf00      	nop
    96fc:	20000444 	.word	0x20000444
    9700:	2000321c 	.word	0x2000321c
    9704:	20000454 	.word	0x20000454

00009708 <mbedtls_platform_zeroize>:
    9708:	b138      	cbz	r0, 971a <mbedtls_platform_zeroize+0x12>
    970a:	b131      	cbz	r1, 971a <mbedtls_platform_zeroize+0x12>
    970c:	4401      	add	r1, r0
    970e:	2200      	movs	r2, #0
    9710:	4603      	mov	r3, r0
    9712:	3001      	adds	r0, #1
    9714:	4288      	cmp	r0, r1
    9716:	701a      	strb	r2, [r3, #0]
    9718:	d1fa      	bne.n	9710 <mbedtls_platform_zeroize+0x8>
    971a:	4770      	bx	lr

0000971c <CC_LibInitNoRng>:
    971c:	b510      	push	{r4, lr}
    971e:	f000 f833 	bl	9788 <CC_HalInit>
    9722:	b120      	cbz	r0, 972e <CC_LibInitNoRng+0x12>
    9724:	2403      	movs	r4, #3
    9726:	f000 f867 	bl	97f8 <CC_PalTerminate>
    972a:	4620      	mov	r0, r4
    972c:	bd10      	pop	{r4, pc}
    972e:	f000 f835 	bl	979c <CC_PalInit>
    9732:	b990      	cbnz	r0, 975a <CC_LibInitNoRng+0x3e>
    9734:	f000 f8b0 	bl	9898 <CC_PalPowerSaveModeSelect>
    9738:	b990      	cbnz	r0, 9760 <CC_LibInitNoRng+0x44>
    973a:	4b0f      	ldr	r3, [pc, #60]	; (9778 <CC_LibInitNoRng+0x5c>)
    973c:	681b      	ldr	r3, [r3, #0]
    973e:	0e1b      	lsrs	r3, r3, #24
    9740:	2bf0      	cmp	r3, #240	; 0xf0
    9742:	d108      	bne.n	9756 <CC_LibInitNoRng+0x3a>
    9744:	4a0d      	ldr	r2, [pc, #52]	; (977c <CC_LibInitNoRng+0x60>)
    9746:	4b0e      	ldr	r3, [pc, #56]	; (9780 <CC_LibInitNoRng+0x64>)
    9748:	6812      	ldr	r2, [r2, #0]
    974a:	429a      	cmp	r2, r3
    974c:	d00a      	beq.n	9764 <CC_LibInitNoRng+0x48>
    974e:	2407      	movs	r4, #7
    9750:	f000 f81c 	bl	978c <CC_HalTerminate>
    9754:	e7e7      	b.n	9726 <CC_LibInitNoRng+0xa>
    9756:	2406      	movs	r4, #6
    9758:	e7fa      	b.n	9750 <CC_LibInitNoRng+0x34>
    975a:	2404      	movs	r4, #4
    975c:	4620      	mov	r0, r4
    975e:	bd10      	pop	{r4, pc}
    9760:	2400      	movs	r4, #0
    9762:	e7f5      	b.n	9750 <CC_LibInitNoRng+0x34>
    9764:	2001      	movs	r0, #1
    9766:	f000 f897 	bl	9898 <CC_PalPowerSaveModeSelect>
    976a:	4604      	mov	r4, r0
    976c:	2800      	cmp	r0, #0
    976e:	d1f7      	bne.n	9760 <CC_LibInitNoRng+0x44>
    9770:	4b04      	ldr	r3, [pc, #16]	; (9784 <CC_LibInitNoRng+0x68>)
    9772:	6018      	str	r0, [r3, #0]
    9774:	e7d9      	b.n	972a <CC_LibInitNoRng+0xe>
    9776:	bf00      	nop
    9778:	5002b928 	.word	0x5002b928
    977c:	5002ba24 	.word	0x5002ba24
    9780:	20e00000 	.word	0x20e00000
    9784:	5002ba0c 	.word	0x5002ba0c

00009788 <CC_HalInit>:
    9788:	2000      	movs	r0, #0
    978a:	4770      	bx	lr

0000978c <CC_HalTerminate>:
    978c:	2000      	movs	r0, #0
    978e:	4770      	bx	lr

00009790 <CC_HalMaskInterrupt>:
    9790:	4b01      	ldr	r3, [pc, #4]	; (9798 <CC_HalMaskInterrupt+0x8>)
    9792:	6018      	str	r0, [r3, #0]
    9794:	4770      	bx	lr
    9796:	bf00      	nop
    9798:	5002ba04 	.word	0x5002ba04

0000979c <CC_PalInit>:
    979c:	b510      	push	{r4, lr}
    979e:	4811      	ldr	r0, [pc, #68]	; (97e4 <CC_PalInit+0x48>)
    97a0:	f000 f848 	bl	9834 <CC_PalMutexCreate>
    97a4:	b100      	cbz	r0, 97a8 <CC_PalInit+0xc>
    97a6:	bd10      	pop	{r4, pc}
    97a8:	480f      	ldr	r0, [pc, #60]	; (97e8 <CC_PalInit+0x4c>)
    97aa:	f000 f843 	bl	9834 <CC_PalMutexCreate>
    97ae:	2800      	cmp	r0, #0
    97b0:	d1f9      	bne.n	97a6 <CC_PalInit+0xa>
    97b2:	4c0e      	ldr	r4, [pc, #56]	; (97ec <CC_PalInit+0x50>)
    97b4:	4620      	mov	r0, r4
    97b6:	f000 f83d 	bl	9834 <CC_PalMutexCreate>
    97ba:	2800      	cmp	r0, #0
    97bc:	d1f3      	bne.n	97a6 <CC_PalInit+0xa>
    97be:	4b0c      	ldr	r3, [pc, #48]	; (97f0 <CC_PalInit+0x54>)
    97c0:	480c      	ldr	r0, [pc, #48]	; (97f4 <CC_PalInit+0x58>)
    97c2:	601c      	str	r4, [r3, #0]
    97c4:	f000 f836 	bl	9834 <CC_PalMutexCreate>
    97c8:	4601      	mov	r1, r0
    97ca:	2800      	cmp	r0, #0
    97cc:	d1eb      	bne.n	97a6 <CC_PalInit+0xa>
    97ce:	f000 f82d 	bl	982c <CC_PalDmaInit>
    97d2:	4604      	mov	r4, r0
    97d4:	b108      	cbz	r0, 97da <CC_PalInit+0x3e>
    97d6:	4620      	mov	r0, r4
    97d8:	bd10      	pop	{r4, pc}
    97da:	f000 f83f 	bl	985c <CC_PalPowerSaveModeInit>
    97de:	4620      	mov	r0, r4
    97e0:	e7fa      	b.n	97d8 <CC_PalInit+0x3c>
    97e2:	bf00      	nop
    97e4:	2000048c 	.word	0x2000048c
    97e8:	20000480 	.word	0x20000480
    97ec:	20000488 	.word	0x20000488
    97f0:	20000490 	.word	0x20000490
    97f4:	20000484 	.word	0x20000484

000097f8 <CC_PalTerminate>:
    97f8:	b508      	push	{r3, lr}
    97fa:	4808      	ldr	r0, [pc, #32]	; (981c <CC_PalTerminate+0x24>)
    97fc:	f000 f824 	bl	9848 <CC_PalMutexDestroy>
    9800:	4807      	ldr	r0, [pc, #28]	; (9820 <CC_PalTerminate+0x28>)
    9802:	f000 f821 	bl	9848 <CC_PalMutexDestroy>
    9806:	4807      	ldr	r0, [pc, #28]	; (9824 <CC_PalTerminate+0x2c>)
    9808:	f000 f81e 	bl	9848 <CC_PalMutexDestroy>
    980c:	4806      	ldr	r0, [pc, #24]	; (9828 <CC_PalTerminate+0x30>)
    980e:	f000 f81b 	bl	9848 <CC_PalMutexDestroy>
    9812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9816:	f000 b80b 	b.w	9830 <CC_PalDmaTerminate>
    981a:	bf00      	nop
    981c:	2000048c 	.word	0x2000048c
    9820:	20000480 	.word	0x20000480
    9824:	20000488 	.word	0x20000488
    9828:	20000484 	.word	0x20000484

0000982c <CC_PalDmaInit>:
    982c:	2000      	movs	r0, #0
    982e:	4770      	bx	lr

00009830 <CC_PalDmaTerminate>:
    9830:	4770      	bx	lr
    9832:	bf00      	nop

00009834 <CC_PalMutexCreate>:
    9834:	b508      	push	{r3, lr}
    9836:	4b03      	ldr	r3, [pc, #12]	; (9844 <CC_PalMutexCreate+0x10>)
    9838:	6802      	ldr	r2, [r0, #0]
    983a:	681b      	ldr	r3, [r3, #0]
    983c:	6810      	ldr	r0, [r2, #0]
    983e:	4798      	blx	r3
    9840:	2000      	movs	r0, #0
    9842:	bd08      	pop	{r3, pc}
    9844:	20000444 	.word	0x20000444

00009848 <CC_PalMutexDestroy>:
    9848:	b508      	push	{r3, lr}
    984a:	4b03      	ldr	r3, [pc, #12]	; (9858 <CC_PalMutexDestroy+0x10>)
    984c:	6802      	ldr	r2, [r0, #0]
    984e:	685b      	ldr	r3, [r3, #4]
    9850:	6810      	ldr	r0, [r2, #0]
    9852:	4798      	blx	r3
    9854:	2000      	movs	r0, #0
    9856:	bd08      	pop	{r3, pc}
    9858:	20000444 	.word	0x20000444

0000985c <CC_PalPowerSaveModeInit>:
    985c:	b570      	push	{r4, r5, r6, lr}
    985e:	4c09      	ldr	r4, [pc, #36]	; (9884 <CC_PalPowerSaveModeInit+0x28>)
    9860:	4d09      	ldr	r5, [pc, #36]	; (9888 <CC_PalPowerSaveModeInit+0x2c>)
    9862:	6920      	ldr	r0, [r4, #16]
    9864:	68ab      	ldr	r3, [r5, #8]
    9866:	4798      	blx	r3
    9868:	b118      	cbz	r0, 9872 <CC_PalPowerSaveModeInit+0x16>
    986a:	4b08      	ldr	r3, [pc, #32]	; (988c <CC_PalPowerSaveModeInit+0x30>)
    986c:	4808      	ldr	r0, [pc, #32]	; (9890 <CC_PalPowerSaveModeInit+0x34>)
    986e:	685b      	ldr	r3, [r3, #4]
    9870:	4798      	blx	r3
    9872:	4a08      	ldr	r2, [pc, #32]	; (9894 <CC_PalPowerSaveModeInit+0x38>)
    9874:	68eb      	ldr	r3, [r5, #12]
    9876:	6920      	ldr	r0, [r4, #16]
    9878:	2100      	movs	r1, #0
    987a:	6011      	str	r1, [r2, #0]
    987c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9880:	4718      	bx	r3
    9882:	bf00      	nop
    9884:	20000454 	.word	0x20000454
    9888:	20000444 	.word	0x20000444
    988c:	20000434 	.word	0x20000434
    9890:	0000dc04 	.word	0x0000dc04
    9894:	20002c28 	.word	0x20002c28

00009898 <CC_PalPowerSaveModeSelect>:
    9898:	b570      	push	{r4, r5, r6, lr}
    989a:	4d1a      	ldr	r5, [pc, #104]	; (9904 <CC_PalPowerSaveModeSelect+0x6c>)
    989c:	4e1a      	ldr	r6, [pc, #104]	; (9908 <CC_PalPowerSaveModeSelect+0x70>)
    989e:	4604      	mov	r4, r0
    98a0:	68b2      	ldr	r2, [r6, #8]
    98a2:	6928      	ldr	r0, [r5, #16]
    98a4:	4790      	blx	r2
    98a6:	b9f0      	cbnz	r0, 98e6 <CC_PalPowerSaveModeSelect+0x4e>
    98a8:	b15c      	cbz	r4, 98c2 <CC_PalPowerSaveModeSelect+0x2a>
    98aa:	4c18      	ldr	r4, [pc, #96]	; (990c <CC_PalPowerSaveModeSelect+0x74>)
    98ac:	6823      	ldr	r3, [r4, #0]
    98ae:	b1ab      	cbz	r3, 98dc <CC_PalPowerSaveModeSelect+0x44>
    98b0:	2b01      	cmp	r3, #1
    98b2:	d01a      	beq.n	98ea <CC_PalPowerSaveModeSelect+0x52>
    98b4:	3b01      	subs	r3, #1
    98b6:	6023      	str	r3, [r4, #0]
    98b8:	6928      	ldr	r0, [r5, #16]
    98ba:	68f3      	ldr	r3, [r6, #12]
    98bc:	4798      	blx	r3
    98be:	2000      	movs	r0, #0
    98c0:	bd70      	pop	{r4, r5, r6, pc}
    98c2:	4c12      	ldr	r4, [pc, #72]	; (990c <CC_PalPowerSaveModeSelect+0x74>)
    98c4:	6821      	ldr	r1, [r4, #0]
    98c6:	b939      	cbnz	r1, 98d8 <CC_PalPowerSaveModeSelect+0x40>
    98c8:	4b11      	ldr	r3, [pc, #68]	; (9910 <CC_PalPowerSaveModeSelect+0x78>)
    98ca:	4a12      	ldr	r2, [pc, #72]	; (9914 <CC_PalPowerSaveModeSelect+0x7c>)
    98cc:	2001      	movs	r0, #1
    98ce:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    98d2:	6813      	ldr	r3, [r2, #0]
    98d4:	2b00      	cmp	r3, #0
    98d6:	d1fc      	bne.n	98d2 <CC_PalPowerSaveModeSelect+0x3a>
    98d8:	3101      	adds	r1, #1
    98da:	6021      	str	r1, [r4, #0]
    98dc:	68f3      	ldr	r3, [r6, #12]
    98de:	6928      	ldr	r0, [r5, #16]
    98e0:	4798      	blx	r3
    98e2:	2000      	movs	r0, #0
    98e4:	bd70      	pop	{r4, r5, r6, pc}
    98e6:	480c      	ldr	r0, [pc, #48]	; (9918 <CC_PalPowerSaveModeSelect+0x80>)
    98e8:	bd70      	pop	{r4, r5, r6, pc}
    98ea:	4a0a      	ldr	r2, [pc, #40]	; (9914 <CC_PalPowerSaveModeSelect+0x7c>)
    98ec:	6813      	ldr	r3, [r2, #0]
    98ee:	2b00      	cmp	r3, #0
    98f0:	d1fc      	bne.n	98ec <CC_PalPowerSaveModeSelect+0x54>
    98f2:	4a07      	ldr	r2, [pc, #28]	; (9910 <CC_PalPowerSaveModeSelect+0x78>)
    98f4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    98f8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    98fc:	f7ff ff48 	bl	9790 <CC_HalMaskInterrupt>
    9900:	6823      	ldr	r3, [r4, #0]
    9902:	e7d7      	b.n	98b4 <CC_PalPowerSaveModeSelect+0x1c>
    9904:	20000454 	.word	0x20000454
    9908:	20000444 	.word	0x20000444
    990c:	20002c28 	.word	0x20002c28
    9910:	5002a000 	.word	0x5002a000
    9914:	5002b910 	.word	0x5002b910
    9918:	ffff8fe9 	.word	0xffff8fe9

0000991c <verify_context_ecdsa_verify_secp256r1>:
    991c:	b130      	cbz	r0, 992c <verify_context_ecdsa_verify_secp256r1+0x10>
    991e:	6802      	ldr	r2, [r0, #0]
    9920:	4b03      	ldr	r3, [pc, #12]	; (9930 <verify_context_ecdsa_verify_secp256r1+0x14>)
    9922:	4804      	ldr	r0, [pc, #16]	; (9934 <verify_context_ecdsa_verify_secp256r1+0x18>)
    9924:	429a      	cmp	r2, r3
    9926:	bf08      	it	eq
    9928:	2000      	moveq	r0, #0
    992a:	4770      	bx	lr
    992c:	4802      	ldr	r0, [pc, #8]	; (9938 <verify_context_ecdsa_verify_secp256r1+0x1c>)
    992e:	4770      	bx	lr
    9930:	bbaa55dd 	.word	0xbbaa55dd
    9934:	00f00882 	.word	0x00f00882
    9938:	00f00871 	.word	0x00f00871

0000993c <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    993c:	b538      	push	{r3, r4, r5, lr}
    993e:	460d      	mov	r5, r1
    9940:	4604      	mov	r4, r0
    9942:	b1b0      	cbz	r0, 9972 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    9944:	22a0      	movs	r2, #160	; 0xa0
    9946:	2100      	movs	r1, #0
    9948:	3004      	adds	r0, #4
    994a:	f003 fdb4 	bl	d4b6 <SaSi_PalMemSet>
    994e:	b195      	cbz	r5, 9976 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    9950:	2208      	movs	r2, #8
    9952:	4629      	mov	r1, r5
    9954:	f104 0064 	add.w	r0, r4, #100	; 0x64
    9958:	f003 fdb3 	bl	d4c2 <CRYS_COMMON_ReverseMemcpy32>
    995c:	2208      	movs	r2, #8
    995e:	f105 0120 	add.w	r1, r5, #32
    9962:	f104 0084 	add.w	r0, r4, #132	; 0x84
    9966:	f003 fdac 	bl	d4c2 <CRYS_COMMON_ReverseMemcpy32>
    996a:	4b04      	ldr	r3, [pc, #16]	; (997c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    996c:	6023      	str	r3, [r4, #0]
    996e:	2000      	movs	r0, #0
    9970:	bd38      	pop	{r3, r4, r5, pc}
    9972:	4803      	ldr	r0, [pc, #12]	; (9980 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    9974:	e7fc      	b.n	9970 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    9976:	4803      	ldr	r0, [pc, #12]	; (9984 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    9978:	e7fa      	b.n	9970 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    997a:	bf00      	nop
    997c:	bbaa55dd 	.word	0xbbaa55dd
    9980:	00f00871 	.word	0x00f00871
    9984:	00f00883 	.word	0x00f00883

00009988 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    9988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    998c:	4605      	mov	r5, r0
    998e:	460e      	mov	r6, r1
    9990:	4699      	mov	r9, r3
    9992:	4611      	mov	r1, r2
    9994:	f7ff ffc2 	bl	991c <verify_context_ecdsa_verify_secp256r1>
    9998:	4604      	mov	r4, r0
    999a:	2800      	cmp	r0, #0
    999c:	f040 8084 	bne.w	9aa8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    99a0:	2e00      	cmp	r6, #0
    99a2:	f000 8085 	beq.w	9ab0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    99a6:	2900      	cmp	r1, #0
    99a8:	f000 8084 	beq.w	9ab4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    99ac:	f1b9 0f20 	cmp.w	r9, #32
    99b0:	f040 8082 	bne.w	9ab8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    99b4:	f105 0444 	add.w	r4, r5, #68	; 0x44
    99b8:	2208      	movs	r2, #8
    99ba:	f105 0804 	add.w	r8, r5, #4
    99be:	4620      	mov	r0, r4
    99c0:	f003 fd7f 	bl	d4c2 <CRYS_COMMON_ReverseMemcpy32>
    99c4:	f105 0724 	add.w	r7, r5, #36	; 0x24
    99c8:	2208      	movs	r2, #8
    99ca:	4631      	mov	r1, r6
    99cc:	4640      	mov	r0, r8
    99ce:	f003 fd78 	bl	d4c2 <CRYS_COMMON_ReverseMemcpy32>
    99d2:	f106 0120 	add.w	r1, r6, #32
    99d6:	2208      	movs	r2, #8
    99d8:	4638      	mov	r0, r7
    99da:	f003 fd72 	bl	d4c2 <CRYS_COMMON_ReverseMemcpy32>
    99de:	a902      	add	r1, sp, #8
    99e0:	f44f 7080 	mov.w	r0, #256	; 0x100
    99e4:	f841 9d04 	str.w	r9, [r1, #-4]!
    99e8:	f003 fd5f 	bl	d4aa <PkaInitAndMutexLock>
    99ec:	2800      	cmp	r0, #0
    99ee:	d165      	bne.n	9abc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    99f0:	4a33      	ldr	r2, [pc, #204]	; (9ac0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    99f2:	f44f 7380 	mov.w	r3, #256	; 0x100
    99f6:	6013      	str	r3, [r2, #0]
    99f8:	2101      	movs	r1, #1
    99fa:	6093      	str	r3, [r2, #8]
    99fc:	2308      	movs	r3, #8
    99fe:	4a31      	ldr	r2, [pc, #196]	; (9ac4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    9a00:	f000 fb2e 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a04:	2101      	movs	r1, #1
    9a06:	4608      	mov	r0, r1
    9a08:	2305      	movs	r3, #5
    9a0a:	4a2f      	ldr	r2, [pc, #188]	; (9ac8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    9a0c:	f000 fb28 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a10:	2308      	movs	r3, #8
    9a12:	4642      	mov	r2, r8
    9a14:	2101      	movs	r1, #1
    9a16:	201c      	movs	r0, #28
    9a18:	f000 fb22 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a1c:	2308      	movs	r3, #8
    9a1e:	463a      	mov	r2, r7
    9a20:	2101      	movs	r1, #1
    9a22:	2003      	movs	r0, #3
    9a24:	f000 fb1c 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a28:	4622      	mov	r2, r4
    9a2a:	2308      	movs	r3, #8
    9a2c:	2101      	movs	r1, #1
    9a2e:	2002      	movs	r0, #2
    9a30:	f000 fb16 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a34:	2308      	movs	r3, #8
    9a36:	4a25      	ldr	r2, [pc, #148]	; (9acc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    9a38:	2101      	movs	r1, #1
    9a3a:	201a      	movs	r0, #26
    9a3c:	f000 fb10 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a40:	2305      	movs	r3, #5
    9a42:	4a23      	ldr	r2, [pc, #140]	; (9ad0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    9a44:	2101      	movs	r1, #1
    9a46:	201b      	movs	r0, #27
    9a48:	f000 fb0a 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a4c:	2308      	movs	r3, #8
    9a4e:	4a21      	ldr	r2, [pc, #132]	; (9ad4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    9a50:	2101      	movs	r1, #1
    9a52:	2014      	movs	r0, #20
    9a54:	f000 fb04 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a58:	2308      	movs	r3, #8
    9a5a:	4a1f      	ldr	r2, [pc, #124]	; (9ad8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    9a5c:	2101      	movs	r1, #1
    9a5e:	2015      	movs	r0, #21
    9a60:	f000 fafe 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a64:	2308      	movs	r3, #8
    9a66:	f105 0264 	add.w	r2, r5, #100	; 0x64
    9a6a:	2101      	movs	r1, #1
    9a6c:	2016      	movs	r0, #22
    9a6e:	f000 faf7 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a72:	2308      	movs	r3, #8
    9a74:	f105 0284 	add.w	r2, r5, #132	; 0x84
    9a78:	2101      	movs	r1, #1
    9a7a:	2017      	movs	r0, #23
    9a7c:	f000 faf0 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a80:	2308      	movs	r3, #8
    9a82:	4a16      	ldr	r2, [pc, #88]	; (9adc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    9a84:	2101      	movs	r1, #1
    9a86:	200b      	movs	r0, #11
    9a88:	f000 faea 	bl	a060 <PkaCopyDataIntoPkaReg>
    9a8c:	f000 fb44 	bl	a118 <PkaEcdsaVerify>
    9a90:	4604      	mov	r4, r0
    9a92:	9801      	ldr	r0, [sp, #4]
    9a94:	f000 fad2 	bl	a03c <PkaFinishAndMutexUnlock>
    9a98:	4b11      	ldr	r3, [pc, #68]	; (9ae0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    9a9a:	2c00      	cmp	r4, #0
    9a9c:	bf18      	it	ne
    9a9e:	461c      	movne	r4, r3
    9aa0:	21a4      	movs	r1, #164	; 0xa4
    9aa2:	4628      	mov	r0, r5
    9aa4:	f003 fd09 	bl	d4ba <SaSi_PalMemSetZero>
    9aa8:	4620      	mov	r0, r4
    9aaa:	b003      	add	sp, #12
    9aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9ab0:	4c0c      	ldr	r4, [pc, #48]	; (9ae4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    9ab2:	e7f9      	b.n	9aa8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    9ab4:	4c0c      	ldr	r4, [pc, #48]	; (9ae8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    9ab6:	e7f7      	b.n	9aa8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    9ab8:	4c0c      	ldr	r4, [pc, #48]	; (9aec <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    9aba:	e7f5      	b.n	9aa8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    9abc:	4c08      	ldr	r4, [pc, #32]	; (9ae0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    9abe:	e7ef      	b.n	9aa0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    9ac0:	5002b090 	.word	0x5002b090
    9ac4:	0000dc64 	.word	0x0000dc64
    9ac8:	0000dcdc 	.word	0x0000dcdc
    9acc:	0000dc24 	.word	0x0000dc24
    9ad0:	0000dcc8 	.word	0x0000dcc8
    9ad4:	0000dc88 	.word	0x0000dc88
    9ad8:	0000dca8 	.word	0x0000dca8
    9adc:	0000dc44 	.word	0x0000dc44
    9ae0:	00f00884 	.word	0x00f00884
    9ae4:	00f00876 	.word	0x00f00876
    9ae8:	00f00880 	.word	0x00f00880
    9aec:	00f00881 	.word	0x00f00881

00009af0 <set_digest_in_hw_sha256>:
    9af0:	4b0c      	ldr	r3, [pc, #48]	; (9b24 <set_digest_in_hw_sha256+0x34>)
    9af2:	69c2      	ldr	r2, [r0, #28]
    9af4:	601a      	str	r2, [r3, #0]
    9af6:	6982      	ldr	r2, [r0, #24]
    9af8:	f843 2c04 	str.w	r2, [r3, #-4]
    9afc:	6942      	ldr	r2, [r0, #20]
    9afe:	f843 2c08 	str.w	r2, [r3, #-8]
    9b02:	6902      	ldr	r2, [r0, #16]
    9b04:	f843 2c0c 	str.w	r2, [r3, #-12]
    9b08:	68c2      	ldr	r2, [r0, #12]
    9b0a:	f843 2c10 	str.w	r2, [r3, #-16]
    9b0e:	6882      	ldr	r2, [r0, #8]
    9b10:	f843 2c14 	str.w	r2, [r3, #-20]
    9b14:	6842      	ldr	r2, [r0, #4]
    9b16:	f843 2c18 	str.w	r2, [r3, #-24]
    9b1a:	6802      	ldr	r2, [r0, #0]
    9b1c:	f843 2c1c 	str.w	r2, [r3, #-28]
    9b20:	4770      	bx	lr
    9b22:	bf00      	nop
    9b24:	5002b65c 	.word	0x5002b65c

00009b28 <read_digest_in_hw_sha256>:
    9b28:	4b0c      	ldr	r3, [pc, #48]	; (9b5c <read_digest_in_hw_sha256+0x34>)
    9b2a:	681b      	ldr	r3, [r3, #0]
    9b2c:	61c3      	str	r3, [r0, #28]
    9b2e:	4b0c      	ldr	r3, [pc, #48]	; (9b60 <read_digest_in_hw_sha256+0x38>)
    9b30:	681b      	ldr	r3, [r3, #0]
    9b32:	6183      	str	r3, [r0, #24]
    9b34:	4b0b      	ldr	r3, [pc, #44]	; (9b64 <read_digest_in_hw_sha256+0x3c>)
    9b36:	681b      	ldr	r3, [r3, #0]
    9b38:	6143      	str	r3, [r0, #20]
    9b3a:	4b0b      	ldr	r3, [pc, #44]	; (9b68 <read_digest_in_hw_sha256+0x40>)
    9b3c:	681b      	ldr	r3, [r3, #0]
    9b3e:	6103      	str	r3, [r0, #16]
    9b40:	4b0a      	ldr	r3, [pc, #40]	; (9b6c <read_digest_in_hw_sha256+0x44>)
    9b42:	681b      	ldr	r3, [r3, #0]
    9b44:	60c3      	str	r3, [r0, #12]
    9b46:	4b0a      	ldr	r3, [pc, #40]	; (9b70 <read_digest_in_hw_sha256+0x48>)
    9b48:	681b      	ldr	r3, [r3, #0]
    9b4a:	6083      	str	r3, [r0, #8]
    9b4c:	4b09      	ldr	r3, [pc, #36]	; (9b74 <read_digest_in_hw_sha256+0x4c>)
    9b4e:	681b      	ldr	r3, [r3, #0]
    9b50:	6043      	str	r3, [r0, #4]
    9b52:	4b09      	ldr	r3, [pc, #36]	; (9b78 <read_digest_in_hw_sha256+0x50>)
    9b54:	681b      	ldr	r3, [r3, #0]
    9b56:	6003      	str	r3, [r0, #0]
    9b58:	4770      	bx	lr
    9b5a:	bf00      	nop
    9b5c:	5002b65c 	.word	0x5002b65c
    9b60:	5002b658 	.word	0x5002b658
    9b64:	5002b654 	.word	0x5002b654
    9b68:	5002b650 	.word	0x5002b650
    9b6c:	5002b64c 	.word	0x5002b64c
    9b70:	5002b648 	.word	0x5002b648
    9b74:	5002b644 	.word	0x5002b644
    9b78:	5002b640 	.word	0x5002b640

00009b7c <verify_context_hash_sha256>:
    9b7c:	b130      	cbz	r0, 9b8c <verify_context_hash_sha256+0x10>
    9b7e:	6802      	ldr	r2, [r0, #0]
    9b80:	4b03      	ldr	r3, [pc, #12]	; (9b90 <verify_context_hash_sha256+0x14>)
    9b82:	4804      	ldr	r0, [pc, #16]	; (9b94 <verify_context_hash_sha256+0x18>)
    9b84:	429a      	cmp	r2, r3
    9b86:	bf08      	it	eq
    9b88:	2000      	moveq	r0, #0
    9b8a:	4770      	bx	lr
    9b8c:	4802      	ldr	r0, [pc, #8]	; (9b98 <verify_context_hash_sha256+0x1c>)
    9b8e:	4770      	bx	lr
    9b90:	bbaa55dd 	.word	0xbbaa55dd
    9b94:	00f00202 	.word	0x00f00202
    9b98:	00f00200 	.word	0x00f00200

00009b9c <nrf_cc310_bl_hash_sha256_init>:
    9b9c:	b538      	push	{r3, r4, r5, lr}
    9b9e:	4604      	mov	r4, r0
    9ba0:	b168      	cbz	r0, 9bbe <nrf_cc310_bl_hash_sha256_init+0x22>
    9ba2:	1d05      	adds	r5, r0, #4
    9ba4:	2170      	movs	r1, #112	; 0x70
    9ba6:	4628      	mov	r0, r5
    9ba8:	f003 fc87 	bl	d4ba <SaSi_PalMemSetZero>
    9bac:	4628      	mov	r0, r5
    9bae:	2220      	movs	r2, #32
    9bb0:	4904      	ldr	r1, [pc, #16]	; (9bc4 <nrf_cc310_bl_hash_sha256_init+0x28>)
    9bb2:	f003 fc7e 	bl	d4b2 <SaSi_PalMemCopy>
    9bb6:	4b04      	ldr	r3, [pc, #16]	; (9bc8 <nrf_cc310_bl_hash_sha256_init+0x2c>)
    9bb8:	6023      	str	r3, [r4, #0]
    9bba:	2000      	movs	r0, #0
    9bbc:	bd38      	pop	{r3, r4, r5, pc}
    9bbe:	4803      	ldr	r0, [pc, #12]	; (9bcc <nrf_cc310_bl_hash_sha256_init+0x30>)
    9bc0:	e7fc      	b.n	9bbc <nrf_cc310_bl_hash_sha256_init+0x20>
    9bc2:	bf00      	nop
    9bc4:	0000dcf0 	.word	0x0000dcf0
    9bc8:	bbaa55dd 	.word	0xbbaa55dd
    9bcc:	00f00200 	.word	0x00f00200

00009bd0 <nrf_cc310_bl_hash_sha256_update>:
    9bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9bd4:	4b28      	ldr	r3, [pc, #160]	; (9c78 <nrf_cc310_bl_hash_sha256_update+0xa8>)
    9bd6:	4604      	mov	r4, r0
    9bd8:	460e      	mov	r6, r1
    9bda:	4615      	mov	r5, r2
    9bdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9bde:	b085      	sub	sp, #20
    9be0:	466f      	mov	r7, sp
    9be2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    9be6:	b92d      	cbnz	r5, 9bf4 <nrf_cc310_bl_hash_sha256_update+0x24>
    9be8:	f04f 0900 	mov.w	r9, #0
    9bec:	4648      	mov	r0, r9
    9bee:	b005      	add	sp, #20
    9bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9bf4:	4620      	mov	r0, r4
    9bf6:	f7ff ffc1 	bl	9b7c <verify_context_hash_sha256>
    9bfa:	4681      	mov	r9, r0
    9bfc:	2800      	cmp	r0, #0
    9bfe:	d1f5      	bne.n	9bec <nrf_cc310_bl_hash_sha256_update+0x1c>
    9c00:	1d23      	adds	r3, r4, #4
    9c02:	9301      	str	r3, [sp, #4]
    9c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9c06:	bba3      	cbnz	r3, 9c72 <nrf_cc310_bl_hash_sha256_update+0xa2>
    9c08:	6f23      	ldr	r3, [r4, #112]	; 0x70
    9c0a:	b18b      	cbz	r3, 9c30 <nrf_cc310_bl_hash_sha256_update+0x60>
    9c0c:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    9c10:	45a8      	cmp	r8, r5
    9c12:	bf28      	it	cs
    9c14:	46a8      	movcs	r8, r5
    9c16:	f104 0030 	add.w	r0, r4, #48	; 0x30
    9c1a:	4631      	mov	r1, r6
    9c1c:	4418      	add	r0, r3
    9c1e:	4642      	mov	r2, r8
    9c20:	f003 fc47 	bl	d4b2 <SaSi_PalMemCopy>
    9c24:	6f23      	ldr	r3, [r4, #112]	; 0x70
    9c26:	4443      	add	r3, r8
    9c28:	4446      	add	r6, r8
    9c2a:	6723      	str	r3, [r4, #112]	; 0x70
    9c2c:	eba5 0508 	sub.w	r5, r5, r8
    9c30:	6f22      	ldr	r2, [r4, #112]	; 0x70
    9c32:	2a40      	cmp	r2, #64	; 0x40
    9c34:	d106      	bne.n	9c44 <nrf_cc310_bl_hash_sha256_update+0x74>
    9c36:	f104 0130 	add.w	r1, r4, #48	; 0x30
    9c3a:	4638      	mov	r0, r7
    9c3c:	f000 fbae 	bl	a39c <nrf_cc310_bl_hash_update_internal>
    9c40:	2300      	movs	r3, #0
    9c42:	6723      	str	r3, [r4, #112]	; 0x70
    9c44:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    9c48:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    9c4c:	d005      	beq.n	9c5a <nrf_cc310_bl_hash_sha256_update+0x8a>
    9c4e:	4631      	mov	r1, r6
    9c50:	462a      	mov	r2, r5
    9c52:	4638      	mov	r0, r7
    9c54:	f000 fba2 	bl	a39c <nrf_cc310_bl_hash_update_internal>
    9c58:	442e      	add	r6, r5
    9c5a:	f1b8 0f00 	cmp.w	r8, #0
    9c5e:	d0c3      	beq.n	9be8 <nrf_cc310_bl_hash_sha256_update+0x18>
    9c60:	4642      	mov	r2, r8
    9c62:	4631      	mov	r1, r6
    9c64:	f104 0030 	add.w	r0, r4, #48	; 0x30
    9c68:	f003 fc23 	bl	d4b2 <SaSi_PalMemCopy>
    9c6c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    9c70:	e7bc      	b.n	9bec <nrf_cc310_bl_hash_sha256_update+0x1c>
    9c72:	f8df 9008 	ldr.w	r9, [pc, #8]	; 9c7c <nrf_cc310_bl_hash_sha256_update+0xac>
    9c76:	e7b9      	b.n	9bec <nrf_cc310_bl_hash_sha256_update+0x1c>
    9c78:	0000d860 	.word	0x0000d860
    9c7c:	00f0020c 	.word	0x00f0020c

00009c80 <nrf_cc310_bl_hash_sha256_finalize>:
    9c80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    9c84:	4b14      	ldr	r3, [pc, #80]	; (9cd8 <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    9c86:	4604      	mov	r4, r0
    9c88:	460e      	mov	r6, r1
    9c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9c8c:	466f      	mov	r7, sp
    9c8e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    9c92:	4620      	mov	r0, r4
    9c94:	f7ff ff72 	bl	9b7c <verify_context_hash_sha256>
    9c98:	4680      	mov	r8, r0
    9c9a:	b9b0      	cbnz	r0, 9cca <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    9c9c:	b1ce      	cbz	r6, 9cd2 <nrf_cc310_bl_hash_sha256_finalize+0x52>
    9c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9ca0:	1d25      	adds	r5, r4, #4
    9ca2:	9501      	str	r5, [sp, #4]
    9ca4:	b93b      	cbnz	r3, 9cb6 <nrf_cc310_bl_hash_sha256_finalize+0x36>
    9ca6:	2301      	movs	r3, #1
    9ca8:	6263      	str	r3, [r4, #36]	; 0x24
    9caa:	6f22      	ldr	r2, [r4, #112]	; 0x70
    9cac:	f104 0130 	add.w	r1, r4, #48	; 0x30
    9cb0:	4638      	mov	r0, r7
    9cb2:	f000 fb73 	bl	a39c <nrf_cc310_bl_hash_update_internal>
    9cb6:	462b      	mov	r3, r5
    9cb8:	3e04      	subs	r6, #4
    9cba:	3424      	adds	r4, #36	; 0x24
    9cbc:	f853 2b04 	ldr.w	r2, [r3], #4
    9cc0:	ba12      	rev	r2, r2
    9cc2:	42a3      	cmp	r3, r4
    9cc4:	f846 2f04 	str.w	r2, [r6, #4]!
    9cc8:	d1f8      	bne.n	9cbc <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    9cca:	4640      	mov	r0, r8
    9ccc:	b004      	add	sp, #16
    9cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9cd2:	f8df 8008 	ldr.w	r8, [pc, #8]	; 9cdc <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    9cd6:	e7f8      	b.n	9cca <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    9cd8:	0000d860 	.word	0x0000d860
    9cdc:	00f00205 	.word	0x00f00205

00009ce0 <nrf_cc310_bl_init>:
    9ce0:	4b08      	ldr	r3, [pc, #32]	; (9d04 <nrf_cc310_bl_init+0x24>)
    9ce2:	681b      	ldr	r3, [r3, #0]
    9ce4:	0e1b      	lsrs	r3, r3, #24
    9ce6:	2bf0      	cmp	r3, #240	; 0xf0
    9ce8:	d108      	bne.n	9cfc <nrf_cc310_bl_init+0x1c>
    9cea:	4b07      	ldr	r3, [pc, #28]	; (9d08 <nrf_cc310_bl_init+0x28>)
    9cec:	681a      	ldr	r2, [r3, #0]
    9cee:	4b07      	ldr	r3, [pc, #28]	; (9d0c <nrf_cc310_bl_init+0x2c>)
    9cf0:	429a      	cmp	r2, r3
    9cf2:	d105      	bne.n	9d00 <nrf_cc310_bl_init+0x20>
    9cf4:	4b06      	ldr	r3, [pc, #24]	; (9d10 <nrf_cc310_bl_init+0x30>)
    9cf6:	2000      	movs	r0, #0
    9cf8:	6018      	str	r0, [r3, #0]
    9cfa:	4770      	bx	lr
    9cfc:	2005      	movs	r0, #5
    9cfe:	4770      	bx	lr
    9d00:	2006      	movs	r0, #6
    9d02:	4770      	bx	lr
    9d04:	5002b928 	.word	0x5002b928
    9d08:	5002ba24 	.word	0x5002ba24
    9d0c:	20e00000 	.word	0x20e00000
    9d10:	5002ba0c 	.word	0x5002ba0c

00009d14 <PkaSetRegsMapTab>:
    9d14:	2200      	movs	r2, #0
    9d16:	b530      	push	{r4, r5, lr}
    9d18:	0049      	lsls	r1, r1, #1
    9d1a:	4613      	mov	r3, r2
    9d1c:	3802      	subs	r0, #2
    9d1e:	f640 75fc 	movw	r5, #4092	; 0xffc
    9d22:	f102 54a0 	add.w	r4, r2, #335544320	; 0x14000000
    9d26:	f504 442c 	add.w	r4, r4, #44032	; 0xac00
    9d2a:	00a4      	lsls	r4, r4, #2
    9d2c:	4290      	cmp	r0, r2
    9d2e:	f102 0201 	add.w	r2, r2, #1
    9d32:	bfca      	itet	gt
    9d34:	6023      	strgt	r3, [r4, #0]
    9d36:	6025      	strle	r5, [r4, #0]
    9d38:	185b      	addgt	r3, r3, r1
    9d3a:	2a1e      	cmp	r2, #30
    9d3c:	d1f1      	bne.n	9d22 <PkaSetRegsMapTab+0xe>
    9d3e:	4a04      	ldr	r2, [pc, #16]	; (9d50 <PkaSetRegsMapTab+0x3c>)
    9d40:	6013      	str	r3, [r2, #0]
    9d42:	440b      	add	r3, r1
    9d44:	6053      	str	r3, [r2, #4]
    9d46:	4b03      	ldr	r3, [pc, #12]	; (9d54 <PkaSetRegsMapTab+0x40>)
    9d48:	4a03      	ldr	r2, [pc, #12]	; (9d58 <PkaSetRegsMapTab+0x44>)
    9d4a:	601a      	str	r2, [r3, #0]
    9d4c:	bd30      	pop	{r4, r5, pc}
    9d4e:	bf00      	nop
    9d50:	5002b078 	.word	0x5002b078
    9d54:	5002b084 	.word	0x5002b084
    9d58:	000ff820 	.word	0x000ff820

00009d5c <PkaGetRegEffectiveSizeInBits>:
    9d5c:	b530      	push	{r4, r5, lr}
    9d5e:	4b1e      	ldr	r3, [pc, #120]	; (9dd8 <PkaGetRegEffectiveSizeInBits+0x7c>)
    9d60:	b085      	sub	sp, #20
    9d62:	461a      	mov	r2, r3
    9d64:	6819      	ldr	r1, [r3, #0]
    9d66:	9100      	str	r1, [sp, #0]
    9d68:	9900      	ldr	r1, [sp, #0]
    9d6a:	07cc      	lsls	r4, r1, #31
    9d6c:	d5fa      	bpl.n	9d64 <PkaGetRegEffectiveSizeInBits+0x8>
    9d6e:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    9d72:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    9d76:	0080      	lsls	r0, r0, #2
    9d78:	6801      	ldr	r1, [r0, #0]
    9d7a:	6813      	ldr	r3, [r2, #0]
    9d7c:	9301      	str	r3, [sp, #4]
    9d7e:	9b01      	ldr	r3, [sp, #4]
    9d80:	07d8      	lsls	r0, r3, #31
    9d82:	d5fa      	bpl.n	9d7a <PkaGetRegEffectiveSizeInBits+0x1e>
    9d84:	4b15      	ldr	r3, [pc, #84]	; (9ddc <PkaGetRegEffectiveSizeInBits+0x80>)
    9d86:	4c16      	ldr	r4, [pc, #88]	; (9de0 <PkaGetRegEffectiveSizeInBits+0x84>)
    9d88:	6818      	ldr	r0, [r3, #0]
    9d8a:	4d16      	ldr	r5, [pc, #88]	; (9de4 <PkaGetRegEffectiveSizeInBits+0x88>)
    9d8c:	301f      	adds	r0, #31
    9d8e:	2320      	movs	r3, #32
    9d90:	fb90 f0f3 	sdiv	r0, r0, r3
    9d94:	3801      	subs	r0, #1
    9d96:	2800      	cmp	r0, #0
    9d98:	da10      	bge.n	9dbc <PkaGetRegEffectiveSizeInBits+0x60>
    9d9a:	2300      	movs	r3, #0
    9d9c:	3001      	adds	r0, #1
    9d9e:	0140      	lsls	r0, r0, #5
    9da0:	b153      	cbz	r3, 9db8 <PkaGetRegEffectiveSizeInBits+0x5c>
    9da2:	f1a0 0120 	sub.w	r1, r0, #32
    9da6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9daa:	4213      	tst	r3, r2
    9dac:	d104      	bne.n	9db8 <PkaGetRegEffectiveSizeInBits+0x5c>
    9dae:	3801      	subs	r0, #1
    9db0:	4288      	cmp	r0, r1
    9db2:	ea4f 0252 	mov.w	r2, r2, lsr #1
    9db6:	d1f8      	bne.n	9daa <PkaGetRegEffectiveSizeInBits+0x4e>
    9db8:	b005      	add	sp, #20
    9dba:	bd30      	pop	{r4, r5, pc}
    9dbc:	6813      	ldr	r3, [r2, #0]
    9dbe:	9303      	str	r3, [sp, #12]
    9dc0:	9b03      	ldr	r3, [sp, #12]
    9dc2:	07db      	lsls	r3, r3, #31
    9dc4:	d5fa      	bpl.n	9dbc <PkaGetRegEffectiveSizeInBits+0x60>
    9dc6:	1843      	adds	r3, r0, r1
    9dc8:	6023      	str	r3, [r4, #0]
    9dca:	682b      	ldr	r3, [r5, #0]
    9dcc:	9302      	str	r3, [sp, #8]
    9dce:	9b02      	ldr	r3, [sp, #8]
    9dd0:	2b00      	cmp	r3, #0
    9dd2:	d1e3      	bne.n	9d9c <PkaGetRegEffectiveSizeInBits+0x40>
    9dd4:	3801      	subs	r0, #1
    9dd6:	e7de      	b.n	9d96 <PkaGetRegEffectiveSizeInBits+0x3a>
    9dd8:	5002b0b4 	.word	0x5002b0b4
    9ddc:	5002b0ac 	.word	0x5002b0ac
    9de0:	5002b0e4 	.word	0x5002b0e4
    9de4:	5002b0dc 	.word	0x5002b0dc

00009de8 <PkaGetNextMsBit>:
    9de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dea:	681d      	ldr	r5, [r3, #0]
    9dec:	b085      	sub	sp, #20
    9dee:	f001 041f 	and.w	r4, r1, #31
    9df2:	b90d      	cbnz	r5, 9df8 <PkaGetNextMsBit+0x10>
    9df4:	2c1f      	cmp	r4, #31
    9df6:	d125      	bne.n	9e44 <PkaGetNextMsBit+0x5c>
    9df8:	4d15      	ldr	r5, [pc, #84]	; (9e50 <PkaGetNextMsBit+0x68>)
    9dfa:	462e      	mov	r6, r5
    9dfc:	682f      	ldr	r7, [r5, #0]
    9dfe:	9701      	str	r7, [sp, #4]
    9e00:	9f01      	ldr	r7, [sp, #4]
    9e02:	07ff      	lsls	r7, r7, #31
    9e04:	d5fa      	bpl.n	9dfc <PkaGetNextMsBit+0x14>
    9e06:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    9e0a:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    9e0e:	0080      	lsls	r0, r0, #2
    9e10:	6800      	ldr	r0, [r0, #0]
    9e12:	6835      	ldr	r5, [r6, #0]
    9e14:	9503      	str	r5, [sp, #12]
    9e16:	9d03      	ldr	r5, [sp, #12]
    9e18:	07ed      	lsls	r5, r5, #31
    9e1a:	d5fa      	bpl.n	9e12 <PkaGetNextMsBit+0x2a>
    9e1c:	4d0d      	ldr	r5, [pc, #52]	; (9e54 <PkaGetNextMsBit+0x6c>)
    9e1e:	eb00 1061 	add.w	r0, r0, r1, asr #5
    9e22:	6028      	str	r0, [r5, #0]
    9e24:	480c      	ldr	r0, [pc, #48]	; (9e58 <PkaGetNextMsBit+0x70>)
    9e26:	6800      	ldr	r0, [r0, #0]
    9e28:	9002      	str	r0, [sp, #8]
    9e2a:	2c1f      	cmp	r4, #31
    9e2c:	bf18      	it	ne
    9e2e:	43c9      	mvnne	r1, r1
    9e30:	9802      	ldr	r0, [sp, #8]
    9e32:	bf0f      	iteee	eq
    9e34:	6010      	streq	r0, [r2, #0]
    9e36:	f001 011f 	andne.w	r1, r1, #31
    9e3a:	fa00 f101 	lslne.w	r1, r0, r1
    9e3e:	6011      	strne	r1, [r2, #0]
    9e40:	2100      	movs	r1, #0
    9e42:	6019      	str	r1, [r3, #0]
    9e44:	6810      	ldr	r0, [r2, #0]
    9e46:	0043      	lsls	r3, r0, #1
    9e48:	0fc0      	lsrs	r0, r0, #31
    9e4a:	6013      	str	r3, [r2, #0]
    9e4c:	b005      	add	sp, #20
    9e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e50:	5002b0b4 	.word	0x5002b0b4
    9e54:	5002b0e4 	.word	0x5002b0e4
    9e58:	5002b0dc 	.word	0x5002b0dc

00009e5c <PkaSetRegsSizesTab>:
    9e5c:	4b0c      	ldr	r3, [pc, #48]	; (9e90 <PkaSetRegsSizesTab+0x34>)
    9e5e:	6018      	str	r0, [r3, #0]
    9e60:	303f      	adds	r0, #63	; 0x3f
    9e62:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    9e66:	0189      	lsls	r1, r1, #6
    9e68:	3040      	adds	r0, #64	; 0x40
    9e6a:	6058      	str	r0, [r3, #4]
    9e6c:	6099      	str	r1, [r3, #8]
    9e6e:	60d9      	str	r1, [r3, #12]
    9e70:	6119      	str	r1, [r3, #16]
    9e72:	6159      	str	r1, [r3, #20]
    9e74:	6199      	str	r1, [r3, #24]
    9e76:	331c      	adds	r3, #28
    9e78:	4806      	ldr	r0, [pc, #24]	; (9e94 <PkaSetRegsSizesTab+0x38>)
    9e7a:	6019      	str	r1, [r3, #0]
    9e7c:	b082      	sub	sp, #8
    9e7e:	6802      	ldr	r2, [r0, #0]
    9e80:	9201      	str	r2, [sp, #4]
    9e82:	9a01      	ldr	r2, [sp, #4]
    9e84:	07d2      	lsls	r2, r2, #31
    9e86:	d5fa      	bpl.n	9e7e <PkaSetRegsSizesTab+0x22>
    9e88:	6019      	str	r1, [r3, #0]
    9e8a:	b002      	add	sp, #8
    9e8c:	4770      	bx	lr
    9e8e:	bf00      	nop
    9e90:	5002b090 	.word	0x5002b090
    9e94:	5002b0b4 	.word	0x5002b0b4

00009e98 <PkaInitPka>:
    9e98:	b538      	push	{r3, r4, r5, lr}
    9e9a:	f1a0 0320 	sub.w	r3, r0, #32
    9e9e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    9ea2:	4605      	mov	r5, r0
    9ea4:	d82c      	bhi.n	9f00 <PkaInitPka+0x68>
    9ea6:	288f      	cmp	r0, #143	; 0x8f
    9ea8:	d826      	bhi.n	9ef8 <PkaInitPka+0x60>
    9eaa:	f100 0347 	add.w	r3, r0, #71	; 0x47
    9eae:	f100 0466 	add.w	r4, r0, #102	; 0x66
    9eb2:	06db      	lsls	r3, r3, #27
    9eb4:	ea4f 1454 	mov.w	r4, r4, lsr #5
    9eb8:	d000      	beq.n	9ebc <PkaInitPka+0x24>
    9eba:	3401      	adds	r4, #1
    9ebc:	0164      	lsls	r4, r4, #5
    9ebe:	343f      	adds	r4, #63	; 0x3f
    9ec0:	09a4      	lsrs	r4, r4, #6
    9ec2:	3401      	adds	r4, #1
    9ec4:	b111      	cbz	r1, 9ecc <PkaInitPka+0x34>
    9ec6:	42a1      	cmp	r1, r4
    9ec8:	d31a      	bcc.n	9f00 <PkaInitPka+0x68>
    9eca:	460c      	mov	r4, r1
    9ecc:	00e3      	lsls	r3, r4, #3
    9ece:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    9ed2:	fbb0 f0f3 	udiv	r0, r0, r3
    9ed6:	2820      	cmp	r0, #32
    9ed8:	bf28      	it	cs
    9eda:	2020      	movcs	r0, #32
    9edc:	b102      	cbz	r2, 9ee0 <PkaInitPka+0x48>
    9ede:	6010      	str	r0, [r2, #0]
    9ee0:	4b08      	ldr	r3, [pc, #32]	; (9f04 <PkaInitPka+0x6c>)
    9ee2:	2201      	movs	r2, #1
    9ee4:	601a      	str	r2, [r3, #0]
    9ee6:	4621      	mov	r1, r4
    9ee8:	f7ff ff14 	bl	9d14 <PkaSetRegsMapTab>
    9eec:	4628      	mov	r0, r5
    9eee:	4621      	mov	r1, r4
    9ef0:	f7ff ffb4 	bl	9e5c <PkaSetRegsSizesTab>
    9ef4:	2000      	movs	r0, #0
    9ef6:	bd38      	pop	{r3, r4, r5, pc}
    9ef8:	f100 041f 	add.w	r4, r0, #31
    9efc:	0964      	lsrs	r4, r4, #5
    9efe:	e7dd      	b.n	9ebc <PkaInitPka+0x24>
    9f00:	4801      	ldr	r0, [pc, #4]	; (9f08 <PkaInitPka+0x70>)
    9f02:	e7f8      	b.n	9ef6 <PkaInitPka+0x5e>
    9f04:	5002b81c 	.word	0x5002b81c
    9f08:	00f02122 	.word	0x00f02122

00009f0c <PkaClearBlockOfRegs>:
    9f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f0e:	4b45      	ldr	r3, [pc, #276]	; (a024 <PkaClearBlockOfRegs+0x118>)
    9f10:	b089      	sub	sp, #36	; 0x24
    9f12:	461d      	mov	r5, r3
    9f14:	681c      	ldr	r4, [r3, #0]
    9f16:	9401      	str	r4, [sp, #4]
    9f18:	9c01      	ldr	r4, [sp, #4]
    9f1a:	07e4      	lsls	r4, r4, #31
    9f1c:	d5fa      	bpl.n	9f14 <PkaClearBlockOfRegs+0x8>
    9f1e:	4b42      	ldr	r3, [pc, #264]	; (a028 <PkaClearBlockOfRegs+0x11c>)
    9f20:	f8df e10c 	ldr.w	lr, [pc, #268]	; a030 <PkaClearBlockOfRegs+0x124>
    9f24:	f8df c10c 	ldr.w	ip, [pc, #268]	; a034 <PkaClearBlockOfRegs+0x128>
    9f28:	4413      	add	r3, r2
    9f2a:	009b      	lsls	r3, r3, #2
    9f2c:	2400      	movs	r4, #0
    9f2e:	681a      	ldr	r2, [r3, #0]
    9f30:	180b      	adds	r3, r1, r0
    9f32:	2b1e      	cmp	r3, #30
    9f34:	bf88      	it	hi
    9f36:	f1c0 011e 	rsbhi	r1, r0, #30
    9f3a:	321f      	adds	r2, #31
    9f3c:	180b      	adds	r3, r1, r0
    9f3e:	0952      	lsrs	r2, r2, #5
    9f40:	4353      	muls	r3, r2
    9f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9f46:	bf82      	ittt	hi
    9f48:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    9f4c:	fbb1 f1f2 	udivhi	r1, r1, r2
    9f50:	1a09      	subhi	r1, r1, r0
    9f52:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    9f56:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    9f5a:	4627      	mov	r7, r4
    9f5c:	42a1      	cmp	r1, r4
    9f5e:	dc33      	bgt.n	9fc8 <PkaClearBlockOfRegs+0xbc>
    9f60:	682b      	ldr	r3, [r5, #0]
    9f62:	9304      	str	r3, [sp, #16]
    9f64:	9b04      	ldr	r3, [sp, #16]
    9f66:	07db      	lsls	r3, r3, #31
    9f68:	d5fa      	bpl.n	9f60 <PkaClearBlockOfRegs+0x54>
    9f6a:	4b30      	ldr	r3, [pc, #192]	; (a02c <PkaClearBlockOfRegs+0x120>)
    9f6c:	681b      	ldr	r3, [r3, #0]
    9f6e:	6829      	ldr	r1, [r5, #0]
    9f70:	9105      	str	r1, [sp, #20]
    9f72:	9905      	ldr	r1, [sp, #20]
    9f74:	07cf      	lsls	r7, r1, #31
    9f76:	d5fa      	bpl.n	9f6e <PkaClearBlockOfRegs+0x62>
    9f78:	4c2d      	ldr	r4, [pc, #180]	; (a030 <PkaClearBlockOfRegs+0x124>)
    9f7a:	492e      	ldr	r1, [pc, #184]	; (a034 <PkaClearBlockOfRegs+0x128>)
    9f7c:	6023      	str	r3, [r4, #0]
    9f7e:	2300      	movs	r3, #0
    9f80:	461e      	mov	r6, r3
    9f82:	4293      	cmp	r3, r2
    9f84:	f103 0001 	add.w	r0, r3, #1
    9f88:	d140      	bne.n	a00c <PkaClearBlockOfRegs+0x100>
    9f8a:	f020 0201 	bic.w	r2, r0, #1
    9f8e:	4829      	ldr	r0, [pc, #164]	; (a034 <PkaClearBlockOfRegs+0x128>)
    9f90:	4619      	mov	r1, r3
    9f92:	2600      	movs	r6, #0
    9f94:	428a      	cmp	r2, r1
    9f96:	d83c      	bhi.n	a012 <PkaClearBlockOfRegs+0x106>
    9f98:	6829      	ldr	r1, [r5, #0]
    9f9a:	9106      	str	r1, [sp, #24]
    9f9c:	9906      	ldr	r1, [sp, #24]
    9f9e:	07ce      	lsls	r6, r1, #31
    9fa0:	d5fa      	bpl.n	9f98 <PkaClearBlockOfRegs+0x8c>
    9fa2:	4925      	ldr	r1, [pc, #148]	; (a038 <PkaClearBlockOfRegs+0x12c>)
    9fa4:	6809      	ldr	r1, [r1, #0]
    9fa6:	6828      	ldr	r0, [r5, #0]
    9fa8:	9007      	str	r0, [sp, #28]
    9faa:	9807      	ldr	r0, [sp, #28]
    9fac:	07c0      	lsls	r0, r0, #31
    9fae:	d5fa      	bpl.n	9fa6 <PkaClearBlockOfRegs+0x9a>
    9fb0:	6021      	str	r1, [r4, #0]
    9fb2:	4820      	ldr	r0, [pc, #128]	; (a034 <PkaClearBlockOfRegs+0x128>)
    9fb4:	2100      	movs	r1, #0
    9fb6:	460c      	mov	r4, r1
    9fb8:	428b      	cmp	r3, r1
    9fba:	d12d      	bne.n	a018 <PkaClearBlockOfRegs+0x10c>
    9fbc:	491d      	ldr	r1, [pc, #116]	; (a034 <PkaClearBlockOfRegs+0x128>)
    9fbe:	2000      	movs	r0, #0
    9fc0:	429a      	cmp	r2, r3
    9fc2:	d82c      	bhi.n	a01e <PkaClearBlockOfRegs+0x112>
    9fc4:	b009      	add	sp, #36	; 0x24
    9fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9fc8:	682b      	ldr	r3, [r5, #0]
    9fca:	9302      	str	r3, [sp, #8]
    9fcc:	9b02      	ldr	r3, [sp, #8]
    9fce:	07db      	lsls	r3, r3, #31
    9fd0:	d5fa      	bpl.n	9fc8 <PkaClearBlockOfRegs+0xbc>
    9fd2:	1903      	adds	r3, r0, r4
    9fd4:	009b      	lsls	r3, r3, #2
    9fd6:	681b      	ldr	r3, [r3, #0]
    9fd8:	682e      	ldr	r6, [r5, #0]
    9fda:	9603      	str	r6, [sp, #12]
    9fdc:	9e03      	ldr	r6, [sp, #12]
    9fde:	07f6      	lsls	r6, r6, #31
    9fe0:	d5fa      	bpl.n	9fd8 <PkaClearBlockOfRegs+0xcc>
    9fe2:	f8ce 3000 	str.w	r3, [lr]
    9fe6:	2300      	movs	r3, #0
    9fe8:	4293      	cmp	r3, r2
    9fea:	f103 0301 	add.w	r3, r3, #1
    9fee:	d106      	bne.n	9ffe <PkaClearBlockOfRegs+0xf2>
    9ff0:	4616      	mov	r6, r2
    9ff2:	f023 0301 	bic.w	r3, r3, #1
    9ff6:	42b3      	cmp	r3, r6
    9ff8:	d804      	bhi.n	a004 <PkaClearBlockOfRegs+0xf8>
    9ffa:	3401      	adds	r4, #1
    9ffc:	e7ae      	b.n	9f5c <PkaClearBlockOfRegs+0x50>
    9ffe:	f8cc 7000 	str.w	r7, [ip]
    a002:	e7f1      	b.n	9fe8 <PkaClearBlockOfRegs+0xdc>
    a004:	f8cc 7000 	str.w	r7, [ip]
    a008:	3601      	adds	r6, #1
    a00a:	e7f4      	b.n	9ff6 <PkaClearBlockOfRegs+0xea>
    a00c:	600e      	str	r6, [r1, #0]
    a00e:	4603      	mov	r3, r0
    a010:	e7b7      	b.n	9f82 <PkaClearBlockOfRegs+0x76>
    a012:	6006      	str	r6, [r0, #0]
    a014:	3101      	adds	r1, #1
    a016:	e7bd      	b.n	9f94 <PkaClearBlockOfRegs+0x88>
    a018:	6004      	str	r4, [r0, #0]
    a01a:	3101      	adds	r1, #1
    a01c:	e7cc      	b.n	9fb8 <PkaClearBlockOfRegs+0xac>
    a01e:	6008      	str	r0, [r1, #0]
    a020:	3301      	adds	r3, #1
    a022:	e7cd      	b.n	9fc0 <PkaClearBlockOfRegs+0xb4>
    a024:	5002b0b4 	.word	0x5002b0b4
    a028:	1400ac24 	.word	0x1400ac24
    a02c:	5002b07c 	.word	0x5002b07c
    a030:	5002b0d4 	.word	0x5002b0d4
    a034:	5002b0d8 	.word	0x5002b0d8
    a038:	5002b078 	.word	0x5002b078

0000a03c <PkaFinishAndMutexUnlock>:
    a03c:	b508      	push	{r3, lr}
    a03e:	b140      	cbz	r0, a052 <PkaFinishAndMutexUnlock+0x16>
    a040:	2820      	cmp	r0, #32
    a042:	4601      	mov	r1, r0
    a044:	f04f 0207 	mov.w	r2, #7
    a048:	bf28      	it	cs
    a04a:	2120      	movcs	r1, #32
    a04c:	2000      	movs	r0, #0
    a04e:	f7ff ff5d 	bl	9f0c <PkaClearBlockOfRegs>
    a052:	4b02      	ldr	r3, [pc, #8]	; (a05c <PkaFinishAndMutexUnlock+0x20>)
    a054:	2200      	movs	r2, #0
    a056:	601a      	str	r2, [r3, #0]
    a058:	bd08      	pop	{r3, pc}
    a05a:	bf00      	nop
    a05c:	5002b81c 	.word	0x5002b81c

0000a060 <PkaCopyDataIntoPkaReg>:
    a060:	b5f0      	push	{r4, r5, r6, r7, lr}
    a062:	4d29      	ldr	r5, [pc, #164]	; (a108 <PkaCopyDataIntoPkaReg+0xa8>)
    a064:	b085      	sub	sp, #20
    a066:	462c      	mov	r4, r5
    a068:	682e      	ldr	r6, [r5, #0]
    a06a:	9600      	str	r6, [sp, #0]
    a06c:	9e00      	ldr	r6, [sp, #0]
    a06e:	07f6      	lsls	r6, r6, #31
    a070:	d5fa      	bpl.n	a068 <PkaCopyDataIntoPkaReg+0x8>
    a072:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    a076:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    a07a:	0080      	lsls	r0, r0, #2
    a07c:	6805      	ldr	r5, [r0, #0]
    a07e:	6820      	ldr	r0, [r4, #0]
    a080:	9001      	str	r0, [sp, #4]
    a082:	9801      	ldr	r0, [sp, #4]
    a084:	07c7      	lsls	r7, r0, #31
    a086:	d5fa      	bpl.n	a07e <PkaCopyDataIntoPkaReg+0x1e>
    a088:	4820      	ldr	r0, [pc, #128]	; (a10c <PkaCopyDataIntoPkaReg+0xac>)
    a08a:	4f21      	ldr	r7, [pc, #132]	; (a110 <PkaCopyDataIntoPkaReg+0xb0>)
    a08c:	6005      	str	r5, [r0, #0]
    a08e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    a092:	42b2      	cmp	r2, r6
    a094:	d129      	bne.n	a0ea <PkaCopyDataIntoPkaReg+0x8a>
    a096:	1c5a      	adds	r2, r3, #1
    a098:	4e1d      	ldr	r6, [pc, #116]	; (a110 <PkaCopyDataIntoPkaReg+0xb0>)
    a09a:	f022 0201 	bic.w	r2, r2, #1
    a09e:	2700      	movs	r7, #0
    a0a0:	429a      	cmp	r2, r3
    a0a2:	d827      	bhi.n	a0f4 <PkaCopyDataIntoPkaReg+0x94>
    a0a4:	6823      	ldr	r3, [r4, #0]
    a0a6:	9302      	str	r3, [sp, #8]
    a0a8:	9b02      	ldr	r3, [sp, #8]
    a0aa:	07de      	lsls	r6, r3, #31
    a0ac:	d5fa      	bpl.n	a0a4 <PkaCopyDataIntoPkaReg+0x44>
    a0ae:	4b19      	ldr	r3, [pc, #100]	; (a114 <PkaCopyDataIntoPkaReg+0xb4>)
    a0b0:	440b      	add	r3, r1
    a0b2:	009b      	lsls	r3, r3, #2
    a0b4:	681b      	ldr	r3, [r3, #0]
    a0b6:	331f      	adds	r3, #31
    a0b8:	095b      	lsrs	r3, r3, #5
    a0ba:	429a      	cmp	r2, r3
    a0bc:	d213      	bcs.n	a0e6 <PkaCopyDataIntoPkaReg+0x86>
    a0be:	6821      	ldr	r1, [r4, #0]
    a0c0:	9103      	str	r1, [sp, #12]
    a0c2:	9903      	ldr	r1, [sp, #12]
    a0c4:	07c9      	lsls	r1, r1, #31
    a0c6:	d5fa      	bpl.n	a0be <PkaCopyDataIntoPkaReg+0x5e>
    a0c8:	4415      	add	r5, r2
    a0ca:	2100      	movs	r1, #0
    a0cc:	1a9b      	subs	r3, r3, r2
    a0ce:	4a10      	ldr	r2, [pc, #64]	; (a110 <PkaCopyDataIntoPkaReg+0xb0>)
    a0d0:	6005      	str	r5, [r0, #0]
    a0d2:	4608      	mov	r0, r1
    a0d4:	428b      	cmp	r3, r1
    a0d6:	d810      	bhi.n	a0fa <PkaCopyDataIntoPkaReg+0x9a>
    a0d8:	1c5a      	adds	r2, r3, #1
    a0da:	490d      	ldr	r1, [pc, #52]	; (a110 <PkaCopyDataIntoPkaReg+0xb0>)
    a0dc:	f022 0201 	bic.w	r2, r2, #1
    a0e0:	2000      	movs	r0, #0
    a0e2:	429a      	cmp	r2, r3
    a0e4:	d80c      	bhi.n	a100 <PkaCopyDataIntoPkaReg+0xa0>
    a0e6:	b005      	add	sp, #20
    a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0ea:	f852 cb04 	ldr.w	ip, [r2], #4
    a0ee:	f8c7 c000 	str.w	ip, [r7]
    a0f2:	e7ce      	b.n	a092 <PkaCopyDataIntoPkaReg+0x32>
    a0f4:	6037      	str	r7, [r6, #0]
    a0f6:	3301      	adds	r3, #1
    a0f8:	e7d2      	b.n	a0a0 <PkaCopyDataIntoPkaReg+0x40>
    a0fa:	6010      	str	r0, [r2, #0]
    a0fc:	3101      	adds	r1, #1
    a0fe:	e7e9      	b.n	a0d4 <PkaCopyDataIntoPkaReg+0x74>
    a100:	6008      	str	r0, [r1, #0]
    a102:	3301      	adds	r3, #1
    a104:	e7ed      	b.n	a0e2 <PkaCopyDataIntoPkaReg+0x82>
    a106:	bf00      	nop
    a108:	5002b0b4 	.word	0x5002b0b4
    a10c:	5002b0d4 	.word	0x5002b0d4
    a110:	5002b0d8 	.word	0x5002b0d8
    a114:	1400ac24 	.word	0x1400ac24

0000a118 <PkaEcdsaVerify>:
    a118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a11c:	4b81      	ldr	r3, [pc, #516]	; (a324 <PkaEcdsaVerify+0x20c>)
    a11e:	681d      	ldr	r5, [r3, #0]
    a120:	6898      	ldr	r0, [r3, #8]
    a122:	3320      	adds	r3, #32
    a124:	b0a0      	sub	sp, #128	; 0x80
    a126:	461e      	mov	r6, r3
    a128:	681a      	ldr	r2, [r3, #0]
    a12a:	9201      	str	r2, [sp, #4]
    a12c:	9a01      	ldr	r2, [sp, #4]
    a12e:	07d7      	lsls	r7, r2, #31
    a130:	d5fa      	bpl.n	a128 <PkaEcdsaVerify+0x10>
    a132:	4b7d      	ldr	r3, [pc, #500]	; (a328 <PkaEcdsaVerify+0x210>)
    a134:	4a7d      	ldr	r2, [pc, #500]	; (a32c <PkaEcdsaVerify+0x214>)
    a136:	601a      	str	r2, [r3, #0]
    a138:	6832      	ldr	r2, [r6, #0]
    a13a:	9202      	str	r2, [sp, #8]
    a13c:	9a02      	ldr	r2, [sp, #8]
    a13e:	07d4      	lsls	r4, r2, #31
    a140:	d5fa      	bpl.n	a138 <PkaEcdsaVerify+0x20>
    a142:	4a7b      	ldr	r2, [pc, #492]	; (a330 <PkaEcdsaVerify+0x218>)
    a144:	601a      	str	r2, [r3, #0]
    a146:	4a7b      	ldr	r2, [pc, #492]	; (a334 <PkaEcdsaVerify+0x21c>)
    a148:	4614      	mov	r4, r2
    a14a:	6811      	ldr	r1, [r2, #0]
    a14c:	9103      	str	r1, [sp, #12]
    a14e:	9903      	ldr	r1, [sp, #12]
    a150:	07c9      	lsls	r1, r1, #31
    a152:	d5fa      	bpl.n	a14a <PkaEcdsaVerify+0x32>
    a154:	4a78      	ldr	r2, [pc, #480]	; (a338 <PkaEcdsaVerify+0x220>)
    a156:	6811      	ldr	r1, [r2, #0]
    a158:	f3c1 2140 	ubfx	r1, r1, #9, #1
    a15c:	6837      	ldr	r7, [r6, #0]
    a15e:	9704      	str	r7, [sp, #16]
    a160:	9f04      	ldr	r7, [sp, #16]
    a162:	07ff      	lsls	r7, r7, #31
    a164:	d5fa      	bpl.n	a15c <PkaEcdsaVerify+0x44>
    a166:	4f75      	ldr	r7, [pc, #468]	; (a33c <PkaEcdsaVerify+0x224>)
    a168:	601f      	str	r7, [r3, #0]
    a16a:	6827      	ldr	r7, [r4, #0]
    a16c:	9705      	str	r7, [sp, #20]
    a16e:	9f05      	ldr	r7, [sp, #20]
    a170:	07ff      	lsls	r7, r7, #31
    a172:	d5fa      	bpl.n	a16a <PkaEcdsaVerify+0x52>
    a174:	6817      	ldr	r7, [r2, #0]
    a176:	2900      	cmp	r1, #0
    a178:	f000 80cf 	beq.w	a31a <PkaEcdsaVerify+0x202>
    a17c:	05b9      	lsls	r1, r7, #22
    a17e:	f140 80cc 	bpl.w	a31a <PkaEcdsaVerify+0x202>
    a182:	6831      	ldr	r1, [r6, #0]
    a184:	9106      	str	r1, [sp, #24]
    a186:	9906      	ldr	r1, [sp, #24]
    a188:	07cf      	lsls	r7, r1, #31
    a18a:	d5fa      	bpl.n	a182 <PkaEcdsaVerify+0x6a>
    a18c:	496c      	ldr	r1, [pc, #432]	; (a340 <PkaEcdsaVerify+0x228>)
    a18e:	6019      	str	r1, [r3, #0]
    a190:	6821      	ldr	r1, [r4, #0]
    a192:	9107      	str	r1, [sp, #28]
    a194:	9907      	ldr	r1, [sp, #28]
    a196:	07c9      	lsls	r1, r1, #31
    a198:	d5fa      	bpl.n	a190 <PkaEcdsaVerify+0x78>
    a19a:	6811      	ldr	r1, [r2, #0]
    a19c:	f3c1 2140 	ubfx	r1, r1, #9, #1
    a1a0:	6837      	ldr	r7, [r6, #0]
    a1a2:	9708      	str	r7, [sp, #32]
    a1a4:	9f08      	ldr	r7, [sp, #32]
    a1a6:	07ff      	lsls	r7, r7, #31
    a1a8:	d5fa      	bpl.n	a1a0 <PkaEcdsaVerify+0x88>
    a1aa:	4f66      	ldr	r7, [pc, #408]	; (a344 <PkaEcdsaVerify+0x22c>)
    a1ac:	601f      	str	r7, [r3, #0]
    a1ae:	6827      	ldr	r7, [r4, #0]
    a1b0:	9709      	str	r7, [sp, #36]	; 0x24
    a1b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a1b4:	07ff      	lsls	r7, r7, #31
    a1b6:	d5fa      	bpl.n	a1ae <PkaEcdsaVerify+0x96>
    a1b8:	6812      	ldr	r2, [r2, #0]
    a1ba:	2900      	cmp	r1, #0
    a1bc:	f000 80af 	beq.w	a31e <PkaEcdsaVerify+0x206>
    a1c0:	0591      	lsls	r1, r2, #22
    a1c2:	f140 80ac 	bpl.w	a31e <PkaEcdsaVerify+0x206>
    a1c6:	6832      	ldr	r2, [r6, #0]
    a1c8:	920a      	str	r2, [sp, #40]	; 0x28
    a1ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a1cc:	07d2      	lsls	r2, r2, #31
    a1ce:	d5fa      	bpl.n	a1c6 <PkaEcdsaVerify+0xae>
    a1d0:	4a56      	ldr	r2, [pc, #344]	; (a32c <PkaEcdsaVerify+0x214>)
    a1d2:	601a      	str	r2, [r3, #0]
    a1d4:	6832      	ldr	r2, [r6, #0]
    a1d6:	920b      	str	r2, [sp, #44]	; 0x2c
    a1d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a1da:	07d7      	lsls	r7, r2, #31
    a1dc:	d5fa      	bpl.n	a1d4 <PkaEcdsaVerify+0xbc>
    a1de:	4a5a      	ldr	r2, [pc, #360]	; (a348 <PkaEcdsaVerify+0x230>)
    a1e0:	601a      	str	r2, [r3, #0]
    a1e2:	6831      	ldr	r1, [r6, #0]
    a1e4:	910c      	str	r1, [sp, #48]	; 0x30
    a1e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    a1e8:	07cc      	lsls	r4, r1, #31
    a1ea:	d5fa      	bpl.n	a1e2 <PkaEcdsaVerify+0xca>
    a1ec:	4957      	ldr	r1, [pc, #348]	; (a34c <PkaEcdsaVerify+0x234>)
    a1ee:	6019      	str	r1, [r3, #0]
    a1f0:	6831      	ldr	r1, [r6, #0]
    a1f2:	910d      	str	r1, [sp, #52]	; 0x34
    a1f4:	990d      	ldr	r1, [sp, #52]	; 0x34
    a1f6:	07c9      	lsls	r1, r1, #31
    a1f8:	d5fa      	bpl.n	a1f0 <PkaEcdsaVerify+0xd8>
    a1fa:	4955      	ldr	r1, [pc, #340]	; (a350 <PkaEcdsaVerify+0x238>)
    a1fc:	6019      	str	r1, [r3, #0]
    a1fe:	6831      	ldr	r1, [r6, #0]
    a200:	910e      	str	r1, [sp, #56]	; 0x38
    a202:	990e      	ldr	r1, [sp, #56]	; 0x38
    a204:	07cf      	lsls	r7, r1, #31
    a206:	d5fa      	bpl.n	a1fe <PkaEcdsaVerify+0xe6>
    a208:	4952      	ldr	r1, [pc, #328]	; (a354 <PkaEcdsaVerify+0x23c>)
    a20a:	6019      	str	r1, [r3, #0]
    a20c:	6831      	ldr	r1, [r6, #0]
    a20e:	910f      	str	r1, [sp, #60]	; 0x3c
    a210:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a212:	07cc      	lsls	r4, r1, #31
    a214:	d5fa      	bpl.n	a20c <PkaEcdsaVerify+0xf4>
    a216:	4950      	ldr	r1, [pc, #320]	; (a358 <PkaEcdsaVerify+0x240>)
    a218:	6019      	str	r1, [r3, #0]
    a21a:	4b50      	ldr	r3, [pc, #320]	; (a35c <PkaEcdsaVerify+0x244>)
    a21c:	461e      	mov	r6, r3
    a21e:	6819      	ldr	r1, [r3, #0]
    a220:	9110      	str	r1, [sp, #64]	; 0x40
    a222:	9910      	ldr	r1, [sp, #64]	; 0x40
    a224:	07c9      	lsls	r1, r1, #31
    a226:	d5fa      	bpl.n	a21e <PkaEcdsaVerify+0x106>
    a228:	4c3f      	ldr	r4, [pc, #252]	; (a328 <PkaEcdsaVerify+0x210>)
    a22a:	4b4d      	ldr	r3, [pc, #308]	; (a360 <PkaEcdsaVerify+0x248>)
    a22c:	6023      	str	r3, [r4, #0]
    a22e:	6833      	ldr	r3, [r6, #0]
    a230:	9311      	str	r3, [sp, #68]	; 0x44
    a232:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a234:	07db      	lsls	r3, r3, #31
    a236:	d5fa      	bpl.n	a22e <PkaEcdsaVerify+0x116>
    a238:	4b4a      	ldr	r3, [pc, #296]	; (a364 <PkaEcdsaVerify+0x24c>)
    a23a:	6023      	str	r3, [r4, #0]
    a23c:	6833      	ldr	r3, [r6, #0]
    a23e:	9312      	str	r3, [sp, #72]	; 0x48
    a240:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a242:	07df      	lsls	r7, r3, #31
    a244:	d5fa      	bpl.n	a23c <PkaEcdsaVerify+0x124>
    a246:	4b48      	ldr	r3, [pc, #288]	; (a368 <PkaEcdsaVerify+0x250>)
    a248:	6023      	str	r3, [r4, #0]
    a24a:	4b3a      	ldr	r3, [pc, #232]	; (a334 <PkaEcdsaVerify+0x21c>)
    a24c:	4698      	mov	r8, r3
    a24e:	6819      	ldr	r1, [r3, #0]
    a250:	9113      	str	r1, [sp, #76]	; 0x4c
    a252:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a254:	07c9      	lsls	r1, r1, #31
    a256:	d5fa      	bpl.n	a24e <PkaEcdsaVerify+0x136>
    a258:	4f32      	ldr	r7, [pc, #200]	; (a324 <PkaEcdsaVerify+0x20c>)
    a25a:	6038      	str	r0, [r7, #0]
    a25c:	6833      	ldr	r3, [r6, #0]
    a25e:	9314      	str	r3, [sp, #80]	; 0x50
    a260:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a262:	07db      	lsls	r3, r3, #31
    a264:	d5fa      	bpl.n	a25c <PkaEcdsaVerify+0x144>
    a266:	6022      	str	r2, [r4, #0]
    a268:	6833      	ldr	r3, [r6, #0]
    a26a:	9315      	str	r3, [sp, #84]	; 0x54
    a26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a26e:	07d8      	lsls	r0, r3, #31
    a270:	d5fa      	bpl.n	a268 <PkaEcdsaVerify+0x150>
    a272:	4b3e      	ldr	r3, [pc, #248]	; (a36c <PkaEcdsaVerify+0x254>)
    a274:	6023      	str	r3, [r4, #0]
    a276:	6833      	ldr	r3, [r6, #0]
    a278:	9316      	str	r3, [sp, #88]	; 0x58
    a27a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a27c:	07d9      	lsls	r1, r3, #31
    a27e:	d5fa      	bpl.n	a276 <PkaEcdsaVerify+0x15e>
    a280:	4b3b      	ldr	r3, [pc, #236]	; (a370 <PkaEcdsaVerify+0x258>)
    a282:	6023      	str	r3, [r4, #0]
    a284:	6833      	ldr	r3, [r6, #0]
    a286:	9317      	str	r3, [sp, #92]	; 0x5c
    a288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a28a:	07da      	lsls	r2, r3, #31
    a28c:	d5fa      	bpl.n	a284 <PkaEcdsaVerify+0x16c>
    a28e:	4b39      	ldr	r3, [pc, #228]	; (a374 <PkaEcdsaVerify+0x25c>)
    a290:	6023      	str	r3, [r4, #0]
    a292:	6833      	ldr	r3, [r6, #0]
    a294:	9318      	str	r3, [sp, #96]	; 0x60
    a296:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a298:	07db      	lsls	r3, r3, #31
    a29a:	d5fa      	bpl.n	a292 <PkaEcdsaVerify+0x17a>
    a29c:	4b36      	ldr	r3, [pc, #216]	; (a378 <PkaEcdsaVerify+0x260>)
    a29e:	6023      	str	r3, [r4, #0]
    a2a0:	6833      	ldr	r3, [r6, #0]
    a2a2:	9319      	str	r3, [sp, #100]	; 0x64
    a2a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a2a6:	07d8      	lsls	r0, r3, #31
    a2a8:	d5fa      	bpl.n	a2a0 <PkaEcdsaVerify+0x188>
    a2aa:	4b34      	ldr	r3, [pc, #208]	; (a37c <PkaEcdsaVerify+0x264>)
    a2ac:	6023      	str	r3, [r4, #0]
    a2ae:	6833      	ldr	r3, [r6, #0]
    a2b0:	931a      	str	r3, [sp, #104]	; 0x68
    a2b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a2b4:	07d9      	lsls	r1, r3, #31
    a2b6:	d5fa      	bpl.n	a2ae <PkaEcdsaVerify+0x196>
    a2b8:	4b31      	ldr	r3, [pc, #196]	; (a380 <PkaEcdsaVerify+0x268>)
    a2ba:	6023      	str	r3, [r4, #0]
    a2bc:	6833      	ldr	r3, [r6, #0]
    a2be:	931b      	str	r3, [sp, #108]	; 0x6c
    a2c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a2c2:	07da      	lsls	r2, r3, #31
    a2c4:	d5fa      	bpl.n	a2bc <PkaEcdsaVerify+0x1a4>
    a2c6:	4b2f      	ldr	r3, [pc, #188]	; (a384 <PkaEcdsaVerify+0x26c>)
    a2c8:	6023      	str	r3, [r4, #0]
    a2ca:	f000 fc1d 	bl	ab08 <PkaSum2ScalarMullt>
    a2ce:	bb08      	cbnz	r0, a314 <PkaEcdsaVerify+0x1fc>
    a2d0:	f8d8 3000 	ldr.w	r3, [r8]
    a2d4:	931c      	str	r3, [sp, #112]	; 0x70
    a2d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a2d8:	07db      	lsls	r3, r3, #31
    a2da:	d5f9      	bpl.n	a2d0 <PkaEcdsaVerify+0x1b8>
    a2dc:	603d      	str	r5, [r7, #0]
    a2de:	6833      	ldr	r3, [r6, #0]
    a2e0:	931d      	str	r3, [sp, #116]	; 0x74
    a2e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a2e4:	07d9      	lsls	r1, r3, #31
    a2e6:	d5fa      	bpl.n	a2de <PkaEcdsaVerify+0x1c6>
    a2e8:	4b27      	ldr	r3, [pc, #156]	; (a388 <PkaEcdsaVerify+0x270>)
    a2ea:	6023      	str	r3, [r4, #0]
    a2ec:	6833      	ldr	r3, [r6, #0]
    a2ee:	931e      	str	r3, [sp, #120]	; 0x78
    a2f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    a2f2:	07da      	lsls	r2, r3, #31
    a2f4:	d5fa      	bpl.n	a2ec <PkaEcdsaVerify+0x1d4>
    a2f6:	4b25      	ldr	r3, [pc, #148]	; (a38c <PkaEcdsaVerify+0x274>)
    a2f8:	6023      	str	r3, [r4, #0]
    a2fa:	f8d8 3000 	ldr.w	r3, [r8]
    a2fe:	931f      	str	r3, [sp, #124]	; 0x7c
    a300:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a302:	07db      	lsls	r3, r3, #31
    a304:	d5f9      	bpl.n	a2fa <PkaEcdsaVerify+0x1e2>
    a306:	4b0c      	ldr	r3, [pc, #48]	; (a338 <PkaEcdsaVerify+0x220>)
    a308:	681b      	ldr	r3, [r3, #0]
    a30a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    a30e:	4b20      	ldr	r3, [pc, #128]	; (a390 <PkaEcdsaVerify+0x278>)
    a310:	bf08      	it	eq
    a312:	4618      	moveq	r0, r3
    a314:	b020      	add	sp, #128	; 0x80
    a316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a31a:	481e      	ldr	r0, [pc, #120]	; (a394 <PkaEcdsaVerify+0x27c>)
    a31c:	e7fa      	b.n	a314 <PkaEcdsaVerify+0x1fc>
    a31e:	481e      	ldr	r0, [pc, #120]	; (a398 <PkaEcdsaVerify+0x280>)
    a320:	e7f8      	b.n	a314 <PkaEcdsaVerify+0x1fc>
    a322:	bf00      	nop
    a324:	5002b090 	.word	0x5002b090
    a328:	5002b080 	.word	0x5002b080
    a32c:	51021000 	.word	0x51021000
    a330:	29721fc0 	.word	0x29721fc0
    a334:	5002b0b4 	.word	0x5002b0b4
    a338:	5002b088 	.word	0x5002b088
    a33c:	2901cfc0 	.word	0x2901cfc0
    a340:	290e1fc0 	.word	0x290e1fc0
    a344:	29003fc0 	.word	0x29003fc0
    a348:	49020140 	.word	0x49020140
    a34c:	a8843100 	.word	0xa8843100
    a350:	49160000 	.word	0x49160000
    a354:	a1080140 	.word	0xa1080140
    a358:	88084480 	.word	0x88084480
    a35c:	5002b0b0 	.word	0x5002b0b0
    a360:	887044c0 	.word	0x887044c0
    a364:	417a0780 	.word	0x417a0780
    a368:	417e07c0 	.word	0x417e07c0
    a36c:	496a0000 	.word	0x496a0000
    a370:	49160680 	.word	0x49160680
    a374:	496e0040 	.word	0x496e0040
    a378:	21000200 	.word	0x21000200
    a37c:	21208200 	.word	0x21208200
    a380:	21208240 	.word	0x21208240
    a384:	21248280 	.word	0x21248280
    a388:	a161a140 	.word	0xa161a140
    a38c:	5161c800 	.word	0x5161c800
    a390:	00f10803 	.word	0x00f10803
    a394:	00f10801 	.word	0x00f10801
    a398:	00f10802 	.word	0x00f10802

0000a39c <nrf_cc310_bl_hash_update_internal>:
    a39c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3a0:	4b31      	ldr	r3, [pc, #196]	; (a468 <nrf_cc310_bl_hash_update_internal+0xcc>)
    a3a2:	6844      	ldr	r4, [r0, #4]
    a3a4:	4680      	mov	r8, r0
    a3a6:	4692      	mov	sl, r2
    a3a8:	4699      	mov	r9, r3
    a3aa:	681a      	ldr	r2, [r3, #0]
    a3ac:	2a00      	cmp	r2, #0
    a3ae:	d1fc      	bne.n	a3aa <nrf_cc310_bl_hash_update_internal+0xe>
    a3b0:	4b2e      	ldr	r3, [pc, #184]	; (a46c <nrf_cc310_bl_hash_update_internal+0xd0>)
    a3b2:	469b      	mov	fp, r3
    a3b4:	681a      	ldr	r2, [r3, #0]
    a3b6:	2a00      	cmp	r2, #0
    a3b8:	d1fc      	bne.n	a3b4 <nrf_cc310_bl_hash_update_internal+0x18>
    a3ba:	f04f 30ff 	mov.w	r0, #4294967295
    a3be:	9101      	str	r1, [sp, #4]
    a3c0:	f000 fc94 	bl	acec <SaSi_HalClearInterruptBit>
    a3c4:	2080      	movs	r0, #128	; 0x80
    a3c6:	f000 fc97 	bl	acf8 <SaSi_HalMaskInterrupt>
    a3ca:	4d29      	ldr	r5, [pc, #164]	; (a470 <nrf_cc310_bl_hash_update_internal+0xd4>)
    a3cc:	4a29      	ldr	r2, [pc, #164]	; (a474 <nrf_cc310_bl_hash_update_internal+0xd8>)
    a3ce:	4f2a      	ldr	r7, [pc, #168]	; (a478 <nrf_cc310_bl_hash_update_internal+0xdc>)
    a3d0:	4e2a      	ldr	r6, [pc, #168]	; (a47c <nrf_cc310_bl_hash_update_internal+0xe0>)
    a3d2:	2301      	movs	r3, #1
    a3d4:	2007      	movs	r0, #7
    a3d6:	602b      	str	r3, [r5, #0]
    a3d8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    a3dc:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    a3e0:	6013      	str	r3, [r2, #0]
    a3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a3e4:	603b      	str	r3, [r7, #0]
    a3e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a3e8:	6033      	str	r3, [r6, #0]
    a3ea:	f8d8 3000 	ldr.w	r3, [r8]
    a3ee:	f842 3c04 	str.w	r3, [r2, #-4]
    a3f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a3f6:	4620      	mov	r0, r4
    a3f8:	4798      	blx	r3
    a3fa:	9901      	ldr	r1, [sp, #4]
    a3fc:	f8d9 3000 	ldr.w	r3, [r9]
    a400:	2b00      	cmp	r3, #0
    a402:	d1fb      	bne.n	a3fc <nrf_cc310_bl_hash_update_internal+0x60>
    a404:	f1ba 0f00 	cmp.w	sl, #0
    a408:	d120      	bne.n	a44c <nrf_cc310_bl_hash_update_internal+0xb0>
    a40a:	4b1d      	ldr	r3, [pc, #116]	; (a480 <nrf_cc310_bl_hash_update_internal+0xe4>)
    a40c:	2204      	movs	r2, #4
    a40e:	601a      	str	r2, [r3, #0]
    a410:	f8d9 3000 	ldr.w	r3, [r9]
    a414:	2b00      	cmp	r3, #0
    a416:	d1fb      	bne.n	a410 <nrf_cc310_bl_hash_update_internal+0x74>
    a418:	f8db a000 	ldr.w	sl, [fp]
    a41c:	f1ba 0f00 	cmp.w	sl, #0
    a420:	d1fa      	bne.n	a418 <nrf_cc310_bl_hash_update_internal+0x7c>
    a422:	f8d8 300c 	ldr.w	r3, [r8, #12]
    a426:	4620      	mov	r0, r4
    a428:	4798      	blx	r3
    a42a:	683b      	ldr	r3, [r7, #0]
    a42c:	6263      	str	r3, [r4, #36]	; 0x24
    a42e:	6833      	ldr	r3, [r6, #0]
    a430:	62a3      	str	r3, [r4, #40]	; 0x28
    a432:	4b14      	ldr	r3, [pc, #80]	; (a484 <nrf_cc310_bl_hash_update_internal+0xe8>)
    a434:	f8c3 a000 	str.w	sl, [r3]
    a438:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    a43c:	f8d9 3000 	ldr.w	r3, [r9]
    a440:	2b00      	cmp	r3, #0
    a442:	d1fb      	bne.n	a43c <nrf_cc310_bl_hash_update_internal+0xa0>
    a444:	602b      	str	r3, [r5, #0]
    a446:	b003      	add	sp, #12
    a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a44c:	6a23      	ldr	r3, [r4, #32]
    a44e:	2b01      	cmp	r3, #1
    a450:	bf04      	itt	eq
    a452:	4a0c      	ldreq	r2, [pc, #48]	; (a484 <nrf_cc310_bl_hash_update_internal+0xe8>)
    a454:	6013      	streq	r3, [r2, #0]
    a456:	4b0c      	ldr	r3, [pc, #48]	; (a488 <nrf_cc310_bl_hash_update_internal+0xec>)
    a458:	2040      	movs	r0, #64	; 0x40
    a45a:	6019      	str	r1, [r3, #0]
    a45c:	f8c3 a004 	str.w	sl, [r3, #4]
    a460:	f000 fc50 	bl	ad04 <SaSi_HalWaitInterrupt>
    a464:	e7d4      	b.n	a410 <nrf_cc310_bl_hash_update_internal+0x74>
    a466:	bf00      	nop
    a468:	5002b910 	.word	0x5002b910
    a46c:	5002bc20 	.word	0x5002bc20
    a470:	5002b818 	.word	0x5002b818
    a474:	5002b900 	.word	0x5002b900
    a478:	5002b7cc 	.word	0x5002b7cc
    a47c:	5002b7d0 	.word	0x5002b7d0
    a480:	5002b7c8 	.word	0x5002b7c8
    a484:	5002b684 	.word	0x5002b684
    a488:	5002bc28 	.word	0x5002bc28

0000a48c <PkaDoubleMdf2Mdf>:
    a48c:	b510      	push	{r4, lr}
    a48e:	4b54      	ldr	r3, [pc, #336]	; (a5e0 <PkaDoubleMdf2Mdf+0x154>)
    a490:	b098      	sub	sp, #96	; 0x60
    a492:	4619      	mov	r1, r3
    a494:	681a      	ldr	r2, [r3, #0]
    a496:	9201      	str	r2, [sp, #4]
    a498:	9a01      	ldr	r2, [sp, #4]
    a49a:	07d2      	lsls	r2, r2, #31
    a49c:	d5fa      	bpl.n	a494 <PkaDoubleMdf2Mdf+0x8>
    a49e:	4b51      	ldr	r3, [pc, #324]	; (a5e4 <PkaDoubleMdf2Mdf+0x158>)
    a4a0:	4a51      	ldr	r2, [pc, #324]	; (a5e8 <PkaDoubleMdf2Mdf+0x15c>)
    a4a2:	601a      	str	r2, [r3, #0]
    a4a4:	680a      	ldr	r2, [r1, #0]
    a4a6:	9202      	str	r2, [sp, #8]
    a4a8:	9a02      	ldr	r2, [sp, #8]
    a4aa:	07d4      	lsls	r4, r2, #31
    a4ac:	d5fa      	bpl.n	a4a4 <PkaDoubleMdf2Mdf+0x18>
    a4ae:	4a4f      	ldr	r2, [pc, #316]	; (a5ec <PkaDoubleMdf2Mdf+0x160>)
    a4b0:	601a      	str	r2, [r3, #0]
    a4b2:	680a      	ldr	r2, [r1, #0]
    a4b4:	9203      	str	r2, [sp, #12]
    a4b6:	9a03      	ldr	r2, [sp, #12]
    a4b8:	07d0      	lsls	r0, r2, #31
    a4ba:	d5fa      	bpl.n	a4b2 <PkaDoubleMdf2Mdf+0x26>
    a4bc:	484c      	ldr	r0, [pc, #304]	; (a5f0 <PkaDoubleMdf2Mdf+0x164>)
    a4be:	6018      	str	r0, [r3, #0]
    a4c0:	680a      	ldr	r2, [r1, #0]
    a4c2:	9204      	str	r2, [sp, #16]
    a4c4:	9a04      	ldr	r2, [sp, #16]
    a4c6:	07d2      	lsls	r2, r2, #31
    a4c8:	d5fa      	bpl.n	a4c0 <PkaDoubleMdf2Mdf+0x34>
    a4ca:	4a4a      	ldr	r2, [pc, #296]	; (a5f4 <PkaDoubleMdf2Mdf+0x168>)
    a4cc:	601a      	str	r2, [r3, #0]
    a4ce:	680a      	ldr	r2, [r1, #0]
    a4d0:	9205      	str	r2, [sp, #20]
    a4d2:	9a05      	ldr	r2, [sp, #20]
    a4d4:	07d4      	lsls	r4, r2, #31
    a4d6:	d5fa      	bpl.n	a4ce <PkaDoubleMdf2Mdf+0x42>
    a4d8:	4a47      	ldr	r2, [pc, #284]	; (a5f8 <PkaDoubleMdf2Mdf+0x16c>)
    a4da:	601a      	str	r2, [r3, #0]
    a4dc:	680a      	ldr	r2, [r1, #0]
    a4de:	9206      	str	r2, [sp, #24]
    a4e0:	9a06      	ldr	r2, [sp, #24]
    a4e2:	07d2      	lsls	r2, r2, #31
    a4e4:	d5fa      	bpl.n	a4dc <PkaDoubleMdf2Mdf+0x50>
    a4e6:	4a45      	ldr	r2, [pc, #276]	; (a5fc <PkaDoubleMdf2Mdf+0x170>)
    a4e8:	601a      	str	r2, [r3, #0]
    a4ea:	680a      	ldr	r2, [r1, #0]
    a4ec:	9207      	str	r2, [sp, #28]
    a4ee:	9a07      	ldr	r2, [sp, #28]
    a4f0:	07d4      	lsls	r4, r2, #31
    a4f2:	d5fa      	bpl.n	a4ea <PkaDoubleMdf2Mdf+0x5e>
    a4f4:	4a42      	ldr	r2, [pc, #264]	; (a600 <PkaDoubleMdf2Mdf+0x174>)
    a4f6:	601a      	str	r2, [r3, #0]
    a4f8:	680a      	ldr	r2, [r1, #0]
    a4fa:	9208      	str	r2, [sp, #32]
    a4fc:	9a08      	ldr	r2, [sp, #32]
    a4fe:	07d2      	lsls	r2, r2, #31
    a500:	d5fa      	bpl.n	a4f8 <PkaDoubleMdf2Mdf+0x6c>
    a502:	4a40      	ldr	r2, [pc, #256]	; (a604 <PkaDoubleMdf2Mdf+0x178>)
    a504:	601a      	str	r2, [r3, #0]
    a506:	680a      	ldr	r2, [r1, #0]
    a508:	9209      	str	r2, [sp, #36]	; 0x24
    a50a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a50c:	07d4      	lsls	r4, r2, #31
    a50e:	d5fa      	bpl.n	a506 <PkaDoubleMdf2Mdf+0x7a>
    a510:	4a3d      	ldr	r2, [pc, #244]	; (a608 <PkaDoubleMdf2Mdf+0x17c>)
    a512:	601a      	str	r2, [r3, #0]
    a514:	680a      	ldr	r2, [r1, #0]
    a516:	920a      	str	r2, [sp, #40]	; 0x28
    a518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a51a:	07d2      	lsls	r2, r2, #31
    a51c:	d5fa      	bpl.n	a514 <PkaDoubleMdf2Mdf+0x88>
    a51e:	4a3b      	ldr	r2, [pc, #236]	; (a60c <PkaDoubleMdf2Mdf+0x180>)
    a520:	601a      	str	r2, [r3, #0]
    a522:	680a      	ldr	r2, [r1, #0]
    a524:	920b      	str	r2, [sp, #44]	; 0x2c
    a526:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a528:	07d4      	lsls	r4, r2, #31
    a52a:	d5fa      	bpl.n	a522 <PkaDoubleMdf2Mdf+0x96>
    a52c:	4a38      	ldr	r2, [pc, #224]	; (a610 <PkaDoubleMdf2Mdf+0x184>)
    a52e:	601a      	str	r2, [r3, #0]
    a530:	680a      	ldr	r2, [r1, #0]
    a532:	920c      	str	r2, [sp, #48]	; 0x30
    a534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a536:	07d2      	lsls	r2, r2, #31
    a538:	d5fa      	bpl.n	a530 <PkaDoubleMdf2Mdf+0xa4>
    a53a:	4a36      	ldr	r2, [pc, #216]	; (a614 <PkaDoubleMdf2Mdf+0x188>)
    a53c:	601a      	str	r2, [r3, #0]
    a53e:	680a      	ldr	r2, [r1, #0]
    a540:	920d      	str	r2, [sp, #52]	; 0x34
    a542:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a544:	07d4      	lsls	r4, r2, #31
    a546:	d5fa      	bpl.n	a53e <PkaDoubleMdf2Mdf+0xb2>
    a548:	4a33      	ldr	r2, [pc, #204]	; (a618 <PkaDoubleMdf2Mdf+0x18c>)
    a54a:	601a      	str	r2, [r3, #0]
    a54c:	680a      	ldr	r2, [r1, #0]
    a54e:	920e      	str	r2, [sp, #56]	; 0x38
    a550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a552:	07d2      	lsls	r2, r2, #31
    a554:	d5fa      	bpl.n	a54c <PkaDoubleMdf2Mdf+0xc0>
    a556:	4a31      	ldr	r2, [pc, #196]	; (a61c <PkaDoubleMdf2Mdf+0x190>)
    a558:	601a      	str	r2, [r3, #0]
    a55a:	680a      	ldr	r2, [r1, #0]
    a55c:	920f      	str	r2, [sp, #60]	; 0x3c
    a55e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a560:	07d4      	lsls	r4, r2, #31
    a562:	d5fa      	bpl.n	a55a <PkaDoubleMdf2Mdf+0xce>
    a564:	4a2e      	ldr	r2, [pc, #184]	; (a620 <PkaDoubleMdf2Mdf+0x194>)
    a566:	601a      	str	r2, [r3, #0]
    a568:	680a      	ldr	r2, [r1, #0]
    a56a:	9210      	str	r2, [sp, #64]	; 0x40
    a56c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a56e:	07d2      	lsls	r2, r2, #31
    a570:	d5fa      	bpl.n	a568 <PkaDoubleMdf2Mdf+0xdc>
    a572:	4a2c      	ldr	r2, [pc, #176]	; (a624 <PkaDoubleMdf2Mdf+0x198>)
    a574:	601a      	str	r2, [r3, #0]
    a576:	4b1a      	ldr	r3, [pc, #104]	; (a5e0 <PkaDoubleMdf2Mdf+0x154>)
    a578:	4619      	mov	r1, r3
    a57a:	681c      	ldr	r4, [r3, #0]
    a57c:	9411      	str	r4, [sp, #68]	; 0x44
    a57e:	9c11      	ldr	r4, [sp, #68]	; 0x44
    a580:	07e4      	lsls	r4, r4, #31
    a582:	d5fa      	bpl.n	a57a <PkaDoubleMdf2Mdf+0xee>
    a584:	4b17      	ldr	r3, [pc, #92]	; (a5e4 <PkaDoubleMdf2Mdf+0x158>)
    a586:	6018      	str	r0, [r3, #0]
    a588:	6808      	ldr	r0, [r1, #0]
    a58a:	9012      	str	r0, [sp, #72]	; 0x48
    a58c:	9812      	ldr	r0, [sp, #72]	; 0x48
    a58e:	07c4      	lsls	r4, r0, #31
    a590:	d5fa      	bpl.n	a588 <PkaDoubleMdf2Mdf+0xfc>
    a592:	601a      	str	r2, [r3, #0]
    a594:	680a      	ldr	r2, [r1, #0]
    a596:	9213      	str	r2, [sp, #76]	; 0x4c
    a598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a59a:	07d0      	lsls	r0, r2, #31
    a59c:	d5fa      	bpl.n	a594 <PkaDoubleMdf2Mdf+0x108>
    a59e:	4a12      	ldr	r2, [pc, #72]	; (a5e8 <PkaDoubleMdf2Mdf+0x15c>)
    a5a0:	601a      	str	r2, [r3, #0]
    a5a2:	680a      	ldr	r2, [r1, #0]
    a5a4:	9214      	str	r2, [sp, #80]	; 0x50
    a5a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a5a8:	07d2      	lsls	r2, r2, #31
    a5aa:	d5fa      	bpl.n	a5a2 <PkaDoubleMdf2Mdf+0x116>
    a5ac:	4a1e      	ldr	r2, [pc, #120]	; (a628 <PkaDoubleMdf2Mdf+0x19c>)
    a5ae:	601a      	str	r2, [r3, #0]
    a5b0:	680a      	ldr	r2, [r1, #0]
    a5b2:	9215      	str	r2, [sp, #84]	; 0x54
    a5b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a5b6:	07d4      	lsls	r4, r2, #31
    a5b8:	d5fa      	bpl.n	a5b0 <PkaDoubleMdf2Mdf+0x124>
    a5ba:	4a1c      	ldr	r2, [pc, #112]	; (a62c <PkaDoubleMdf2Mdf+0x1a0>)
    a5bc:	601a      	str	r2, [r3, #0]
    a5be:	680a      	ldr	r2, [r1, #0]
    a5c0:	9216      	str	r2, [sp, #88]	; 0x58
    a5c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a5c4:	07d0      	lsls	r0, r2, #31
    a5c6:	d5fa      	bpl.n	a5be <PkaDoubleMdf2Mdf+0x132>
    a5c8:	4a19      	ldr	r2, [pc, #100]	; (a630 <PkaDoubleMdf2Mdf+0x1a4>)
    a5ca:	601a      	str	r2, [r3, #0]
    a5cc:	680a      	ldr	r2, [r1, #0]
    a5ce:	9217      	str	r2, [sp, #92]	; 0x5c
    a5d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a5d2:	07d2      	lsls	r2, r2, #31
    a5d4:	d5fa      	bpl.n	a5cc <PkaDoubleMdf2Mdf+0x140>
    a5d6:	4a17      	ldr	r2, [pc, #92]	; (a634 <PkaDoubleMdf2Mdf+0x1a8>)
    a5d8:	601a      	str	r2, [r3, #0]
    a5da:	b018      	add	sp, #96	; 0x60
    a5dc:	bd10      	pop	{r4, pc}
    a5de:	bf00      	nop
    a5e0:	5002b0b0 	.word	0x5002b0b0
    a5e4:	5002b080 	.word	0x5002b080
    a5e8:	21659300 	.word	0x21659300
    a5ec:	90310400 	.word	0x90310400
    a5f0:	90659640 	.word	0x90659640
    a5f4:	21618300 	.word	0x21618300
    a5f8:	2130c300 	.word	0x2130c300
    a5fc:	9064c300 	.word	0x9064c300
    a600:	90618100 	.word	0x90618100
    a604:	21104600 	.word	0x21104600
    a608:	21118100 	.word	0x21118100
    a60c:	21444100 	.word	0x21444100
    a610:	2920c300 	.word	0x2920c300
    a614:	c810460c 	.word	0xc810460c
    a618:	21318600 	.word	0x21318600
    a61c:	2160c300 	.word	0x2160c300
    a620:	2928c140 	.word	0x2928c140
    a624:	21659640 	.word	0x21659640
    a628:	90311300 	.word	0x90311300
    a62c:	29259640 	.word	0x29259640
    a630:	c8144659 	.word	0xc8144659
    a634:	49320440 	.word	0x49320440

0000a638 <PkaDoubleMdf2Jcb>:
    a638:	b510      	push	{r4, lr}
    a63a:	4b49      	ldr	r3, [pc, #292]	; (a760 <PkaDoubleMdf2Jcb+0x128>)
    a63c:	b094      	sub	sp, #80	; 0x50
    a63e:	4619      	mov	r1, r3
    a640:	681a      	ldr	r2, [r3, #0]
    a642:	9200      	str	r2, [sp, #0]
    a644:	9a00      	ldr	r2, [sp, #0]
    a646:	07d2      	lsls	r2, r2, #31
    a648:	d5fa      	bpl.n	a640 <PkaDoubleMdf2Jcb+0x8>
    a64a:	4b46      	ldr	r3, [pc, #280]	; (a764 <PkaDoubleMdf2Jcb+0x12c>)
    a64c:	4a46      	ldr	r2, [pc, #280]	; (a768 <PkaDoubleMdf2Jcb+0x130>)
    a64e:	601a      	str	r2, [r3, #0]
    a650:	680a      	ldr	r2, [r1, #0]
    a652:	9201      	str	r2, [sp, #4]
    a654:	9a01      	ldr	r2, [sp, #4]
    a656:	07d4      	lsls	r4, r2, #31
    a658:	d5fa      	bpl.n	a650 <PkaDoubleMdf2Jcb+0x18>
    a65a:	4a44      	ldr	r2, [pc, #272]	; (a76c <PkaDoubleMdf2Jcb+0x134>)
    a65c:	601a      	str	r2, [r3, #0]
    a65e:	680a      	ldr	r2, [r1, #0]
    a660:	9202      	str	r2, [sp, #8]
    a662:	9a02      	ldr	r2, [sp, #8]
    a664:	07d0      	lsls	r0, r2, #31
    a666:	d5fa      	bpl.n	a65e <PkaDoubleMdf2Jcb+0x26>
    a668:	4841      	ldr	r0, [pc, #260]	; (a770 <PkaDoubleMdf2Jcb+0x138>)
    a66a:	6018      	str	r0, [r3, #0]
    a66c:	680a      	ldr	r2, [r1, #0]
    a66e:	9203      	str	r2, [sp, #12]
    a670:	9a03      	ldr	r2, [sp, #12]
    a672:	07d2      	lsls	r2, r2, #31
    a674:	d5fa      	bpl.n	a66c <PkaDoubleMdf2Jcb+0x34>
    a676:	4a3f      	ldr	r2, [pc, #252]	; (a774 <PkaDoubleMdf2Jcb+0x13c>)
    a678:	601a      	str	r2, [r3, #0]
    a67a:	680a      	ldr	r2, [r1, #0]
    a67c:	9204      	str	r2, [sp, #16]
    a67e:	9a04      	ldr	r2, [sp, #16]
    a680:	07d4      	lsls	r4, r2, #31
    a682:	d5fa      	bpl.n	a67a <PkaDoubleMdf2Jcb+0x42>
    a684:	4a3c      	ldr	r2, [pc, #240]	; (a778 <PkaDoubleMdf2Jcb+0x140>)
    a686:	601a      	str	r2, [r3, #0]
    a688:	680a      	ldr	r2, [r1, #0]
    a68a:	9205      	str	r2, [sp, #20]
    a68c:	9a05      	ldr	r2, [sp, #20]
    a68e:	07d2      	lsls	r2, r2, #31
    a690:	d5fa      	bpl.n	a688 <PkaDoubleMdf2Jcb+0x50>
    a692:	4a3a      	ldr	r2, [pc, #232]	; (a77c <PkaDoubleMdf2Jcb+0x144>)
    a694:	601a      	str	r2, [r3, #0]
    a696:	680a      	ldr	r2, [r1, #0]
    a698:	9206      	str	r2, [sp, #24]
    a69a:	9a06      	ldr	r2, [sp, #24]
    a69c:	07d4      	lsls	r4, r2, #31
    a69e:	d5fa      	bpl.n	a696 <PkaDoubleMdf2Jcb+0x5e>
    a6a0:	4a37      	ldr	r2, [pc, #220]	; (a780 <PkaDoubleMdf2Jcb+0x148>)
    a6a2:	601a      	str	r2, [r3, #0]
    a6a4:	680a      	ldr	r2, [r1, #0]
    a6a6:	9207      	str	r2, [sp, #28]
    a6a8:	9a07      	ldr	r2, [sp, #28]
    a6aa:	07d2      	lsls	r2, r2, #31
    a6ac:	d5fa      	bpl.n	a6a4 <PkaDoubleMdf2Jcb+0x6c>
    a6ae:	4a35      	ldr	r2, [pc, #212]	; (a784 <PkaDoubleMdf2Jcb+0x14c>)
    a6b0:	601a      	str	r2, [r3, #0]
    a6b2:	680a      	ldr	r2, [r1, #0]
    a6b4:	9208      	str	r2, [sp, #32]
    a6b6:	9a08      	ldr	r2, [sp, #32]
    a6b8:	07d4      	lsls	r4, r2, #31
    a6ba:	d5fa      	bpl.n	a6b2 <PkaDoubleMdf2Jcb+0x7a>
    a6bc:	4a32      	ldr	r2, [pc, #200]	; (a788 <PkaDoubleMdf2Jcb+0x150>)
    a6be:	601a      	str	r2, [r3, #0]
    a6c0:	680a      	ldr	r2, [r1, #0]
    a6c2:	9209      	str	r2, [sp, #36]	; 0x24
    a6c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a6c6:	07d2      	lsls	r2, r2, #31
    a6c8:	d5fa      	bpl.n	a6c0 <PkaDoubleMdf2Jcb+0x88>
    a6ca:	4a30      	ldr	r2, [pc, #192]	; (a78c <PkaDoubleMdf2Jcb+0x154>)
    a6cc:	601a      	str	r2, [r3, #0]
    a6ce:	680a      	ldr	r2, [r1, #0]
    a6d0:	920a      	str	r2, [sp, #40]	; 0x28
    a6d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a6d4:	07d4      	lsls	r4, r2, #31
    a6d6:	d5fa      	bpl.n	a6ce <PkaDoubleMdf2Jcb+0x96>
    a6d8:	4a2d      	ldr	r2, [pc, #180]	; (a790 <PkaDoubleMdf2Jcb+0x158>)
    a6da:	601a      	str	r2, [r3, #0]
    a6dc:	680a      	ldr	r2, [r1, #0]
    a6de:	920b      	str	r2, [sp, #44]	; 0x2c
    a6e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a6e2:	07d2      	lsls	r2, r2, #31
    a6e4:	d5fa      	bpl.n	a6dc <PkaDoubleMdf2Jcb+0xa4>
    a6e6:	4a2b      	ldr	r2, [pc, #172]	; (a794 <PkaDoubleMdf2Jcb+0x15c>)
    a6e8:	601a      	str	r2, [r3, #0]
    a6ea:	680a      	ldr	r2, [r1, #0]
    a6ec:	920c      	str	r2, [sp, #48]	; 0x30
    a6ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a6f0:	07d4      	lsls	r4, r2, #31
    a6f2:	d5fa      	bpl.n	a6ea <PkaDoubleMdf2Jcb+0xb2>
    a6f4:	4a28      	ldr	r2, [pc, #160]	; (a798 <PkaDoubleMdf2Jcb+0x160>)
    a6f6:	601a      	str	r2, [r3, #0]
    a6f8:	680a      	ldr	r2, [r1, #0]
    a6fa:	920d      	str	r2, [sp, #52]	; 0x34
    a6fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a6fe:	07d2      	lsls	r2, r2, #31
    a700:	d5fa      	bpl.n	a6f8 <PkaDoubleMdf2Jcb+0xc0>
    a702:	4a26      	ldr	r2, [pc, #152]	; (a79c <PkaDoubleMdf2Jcb+0x164>)
    a704:	601a      	str	r2, [r3, #0]
    a706:	680a      	ldr	r2, [r1, #0]
    a708:	920e      	str	r2, [sp, #56]	; 0x38
    a70a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a70c:	07d4      	lsls	r4, r2, #31
    a70e:	d5fa      	bpl.n	a706 <PkaDoubleMdf2Jcb+0xce>
    a710:	4a23      	ldr	r2, [pc, #140]	; (a7a0 <PkaDoubleMdf2Jcb+0x168>)
    a712:	601a      	str	r2, [r3, #0]
    a714:	680a      	ldr	r2, [r1, #0]
    a716:	920f      	str	r2, [sp, #60]	; 0x3c
    a718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a71a:	07d2      	lsls	r2, r2, #31
    a71c:	d5fa      	bpl.n	a714 <PkaDoubleMdf2Jcb+0xdc>
    a71e:	4a21      	ldr	r2, [pc, #132]	; (a7a4 <PkaDoubleMdf2Jcb+0x16c>)
    a720:	601a      	str	r2, [r3, #0]
    a722:	4b0f      	ldr	r3, [pc, #60]	; (a760 <PkaDoubleMdf2Jcb+0x128>)
    a724:	4619      	mov	r1, r3
    a726:	681c      	ldr	r4, [r3, #0]
    a728:	9410      	str	r4, [sp, #64]	; 0x40
    a72a:	9c10      	ldr	r4, [sp, #64]	; 0x40
    a72c:	07e4      	lsls	r4, r4, #31
    a72e:	d5fa      	bpl.n	a726 <PkaDoubleMdf2Jcb+0xee>
    a730:	4b0c      	ldr	r3, [pc, #48]	; (a764 <PkaDoubleMdf2Jcb+0x12c>)
    a732:	6018      	str	r0, [r3, #0]
    a734:	6808      	ldr	r0, [r1, #0]
    a736:	9011      	str	r0, [sp, #68]	; 0x44
    a738:	9811      	ldr	r0, [sp, #68]	; 0x44
    a73a:	07c4      	lsls	r4, r0, #31
    a73c:	d5fa      	bpl.n	a734 <PkaDoubleMdf2Jcb+0xfc>
    a73e:	601a      	str	r2, [r3, #0]
    a740:	680a      	ldr	r2, [r1, #0]
    a742:	9212      	str	r2, [sp, #72]	; 0x48
    a744:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a746:	07d0      	lsls	r0, r2, #31
    a748:	d5fa      	bpl.n	a740 <PkaDoubleMdf2Jcb+0x108>
    a74a:	4a17      	ldr	r2, [pc, #92]	; (a7a8 <PkaDoubleMdf2Jcb+0x170>)
    a74c:	601a      	str	r2, [r3, #0]
    a74e:	680a      	ldr	r2, [r1, #0]
    a750:	9213      	str	r2, [sp, #76]	; 0x4c
    a752:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a754:	07d2      	lsls	r2, r2, #31
    a756:	d5fa      	bpl.n	a74e <PkaDoubleMdf2Jcb+0x116>
    a758:	4a14      	ldr	r2, [pc, #80]	; (a7ac <PkaDoubleMdf2Jcb+0x174>)
    a75a:	601a      	str	r2, [r3, #0]
    a75c:	b014      	add	sp, #80	; 0x50
    a75e:	bd10      	pop	{r4, pc}
    a760:	5002b0b0 	.word	0x5002b0b0
    a764:	5002b080 	.word	0x5002b080
    a768:	21659080 	.word	0x21659080
    a76c:	90090400 	.word	0x90090400
    a770:	90659640 	.word	0x90659640
    a774:	21618080 	.word	0x21618080
    a778:	21082080 	.word	0x21082080
    a77c:	90642080 	.word	0x90642080
    a780:	90618100 	.word	0x90618100
    a784:	21104600 	.word	0x21104600
    a788:	21118100 	.word	0x21118100
    a78c:	21444100 	.word	0x21444100
    a790:	29202080 	.word	0x29202080
    a794:	c8104602 	.word	0xc8104602
    a798:	21098600 	.word	0x21098600
    a79c:	21602080 	.word	0x21602080
    a7a0:	29282140 	.word	0x29282140
    a7a4:	21659640 	.word	0x21659640
    a7a8:	29259640 	.word	0x29259640
    a7ac:	c8144659 	.word	0xc8144659

0000a7b0 <PkaAddJcbAfn2Mdf>:
    a7b0:	b510      	push	{r4, lr}
    a7b2:	4b50      	ldr	r3, [pc, #320]	; (a8f4 <PkaAddJcbAfn2Mdf+0x144>)
    a7b4:	b096      	sub	sp, #88	; 0x58
    a7b6:	461c      	mov	r4, r3
    a7b8:	681a      	ldr	r2, [r3, #0]
    a7ba:	9201      	str	r2, [sp, #4]
    a7bc:	9a01      	ldr	r2, [sp, #4]
    a7be:	07d2      	lsls	r2, r2, #31
    a7c0:	d5fa      	bpl.n	a7b8 <PkaAddJcbAfn2Mdf+0x8>
    a7c2:	4b4d      	ldr	r3, [pc, #308]	; (a8f8 <PkaAddJcbAfn2Mdf+0x148>)
    a7c4:	4a4d      	ldr	r2, [pc, #308]	; (a8fc <PkaAddJcbAfn2Mdf+0x14c>)
    a7c6:	601a      	str	r2, [r3, #0]
    a7c8:	6822      	ldr	r2, [r4, #0]
    a7ca:	9202      	str	r2, [sp, #8]
    a7cc:	9a02      	ldr	r2, [sp, #8]
    a7ce:	07d2      	lsls	r2, r2, #31
    a7d0:	d5fa      	bpl.n	a7c8 <PkaAddJcbAfn2Mdf+0x18>
    a7d2:	4a4b      	ldr	r2, [pc, #300]	; (a900 <PkaAddJcbAfn2Mdf+0x150>)
    a7d4:	601a      	str	r2, [r3, #0]
    a7d6:	4a4b      	ldr	r2, [pc, #300]	; (a904 <PkaAddJcbAfn2Mdf+0x154>)
    a7d8:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    a7dc:	6822      	ldr	r2, [r4, #0]
    a7de:	9203      	str	r2, [sp, #12]
    a7e0:	9a03      	ldr	r2, [sp, #12]
    a7e2:	07d2      	lsls	r2, r2, #31
    a7e4:	d5fa      	bpl.n	a7dc <PkaAddJcbAfn2Mdf+0x2c>
    a7e6:	6018      	str	r0, [r3, #0]
    a7e8:	6822      	ldr	r2, [r4, #0]
    a7ea:	9204      	str	r2, [sp, #16]
    a7ec:	9a04      	ldr	r2, [sp, #16]
    a7ee:	07d0      	lsls	r0, r2, #31
    a7f0:	d5fa      	bpl.n	a7e8 <PkaAddJcbAfn2Mdf+0x38>
    a7f2:	4a45      	ldr	r2, [pc, #276]	; (a908 <PkaAddJcbAfn2Mdf+0x158>)
    a7f4:	601a      	str	r2, [r3, #0]
    a7f6:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    a7fa:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    a7fe:	6822      	ldr	r2, [r4, #0]
    a800:	9205      	str	r2, [sp, #20]
    a802:	9a05      	ldr	r2, [sp, #20]
    a804:	07d2      	lsls	r2, r2, #31
    a806:	d5fa      	bpl.n	a7fe <PkaAddJcbAfn2Mdf+0x4e>
    a808:	6019      	str	r1, [r3, #0]
    a80a:	6822      	ldr	r2, [r4, #0]
    a80c:	9206      	str	r2, [sp, #24]
    a80e:	9a06      	ldr	r2, [sp, #24]
    a810:	07d0      	lsls	r0, r2, #31
    a812:	d5fa      	bpl.n	a80a <PkaAddJcbAfn2Mdf+0x5a>
    a814:	4a3d      	ldr	r2, [pc, #244]	; (a90c <PkaAddJcbAfn2Mdf+0x15c>)
    a816:	601a      	str	r2, [r3, #0]
    a818:	6822      	ldr	r2, [r4, #0]
    a81a:	9207      	str	r2, [sp, #28]
    a81c:	9a07      	ldr	r2, [sp, #28]
    a81e:	07d1      	lsls	r1, r2, #31
    a820:	d5fa      	bpl.n	a818 <PkaAddJcbAfn2Mdf+0x68>
    a822:	4a3b      	ldr	r2, [pc, #236]	; (a910 <PkaAddJcbAfn2Mdf+0x160>)
    a824:	601a      	str	r2, [r3, #0]
    a826:	6822      	ldr	r2, [r4, #0]
    a828:	9208      	str	r2, [sp, #32]
    a82a:	9a08      	ldr	r2, [sp, #32]
    a82c:	07d2      	lsls	r2, r2, #31
    a82e:	d5fa      	bpl.n	a826 <PkaAddJcbAfn2Mdf+0x76>
    a830:	4a38      	ldr	r2, [pc, #224]	; (a914 <PkaAddJcbAfn2Mdf+0x164>)
    a832:	601a      	str	r2, [r3, #0]
    a834:	6822      	ldr	r2, [r4, #0]
    a836:	9209      	str	r2, [sp, #36]	; 0x24
    a838:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a83a:	07d0      	lsls	r0, r2, #31
    a83c:	d5fa      	bpl.n	a834 <PkaAddJcbAfn2Mdf+0x84>
    a83e:	4a36      	ldr	r2, [pc, #216]	; (a918 <PkaAddJcbAfn2Mdf+0x168>)
    a840:	601a      	str	r2, [r3, #0]
    a842:	6822      	ldr	r2, [r4, #0]
    a844:	920a      	str	r2, [sp, #40]	; 0x28
    a846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a848:	07d1      	lsls	r1, r2, #31
    a84a:	d5fa      	bpl.n	a842 <PkaAddJcbAfn2Mdf+0x92>
    a84c:	4a33      	ldr	r2, [pc, #204]	; (a91c <PkaAddJcbAfn2Mdf+0x16c>)
    a84e:	601a      	str	r2, [r3, #0]
    a850:	6822      	ldr	r2, [r4, #0]
    a852:	920b      	str	r2, [sp, #44]	; 0x2c
    a854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a856:	07d2      	lsls	r2, r2, #31
    a858:	d5fa      	bpl.n	a850 <PkaAddJcbAfn2Mdf+0xa0>
    a85a:	4a31      	ldr	r2, [pc, #196]	; (a920 <PkaAddJcbAfn2Mdf+0x170>)
    a85c:	601a      	str	r2, [r3, #0]
    a85e:	6822      	ldr	r2, [r4, #0]
    a860:	920c      	str	r2, [sp, #48]	; 0x30
    a862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a864:	07d0      	lsls	r0, r2, #31
    a866:	d5fa      	bpl.n	a85e <PkaAddJcbAfn2Mdf+0xae>
    a868:	4a2e      	ldr	r2, [pc, #184]	; (a924 <PkaAddJcbAfn2Mdf+0x174>)
    a86a:	601a      	str	r2, [r3, #0]
    a86c:	6822      	ldr	r2, [r4, #0]
    a86e:	920d      	str	r2, [sp, #52]	; 0x34
    a870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a872:	07d1      	lsls	r1, r2, #31
    a874:	d5fa      	bpl.n	a86c <PkaAddJcbAfn2Mdf+0xbc>
    a876:	4a2c      	ldr	r2, [pc, #176]	; (a928 <PkaAddJcbAfn2Mdf+0x178>)
    a878:	601a      	str	r2, [r3, #0]
    a87a:	6822      	ldr	r2, [r4, #0]
    a87c:	920e      	str	r2, [sp, #56]	; 0x38
    a87e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a880:	07d2      	lsls	r2, r2, #31
    a882:	d5fa      	bpl.n	a87a <PkaAddJcbAfn2Mdf+0xca>
    a884:	4a29      	ldr	r2, [pc, #164]	; (a92c <PkaAddJcbAfn2Mdf+0x17c>)
    a886:	601a      	str	r2, [r3, #0]
    a888:	6822      	ldr	r2, [r4, #0]
    a88a:	920f      	str	r2, [sp, #60]	; 0x3c
    a88c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a88e:	07d0      	lsls	r0, r2, #31
    a890:	d5fa      	bpl.n	a888 <PkaAddJcbAfn2Mdf+0xd8>
    a892:	4a27      	ldr	r2, [pc, #156]	; (a930 <PkaAddJcbAfn2Mdf+0x180>)
    a894:	601a      	str	r2, [r3, #0]
    a896:	6821      	ldr	r1, [r4, #0]
    a898:	9110      	str	r1, [sp, #64]	; 0x40
    a89a:	9910      	ldr	r1, [sp, #64]	; 0x40
    a89c:	07c9      	lsls	r1, r1, #31
    a89e:	d5fa      	bpl.n	a896 <PkaAddJcbAfn2Mdf+0xe6>
    a8a0:	601a      	str	r2, [r3, #0]
    a8a2:	4b14      	ldr	r3, [pc, #80]	; (a8f4 <PkaAddJcbAfn2Mdf+0x144>)
    a8a4:	461a      	mov	r2, r3
    a8a6:	6819      	ldr	r1, [r3, #0]
    a8a8:	9111      	str	r1, [sp, #68]	; 0x44
    a8aa:	9911      	ldr	r1, [sp, #68]	; 0x44
    a8ac:	07c8      	lsls	r0, r1, #31
    a8ae:	d5fa      	bpl.n	a8a6 <PkaAddJcbAfn2Mdf+0xf6>
    a8b0:	4b11      	ldr	r3, [pc, #68]	; (a8f8 <PkaAddJcbAfn2Mdf+0x148>)
    a8b2:	4920      	ldr	r1, [pc, #128]	; (a934 <PkaAddJcbAfn2Mdf+0x184>)
    a8b4:	6019      	str	r1, [r3, #0]
    a8b6:	6811      	ldr	r1, [r2, #0]
    a8b8:	9112      	str	r1, [sp, #72]	; 0x48
    a8ba:	9912      	ldr	r1, [sp, #72]	; 0x48
    a8bc:	07c9      	lsls	r1, r1, #31
    a8be:	d5fa      	bpl.n	a8b6 <PkaAddJcbAfn2Mdf+0x106>
    a8c0:	491d      	ldr	r1, [pc, #116]	; (a938 <PkaAddJcbAfn2Mdf+0x188>)
    a8c2:	6019      	str	r1, [r3, #0]
    a8c4:	6811      	ldr	r1, [r2, #0]
    a8c6:	9113      	str	r1, [sp, #76]	; 0x4c
    a8c8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a8ca:	07cc      	lsls	r4, r1, #31
    a8cc:	d5fa      	bpl.n	a8c4 <PkaAddJcbAfn2Mdf+0x114>
    a8ce:	490b      	ldr	r1, [pc, #44]	; (a8fc <PkaAddJcbAfn2Mdf+0x14c>)
    a8d0:	6019      	str	r1, [r3, #0]
    a8d2:	6811      	ldr	r1, [r2, #0]
    a8d4:	9114      	str	r1, [sp, #80]	; 0x50
    a8d6:	9914      	ldr	r1, [sp, #80]	; 0x50
    a8d8:	07c8      	lsls	r0, r1, #31
    a8da:	d5fa      	bpl.n	a8d2 <PkaAddJcbAfn2Mdf+0x122>
    a8dc:	4917      	ldr	r1, [pc, #92]	; (a93c <PkaAddJcbAfn2Mdf+0x18c>)
    a8de:	6019      	str	r1, [r3, #0]
    a8e0:	6811      	ldr	r1, [r2, #0]
    a8e2:	9115      	str	r1, [sp, #84]	; 0x54
    a8e4:	9915      	ldr	r1, [sp, #84]	; 0x54
    a8e6:	07c9      	lsls	r1, r1, #31
    a8e8:	d5fa      	bpl.n	a8e0 <PkaAddJcbAfn2Mdf+0x130>
    a8ea:	4a15      	ldr	r2, [pc, #84]	; (a940 <PkaAddJcbAfn2Mdf+0x190>)
    a8ec:	601a      	str	r2, [r3, #0]
    a8ee:	b016      	add	sp, #88	; 0x58
    a8f0:	bd10      	pop	{r4, pc}
    a8f2:	bf00      	nop
    a8f4:	5002b0b0 	.word	0x5002b0b0
    a8f8:	5002b080 	.word	0x5002b080
    a8fc:	90410440 	.word	0x90410440
    a900:	29298600 	.word	0x29298600
    a904:	c80110d8 	.word	0xc80110d8
    a908:	90411440 	.word	0x90411440
    a90c:	29211440 	.word	0x29211440
    a910:	21651440 	.word	0x21651440
    a914:	90403400 	.word	0x90403400
    a918:	900c3100 	.word	0x900c3100
    a91c:	900c40c0 	.word	0x900c40c0
    a920:	292030c0 	.word	0x292030c0
    a924:	900d9640 	.word	0x900d9640
    a928:	90604100 	.word	0x90604100
    a92c:	c8451603 	.word	0xc8451603
    a930:	21118600 	.word	0x21118600
    a934:	21604100 	.word	0x21604100
    a938:	c8444659 	.word	0xc8444659
    a93c:	90451440 	.word	0x90451440
    a940:	902d1440 	.word	0x902d1440

0000a944 <PkaJcb2Afn>:
    a944:	b570      	push	{r4, r5, r6, lr}
    a946:	4826      	ldr	r0, [pc, #152]	; (a9e0 <PkaJcb2Afn+0x9c>)
    a948:	b088      	sub	sp, #32
    a94a:	4605      	mov	r5, r0
    a94c:	6804      	ldr	r4, [r0, #0]
    a94e:	9400      	str	r4, [sp, #0]
    a950:	9c00      	ldr	r4, [sp, #0]
    a952:	07e6      	lsls	r6, r4, #31
    a954:	d5fa      	bpl.n	a94c <PkaJcb2Afn+0x8>
    a956:	4823      	ldr	r0, [pc, #140]	; (a9e4 <PkaJcb2Afn+0xa0>)
    a958:	4c23      	ldr	r4, [pc, #140]	; (a9e8 <PkaJcb2Afn+0xa4>)
    a95a:	6004      	str	r4, [r0, #0]
    a95c:	4c23      	ldr	r4, [pc, #140]	; (a9ec <PkaJcb2Afn+0xa8>)
    a95e:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    a962:	682c      	ldr	r4, [r5, #0]
    a964:	9401      	str	r4, [sp, #4]
    a966:	9c01      	ldr	r4, [sp, #4]
    a968:	07e4      	lsls	r4, r4, #31
    a96a:	d5fa      	bpl.n	a962 <PkaJcb2Afn+0x1e>
    a96c:	6003      	str	r3, [r0, #0]
    a96e:	0193      	lsls	r3, r2, #6
    a970:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    a974:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    a978:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    a97c:	682b      	ldr	r3, [r5, #0]
    a97e:	9302      	str	r3, [sp, #8]
    a980:	9b02      	ldr	r3, [sp, #8]
    a982:	07de      	lsls	r6, r3, #31
    a984:	d5fa      	bpl.n	a97c <PkaJcb2Afn+0x38>
    a986:	6004      	str	r4, [r0, #0]
    a988:	682b      	ldr	r3, [r5, #0]
    a98a:	9303      	str	r3, [sp, #12]
    a98c:	9b03      	ldr	r3, [sp, #12]
    a98e:	07db      	lsls	r3, r3, #31
    a990:	d5fa      	bpl.n	a988 <PkaJcb2Afn+0x44>
    a992:	4b17      	ldr	r3, [pc, #92]	; (a9f0 <PkaJcb2Afn+0xac>)
    a994:	6003      	str	r3, [r0, #0]
    a996:	018b      	lsls	r3, r1, #6
    a998:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    a99c:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    a9a0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    a9a4:	682e      	ldr	r6, [r5, #0]
    a9a6:	9604      	str	r6, [sp, #16]
    a9a8:	9e04      	ldr	r6, [sp, #16]
    a9aa:	07f6      	lsls	r6, r6, #31
    a9ac:	d5fa      	bpl.n	a9a4 <PkaJcb2Afn+0x60>
    a9ae:	6003      	str	r3, [r0, #0]
    a9b0:	682b      	ldr	r3, [r5, #0]
    a9b2:	9305      	str	r3, [sp, #20]
    a9b4:	9b05      	ldr	r3, [sp, #20]
    a9b6:	07de      	lsls	r6, r3, #31
    a9b8:	d5fa      	bpl.n	a9b0 <PkaJcb2Afn+0x6c>
    a9ba:	6004      	str	r4, [r0, #0]
    a9bc:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    a9c0:	682b      	ldr	r3, [r5, #0]
    a9c2:	9306      	str	r3, [sp, #24]
    a9c4:	9b06      	ldr	r3, [sp, #24]
    a9c6:	07dc      	lsls	r4, r3, #31
    a9c8:	d5fa      	bpl.n	a9c0 <PkaJcb2Afn+0x7c>
    a9ca:	6001      	str	r1, [r0, #0]
    a9cc:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    a9d0:	682b      	ldr	r3, [r5, #0]
    a9d2:	9307      	str	r3, [sp, #28]
    a9d4:	9b07      	ldr	r3, [sp, #28]
    a9d6:	07db      	lsls	r3, r3, #31
    a9d8:	d5fa      	bpl.n	a9d0 <PkaJcb2Afn+0x8c>
    a9da:	6002      	str	r2, [r0, #0]
    a9dc:	b008      	add	sp, #32
    a9de:	bd70      	pop	{r4, r5, r6, pc}
    a9e0:	5002b0b0 	.word	0x5002b0b0
    a9e4:	5002b080 	.word	0x5002b080
    a9e8:	290221c0 	.word	0x290221c0
    a9ec:	98007180 	.word	0x98007180
    a9f0:	90186180 	.word	0x90186180

0000a9f4 <PkaAddAff>:
    a9f4:	4b35      	ldr	r3, [pc, #212]	; (aacc <PkaAddAff+0xd8>)
    a9f6:	b08e      	sub	sp, #56	; 0x38
    a9f8:	4619      	mov	r1, r3
    a9fa:	681a      	ldr	r2, [r3, #0]
    a9fc:	9200      	str	r2, [sp, #0]
    a9fe:	9a00      	ldr	r2, [sp, #0]
    aa00:	07d2      	lsls	r2, r2, #31
    aa02:	d5fa      	bpl.n	a9fa <PkaAddAff+0x6>
    aa04:	4b32      	ldr	r3, [pc, #200]	; (aad0 <PkaAddAff+0xdc>)
    aa06:	4a33      	ldr	r2, [pc, #204]	; (aad4 <PkaAddAff+0xe0>)
    aa08:	601a      	str	r2, [r3, #0]
    aa0a:	680a      	ldr	r2, [r1, #0]
    aa0c:	9201      	str	r2, [sp, #4]
    aa0e:	9a01      	ldr	r2, [sp, #4]
    aa10:	07d0      	lsls	r0, r2, #31
    aa12:	d5fa      	bpl.n	aa0a <PkaAddAff+0x16>
    aa14:	4a30      	ldr	r2, [pc, #192]	; (aad8 <PkaAddAff+0xe4>)
    aa16:	601a      	str	r2, [r3, #0]
    aa18:	680a      	ldr	r2, [r1, #0]
    aa1a:	9202      	str	r2, [sp, #8]
    aa1c:	9a02      	ldr	r2, [sp, #8]
    aa1e:	07d2      	lsls	r2, r2, #31
    aa20:	d5fa      	bpl.n	aa18 <PkaAddAff+0x24>
    aa22:	4a2e      	ldr	r2, [pc, #184]	; (aadc <PkaAddAff+0xe8>)
    aa24:	601a      	str	r2, [r3, #0]
    aa26:	680a      	ldr	r2, [r1, #0]
    aa28:	9203      	str	r2, [sp, #12]
    aa2a:	9a03      	ldr	r2, [sp, #12]
    aa2c:	07d0      	lsls	r0, r2, #31
    aa2e:	d5fa      	bpl.n	aa26 <PkaAddAff+0x32>
    aa30:	4a2b      	ldr	r2, [pc, #172]	; (aae0 <PkaAddAff+0xec>)
    aa32:	601a      	str	r2, [r3, #0]
    aa34:	680a      	ldr	r2, [r1, #0]
    aa36:	9204      	str	r2, [sp, #16]
    aa38:	9a04      	ldr	r2, [sp, #16]
    aa3a:	07d2      	lsls	r2, r2, #31
    aa3c:	d5fa      	bpl.n	aa34 <PkaAddAff+0x40>
    aa3e:	4a29      	ldr	r2, [pc, #164]	; (aae4 <PkaAddAff+0xf0>)
    aa40:	601a      	str	r2, [r3, #0]
    aa42:	680a      	ldr	r2, [r1, #0]
    aa44:	9205      	str	r2, [sp, #20]
    aa46:	9a05      	ldr	r2, [sp, #20]
    aa48:	07d0      	lsls	r0, r2, #31
    aa4a:	d5fa      	bpl.n	aa42 <PkaAddAff+0x4e>
    aa4c:	4a26      	ldr	r2, [pc, #152]	; (aae8 <PkaAddAff+0xf4>)
    aa4e:	601a      	str	r2, [r3, #0]
    aa50:	680a      	ldr	r2, [r1, #0]
    aa52:	9206      	str	r2, [sp, #24]
    aa54:	9a06      	ldr	r2, [sp, #24]
    aa56:	07d2      	lsls	r2, r2, #31
    aa58:	d5fa      	bpl.n	aa50 <PkaAddAff+0x5c>
    aa5a:	4a24      	ldr	r2, [pc, #144]	; (aaec <PkaAddAff+0xf8>)
    aa5c:	601a      	str	r2, [r3, #0]
    aa5e:	680a      	ldr	r2, [r1, #0]
    aa60:	9207      	str	r2, [sp, #28]
    aa62:	9a07      	ldr	r2, [sp, #28]
    aa64:	07d0      	lsls	r0, r2, #31
    aa66:	d5fa      	bpl.n	aa5e <PkaAddAff+0x6a>
    aa68:	4a21      	ldr	r2, [pc, #132]	; (aaf0 <PkaAddAff+0xfc>)
    aa6a:	601a      	str	r2, [r3, #0]
    aa6c:	680a      	ldr	r2, [r1, #0]
    aa6e:	9208      	str	r2, [sp, #32]
    aa70:	9a08      	ldr	r2, [sp, #32]
    aa72:	07d2      	lsls	r2, r2, #31
    aa74:	d5fa      	bpl.n	aa6c <PkaAddAff+0x78>
    aa76:	4a1f      	ldr	r2, [pc, #124]	; (aaf4 <PkaAddAff+0x100>)
    aa78:	601a      	str	r2, [r3, #0]
    aa7a:	680a      	ldr	r2, [r1, #0]
    aa7c:	9209      	str	r2, [sp, #36]	; 0x24
    aa7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aa80:	07d0      	lsls	r0, r2, #31
    aa82:	d5fa      	bpl.n	aa7a <PkaAddAff+0x86>
    aa84:	4a1c      	ldr	r2, [pc, #112]	; (aaf8 <PkaAddAff+0x104>)
    aa86:	601a      	str	r2, [r3, #0]
    aa88:	680a      	ldr	r2, [r1, #0]
    aa8a:	920a      	str	r2, [sp, #40]	; 0x28
    aa8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    aa8e:	07d2      	lsls	r2, r2, #31
    aa90:	d5fa      	bpl.n	aa88 <PkaAddAff+0x94>
    aa92:	4a1a      	ldr	r2, [pc, #104]	; (aafc <PkaAddAff+0x108>)
    aa94:	601a      	str	r2, [r3, #0]
    aa96:	6808      	ldr	r0, [r1, #0]
    aa98:	900b      	str	r0, [sp, #44]	; 0x2c
    aa9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    aa9c:	07c0      	lsls	r0, r0, #31
    aa9e:	d5fa      	bpl.n	aa96 <PkaAddAff+0xa2>
    aaa0:	601a      	str	r2, [r3, #0]
    aaa2:	680a      	ldr	r2, [r1, #0]
    aaa4:	920c      	str	r2, [sp, #48]	; 0x30
    aaa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aaa8:	07d0      	lsls	r0, r2, #31
    aaaa:	d5fa      	bpl.n	aaa2 <PkaAddAff+0xae>
    aaac:	4a14      	ldr	r2, [pc, #80]	; (ab00 <PkaAddAff+0x10c>)
    aaae:	601a      	str	r2, [r3, #0]
    aab0:	680a      	ldr	r2, [r1, #0]
    aab2:	920d      	str	r2, [sp, #52]	; 0x34
    aab4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    aab6:	07d2      	lsls	r2, r2, #31
    aab8:	d5fa      	bpl.n	aab0 <PkaAddAff+0xbc>
    aaba:	4a12      	ldr	r2, [pc, #72]	; (ab04 <PkaAddAff+0x110>)
    aabc:	601a      	str	r2, [r3, #0]
    aabe:	210e      	movs	r1, #14
    aac0:	230d      	movs	r3, #13
    aac2:	220f      	movs	r2, #15
    aac4:	2000      	movs	r0, #0
    aac6:	b00e      	add	sp, #56	; 0x38
    aac8:	f7ff bf3c 	b.w	a944 <PkaJcb2Afn>
    aacc:	5002b0b0 	.word	0x5002b0b0
    aad0:	5002b080 	.word	0x5002b080
    aad4:	29014380 	.word	0x29014380
    aad8:	21396340 	.word	0x21396340
    aadc:	29017080 	.word	0x29017080
    aae0:	21542080 	.word	0x21542080
    aae4:	9034d100 	.word	0x9034d100
    aae8:	903440c0 	.word	0x903440c0
    aaec:	292030c0 	.word	0x292030c0
    aaf0:	900d53c0 	.word	0x900d53c0
    aaf4:	90384100 	.word	0x90384100
    aaf8:	c8082383 	.word	0xc8082383
    aafc:	2110e380 	.word	0x2110e380
    ab00:	21384100 	.word	0x21384100
    ab04:	c80843cf 	.word	0xc80843cf

0000ab08 <PkaSum2ScalarMullt>:
    ab08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab0c:	2301      	movs	r3, #1
    ab0e:	b092      	sub	sp, #72	; 0x48
    ab10:	e9cd 3303 	strd	r3, r3, [sp, #12]
    ab14:	4b62      	ldr	r3, [pc, #392]	; (aca0 <PkaSum2ScalarMullt+0x198>)
    ab16:	461d      	mov	r5, r3
    ab18:	681a      	ldr	r2, [r3, #0]
    ab1a:	9205      	str	r2, [sp, #20]
    ab1c:	9a05      	ldr	r2, [sp, #20]
    ab1e:	07d2      	lsls	r2, r2, #31
    ab20:	d5fa      	bpl.n	ab18 <PkaSum2ScalarMullt+0x10>
    ab22:	4c60      	ldr	r4, [pc, #384]	; (aca4 <PkaSum2ScalarMullt+0x19c>)
    ab24:	4b60      	ldr	r3, [pc, #384]	; (aca8 <PkaSum2ScalarMullt+0x1a0>)
    ab26:	6023      	str	r3, [r4, #0]
    ab28:	4b60      	ldr	r3, [pc, #384]	; (acac <PkaSum2ScalarMullt+0x1a4>)
    ab2a:	4619      	mov	r1, r3
    ab2c:	681a      	ldr	r2, [r3, #0]
    ab2e:	9206      	str	r2, [sp, #24]
    ab30:	9a06      	ldr	r2, [sp, #24]
    ab32:	07d7      	lsls	r7, r2, #31
    ab34:	d5fa      	bpl.n	ab2c <PkaSum2ScalarMullt+0x24>
    ab36:	4b5e      	ldr	r3, [pc, #376]	; (acb0 <PkaSum2ScalarMullt+0x1a8>)
    ab38:	681a      	ldr	r2, [r3, #0]
    ab3a:	04d6      	lsls	r6, r2, #19
    ab3c:	f100 80a8 	bmi.w	ac90 <PkaSum2ScalarMullt+0x188>
    ab40:	682a      	ldr	r2, [r5, #0]
    ab42:	9207      	str	r2, [sp, #28]
    ab44:	9a07      	ldr	r2, [sp, #28]
    ab46:	07d0      	lsls	r0, r2, #31
    ab48:	d5fa      	bpl.n	ab40 <PkaSum2ScalarMullt+0x38>
    ab4a:	4a5a      	ldr	r2, [pc, #360]	; (acb4 <PkaSum2ScalarMullt+0x1ac>)
    ab4c:	6022      	str	r2, [r4, #0]
    ab4e:	680a      	ldr	r2, [r1, #0]
    ab50:	9208      	str	r2, [sp, #32]
    ab52:	9a08      	ldr	r2, [sp, #32]
    ab54:	07d2      	lsls	r2, r2, #31
    ab56:	d5fa      	bpl.n	ab4e <PkaSum2ScalarMullt+0x46>
    ab58:	681e      	ldr	r6, [r3, #0]
    ab5a:	f3c6 3600 	ubfx	r6, r6, #12, #1
    ab5e:	2e00      	cmp	r6, #0
    ab60:	f040 8098 	bne.w	ac94 <PkaSum2ScalarMullt+0x18c>
    ab64:	2012      	movs	r0, #18
    ab66:	f7ff f8f9 	bl	9d5c <PkaGetRegEffectiveSizeInBits>
    ab6a:	4607      	mov	r7, r0
    ab6c:	2013      	movs	r0, #19
    ab6e:	f7ff f8f5 	bl	9d5c <PkaGetRegEffectiveSizeInBits>
    ab72:	4287      	cmp	r7, r0
    ab74:	bf8c      	ite	hi
    ab76:	2012      	movhi	r0, #18
    ab78:	2013      	movls	r0, #19
    ab7a:	f7ff f8ef 	bl	9d5c <PkaGetRegEffectiveSizeInBits>
    ab7e:	1e47      	subs	r7, r0, #1
    ab80:	f7ff ff38 	bl	a9f4 <PkaAddAff>
    ab84:	ab03      	add	r3, sp, #12
    ab86:	aa01      	add	r2, sp, #4
    ab88:	4639      	mov	r1, r7
    ab8a:	2012      	movs	r0, #18
    ab8c:	f7ff f92c 	bl	9de8 <PkaGetNextMsBit>
    ab90:	ab04      	add	r3, sp, #16
    ab92:	4680      	mov	r8, r0
    ab94:	aa02      	add	r2, sp, #8
    ab96:	4639      	mov	r1, r7
    ab98:	2013      	movs	r0, #19
    ab9a:	f7ff f925 	bl	9de8 <PkaGetNextMsBit>
    ab9e:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    aba2:	2802      	cmp	r0, #2
    aba4:	d032      	beq.n	ac0c <PkaSum2ScalarMullt+0x104>
    aba6:	2803      	cmp	r0, #3
    aba8:	d03e      	beq.n	ac28 <PkaSum2ScalarMullt+0x120>
    abaa:	2801      	cmp	r0, #1
    abac:	d174      	bne.n	ac98 <PkaSum2ScalarMullt+0x190>
    abae:	682b      	ldr	r3, [r5, #0]
    abb0:	9309      	str	r3, [sp, #36]	; 0x24
    abb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    abb4:	07db      	lsls	r3, r3, #31
    abb6:	d5fa      	bpl.n	abae <PkaSum2ScalarMullt+0xa6>
    abb8:	4b3f      	ldr	r3, [pc, #252]	; (acb8 <PkaSum2ScalarMullt+0x1b0>)
    abba:	6023      	str	r3, [r4, #0]
    abbc:	682b      	ldr	r3, [r5, #0]
    abbe:	930a      	str	r3, [sp, #40]	; 0x28
    abc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    abc2:	07d8      	lsls	r0, r3, #31
    abc4:	d5fa      	bpl.n	abbc <PkaSum2ScalarMullt+0xb4>
    abc6:	4b3d      	ldr	r3, [pc, #244]	; (acbc <PkaSum2ScalarMullt+0x1b4>)
    abc8:	6023      	str	r3, [r4, #0]
    abca:	682b      	ldr	r3, [r5, #0]
    abcc:	930f      	str	r3, [sp, #60]	; 0x3c
    abce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    abd0:	07d9      	lsls	r1, r3, #31
    abd2:	d5fa      	bpl.n	abca <PkaSum2ScalarMullt+0xc2>
    abd4:	4b3a      	ldr	r3, [pc, #232]	; (acc0 <PkaSum2ScalarMullt+0x1b8>)
    abd6:	6023      	str	r3, [r4, #0]
    abd8:	682b      	ldr	r3, [r5, #0]
    abda:	9310      	str	r3, [sp, #64]	; 0x40
    abdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    abde:	07da      	lsls	r2, r3, #31
    abe0:	d5fa      	bpl.n	abd8 <PkaSum2ScalarMullt+0xd0>
    abe2:	4b38      	ldr	r3, [pc, #224]	; (acc4 <PkaSum2ScalarMullt+0x1bc>)
    abe4:	6023      	str	r3, [r4, #0]
    abe6:	682b      	ldr	r3, [r5, #0]
    abe8:	9311      	str	r3, [sp, #68]	; 0x44
    abea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    abec:	07db      	lsls	r3, r3, #31
    abee:	d5fa      	bpl.n	abe6 <PkaSum2ScalarMullt+0xde>
    abf0:	4b35      	ldr	r3, [pc, #212]	; (acc8 <PkaSum2ScalarMullt+0x1c0>)
    abf2:	6023      	str	r3, [r4, #0]
    abf4:	3f01      	subs	r7, #1
    abf6:	d525      	bpl.n	ac44 <PkaSum2ScalarMullt+0x13c>
    abf8:	2310      	movs	r3, #16
    abfa:	2219      	movs	r2, #25
    abfc:	2118      	movs	r1, #24
    abfe:	2000      	movs	r0, #0
    ac00:	f7ff fea0 	bl	a944 <PkaJcb2Afn>
    ac04:	4630      	mov	r0, r6
    ac06:	b012      	add	sp, #72	; 0x48
    ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac0c:	682b      	ldr	r3, [r5, #0]
    ac0e:	930b      	str	r3, [sp, #44]	; 0x2c
    ac10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ac12:	07d9      	lsls	r1, r3, #31
    ac14:	d5fa      	bpl.n	ac0c <PkaSum2ScalarMullt+0x104>
    ac16:	4b2d      	ldr	r3, [pc, #180]	; (accc <PkaSum2ScalarMullt+0x1c4>)
    ac18:	6023      	str	r3, [r4, #0]
    ac1a:	682b      	ldr	r3, [r5, #0]
    ac1c:	930c      	str	r3, [sp, #48]	; 0x30
    ac1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ac20:	07da      	lsls	r2, r3, #31
    ac22:	d5fa      	bpl.n	ac1a <PkaSum2ScalarMullt+0x112>
    ac24:	4b2a      	ldr	r3, [pc, #168]	; (acd0 <PkaSum2ScalarMullt+0x1c8>)
    ac26:	e7cf      	b.n	abc8 <PkaSum2ScalarMullt+0xc0>
    ac28:	682b      	ldr	r3, [r5, #0]
    ac2a:	930d      	str	r3, [sp, #52]	; 0x34
    ac2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ac2e:	07db      	lsls	r3, r3, #31
    ac30:	d5fa      	bpl.n	ac28 <PkaSum2ScalarMullt+0x120>
    ac32:	4b28      	ldr	r3, [pc, #160]	; (acd4 <PkaSum2ScalarMullt+0x1cc>)
    ac34:	6023      	str	r3, [r4, #0]
    ac36:	682b      	ldr	r3, [r5, #0]
    ac38:	930e      	str	r3, [sp, #56]	; 0x38
    ac3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ac3c:	07d8      	lsls	r0, r3, #31
    ac3e:	d5fa      	bpl.n	ac36 <PkaSum2ScalarMullt+0x12e>
    ac40:	4b25      	ldr	r3, [pc, #148]	; (acd8 <PkaSum2ScalarMullt+0x1d0>)
    ac42:	e7c1      	b.n	abc8 <PkaSum2ScalarMullt+0xc0>
    ac44:	ab03      	add	r3, sp, #12
    ac46:	aa01      	add	r2, sp, #4
    ac48:	4639      	mov	r1, r7
    ac4a:	2012      	movs	r0, #18
    ac4c:	f7ff f8cc 	bl	9de8 <PkaGetNextMsBit>
    ac50:	ab04      	add	r3, sp, #16
    ac52:	4604      	mov	r4, r0
    ac54:	aa02      	add	r2, sp, #8
    ac56:	4639      	mov	r1, r7
    ac58:	2013      	movs	r0, #19
    ac5a:	f7ff f8c5 	bl	9de8 <PkaGetNextMsBit>
    ac5e:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    ac62:	d102      	bne.n	ac6a <PkaSum2ScalarMullt+0x162>
    ac64:	f7ff fc12 	bl	a48c <PkaDoubleMdf2Mdf>
    ac68:	e7c4      	b.n	abf4 <PkaSum2ScalarMullt+0xec>
    ac6a:	f7ff fce5 	bl	a638 <PkaDoubleMdf2Jcb>
    ac6e:	2c02      	cmp	r4, #2
    ac70:	d008      	beq.n	ac84 <PkaSum2ScalarMullt+0x17c>
    ac72:	2c03      	cmp	r4, #3
    ac74:	d009      	beq.n	ac8a <PkaSum2ScalarMullt+0x182>
    ac76:	2c01      	cmp	r4, #1
    ac78:	d110      	bne.n	ac9c <PkaSum2ScalarMullt+0x194>
    ac7a:	2117      	movs	r1, #23
    ac7c:	2016      	movs	r0, #22
    ac7e:	f7ff fd97 	bl	a7b0 <PkaAddJcbAfn2Mdf>
    ac82:	e7b7      	b.n	abf4 <PkaSum2ScalarMullt+0xec>
    ac84:	2115      	movs	r1, #21
    ac86:	2014      	movs	r0, #20
    ac88:	e7f9      	b.n	ac7e <PkaSum2ScalarMullt+0x176>
    ac8a:	210f      	movs	r1, #15
    ac8c:	200e      	movs	r0, #14
    ac8e:	e7f6      	b.n	ac7e <PkaSum2ScalarMullt+0x176>
    ac90:	4e12      	ldr	r6, [pc, #72]	; (acdc <PkaSum2ScalarMullt+0x1d4>)
    ac92:	e7b7      	b.n	ac04 <PkaSum2ScalarMullt+0xfc>
    ac94:	4e12      	ldr	r6, [pc, #72]	; (ace0 <PkaSum2ScalarMullt+0x1d8>)
    ac96:	e7b5      	b.n	ac04 <PkaSum2ScalarMullt+0xfc>
    ac98:	4e12      	ldr	r6, [pc, #72]	; (ace4 <PkaSum2ScalarMullt+0x1dc>)
    ac9a:	e7b3      	b.n	ac04 <PkaSum2ScalarMullt+0xfc>
    ac9c:	4e12      	ldr	r6, [pc, #72]	; (ace8 <PkaSum2ScalarMullt+0x1e0>)
    ac9e:	e7b1      	b.n	ac04 <PkaSum2ScalarMullt+0xfc>
    aca0:	5002b0b0 	.word	0x5002b0b0
    aca4:	5002b080 	.word	0x5002b080
    aca8:	514a0800 	.word	0x514a0800
    acac:	5002b0b4 	.word	0x5002b0b4
    acb0:	5002b088 	.word	0x5002b088
    acb4:	514e0800 	.word	0x514e0800
    acb8:	495a0600 	.word	0x495a0600
    acbc:	495e0640 	.word	0x495e0640
    acc0:	41420400 	.word	0x41420400
    acc4:	49421400 	.word	0x49421400
    acc8:	492e0440 	.word	0x492e0440
    accc:	49520600 	.word	0x49520600
    acd0:	49560640 	.word	0x49560640
    acd4:	493a0600 	.word	0x493a0600
    acd8:	493e0640 	.word	0x493e0640
    acdc:	00f10806 	.word	0x00f10806
    ace0:	00f10807 	.word	0x00f10807
    ace4:	00f10804 	.word	0x00f10804
    ace8:	00f10805 	.word	0x00f10805

0000acec <SaSi_HalClearInterruptBit>:
    acec:	4b01      	ldr	r3, [pc, #4]	; (acf4 <SaSi_HalClearInterruptBit+0x8>)
    acee:	6018      	str	r0, [r3, #0]
    acf0:	4770      	bx	lr
    acf2:	bf00      	nop
    acf4:	5002ba08 	.word	0x5002ba08

0000acf8 <SaSi_HalMaskInterrupt>:
    acf8:	4b01      	ldr	r3, [pc, #4]	; (ad00 <SaSi_HalMaskInterrupt+0x8>)
    acfa:	6018      	str	r0, [r3, #0]
    acfc:	4770      	bx	lr
    acfe:	bf00      	nop
    ad00:	5002ba04 	.word	0x5002ba04

0000ad04 <SaSi_HalWaitInterrupt>:
    ad04:	4a03      	ldr	r2, [pc, #12]	; (ad14 <SaSi_HalWaitInterrupt+0x10>)
    ad06:	6813      	ldr	r3, [r2, #0]
    ad08:	4218      	tst	r0, r3
    ad0a:	d0fc      	beq.n	ad06 <SaSi_HalWaitInterrupt+0x2>
    ad0c:	4a02      	ldr	r2, [pc, #8]	; (ad18 <SaSi_HalWaitInterrupt+0x14>)
    ad0e:	6010      	str	r0, [r2, #0]
    ad10:	4618      	mov	r0, r3
    ad12:	4770      	bx	lr
    ad14:	5002ba00 	.word	0x5002ba00
    ad18:	5002ba08 	.word	0x5002ba08

0000ad1c <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    ad1c:	b129      	cbz	r1, ad2a <flash_area_id_from_multi_image_slot+0xe>
    ad1e:	2901      	cmp	r1, #1
    ad20:	bf14      	ite	ne
    ad22:	f06f 0015 	mvnne.w	r0, #21
    ad26:	2005      	moveq	r0, #5
    ad28:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    ad2a:	2002      	movs	r0, #2
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
    ad2c:	4770      	bx	lr

0000ad2e <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    ad2e:	2000      	movs	r0, #0
    ad30:	4770      	bx	lr

0000ad32 <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    ad32:	4770      	bx	lr

0000ad34 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    ad34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ad38:	460e      	mov	r6, r1
    ad3a:	4617      	mov	r7, r2
    ad3c:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    ad3e:	4604      	mov	r4, r0
    ad40:	b928      	cbnz	r0, ad4e <bootutil_tlv_iter_begin+0x1a>
        return -1;
    ad42:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    ad46:	4640      	mov	r0, r8
    ad48:	b003      	add	sp, #12
    ad4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    ad4e:	2900      	cmp	r1, #0
    ad50:	d0f7      	beq.n	ad42 <bootutil_tlv_iter_begin+0xe>
    ad52:	2a00      	cmp	r2, #0
    ad54:	d0f5      	beq.n	ad42 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    ad56:	68cb      	ldr	r3, [r1, #12]
    ad58:	890d      	ldrh	r5, [r1, #8]
    ad5a:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    ad5c:	2304      	movs	r3, #4
    ad5e:	eb0d 0203 	add.w	r2, sp, r3
    ad62:	4629      	mov	r1, r5
    ad64:	4638      	mov	r0, r7
    ad66:	f001 f81c 	bl	bda2 <flash_area_read>
    ad6a:	4680      	mov	r8, r0
    ad6c:	2800      	cmp	r0, #0
    ad6e:	d1e8      	bne.n	ad42 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    ad70:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ad74:	8973      	ldrh	r3, [r6, #10]
    ad76:	f646 1208 	movw	r2, #26888	; 0x6908
    ad7a:	4291      	cmp	r1, r2
    ad7c:	d123      	bne.n	adc6 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    ad7e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    ad82:	4299      	cmp	r1, r3
    ad84:	d1dd      	bne.n	ad42 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    ad86:	2304      	movs	r3, #4
    ad88:	eb0d 0203 	add.w	r2, sp, r3
    ad8c:	4429      	add	r1, r5
    ad8e:	4638      	mov	r0, r7
    ad90:	f001 f807 	bl	bda2 <flash_area_read>
    ad94:	2800      	cmp	r0, #0
    ad96:	d1d4      	bne.n	ad42 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    ad98:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ad9c:	f646 1307 	movw	r3, #26887	; 0x6907
    ada0:	429a      	cmp	r2, r3
    ada2:	d1ce      	bne.n	ad42 <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    ada4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    ada8:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    adaa:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    adac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->type = type;
    adb0:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    adb4:	442b      	add	r3, r5
    adb6:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    adb8:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    adba:	4413      	add	r3, r2
    it->fap = fap;
    adbc:	e9c4 6700 	strd	r6, r7, [r4]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    adc0:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    adc2:	6125      	str	r5, [r4, #16]
    return 0;
    adc4:	e7bf      	b.n	ad46 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    adc6:	2b00      	cmp	r3, #0
    adc8:	d0e6      	beq.n	ad98 <bootutil_tlv_iter_begin+0x64>
    adca:	e7ba      	b.n	ad42 <bootutil_tlv_iter_begin+0xe>

0000adcc <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    adcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    add0:	460f      	mov	r7, r1
    add2:	4690      	mov	r8, r2
    add4:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    add6:	4604      	mov	r4, r0
    add8:	b920      	cbnz	r0, ade4 <bootutil_tlv_iter_next+0x18>
        return -1;
    adda:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    adde:	b003      	add	sp, #12
    ade0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    ade4:	6803      	ldr	r3, [r0, #0]
    ade6:	2b00      	cmp	r3, #0
    ade8:	d0f7      	beq.n	adda <bootutil_tlv_iter_next+0xe>
    adea:	6843      	ldr	r3, [r0, #4]
    adec:	2b00      	cmp	r3, #0
    adee:	d0f4      	beq.n	adda <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    adf0:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    adf4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    adf8:	429a      	cmp	r2, r3
    adfa:	d216      	bcs.n	ae2a <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    adfc:	6823      	ldr	r3, [r4, #0]
    adfe:	895b      	ldrh	r3, [r3, #10]
    ae00:	b123      	cbz	r3, ae0c <bootutil_tlv_iter_next+0x40>
    ae02:	68e3      	ldr	r3, [r4, #12]
    ae04:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    ae06:	bf04      	itt	eq
    ae08:	3304      	addeq	r3, #4
    ae0a:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    ae0c:	2304      	movs	r3, #4
    ae0e:	6921      	ldr	r1, [r4, #16]
    ae10:	6860      	ldr	r0, [r4, #4]
    ae12:	eb0d 0203 	add.w	r2, sp, r3
    ae16:	f000 ffc4 	bl	bda2 <flash_area_read>
        if (rc) {
    ae1a:	2800      	cmp	r0, #0
    ae1c:	d1dd      	bne.n	adda <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    ae1e:	7aa3      	ldrb	r3, [r4, #10]
    ae20:	6925      	ldr	r5, [r4, #16]
    ae22:	b123      	cbz	r3, ae2e <bootutil_tlv_iter_next+0x62>
    ae24:	68e3      	ldr	r3, [r4, #12]
    ae26:	42ab      	cmp	r3, r5
    ae28:	d801      	bhi.n	ae2e <bootutil_tlv_iter_next+0x62>
            return 1;
    ae2a:	2001      	movs	r0, #1
    ae2c:	e7d7      	b.n	adde <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    ae2e:	8921      	ldrh	r1, [r4, #8]
    ae30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ae34:	4549      	cmp	r1, r9
    ae36:	f103 0204 	add.w	r2, r3, #4
    ae3a:	d003      	beq.n	ae44 <bootutil_tlv_iter_next+0x78>
    ae3c:	f8bd c004 	ldrh.w	ip, [sp, #4]
    ae40:	458c      	cmp	ip, r1
    ae42:	d10b      	bne.n	ae5c <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    ae44:	b116      	cbz	r6, ae4c <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    ae46:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ae4a:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    ae4c:	3504      	adds	r5, #4
    ae4e:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    ae50:	f8a8 3000 	strh.w	r3, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    ae54:	6923      	ldr	r3, [r4, #16]
    ae56:	4413      	add	r3, r2
    ae58:	6123      	str	r3, [r4, #16]
            return 0;
    ae5a:	e7c0      	b.n	adde <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    ae5c:	4415      	add	r5, r2
    ae5e:	6125      	str	r5, [r4, #16]
    ae60:	e7c8      	b.n	adf4 <bootutil_tlv_iter_next+0x28>

0000ae62 <bootutil_read_bigint>:
{
    ae62:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ae64:	460c      	mov	r4, r1
    ae66:	4606      	mov	r6, r0
    ae68:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    ae6a:	2302      	movs	r3, #2
    ae6c:	aa01      	add	r2, sp, #4
    ae6e:	4620      	mov	r0, r4
    ae70:	f000 fa44 	bl	b2fc <mbedtls_asn1_get_tag>
    ae74:	4605      	mov	r5, r0
    ae76:	b9e8      	cbnz	r0, aeb4 <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    ae78:	9a01      	ldr	r2, [sp, #4]
    ae7a:	2a1f      	cmp	r2, #31
    ae7c:	d90e      	bls.n	ae9c <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    ae7e:	6823      	ldr	r3, [r4, #0]
    ae80:	f1a2 0120 	sub.w	r1, r2, #32
    ae84:	4419      	add	r1, r3
    ae86:	2220      	movs	r2, #32
    ae88:	4630      	mov	r0, r6
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    ae8a:	f001 f8c0 	bl	c00e <memcpy>
    *cp += len;
    ae8e:	6823      	ldr	r3, [r4, #0]
    ae90:	9a01      	ldr	r2, [sp, #4]
    ae92:	4413      	add	r3, r2
    ae94:	6023      	str	r3, [r4, #0]
}
    ae96:	4628      	mov	r0, r5
    ae98:	b002      	add	sp, #8
    ae9a:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    ae9c:	4601      	mov	r1, r0
    ae9e:	f1c2 0220 	rsb	r2, r2, #32
    aea2:	4630      	mov	r0, r6
    aea4:	f001 f8be 	bl	c024 <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    aea8:	9a01      	ldr	r2, [sp, #4]
    aeaa:	6821      	ldr	r1, [r4, #0]
    aeac:	f1c2 0020 	rsb	r0, r2, #32
    aeb0:	4430      	add	r0, r6
    aeb2:	e7ea      	b.n	ae8a <bootutil_read_bigint+0x28>
        return -3;
    aeb4:	f06f 0502 	mvn.w	r5, #2
    aeb8:	e7ed      	b.n	ae96 <bootutil_read_bigint+0x34>

0000aeba <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    aeba:	f001 b898 	b.w	bfee <memcmp>

0000aebe <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    aebe:	f44f 73c0 	mov.w	r3, #384	; 0x180
    aec2:	4358      	muls	r0, r3
}
    aec4:	3030      	adds	r0, #48	; 0x30
    aec6:	4770      	bx	lr

0000aec8 <boot_status_entries>:
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    aec8:	780b      	ldrb	r3, [r1, #0]
    aeca:	2b02      	cmp	r3, #2
    aecc:	d006      	beq.n	aedc <boot_status_entries+0x14>
    aece:	2b05      	cmp	r3, #5
    return -1;
    aed0:	bf0c      	ite	eq
    aed2:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    aed6:	f04f 30ff 	movne.w	r0, #4294967295
    aeda:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    aedc:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    aee0:	4770      	bx	lr

0000aee2 <boot_status_off>:
{
    aee2:	b510      	push	{r4, lr}
    aee4:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    aee6:	f000 ffd5 	bl	be94 <flash_area_align>
    return flash_area_get_size(fap) - off_from_end;
    aeea:	68a2      	ldr	r2, [r4, #8]
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    aeec:	b2c3      	uxtb	r3, r0
    return flash_area_get_size(fap) - off_from_end;
    aeee:	3a30      	subs	r2, #48	; 0x30
}
    aef0:	f44f 70c0 	mov.w	r0, #384	; 0x180
    aef4:	fb00 2013 	mls	r0, r0, r3, r2
    aef8:	bd10      	pop	{r4, pc}

0000aefa <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    aefa:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    aefc:	2201      	movs	r2, #1
    aefe:	3920      	subs	r1, #32
    af00:	f001 bc75 	b.w	c7ee <boot_write_trailer_flag>

0000af04 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    af04:	b513      	push	{r0, r1, r4, lr}
    af06:	4604      	mov	r4, r0
    af08:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    af0a:	f001 fc0d 	bl	c728 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    af0e:	2304      	movs	r3, #4
    af10:	f1a0 0108 	sub.w	r1, r0, #8
    af14:	eb0d 0203 	add.w	r2, sp, r3
    af18:	4620      	mov	r0, r4
    af1a:	f001 fc39 	bl	c790 <boot_write_trailer>
}
    af1e:	b002      	add	sp, #8
    af20:	bd10      	pop	{r4, pc}

0000af22 <boot_read_image_size>:
{
    af22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    af24:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    af26:	2000      	movs	r0, #0
{
    af28:	460c      	mov	r4, r1
    af2a:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    af2c:	f7ff fef6 	bl	ad1c <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    af30:	4669      	mov	r1, sp
    af32:	b2c0      	uxtb	r0, r0
    af34:	f7f8 f990 	bl	3258 <flash_area_open>
    if (rc != 0) {
    af38:	b130      	cbz	r0, af48 <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    af3a:	2501      	movs	r5, #1
    flash_area_close(fap);
    af3c:	9800      	ldr	r0, [sp, #0]
    af3e:	f000 ff2f 	bl	bda0 <flash_area_close>
}
    af42:	4628      	mov	r0, r5
    af44:	b003      	add	sp, #12
    af46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    af48:	212c      	movs	r1, #44	; 0x2c
    af4a:	fb01 5404 	mla	r4, r1, r4, r5
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    af4e:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    af50:	8921      	ldrh	r1, [r4, #8]
    af52:	68e3      	ldr	r3, [r4, #12]
    af54:	18ce      	adds	r6, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    af56:	2304      	movs	r3, #4
    af58:	eb0d 0203 	add.w	r2, sp, r3
    af5c:	4631      	mov	r1, r6
    af5e:	f000 ff20 	bl	bda2 <flash_area_read>
    af62:	4605      	mov	r5, r0
    af64:	2800      	cmp	r0, #0
    af66:	d1e8      	bne.n	af3a <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    af68:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    af6c:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    af6e:	f646 1308 	movw	r3, #26888	; 0x6908
    af72:	429a      	cmp	r2, r3
    af74:	d11a      	bne.n	afac <boot_read_image_size+0x8a>
        if (protect_tlv_size != info.it_tlv_tot) {
    af76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    af7a:	429c      	cmp	r4, r3
    af7c:	d001      	beq.n	af82 <boot_read_image_size+0x60>
            rc = BOOT_EBADIMAGE;
    af7e:	2503      	movs	r5, #3
    af80:	e7dc      	b.n	af3c <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    af82:	2304      	movs	r3, #4
    af84:	9800      	ldr	r0, [sp, #0]
    af86:	eb0d 0203 	add.w	r2, sp, r3
    af8a:	19a1      	adds	r1, r4, r6
    af8c:	f000 ff09 	bl	bda2 <flash_area_read>
    af90:	2800      	cmp	r0, #0
    af92:	d1d2      	bne.n	af3a <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    af94:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af98:	f646 1307 	movw	r3, #26887	; 0x6907
    af9c:	429a      	cmp	r2, r3
    af9e:	d1ee      	bne.n	af7e <boot_read_image_size+0x5c>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    afa0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    afa4:	4421      	add	r1, r4
    afa6:	4431      	add	r1, r6
    afa8:	6039      	str	r1, [r7, #0]
    rc = 0;
    afaa:	e7c7      	b.n	af3c <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    afac:	2c00      	cmp	r4, #0
    afae:	d0f1      	beq.n	af94 <boot_read_image_size+0x72>
    afb0:	e7e5      	b.n	af7e <boot_read_image_size+0x5c>

0000afb2 <boot_read_image_headers>:
{
    afb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    afb4:	4613      	mov	r3, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    afb6:	9201      	str	r2, [sp, #4]
{
    afb8:	460e      	mov	r6, r1
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    afba:	4602      	mov	r2, r0
    afbc:	2100      	movs	r1, #0
{
    afbe:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    afc0:	f7f5 feda 	bl	d78 <boot_read_image_header>
        if (rc != 0) {
    afc4:	4604      	mov	r4, r0
    afc6:	b950      	cbnz	r0, afde <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    afc8:	9b01      	ldr	r3, [sp, #4]
    afca:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    afce:	2101      	movs	r1, #1
    afd0:	4628      	mov	r0, r5
    afd2:	f7f5 fed1 	bl	d78 <boot_read_image_header>
        if (rc != 0) {
    afd6:	b110      	cbz	r0, afde <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    afd8:	2e00      	cmp	r6, #0
    afda:	bf18      	it	ne
    afdc:	4604      	movne	r4, r0
}
    afde:	4620      	mov	r0, r4
    afe0:	b002      	add	sp, #8
    afe2:	bd70      	pop	{r4, r5, r6, pc}

0000afe4 <boot_read_sectors>:
{
    afe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    afe6:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
    afe8:	4604      	mov	r4, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    afea:	2580      	movs	r5, #128	; 0x80
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    afec:	a901      	add	r1, sp, #4
    afee:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    aff0:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    aff2:	f7f8 f94f 	bl	3294 <flash_area_get_sectors>
    if (rc != 0) {
    aff6:	b958      	cbnz	r0, b010 <boot_read_sectors+0x2c>
    *out_num_sectors = num_sectors;
    aff8:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    affa:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    affc:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    affe:	a901      	add	r1, sp, #4
    b000:	2005      	movs	r0, #5
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    b002:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    b004:	f7f8 f946 	bl	3294 <flash_area_get_sectors>
    if (rc != 0) {
    b008:	4605      	mov	r5, r0
    b00a:	b128      	cbz	r0, b018 <boot_read_sectors+0x34>
        return BOOT_EFLASH_SEC;
    b00c:	2509      	movs	r5, #9
    b00e:	e000      	b.n	b012 <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    b010:	2501      	movs	r5, #1
}
    b012:	4628      	mov	r0, r5
    b014:	b003      	add	sp, #12
    b016:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    b018:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    b01a:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    b01c:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    b01e:	f000 ff39 	bl	be94 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    b022:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    b024:	e7f5      	b.n	b012 <boot_read_sectors+0x2e>

0000b026 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    b026:	2301      	movs	r3, #1
    b028:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    b02a:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    b02e:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    b030:	2300      	movs	r3, #0
    bs->source = 0;
    b032:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    b036:	4770      	bx	lr

0000b038 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    b038:	7943      	ldrb	r3, [r0, #5]
    b03a:	2b01      	cmp	r3, #1
    b03c:	d107      	bne.n	b04e <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    b03e:	6803      	ldr	r3, [r0, #0]
    b040:	2b01      	cmp	r3, #1
    b042:	d104      	bne.n	b04e <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    b044:	7900      	ldrb	r0, [r0, #4]
    b046:	1e43      	subs	r3, r0, #1
    b048:	4258      	negs	r0, r3
    b04a:	4158      	adcs	r0, r3
    b04c:	4770      	bx	lr
    b04e:	2000      	movs	r0, #0
}
    b050:	4770      	bx	lr

0000b052 <boot_write_status>:
{
    b052:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b054:	4606      	mov	r6, r0
    b056:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    b058:	2002      	movs	r0, #2
    b05a:	a901      	add	r1, sp, #4
    b05c:	f7f8 f8fc 	bl	3258 <flash_area_open>
    if (rc != 0) {
    b060:	bb38      	cbnz	r0, b0b2 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    b062:	9801      	ldr	r0, [sp, #4]
    b064:	f7ff ff3d 	bl	aee2 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    b068:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    b06a:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    b06c:	4628      	mov	r0, r5
    b06e:	f000 f8e5 	bl	b23c <boot_status_internal_off>
    off = boot_status_off(fap) +
    b072:	4404      	add	r4, r0
    align = flash_area_align(fap);
    b074:	9801      	ldr	r0, [sp, #4]
    b076:	f000 ff0d 	bl	be94 <flash_area_align>
    b07a:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    b07c:	9801      	ldr	r0, [sp, #4]
    b07e:	f000 ff15 	bl	beac <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    b082:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    b084:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    b086:	eb0d 0002 	add.w	r0, sp, r2
    b08a:	f000 ffcb 	bl	c024 <memset>
    buf[0] = bs->state;
    b08e:	792b      	ldrb	r3, [r5, #4]
    b090:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    b094:	4621      	mov	r1, r4
    b096:	9801      	ldr	r0, [sp, #4]
    b098:	b2f3      	uxtb	r3, r6
    b09a:	aa02      	add	r2, sp, #8
    b09c:	f000 fe9d 	bl	bdda <flash_area_write>
    if (rc != 0) {
    b0a0:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    b0a2:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    b0a4:	bf18      	it	ne
    b0a6:	2401      	movne	r4, #1
    flash_area_close(fap);
    b0a8:	f000 fe7a 	bl	bda0 <flash_area_close>
}
    b0ac:	4620      	mov	r0, r4
    b0ae:	b004      	add	sp, #16
    b0b0:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    b0b2:	2401      	movs	r4, #1
    b0b4:	e7fa      	b.n	b0ac <boot_write_status+0x5a>

0000b0b6 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    b0b6:	f000 bebe 	b.w	be36 <flash_area_erase>

0000b0ba <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    b0ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b0be:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    b0c0:	2100      	movs	r1, #0
{
    b0c2:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    b0c4:	4608      	mov	r0, r1
    b0c6:	f7ff fe29 	bl	ad1c <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    b0ca:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    b0cc:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    b0ce:	2000      	movs	r0, #0
    b0d0:	f7ff fe24 	bl	ad1c <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    b0d4:	7833      	ldrb	r3, [r6, #0]
    b0d6:	429c      	cmp	r4, r3
    b0d8:	d021      	beq.n	b11e <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    b0da:	4298      	cmp	r0, r3
    b0dc:	d121      	bne.n	b122 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    b0de:	2401      	movs	r4, #1
    return BOOT_IMG(state, slot).num_sectors;
    b0e0:	232c      	movs	r3, #44	; 0x2c
    b0e2:	fb03 7404 	mla	r4, r3, r4, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    b0e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    b0e8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    b0ea:	f7ff fee8 	bl	aebe <boot_trailer_sz>
    sector = boot_img_num_sectors(state, slot) - 1;
    b0ee:	3d01      	subs	r5, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    b0f0:	4607      	mov	r7, r0
    total_sz = 0;
    b0f2:	f04f 0800 	mov.w	r8, #0
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    b0f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b0f8:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    b0fc:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    b100:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    b104:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    b106:	464a      	mov	r2, r9
    b108:	1ac9      	subs	r1, r1, r3
    b10a:	4630      	mov	r0, r6
        assert(rc == 0);

        sector--;
        total_sz += sz;
    b10c:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    b10e:	f7ff ffd2 	bl	b0b6 <boot_erase_region>
    } while (total_sz < trailer_sz);
    b112:	45b8      	cmp	r8, r7
        sector--;
    b114:	f105 35ff 	add.w	r5, r5, #4294967295
    } while (total_sz < trailer_sz);
    b118:	d3ed      	bcc.n	b0f6 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    b11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    b11e:	2400      	movs	r4, #0
    b120:	e7de      	b.n	b0e0 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    b122:	2001      	movs	r0, #1
    b124:	e7f9      	b.n	b11a <swap_erase_trailer_sectors+0x60>

0000b126 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    b126:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b128:	4615      	mov	r5, r2
    b12a:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    b12c:	2005      	movs	r0, #5
    b12e:	4669      	mov	r1, sp
    b130:	f001 fb70 	bl	c814 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    b134:	79e9      	ldrb	r1, [r5, #7]
    b136:	2901      	cmp	r1, #1
    b138:	d003      	beq.n	b142 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    b13a:	2200      	movs	r2, #0
    b13c:	4620      	mov	r0, r4
    b13e:	f001 fb7d 	bl	c83c <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    b142:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b146:	2b01      	cmp	r3, #1
    b148:	d102      	bne.n	b150 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    b14a:	4620      	mov	r0, r4
    b14c:	f001 fb59 	bl	c802 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    b150:	68a9      	ldr	r1, [r5, #8]
    b152:	4620      	mov	r0, r4
    b154:	f7ff fed6 	bl	af04 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    b158:	4620      	mov	r0, r4
    b15a:	f7fb f813 	bl	6184 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    b15e:	2000      	movs	r0, #0
    b160:	b003      	add	sp, #12
    b162:	bd30      	pop	{r4, r5, pc}

0000b164 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    b164:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b166:	460d      	mov	r5, r1
    b168:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    b16a:	f7f5 feed 	bl	f48 <swap_status_source>
    b16e:	4604      	mov	r4, r0
    b170:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    b172:	b350      	cbz	r0, b1ca <swap_read_status+0x66>
    b174:	2802      	cmp	r0, #2
    b176:	d12d      	bne.n	b1d4 <swap_read_status+0x70>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    b178:	a901      	add	r1, sp, #4
    b17a:	f7f8 f86d 	bl	3258 <flash_area_open>
    if (rc != 0) {
    b17e:	bb58      	cbnz	r0, b1d8 <swap_read_status+0x74>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    b180:	9801      	ldr	r0, [sp, #4]
    b182:	462a      	mov	r2, r5
    b184:	4631      	mov	r1, r6
    b186:	f7f5 fe45 	bl	e14 <swap_read_status_bytes>
    if (rc == 0) {
    b18a:	4604      	mov	r4, r0
    b18c:	b9d0      	cbnz	r0, b1c4 <swap_read_status+0x60>
        off = boot_swap_info_off(fap);
    b18e:	9801      	ldr	r0, [sp, #4]
    b190:	f001 faca 	bl	c728 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    b194:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    b196:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    b198:	f10d 0203 	add.w	r2, sp, #3
    b19c:	9801      	ldr	r0, [sp, #4]
    b19e:	f000 fe00 	bl	bda2 <flash_area_read>
        if (rc != 0) {
    b1a2:	4604      	mov	r4, r0
    b1a4:	b9a0      	cbnz	r0, b1d0 <swap_read_status+0x6c>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    b1a6:	9801      	ldr	r0, [sp, #4]
    b1a8:	2201      	movs	r2, #1
    b1aa:	f10d 0103 	add.w	r1, sp, #3
    b1ae:	f001 facc 	bl	c74a <bootutil_buffer_is_erased>
    b1b2:	b110      	cbz	r0, b1ba <swap_read_status+0x56>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    b1b4:	2301      	movs	r3, #1
    b1b6:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    b1ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b1be:	f003 030f 	and.w	r3, r3, #15
    b1c2:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    b1c4:	9801      	ldr	r0, [sp, #4]
    b1c6:	f000 fdeb 	bl	bda0 <flash_area_close>

    return rc;
}
    b1ca:	4620      	mov	r0, r4
    b1cc:	b002      	add	sp, #8
    b1ce:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    b1d0:	2401      	movs	r4, #1
    b1d2:	e7f7      	b.n	b1c4 <swap_read_status+0x60>
    switch (bs->source) {
    b1d4:	2407      	movs	r4, #7
    b1d6:	e7f8      	b.n	b1ca <swap_read_status+0x66>
        return BOOT_EFLASH;
    b1d8:	2401      	movs	r4, #1
    b1da:	e7f6      	b.n	b1ca <swap_read_status+0x66>

0000b1dc <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    b1dc:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    b1de:	2002      	movs	r0, #2
    b1e0:	a901      	add	r1, sp, #4
    b1e2:	f7f8 f839 	bl	3258 <flash_area_open>
            &fap);
    if (rc != 0) {
    b1e6:	b948      	cbnz	r0, b1fc <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    b1e8:	9801      	ldr	r0, [sp, #4]
    b1ea:	f7ff fe86 	bl	aefa <boot_write_copy_done>
    b1ee:	4604      	mov	r4, r0
    flash_area_close(fap);
    b1f0:	9801      	ldr	r0, [sp, #4]
    b1f2:	f000 fdd5 	bl	bda0 <flash_area_close>
    return rc;
}
    b1f6:	4620      	mov	r0, r4
    b1f8:	b002      	add	sp, #8
    b1fa:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    b1fc:	2401      	movs	r4, #1
    b1fe:	e7fa      	b.n	b1f6 <swap_set_copy_done+0x1a>

0000b200 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    b200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    b202:	2002      	movs	r0, #2
    b204:	a901      	add	r1, sp, #4
    b206:	f7f8 f827 	bl	3258 <flash_area_open>
            &fap);
    if (rc != 0) {
    b20a:	b9a8      	cbnz	r0, b238 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    b20c:	9801      	ldr	r0, [sp, #4]
    b20e:	a902      	add	r1, sp, #8
    b210:	f7fa ffc6 	bl	61a0 <boot_read_swap_state>
    if (rc != 0) {
    b214:	4604      	mov	r4, r0
    b216:	b968      	cbnz	r0, b234 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    b218:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b21c:	2b03      	cmp	r3, #3
    b21e:	d103      	bne.n	b228 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    b220:	9801      	ldr	r0, [sp, #4]
    b222:	f001 faee 	bl	c802 <boot_write_image_ok>
    b226:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    b228:	9801      	ldr	r0, [sp, #4]
    b22a:	f000 fdb9 	bl	bda0 <flash_area_close>
    return rc;
}
    b22e:	4620      	mov	r0, r4
    b230:	b004      	add	sp, #16
    b232:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    b234:	2401      	movs	r4, #1
    b236:	e7f7      	b.n	b228 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    b238:	2401      	movs	r4, #1
    b23a:	e7f8      	b.n	b22e <swap_set_image_ok+0x2e>

0000b23c <boot_status_internal_off>:
{
    b23c:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    b23e:	7943      	ldrb	r3, [r0, #5]
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    b240:	6804      	ldr	r4, [r0, #0]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    b242:	2b01      	cmp	r3, #1
    b244:	bf08      	it	eq
    b246:	2201      	moveq	r2, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    b248:	7903      	ldrb	r3, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    b24a:	bf18      	it	ne
    b24c:	2202      	movne	r2, #2
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    b24e:	fb01 f202 	mul.w	r2, r1, r2
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    b252:	f104 34ff 	add.w	r4, r4, #4294967295
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    b256:	f103 33ff 	add.w	r3, r3, #4294967295
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    b25a:	fb02 f204 	mul.w	r2, r2, r4
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    b25e:	bf14      	ite	ne
    b260:	01cd      	lslne	r5, r1, #7
    b262:	2500      	moveq	r5, #0
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    b264:	fb01 2103 	mla	r1, r1, r3, r2
}
    b268:	1948      	adds	r0, r1, r5
    b26a:	bd30      	pop	{r4, r5, pc}

0000b26c <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    b26c:	6803      	ldr	r3, [r0, #0]
{
    b26e:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    b270:	1acd      	subs	r5, r1, r3
    b272:	2d00      	cmp	r5, #0
    b274:	dd0d      	ble.n	b292 <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    b276:	f993 6000 	ldrsb.w	r6, [r3]
    b27a:	781c      	ldrb	r4, [r3, #0]
    b27c:	2e00      	cmp	r6, #0
    b27e:	db0b      	blt.n	b298 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    b280:	1c5c      	adds	r4, r3, #1
    b282:	6004      	str	r4, [r0, #0]
    b284:	781b      	ldrb	r3, [r3, #0]
    b286:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    b288:	6803      	ldr	r3, [r0, #0]
    b28a:	1ac9      	subs	r1, r1, r3
    b28c:	6813      	ldr	r3, [r2, #0]
    b28e:	428b      	cmp	r3, r1
    b290:	d932      	bls.n	b2f8 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    b292:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    b296:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    b298:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    b29c:	3c01      	subs	r4, #1
    b29e:	2c03      	cmp	r4, #3
    b2a0:	d827      	bhi.n	b2f2 <mbedtls_asn1_get_len+0x86>
    b2a2:	e8df f004 	tbb	[pc, r4]
    b2a6:	0902      	.short	0x0902
    b2a8:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    b2aa:	2d01      	cmp	r5, #1
    b2ac:	d0f1      	beq.n	b292 <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    b2ae:	785c      	ldrb	r4, [r3, #1]
    b2b0:	6014      	str	r4, [r2, #0]
            (*p) += 2;
    b2b2:	3302      	adds	r3, #2
            (*p) += 5;
    b2b4:	6003      	str	r3, [r0, #0]
            break;
    b2b6:	e7e7      	b.n	b288 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    b2b8:	2d02      	cmp	r5, #2
    b2ba:	ddea      	ble.n	b292 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    b2bc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
    b2c0:	ba64      	rev16	r4, r4
    b2c2:	b2a4      	uxth	r4, r4
    b2c4:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    b2c6:	3303      	adds	r3, #3
    b2c8:	e7f4      	b.n	b2b4 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    b2ca:	2d03      	cmp	r5, #3
    b2cc:	dde1      	ble.n	b292 <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    b2ce:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    b2d0:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    b2d2:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    b2d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    b2d8:	78dd      	ldrb	r5, [r3, #3]
    b2da:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    b2dc:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    b2de:	3304      	adds	r3, #4
    b2e0:	e7e8      	b.n	b2b4 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    b2e2:	2d04      	cmp	r5, #4
    b2e4:	ddd5      	ble.n	b292 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    b2e6:	f8d3 4001 	ldr.w	r4, [r3, #1]
    b2ea:	ba24      	rev	r4, r4
    b2ec:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    b2ee:	3305      	adds	r3, #5
    b2f0:	e7e0      	b.n	b2b4 <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
    b2f2:	f06f 0063 	mvn.w	r0, #99	; 0x63
    b2f6:	e7ce      	b.n	b296 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    b2f8:	2000      	movs	r0, #0
    b2fa:	e7cc      	b.n	b296 <mbedtls_asn1_get_len+0x2a>

0000b2fc <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    b2fc:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    b2fe:	6804      	ldr	r4, [r0, #0]
    b300:	1b0e      	subs	r6, r1, r4
    b302:	2e00      	cmp	r6, #0
    b304:	dd07      	ble.n	b316 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    b306:	7826      	ldrb	r6, [r4, #0]
    b308:	429e      	cmp	r6, r3
    b30a:	d108      	bne.n	b31e <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    b30c:	3401      	adds	r4, #1
    b30e:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    b310:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    b312:	f7ff bfab 	b.w	b26c <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    b316:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    b31a:	bc70      	pop	{r4, r5, r6}
    b31c:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    b31e:	f06f 0061 	mvn.w	r0, #97	; 0x61
    b322:	e7fa      	b.n	b31a <mbedtls_asn1_get_tag+0x1e>

0000b324 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    b324:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    b326:	2303      	movs	r3, #3
{
    b328:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    b32a:	f7ff ffe7 	bl	b2fc <mbedtls_asn1_get_tag>
    b32e:	b918      	cbnz	r0, b338 <mbedtls_asn1_get_bitstring_null+0x14>
        return( ret );

    if( *len == 0 )
    b330:	6813      	ldr	r3, [r2, #0]
    b332:	b913      	cbnz	r3, b33a <mbedtls_asn1_get_bitstring_null+0x16>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    b334:	f06f 0067 	mvn.w	r0, #103	; 0x67
    if( **p != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );

    return( 0 );
}
    b338:	bd38      	pop	{r3, r4, r5, pc}
    --( *len );
    b33a:	3b01      	subs	r3, #1
    b33c:	6013      	str	r3, [r2, #0]
    if( **p != 0 )
    b33e:	6823      	ldr	r3, [r4, #0]
    b340:	781a      	ldrb	r2, [r3, #0]
    b342:	2a00      	cmp	r2, #0
    b344:	d1f6      	bne.n	b334 <mbedtls_asn1_get_bitstring_null+0x10>
    ++( *p );
    b346:	3301      	adds	r3, #1
    b348:	6023      	str	r3, [r4, #0]
    return( 0 );
    b34a:	e7f5      	b.n	b338 <mbedtls_asn1_get_bitstring_null+0x14>

0000b34c <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    b34c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b350:	4690      	mov	r8, r2
    b352:	461f      	mov	r7, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    b354:	aa01      	add	r2, sp, #4
    b356:	2330      	movs	r3, #48	; 0x30
{
    b358:	4605      	mov	r5, r0
    b35a:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    b35c:	f7ff ffce 	bl	b2fc <mbedtls_asn1_get_tag>
    b360:	4604      	mov	r4, r0
    b362:	b9f8      	cbnz	r0, b3a4 <mbedtls_asn1_get_alg+0x58>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    b364:	682e      	ldr	r6, [r5, #0]
    b366:	eba9 0906 	sub.w	r9, r9, r6
    b36a:	f1b9 0f00 	cmp.w	r9, #0
    b36e:	dd35      	ble.n	b3dc <mbedtls_asn1_get_alg+0x90>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    end = *p + len;
    b370:	9901      	ldr	r1, [sp, #4]
    alg->tag = **p;
    b372:	7833      	ldrb	r3, [r6, #0]
    b374:	4642      	mov	r2, r8
    end = *p + len;
    b376:	440e      	add	r6, r1
    alg->tag = **p;
    b378:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    b37c:	4631      	mov	r1, r6
    b37e:	2306      	movs	r3, #6
    b380:	4628      	mov	r0, r5
    b382:	f7ff ffbb 	bl	b2fc <mbedtls_asn1_get_tag>
    b386:	4604      	mov	r4, r0
    b388:	b960      	cbnz	r0, b3a4 <mbedtls_asn1_get_alg+0x58>
        return( ret );

    alg->p = *p;
    b38a:	682a      	ldr	r2, [r5, #0]
    *p += alg->len;
    b38c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
    b390:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
    b394:	1853      	adds	r3, r2, r1

    if( *p == end )
    b396:	42b3      	cmp	r3, r6
    *p += alg->len;
    b398:	602b      	str	r3, [r5, #0]
    if( *p == end )
    b39a:	d107      	bne.n	b3ac <mbedtls_asn1_get_alg+0x60>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    b39c:	210c      	movs	r1, #12
    b39e:	4638      	mov	r0, r7
    b3a0:	f7fe f9b2 	bl	9708 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    b3a4:	4620      	mov	r0, r4
    b3a6:	b003      	add	sp, #12
    b3a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
    b3ac:	5c51      	ldrb	r1, [r2, r1]
    b3ae:	463a      	mov	r2, r7
    (*p)++;
    b3b0:	3301      	adds	r3, #1
    params->tag = **p;
    b3b2:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    b3b6:	4628      	mov	r0, r5
    (*p)++;
    b3b8:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    b3ba:	4631      	mov	r1, r6
    b3bc:	f7ff ff56 	bl	b26c <mbedtls_asn1_get_len>
    b3c0:	4604      	mov	r4, r0
    b3c2:	2800      	cmp	r0, #0
    b3c4:	d1ee      	bne.n	b3a4 <mbedtls_asn1_get_alg+0x58>
    params->p = *p;
    b3c6:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    b3c8:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    b3ca:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    b3cc:	4413      	add	r3, r2
    if( *p != end )
    b3ce:	42b3      	cmp	r3, r6
    *p += params->len;
    b3d0:	602b      	str	r3, [r5, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    b3d2:	bf0c      	ite	eq
    b3d4:	4604      	moveq	r4, r0
    b3d6:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    b3da:	e7e3      	b.n	b3a4 <mbedtls_asn1_get_alg+0x58>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    b3dc:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    b3e0:	e7e0      	b.n	b3a4 <mbedtls_asn1_get_alg+0x58>

0000b3e2 <cc310_sha256_update>:
{
    b3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    b3e4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    b3e8:	af00      	add	r7, sp, #0
    b3ea:	4605      	mov	r5, r0
    b3ec:	4614      	mov	r4, r2
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    b3ee:	d210      	bcs.n	b412 <cc310_sha256_update+0x30>
        uint8_t stack_buffer[data_len];
    b3f0:	1dd3      	adds	r3, r2, #7
    b3f2:	f023 0307 	bic.w	r3, r3, #7
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    b3f6:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    b3f8:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    b3fc:	4668      	mov	r0, sp
    b3fe:	f000 fe06 	bl	c00e <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    b402:	4669      	mov	r1, sp
    b404:	4622      	mov	r2, r4
    b406:	4628      	mov	r0, r5
    b408:	f7fe fbe2 	bl	9bd0 <nrf_cc310_bl_hash_sha256_update>
    b40c:	46b5      	mov	sp, r6
};
    b40e:	46bd      	mov	sp, r7
    b410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    b412:	f7fe fbdd 	bl	9bd0 <nrf_cc310_bl_hash_sha256_update>
};
    b416:	e7fa      	b.n	b40e <cc310_sha256_update+0x2c>

0000b418 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    b418:	b140      	cbz	r0, b42c <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b41a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b41c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    b420:	2b02      	cmp	r3, #2
    b422:	d006      	beq.n	b432 <sys_notify_validate+0x1a>
    b424:	2b03      	cmp	r3, #3
    b426:	d004      	beq.n	b432 <sys_notify_validate+0x1a>
    b428:	2b01      	cmp	r3, #1
    b42a:	d005      	beq.n	b438 <sys_notify_validate+0x20>
		return -EINVAL;
    b42c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    b430:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    b432:	6803      	ldr	r3, [r0, #0]
    b434:	2b00      	cmp	r3, #0
    b436:	d0f9      	beq.n	b42c <sys_notify_validate+0x14>
		notify->result = 0;
    b438:	2300      	movs	r3, #0
    b43a:	6083      	str	r3, [r0, #8]
    b43c:	4618      	mov	r0, r3
    b43e:	4770      	bx	lr

0000b440 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b440:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b442:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    b446:	2b02      	cmp	r3, #2
{
    b448:	b510      	push	{r4, lr}
	notify->result = res;
    b44a:	6081      	str	r1, [r0, #8]
	switch (method) {
    b44c:	d00b      	beq.n	b466 <sys_notify_finalize+0x26>
    b44e:	2b03      	cmp	r3, #3
    b450:	d10c      	bne.n	b46c <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    b452:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    b454:	2300      	movs	r3, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    b456:	2200      	movs	r2, #0
    b458:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    b45a:	b113      	cbz	r3, b462 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
    b45c:	4618      	mov	r0, r3
    b45e:	f7fe f811 	bl	9484 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    b462:	4620      	mov	r0, r4
    b464:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    b466:	6803      	ldr	r3, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    b468:	2400      	movs	r4, #0
		break;
    b46a:	e7f4      	b.n	b456 <sys_notify_finalize+0x16>
	switch (method) {
    b46c:	2400      	movs	r4, #0
    b46e:	4623      	mov	r3, r4
    b470:	e7f1      	b.n	b456 <sys_notify_finalize+0x16>

0000b472 <arch_printk_char_out>:
}
    b472:	2000      	movs	r0, #0
    b474:	4770      	bx	lr

0000b476 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    b476:	b40f      	push	{r0, r1, r2, r3}
    b478:	b507      	push	{r0, r1, r2, lr}
    b47a:	a904      	add	r1, sp, #16
    b47c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    b480:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    b482:	f7f5 ff8b 	bl	139c <vprintk>
	}
	va_end(ap);
}
    b486:	b003      	add	sp, #12
    b488:	f85d eb04 	ldr.w	lr, [sp], #4
    b48c:	b004      	add	sp, #16
    b48e:	4770      	bx	lr

0000b490 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b490:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    b492:	f013 0307 	ands.w	r3, r3, #7
    b496:	d105      	bne.n	b4a4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    b498:	6803      	ldr	r3, [r0, #0]
    b49a:	2b00      	cmp	r3, #0
		evt = EVT_START;
    b49c:	bf0c      	ite	eq
    b49e:	2000      	moveq	r0, #0
    b4a0:	2003      	movne	r0, #3
    b4a2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    b4a4:	2b02      	cmp	r3, #2
    b4a6:	d105      	bne.n	b4b4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    b4a8:	8b43      	ldrh	r3, [r0, #26]
    b4aa:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    b4ac:	bf14      	ite	ne
    b4ae:	2000      	movne	r0, #0
    b4b0:	2004      	moveq	r0, #4
    b4b2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    b4b4:	2b01      	cmp	r3, #1
    b4b6:	d105      	bne.n	b4c4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    b4b8:	6803      	ldr	r3, [r0, #0]
    b4ba:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    b4bc:	bf0c      	ite	eq
    b4be:	2000      	moveq	r0, #0
    b4c0:	2005      	movne	r0, #5
    b4c2:	4770      	bx	lr
	int evt = EVT_NOP;
    b4c4:	2000      	movs	r0, #0
}
    b4c6:	4770      	bx	lr

0000b4c8 <notify_one>:
{
    b4c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b4ca:	460d      	mov	r5, r1
    b4cc:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    b4ce:	4619      	mov	r1, r3
    b4d0:	1d28      	adds	r0, r5, #4
{
    b4d2:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    b4d4:	9300      	str	r3, [sp, #0]
    b4d6:	f7ff ffb3 	bl	b440 <sys_notify_finalize>
	if (cb) {
    b4da:	4604      	mov	r4, r0
    b4dc:	b140      	cbz	r0, b4f0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    b4de:	e9dd 3200 	ldrd	r3, r2, [sp]
    b4e2:	4629      	mov	r1, r5
    b4e4:	4630      	mov	r0, r6
    b4e6:	46a4      	mov	ip, r4
}
    b4e8:	b002      	add	sp, #8
    b4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
    b4ee:	4760      	bx	ip
}
    b4f0:	b002      	add	sp, #8
    b4f2:	bd70      	pop	{r4, r5, r6, pc}

0000b4f4 <transition_complete>:
{
    b4f4:	b410      	push	{r4}
	__asm__ volatile(
    b4f6:	f04f 0420 	mov.w	r4, #32
    b4fa:	f3ef 8211 	mrs	r2, BASEPRI
    b4fe:	f384 8812 	msr	BASEPRI_MAX, r4
    b502:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    b506:	6141      	str	r1, [r0, #20]
}
    b508:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    b50c:	2101      	movs	r1, #1
    b50e:	f7f5 bf53 	b.w	13b8 <process_event>

0000b512 <validate_args>:
{
    b512:	b510      	push	{r4, lr}
    b514:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    b516:	b140      	cbz	r0, b52a <validate_args+0x18>
    b518:	b139      	cbz	r1, b52a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    b51a:	1d08      	adds	r0, r1, #4
    b51c:	f7ff ff7c 	bl	b418 <sys_notify_validate>
	if ((rv == 0)
    b520:	b928      	cbnz	r0, b52e <validate_args+0x1c>
	    && ((cli->notify.flags
    b522:	68a3      	ldr	r3, [r4, #8]
    b524:	f033 0303 	bics.w	r3, r3, #3
    b528:	d001      	beq.n	b52e <validate_args+0x1c>
		rv = -EINVAL;
    b52a:	f06f 0015 	mvn.w	r0, #21
}
    b52e:	bd10      	pop	{r4, pc}

0000b530 <onoff_manager_init>:
{
    b530:	b538      	push	{r3, r4, r5, lr}
    b532:	460c      	mov	r4, r1
	if ((mgr == NULL)
    b534:	4605      	mov	r5, r0
    b536:	b158      	cbz	r0, b550 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    b538:	b151      	cbz	r1, b550 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    b53a:	680b      	ldr	r3, [r1, #0]
    b53c:	b143      	cbz	r3, b550 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    b53e:	684b      	ldr	r3, [r1, #4]
    b540:	b133      	cbz	r3, b550 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    b542:	221c      	movs	r2, #28
    b544:	2100      	movs	r1, #0
    b546:	f000 fd6d 	bl	c024 <memset>
    b54a:	612c      	str	r4, [r5, #16]
	return 0;
    b54c:	2000      	movs	r0, #0
}
    b54e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b550:	f06f 0015 	mvn.w	r0, #21
    b554:	e7fb      	b.n	b54e <onoff_manager_init+0x1e>

0000b556 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    b556:	b570      	push	{r4, r5, r6, lr}
    b558:	4604      	mov	r4, r0
    b55a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    b55c:	f7ff ffd9 	bl	b512 <validate_args>

	if (rv < 0) {
    b560:	1e05      	subs	r5, r0, #0
    b562:	db31      	blt.n	b5c8 <onoff_request+0x72>
    b564:	f04f 0320 	mov.w	r3, #32
    b568:	f3ef 8111 	mrs	r1, BASEPRI
    b56c:	f383 8812 	msr	BASEPRI_MAX, r3
    b570:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    b574:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b576:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    b578:	f64f 75ff 	movw	r5, #65535	; 0xffff
    b57c:	42ab      	cmp	r3, r5
    b57e:	f000 0207 	and.w	r2, r0, #7
    b582:	d02e      	beq.n	b5e2 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    b584:	2a02      	cmp	r2, #2
    b586:	d10e      	bne.n	b5a6 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    b588:	3301      	adds	r3, #1
    b58a:	8363      	strh	r3, [r4, #26]
	rv = state;
    b58c:	4615      	mov	r5, r2
		notify = true;
    b58e:	2301      	movs	r3, #1
	__asm__ volatile(
    b590:	f381 8811 	msr	BASEPRI, r1
    b594:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    b598:	b1b3      	cbz	r3, b5c8 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    b59a:	2300      	movs	r3, #0
    b59c:	4631      	mov	r1, r6
    b59e:	4620      	mov	r0, r4
    b5a0:	f7ff ff92 	bl	b4c8 <notify_one>
    b5a4:	e010      	b.n	b5c8 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    b5a6:	0783      	lsls	r3, r0, #30
    b5a8:	d001      	beq.n	b5ae <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    b5aa:	2a06      	cmp	r2, #6
    b5ac:	d10e      	bne.n	b5cc <onoff_request+0x76>
	parent->next = child;
    b5ae:	2300      	movs	r3, #0
    b5b0:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    b5b2:	6863      	ldr	r3, [r4, #4]
    b5b4:	b993      	cbnz	r3, b5dc <onoff_request+0x86>
	list->head = node;
    b5b6:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    b5ba:	4615      	mov	r5, r2
    b5bc:	b962      	cbnz	r2, b5d8 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    b5be:	460a      	mov	r2, r1
    b5c0:	4620      	mov	r0, r4
    b5c2:	2102      	movs	r1, #2
    b5c4:	f7f5 fef8 	bl	13b8 <process_event>
		}
	}

	return rv;
}
    b5c8:	4628      	mov	r0, r5
    b5ca:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    b5cc:	2a05      	cmp	r2, #5
    b5ce:	bf0c      	ite	eq
    b5d0:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    b5d4:	f06f 0504 	mvnne.w	r5, #4
    b5d8:	2300      	movs	r3, #0
    b5da:	e7d9      	b.n	b590 <onoff_request+0x3a>
	parent->next = child;
    b5dc:	601e      	str	r6, [r3, #0]
	list->tail = node;
    b5de:	6066      	str	r6, [r4, #4]
}
    b5e0:	e7eb      	b.n	b5ba <onoff_request+0x64>
		rv = -EAGAIN;
    b5e2:	f06f 050a 	mvn.w	r5, #10
    b5e6:	e7f7      	b.n	b5d8 <onoff_request+0x82>

0000b5e8 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    b5e8:	b510      	push	{r4, lr}
	__asm__ volatile(
    b5ea:	f04f 0320 	mov.w	r3, #32
    b5ee:	f3ef 8211 	mrs	r2, BASEPRI
    b5f2:	f383 8812 	msr	BASEPRI_MAX, r3
    b5f6:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b5fa:	8b04      	ldrh	r4, [r0, #24]
    b5fc:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    b600:	2c02      	cmp	r4, #2
    b602:	d00a      	beq.n	b61a <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
    b604:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    b606:	bf0c      	ite	eq
    b608:	f06f 0004 	mvneq.w	r0, #4
    b60c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    b610:	f382 8811 	msr	BASEPRI, r2
    b614:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    b618:	e008      	b.n	b62c <onoff_release+0x44>
	mgr->refs -= 1U;
    b61a:	8b43      	ldrh	r3, [r0, #26]
    b61c:	3b01      	subs	r3, #1
    b61e:	b29b      	uxth	r3, r3
    b620:	8343      	strh	r3, [r0, #26]
	if (stop) {
    b622:	b923      	cbnz	r3, b62e <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    b624:	4621      	mov	r1, r4
    b626:	f7f5 fec7 	bl	13b8 <process_event>
	int rv = state;
    b62a:	4620      	mov	r0, r4
}
    b62c:	bd10      	pop	{r4, pc}
	int rv = state;
    b62e:	4620      	mov	r0, r4
    b630:	e7ee      	b.n	b610 <onoff_release+0x28>

0000b632 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    b632:	b530      	push	{r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    b634:	b350      	cbz	r0, b68c <onoff_cancel+0x5a>
    b636:	b349      	cbz	r1, b68c <onoff_cancel+0x5a>
	__asm__ volatile(
    b638:	f04f 0320 	mov.w	r3, #32
    b63c:	f3ef 8511 	mrs	r5, BASEPRI
    b640:	f383 8812 	msr	BASEPRI_MAX, r3
    b644:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b648:	6803      	ldr	r3, [r0, #0]
    b64a:	2200      	movs	r2, #0
    b64c:	b913      	cbnz	r3, b654 <onoff_cancel+0x22>
		return -EINVAL;
	}

	int rv = -EALREADY;
    b64e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b652:	e00d      	b.n	b670 <onoff_cancel+0x3e>
    b654:	4299      	cmp	r1, r3
    b656:	d116      	bne.n	b686 <onoff_cancel+0x54>
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b658:	8b03      	ldrh	r3, [r0, #24]
Z_GENLIST_REMOVE(slist, snode)
    b65a:	680c      	ldr	r4, [r1, #0]
    b65c:	b96a      	cbnz	r2, b67a <onoff_cancel+0x48>
    b65e:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    b660:	6004      	str	r4, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    b662:	4291      	cmp	r1, r2
    b664:	d100      	bne.n	b668 <onoff_cancel+0x36>
	list->tail = node;
    b666:	6044      	str	r4, [r0, #4]
	parent->next = child;
    b668:	2200      	movs	r2, #0
    b66a:	600a      	str	r2, [r1, #0]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    b66c:	f003 0007 	and.w	r0, r3, #7
	__asm__ volatile(
    b670:	f385 8811 	msr	BASEPRI, r5
    b674:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    b678:	bd30      	pop	{r4, r5, pc}
    b67a:	6014      	str	r4, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    b67c:	6844      	ldr	r4, [r0, #4]
    b67e:	42a1      	cmp	r1, r4
	list->tail = node;
    b680:	bf08      	it	eq
    b682:	6042      	streq	r2, [r0, #4]
}
    b684:	e7f0      	b.n	b668 <onoff_cancel+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b686:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b688:	681b      	ldr	r3, [r3, #0]
    b68a:	e7df      	b.n	b64c <onoff_cancel+0x1a>
		return -EINVAL;
    b68c:	f06f 0015 	mvn.w	r0, #21
    b690:	e7f2      	b.n	b678 <onoff_cancel+0x46>

0000b692 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    b692:	4604      	mov	r4, r0
    b694:	b508      	push	{r3, lr}
    b696:	4608      	mov	r0, r1
    b698:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    b69a:	461a      	mov	r2, r3
    b69c:	47a0      	blx	r4
	return z_impl_z_current_get();
    b69e:	f7fd fbfd 	bl	8e9c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    b6a2:	f7f8 fcd1 	bl	4048 <z_impl_k_thread_abort>

0000b6a6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    b6a6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    b6aa:	8848      	ldrh	r0, [r1, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    b6ac:	0840      	lsrs	r0, r0, #1
    b6ae:	4770      	bx	lr

0000b6b0 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    b6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6b2:	460c      	mov	r4, r1
    b6b4:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    b6b6:	f7ff fff6 	bl	b6a6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    b6ba:	fab0 f080 	clz	r0, r0
    b6be:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    b6c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
    b6c6:	00e2      	lsls	r2, r4, #3
    b6c8:	f8dc 6010 	ldr.w	r6, [ip, #16]
    b6cc:	1d17      	adds	r7, r2, #4
    b6ce:	b2a5      	uxth	r5, r4
    b6d0:	3206      	adds	r2, #6
    b6d2:	b956      	cbnz	r6, b6ea <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    b6d4:	2101      	movs	r1, #1
    b6d6:	fa01 f000 	lsl.w	r0, r1, r0
    b6da:	68d9      	ldr	r1, [r3, #12]
    b6dc:	4301      	orrs	r1, r0
    b6de:	60d9      	str	r1, [r3, #12]
		b->next = c;
    b6e0:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    b6e4:	53dd      	strh	r5, [r3, r7]
    b6e6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    b6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    b6ea:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    b6ec:	3104      	adds	r1, #4
    b6ee:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    b6f0:	53d8      	strh	r0, [r3, r7]
    b6f2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    b6f6:	529e      	strh	r6, [r3, r2]
    b6f8:	80c5      	strh	r5, [r0, #6]
    b6fa:	525d      	strh	r5, [r3, r1]
    b6fc:	e7f4      	b.n	b6e8 <free_list_add+0x38>

0000b6fe <free_list_remove_bidx>:
{
    b6fe:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    b700:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    b704:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    b706:	4299      	cmp	r1, r3
    b708:	f102 0104 	add.w	r1, r2, #4
    b70c:	d10a      	bne.n	b724 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    b70e:	2301      	movs	r3, #1
    b710:	fa03 f202 	lsl.w	r2, r3, r2
    b714:	68c3      	ldr	r3, [r0, #12]
    b716:	ea23 0302 	bic.w	r3, r3, r2
    b71a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    b71c:	2300      	movs	r3, #0
    b71e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    b722:	bd10      	pop	{r4, pc}
    b724:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    b726:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    b72a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    b72e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    b732:	80cb      	strh	r3, [r1, #6]
    b734:	8082      	strh	r2, [r0, #4]
}
    b736:	e7f4      	b.n	b722 <free_list_remove_bidx+0x24>

0000b738 <free_list_remove>:
{
    b738:	b510      	push	{r4, lr}
    b73a:	4603      	mov	r3, r0
    b73c:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
    b73e:	f7ff ffb2 	bl	b6a6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    b742:	fab0 f080 	clz	r0, r0
		free_list_remove_bidx(h, c, bidx);
    b746:	f1c0 021f 	rsb	r2, r0, #31
    b74a:	4621      	mov	r1, r4
    b74c:	4618      	mov	r0, r3
}
    b74e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
    b752:	f7ff bfd4 	b.w	b6fe <free_list_remove_bidx>

0000b756 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    b756:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b75a:	fab1 f581 	clz	r5, r1
    b75e:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    b762:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    b766:	4603      	mov	r3, r0
	if (b->next) {
    b768:	693a      	ldr	r2, [r7, #16]
{
    b76a:	460e      	mov	r6, r1
	if (b->next) {
    b76c:	b1ca      	cbz	r2, b7a2 <alloc_chunk+0x4c>
    b76e:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    b772:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    b774:	4618      	mov	r0, r3
    b776:	4621      	mov	r1, r4
    b778:	f7ff ff95 	bl	b6a6 <chunk_size>
    b77c:	42b0      	cmp	r0, r6
    b77e:	d307      	bcc.n	b790 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    b780:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    b782:	4621      	mov	r1, r4
    b784:	4618      	mov	r0, r3
    b786:	f7ff ffba 	bl	b6fe <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    b78a:	4620      	mov	r0, r4
    b78c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    b790:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    b794:	f1b8 0801 	subs.w	r8, r8, #1
    b798:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
    b79a:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
    b79c:	d001      	beq.n	b7a2 <alloc_chunk+0x4c>
    b79e:	428a      	cmp	r2, r1
    b7a0:	d1e7      	bne.n	b772 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    b7a2:	68d9      	ldr	r1, [r3, #12]
    b7a4:	f1c5 0520 	rsb	r5, r5, #32
    b7a8:	f04f 34ff 	mov.w	r4, #4294967295
    b7ac:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
    b7ae:	400c      	ands	r4, r1
    b7b0:	d0eb      	beq.n	b78a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    b7b2:	fa94 f2a4 	rbit	r2, r4
    b7b6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    b7ba:	1d11      	adds	r1, r2, #4
    b7bc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    b7c0:	e7df      	b.n	b782 <alloc_chunk+0x2c>

0000b7c2 <merge_chunks>:
{
    b7c2:	b538      	push	{r3, r4, r5, lr}
    b7c4:	4603      	mov	r3, r0
    b7c6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    b7c8:	f7ff ff6d 	bl	b6a6 <chunk_size>
    b7cc:	4611      	mov	r1, r2
    b7ce:	4604      	mov	r4, r0
    b7d0:	4618      	mov	r0, r3
    b7d2:	f7ff ff68 	bl	b6a6 <chunk_size>
    b7d6:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
    b7d8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b7dc:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
    b7de:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
    b7e0:	4618      	mov	r0, r3
    b7e2:	4611      	mov	r1, r2
    b7e4:	f7ff ff5f 	bl	b6a6 <chunk_size>
	void *cmem = &buf[c];
    b7e8:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
    b7ea:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
    b7ee:	bd38      	pop	{r3, r4, r5, pc}

0000b7f0 <split_chunks>:
{
    b7f0:	b538      	push	{r3, r4, r5, lr}
    b7f2:	4603      	mov	r3, r0
    b7f4:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
    b7f6:	f7ff ff56 	bl	b6a6 <chunk_size>
	chunksz_t lsz = rc - lc;
    b7fa:	1b11      	subs	r1, r2, r4
	chunksz_t rsz = sz0 - lsz;
    b7fc:	1aa5      	subs	r5, r4, r2
    b7fe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    b802:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b804:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    b806:	8060      	strh	r0, [r4, #2]
    b808:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b80c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    b80e:	8044      	strh	r4, [r0, #2]
    b810:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    b814:	4618      	mov	r0, r3
    b816:	4611      	mov	r1, r2
    b818:	f7ff ff45 	bl	b6a6 <chunk_size>
	void *cmem = &buf[c];
    b81c:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
    b81e:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
    b822:	bd38      	pop	{r3, r4, r5, pc}

0000b824 <free_chunk>:
{
    b824:	b538      	push	{r3, r4, r5, lr}
    b826:	4605      	mov	r5, r0
    b828:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
    b82a:	f7ff ff3c 	bl	b6a6 <chunk_size>
    b82e:	1821      	adds	r1, r4, r0
		return ((uint16_t *)cmem)[f];
    b830:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    b834:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    b836:	07da      	lsls	r2, r3, #31
    b838:	d40b      	bmi.n	b852 <free_chunk+0x2e>
		free_list_remove(h, right_chunk(h, c));
    b83a:	4628      	mov	r0, r5
    b83c:	f7ff ff7c 	bl	b738 <free_list_remove>
	return c + chunk_size(h, c);
    b840:	4621      	mov	r1, r4
    b842:	4628      	mov	r0, r5
    b844:	f7ff ff2f 	bl	b6a6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    b848:	4621      	mov	r1, r4
    b84a:	1822      	adds	r2, r4, r0
    b84c:	4628      	mov	r0, r5
    b84e:	f7ff ffb8 	bl	b7c2 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    b852:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    b856:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    b858:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    b85c:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    b85e:	07db      	lsls	r3, r3, #31
    b860:	d40c      	bmi.n	b87c <free_chunk+0x58>
		free_list_remove(h, left_chunk(h, c));
    b862:	4628      	mov	r0, r5
    b864:	f7ff ff68 	bl	b738 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    b868:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    b86c:	4622      	mov	r2, r4
    b86e:	1a61      	subs	r1, r4, r1
    b870:	4628      	mov	r0, r5
    b872:	f7ff ffa6 	bl	b7c2 <merge_chunks>
    b876:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    b87a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    b87c:	4621      	mov	r1, r4
    b87e:	4628      	mov	r0, r5
}
    b880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    b884:	f7ff bf14 	b.w	b6b0 <free_list_add>

0000b888 <sys_heap_free>:
	if (mem == NULL) {
    b888:	b161      	cbz	r1, b8a4 <sys_heap_free+0x1c>
	struct z_heap *h = heap->heap;
    b88a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b88c:	3904      	subs	r1, #4
    b88e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    b890:	f021 0307 	bic.w	r3, r1, #7
    b894:	4403      	add	r3, r0
	free_chunk(h, c);
    b896:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    b898:	885a      	ldrh	r2, [r3, #2]
    b89a:	f022 0201 	bic.w	r2, r2, #1
    b89e:	805a      	strh	r2, [r3, #2]
    b8a0:	f7ff bfc0 	b.w	b824 <free_chunk>
}
    b8a4:	4770      	bx	lr

0000b8a6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    b8a6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    b8a8:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
    b8aa:	b909      	cbnz	r1, b8b0 <sys_heap_alloc+0xa>
		return NULL;
    b8ac:	2000      	movs	r0, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
}
    b8ae:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    b8b0:	68ab      	ldr	r3, [r5, #8]
    b8b2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    b8b6:	d9f9      	bls.n	b8ac <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b8b8:	310b      	adds	r1, #11
    b8ba:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    b8bc:	4621      	mov	r1, r4
    b8be:	4628      	mov	r0, r5
    b8c0:	f7ff ff49 	bl	b756 <alloc_chunk>
	if (c == 0U) {
    b8c4:	4606      	mov	r6, r0
    b8c6:	2800      	cmp	r0, #0
    b8c8:	d0f0      	beq.n	b8ac <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    b8ca:	4601      	mov	r1, r0
    b8cc:	4628      	mov	r0, r5
    b8ce:	f7ff feea 	bl	b6a6 <chunk_size>
    b8d2:	42a0      	cmp	r0, r4
    b8d4:	d909      	bls.n	b8ea <sys_heap_alloc+0x44>
		split_chunks(h, c, c + chunk_sz);
    b8d6:	4434      	add	r4, r6
    b8d8:	4631      	mov	r1, r6
    b8da:	4628      	mov	r0, r5
    b8dc:	4622      	mov	r2, r4
    b8de:	f7ff ff87 	bl	b7f0 <split_chunks>
		free_list_add(h, c + chunk_sz);
    b8e2:	4621      	mov	r1, r4
    b8e4:	4628      	mov	r0, r5
    b8e6:	f7ff fee3 	bl	b6b0 <free_list_add>
	void *cmem = &buf[c];
    b8ea:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    b8ee:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b8f0:	8853      	ldrh	r3, [r2, #2]
    b8f2:	f043 0301 	orr.w	r3, r3, #1
    b8f6:	8053      	strh	r3, [r2, #2]
    b8f8:	3004      	adds	r0, #4
	return chunk_mem(h, c);
    b8fa:	e7d8      	b.n	b8ae <sys_heap_alloc+0x8>

0000b8fc <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    b8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b900:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    b902:	424a      	negs	r2, r1
    b904:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    b908:	ea31 0202 	bics.w	r2, r1, r2
{
    b90c:	4603      	mov	r3, r0
	if (align != rew) {
    b90e:	d00a      	beq.n	b926 <sys_heap_aligned_alloc+0x2a>
		return false;
    b910:	2f04      	cmp	r7, #4
    b912:	463a      	mov	r2, r7
    b914:	46b9      	mov	r9, r7
    b916:	bf28      	it	cs
    b918:	2204      	movcs	r2, #4
		align -= rew;
    b91a:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    b91c:	b974      	cbnz	r4, b93c <sys_heap_aligned_alloc+0x40>
		return NULL;
    b91e:	2500      	movs	r5, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
    b920:	4628      	mov	r0, r5
    b922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    b926:	2904      	cmp	r1, #4
    b928:	d804      	bhi.n	b934 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    b92a:	4621      	mov	r1, r4
}
    b92c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    b930:	f7ff bfb9 	b.w	b8a6 <sys_heap_alloc>
		rew = 0;
    b934:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    b938:	2204      	movs	r2, #4
    b93a:	e7ef      	b.n	b91c <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    b93c:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    b93e:	68b3      	ldr	r3, [r6, #8]
    b940:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    b944:	d9eb      	bls.n	b91e <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b946:	f104 010b 	add.w	r1, r4, #11
    b94a:	4439      	add	r1, r7
    b94c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    b94e:	08c9      	lsrs	r1, r1, #3
    b950:	4630      	mov	r0, r6
    b952:	f7ff ff00 	bl	b756 <alloc_chunk>
	if (c0 == 0) {
    b956:	4680      	mov	r8, r0
    b958:	2800      	cmp	r0, #0
    b95a:	d0e0      	beq.n	b91e <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    b95c:	f109 0504 	add.w	r5, r9, #4
    b960:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    b964:	1e7b      	subs	r3, r7, #1
    b966:	4435      	add	r5, r6
    b968:	441d      	add	r5, r3
    b96a:	427f      	negs	r7, r7
    b96c:	403d      	ands	r5, r7
    b96e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b972:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b974:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b976:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b978:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b97a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    b97e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    b980:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b984:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    b988:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    b98c:	d208      	bcs.n	b9a0 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    b98e:	4601      	mov	r1, r0
    b990:	463a      	mov	r2, r7
    b992:	4630      	mov	r0, r6
    b994:	f7ff ff2c 	bl	b7f0 <split_chunks>
		free_list_add(h, c0);
    b998:	4641      	mov	r1, r8
    b99a:	4630      	mov	r0, r6
    b99c:	f7ff fe88 	bl	b6b0 <free_list_add>
	return c + chunk_size(h, c);
    b9a0:	4639      	mov	r1, r7
    b9a2:	4630      	mov	r0, r6
    b9a4:	f7ff fe7f 	bl	b6a6 <chunk_size>
    b9a8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    b9aa:	4284      	cmp	r4, r0
    b9ac:	d208      	bcs.n	b9c0 <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c, c_end);
    b9ae:	4639      	mov	r1, r7
    b9b0:	4630      	mov	r0, r6
    b9b2:	4622      	mov	r2, r4
    b9b4:	f7ff ff1c 	bl	b7f0 <split_chunks>
		free_list_add(h, c_end);
    b9b8:	4621      	mov	r1, r4
    b9ba:	4630      	mov	r0, r6
    b9bc:	f7ff fe78 	bl	b6b0 <free_list_add>
	void *cmem = &buf[c];
    b9c0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b9c4:	8873      	ldrh	r3, [r6, #2]
    b9c6:	f043 0301 	orr.w	r3, r3, #1
    b9ca:	8073      	strh	r3, [r6, #2]
    b9cc:	e7a8      	b.n	b920 <sys_heap_aligned_alloc+0x24>

0000b9ce <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    b9ce:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b9d0:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b9d2:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b9d4:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b9d8:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    b9dc:	1ad2      	subs	r2, r2, r3
{
    b9de:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    b9e0:	08d4      	lsrs	r4, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    b9e2:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    b9e4:	fab4 f084 	clz	r0, r4
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b9e8:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
    b9ec:	0080      	lsls	r0, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b9ee:	1dc1      	adds	r1, r0, #7
	h->avail_buckets = 0;
    b9f0:	2500      	movs	r5, #0
	h->end_chunk = heap_sz;
    b9f2:	609c      	str	r4, [r3, #8]
	h->avail_buckets = 0;
    b9f4:	60dd      	str	r5, [r3, #12]
    b9f6:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    b9f8:	f103 0610 	add.w	r6, r3, #16
    b9fc:	4418      	add	r0, r3
    b9fe:	4286      	cmp	r6, r0
    ba00:	d118      	bne.n	ba34 <sys_heap_init+0x66>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ba02:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ba04:	f040 0001 	orr.w	r0, r0, #1
    ba08:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    ba0a:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ba0e:	1a60      	subs	r0, r4, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ba10:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    ba12:	801d      	strh	r5, [r3, #0]
    ba14:	8077      	strh	r7, [r6, #2]
    ba16:	189e      	adds	r6, r3, r2
    ba18:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    ba1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		((uint16_t *)cmem)[f] = val;
    ba20:	8075      	strh	r5, [r6, #2]
    ba22:	5298      	strh	r0, [r3, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ba24:	8862      	ldrh	r2, [r4, #2]
    ba26:	f042 0201 	orr.w	r2, r2, #1
    ba2a:	8062      	strh	r2, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    ba2c:	4618      	mov	r0, r3
}
    ba2e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    ba30:	f7ff be3e 	b.w	b6b0 <free_list_add>
		h->buckets[i].next = 0;
    ba34:	f846 5b04 	str.w	r5, [r6], #4
	for (int i = 0; i < nb_buckets; i++) {
    ba38:	e7e1      	b.n	b9fe <sys_heap_init+0x30>

0000ba3a <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    ba3a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    ba3e:	4770      	bx	lr

0000ba40 <ring_buf_is_empty>:
{
	return buf_size * (threshold / buf_size);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
    ba40:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
    ba42:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
    ba46:	42ac      	cmp	r4, r5
    ba48:	d206      	bcs.n	ba58 <ring_buf_is_empty+0x18>
		tail += get_rewind_value(buf->size,
    ba4a:	6906      	ldr	r6, [r0, #16]
    ba4c:	f7ff fff5 	bl	ba3a <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
    ba50:	fbb0 f0f6 	udiv	r0, r0, r6
		tail += get_rewind_value(buf->size,
    ba54:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    ba58:	1b63      	subs	r3, r4, r5
    ba5a:	4258      	negs	r0, r3
    ba5c:	4158      	adcs	r0, r3
    ba5e:	bd70      	pop	{r4, r5, r6, pc}

0000ba60 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    ba60:	b570      	push	{r4, r5, r6, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    ba62:	6984      	ldr	r4, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    ba64:	6885      	ldr	r5, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    ba66:	6906      	ldr	r6, [r0, #16]
    ba68:	b18c      	cbz	r4, ba8e <ring_buf_put_claim+0x2e>
    ba6a:	402c      	ands	r4, r5
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
    ba6c:	6803      	ldr	r3, [r0, #0]
    ba6e:	4433      	add	r3, r6
    ba70:	1b5b      	subs	r3, r3, r5
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    ba72:	429a      	cmp	r2, r3
    ba74:	bf28      	it	cs
    ba76:	461a      	movcs	r2, r3
	trail_size = buf->size - tmp_trail_mod;
    ba78:	1b36      	subs	r6, r6, r4

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    ba7a:	6943      	ldr	r3, [r0, #20]
	allocated = MIN(trail_size, size);
    ba7c:	42b2      	cmp	r2, r6
    ba7e:	bf28      	it	cs
    ba80:	4632      	movcs	r2, r6
	*data = &buf->buf.buf8[tmp_trail_mod];
    ba82:	441c      	add	r4, r3

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    ba84:	4415      	add	r5, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
    ba86:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
    ba88:	6085      	str	r5, [r0, #8]

	return allocated;
}
    ba8a:	4610      	mov	r0, r2
    ba8c:	bd70      	pop	{r4, r5, r6, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    ba8e:	fbb5 f4f6 	udiv	r4, r5, r6
    ba92:	fb06 5414 	mls	r4, r6, r4, r5
    ba96:	e7e9      	b.n	ba6c <ring_buf_put_claim+0xc>

0000ba98 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    ba98:	b570      	push	{r4, r5, r6, lr}
    ba9a:	4605      	mov	r5, r0
    ba9c:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    ba9e:	f7ff ffcc 	bl	ba3a <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
    baa2:	686e      	ldr	r6, [r5, #4]
    baa4:	692b      	ldr	r3, [r5, #16]
    baa6:	682a      	ldr	r2, [r5, #0]
    baa8:	1931      	adds	r1, r6, r4
    baaa:	441a      	add	r2, r3
    baac:	4291      	cmp	r1, r2
    baae:	d80a      	bhi.n	bac6 <ring_buf_put_finish+0x2e>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    bab0:	4286      	cmp	r6, r0
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
    bab2:	bf92      	itee	ls
    bab4:	2300      	movls	r3, #0
	return buf_size * (threshold / buf_size);
    bab6:	fbb0 f0f3 	udivhi	r0, r0, r3
    baba:	4343      	mulhi	r3, r0
	}

	buf->tail += (size - rew);
    babc:	1ac9      	subs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    babe:	e9c5 1101 	strd	r1, r1, [r5, #4]

	return 0;
    bac2:	2000      	movs	r0, #0
}
    bac4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    bac6:	f06f 0015 	mvn.w	r0, #21
    baca:	e7fb      	b.n	bac4 <ring_buf_put_finish+0x2c>

0000bacc <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    bacc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bad0:	4680      	mov	r8, r0
    bad2:	460e      	mov	r6, r1
    bad4:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    bad6:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    bad8:	462a      	mov	r2, r5
    bada:	a901      	add	r1, sp, #4
    badc:	4640      	mov	r0, r8
    bade:	f7ff ffbf 	bl	ba60 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    bae2:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    bae4:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    bae6:	4602      	mov	r2, r0
    bae8:	9801      	ldr	r0, [sp, #4]
    baea:	f000 fa90 	bl	c00e <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    baee:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    baf0:	4427      	add	r7, r4
		data += partial_size;
    baf2:	4426      	add	r6, r4
	} while (size && partial_size);
    baf4:	d001      	beq.n	bafa <ring_buf_put+0x2e>
    baf6:	2c00      	cmp	r4, #0
    baf8:	d1ee      	bne.n	bad8 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    bafa:	4639      	mov	r1, r7
    bafc:	4640      	mov	r0, r8
    bafe:	f7ff ffcb 	bl	ba98 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    bb02:	4638      	mov	r0, r7
    bb04:	b002      	add	sp, #8
    bb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bb0a <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    bb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    bb0e:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
    bb10:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
    bb12:	42b3      	cmp	r3, r6
{
    bb14:	4604      	mov	r4, r0
    bb16:	460f      	mov	r7, r1
    bb18:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
    bb1a:	d906      	bls.n	bb2a <ring_buf_get_claim+0x20>
    bb1c:	6905      	ldr	r5, [r0, #16]
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
    bb1e:	f7ff ff8c 	bl	ba3a <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
    bb22:	fbb0 f0f5 	udiv	r0, r0, r5
		tail += get_rewind_value(buf->size,
    bb26:	fb05 6600 	mla	r6, r5, r0, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    bb2a:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    bb2c:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    bb2e:	6923      	ldr	r3, [r4, #16]
    bb30:	b18d      	cbz	r5, bb56 <ring_buf_get_claim+0x4c>
    bb32:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
    bb34:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    bb36:	4540      	cmp	r0, r8
    bb38:	4602      	mov	r2, r0
	trail_size = buf->size - tmp_head_mod;
    bb3a:	eba3 0005 	sub.w	r0, r3, r5
	granted_size = MIN(size, space);
    bb3e:	bf28      	it	cs
    bb40:	4642      	movcs	r2, r8

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);

	*data = &buf->buf.buf8[tmp_head_mod];
    bb42:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    bb44:	4290      	cmp	r0, r2
    bb46:	bf28      	it	cs
    bb48:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_head_mod];
    bb4a:	441d      	add	r5, r3
	buf->misc.byte_mode.tmp_head += granted_size;
    bb4c:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    bb4e:	603d      	str	r5, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    bb50:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
    bb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    bb56:	fbb1 f5f3 	udiv	r5, r1, r3
    bb5a:	fb03 1515 	mls	r5, r3, r5, r1
    bb5e:	e7e9      	b.n	bb34 <ring_buf_get_claim+0x2a>

0000bb60 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
    bb62:	6847      	ldr	r7, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    bb64:	68c3      	ldr	r3, [r0, #12]
    bb66:	42bb      	cmp	r3, r7
{
    bb68:	4605      	mov	r5, r0
    bb6a:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
    bb6c:	d912      	bls.n	bb94 <ring_buf_get_finish+0x34>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
    bb6e:	6906      	ldr	r6, [r0, #16]
    bb70:	f7ff ff63 	bl	ba3a <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
    bb74:	fbb0 f0f6 	udiv	r0, r0, r6
    bb78:	4370      	muls	r0, r6
				       ring_buf_get_rewind_threshold());
		tail += rew;
    bb7a:	4407      	add	r7, r0
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
    bb7c:	6829      	ldr	r1, [r5, #0]
    bb7e:	4421      	add	r1, r4
    bb80:	42b9      	cmp	r1, r7
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    bb82:	bf9f      	itttt	ls
    bb84:	1a09      	subls	r1, r1, r0
    bb86:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    bb88:	60e9      	strls	r1, [r5, #12]

	return 0;
    bb8a:	2000      	movls	r0, #0
		return -EINVAL;
    bb8c:	bf88      	it	hi
    bb8e:	f06f 0015 	mvnhi.w	r0, #21
}
    bb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
    bb94:	2000      	movs	r0, #0
    bb96:	e7f1      	b.n	bb7c <ring_buf_get_finish+0x1c>

0000bb98 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    bb98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bb9c:	4680      	mov	r8, r0
    bb9e:	460d      	mov	r5, r1
    bba0:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    bba2:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    bba4:	4632      	mov	r2, r6
    bba6:	a901      	add	r1, sp, #4
    bba8:	4640      	mov	r0, r8
    bbaa:	f7ff ffae 	bl	bb0a <ring_buf_get_claim>
    bbae:	4604      	mov	r4, r0
		if (data) {
    bbb0:	b12d      	cbz	r5, bbbe <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    bbb2:	4602      	mov	r2, r0
    bbb4:	9901      	ldr	r1, [sp, #4]
    bbb6:	4628      	mov	r0, r5
    bbb8:	f000 fa29 	bl	c00e <memcpy>
			data += partial_size;
    bbbc:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    bbbe:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    bbc0:	4427      	add	r7, r4
	} while (size && partial_size);
    bbc2:	d001      	beq.n	bbc8 <ring_buf_get+0x30>
    bbc4:	2c00      	cmp	r4, #0
    bbc6:	d1ed      	bne.n	bba4 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    bbc8:	4639      	mov	r1, r7
    bbca:	4640      	mov	r0, r8
    bbcc:	f7ff ffc8 	bl	bb60 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    bbd0:	4638      	mov	r0, r7
    bbd2:	b002      	add	sp, #8
    bbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bbd8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    bbd8:	4770      	bx	lr

0000bbda <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    bbda:	b40f      	push	{r0, r1, r2, r3}
    bbdc:	b507      	push	{r0, r1, r2, lr}
    bbde:	a904      	add	r1, sp, #16
    bbe0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    bbe4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    bbe6:	f7f5 fbd9 	bl	139c <vprintk>
	va_end(ap);
}
    bbea:	b003      	add	sp, #12
    bbec:	f85d eb04 	ldr.w	lr, [sp], #4
    bbf0:	b004      	add	sp, #16
    bbf2:	4770      	bx	lr

0000bbf4 <flash_img_buffered_write>:
	     "CONFIG_IMG_BLOCK_BUF_SIZE is not a multiple of "
	     "FLASH_WRITE_BLOCK_SIZE");

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
    bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
    bbf6:	f500 7701 	add.w	r7, r0, #516	; 0x204
{
    bbfa:	4605      	mov	r5, r0
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
    bbfc:	4638      	mov	r0, r7
{
    bbfe:	461e      	mov	r6, r3
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
    bc00:	f000 f981 	bl	bf06 <stream_flash_buffered_write>
    bc04:	4604      	mov	r4, r0
	if (!flush) {
    bc06:	b186      	cbz	r6, bc2a <flash_img_buffered_write+0x36>
		return rc;
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = stream_flash_erase_page(&ctx->stream,
				ctx->flash_area->fa_off +
    bc08:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    bc0c:	6899      	ldr	r1, [r3, #8]
    bc0e:	685b      	ldr	r3, [r3, #4]
    bc10:	3920      	subs	r1, #32
	rc = stream_flash_erase_page(&ctx->stream,
    bc12:	4419      	add	r1, r3
    bc14:	4638      	mov	r0, r7
    bc16:	f7f7 fb85 	bl	3324 <stream_flash_erase_page>
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
	if (rc) {
    bc1a:	4604      	mov	r4, r0
    bc1c:	b928      	cbnz	r0, bc2a <flash_img_buffered_write+0x36>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
    bc1e:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    bc22:	f000 f8bd 	bl	bda0 <flash_area_close>
	ctx->flash_area = NULL;
    bc26:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200

	return rc;
}
    bc2a:	4620      	mov	r0, r4
    bc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bc2e <flash_img_init_id>:
{
	return stream_flash_bytes_written(&ctx->stream);
}

int flash_img_init_id(struct flash_img_context *ctx, uint8_t area_id)
{
    bc2e:	b530      	push	{r4, r5, lr}
    bc30:	4605      	mov	r5, r0
    bc32:	b085      	sub	sp, #20
    bc34:	4608      	mov	r0, r1
	int rc;
	const struct device *flash_dev;

	rc = flash_area_open(area_id,
    bc36:	f505 7100 	add.w	r1, r5, #512	; 0x200
    bc3a:	f7f7 fb0d 	bl	3258 <flash_area_open>
			       (const struct flash_area **)&(ctx->flash_area));
	if (rc) {
    bc3e:	4604      	mov	r4, r0
    bc40:	b998      	cbnz	r0, bc6a <flash_img_init_id+0x3c>
		return rc;
	}

	flash_dev = flash_area_get_device(ctx->flash_area);
    bc42:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    bc46:	f000 f92e 	bl	bea6 <flash_area_get_device>

	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
			CONFIG_IMG_BLOCK_BUF_SIZE, ctx->flash_area->fa_off,
    bc4a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
    bc4e:	9402      	str	r4, [sp, #8]
    bc50:	689a      	ldr	r2, [r3, #8]
    bc52:	9201      	str	r2, [sp, #4]
    bc54:	685b      	ldr	r3, [r3, #4]
    bc56:	9300      	str	r3, [sp, #0]
	flash_dev = flash_area_get_device(ctx->flash_area);
    bc58:	4601      	mov	r1, r0
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
    bc5a:	f44f 7300 	mov.w	r3, #512	; 0x200
    bc5e:	462a      	mov	r2, r5
    bc60:	f505 7001 	add.w	r0, r5, #516	; 0x204
    bc64:	f7f7 fc26 	bl	34b4 <stream_flash_init>
    bc68:	4604      	mov	r4, r0
			ctx->flash_area->fa_size, NULL);
}
    bc6a:	4620      	mov	r0, r4
    bc6c:	b005      	add	sp, #20
    bc6e:	bd30      	pop	{r4, r5, pc}

0000bc70 <flash_img_init>:

int flash_img_init(struct flash_img_context *ctx)
{
	return flash_img_init_id(ctx, UPLOAD_FLASH_AREA_ID);
    bc70:	2105      	movs	r1, #5
    bc72:	f7ff bfdc 	b.w	bc2e <flash_img_init_id>

0000bc76 <usb_get_dev_data_by_cfg>:
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    bc76:	6800      	ldr	r0, [r0, #0]
    bc78:	b158      	cbz	r0, bc92 <usb_get_dev_data_by_cfg+0x1c>
    bc7a:	3804      	subs	r0, #4
    bc7c:	b900      	cbnz	r0, bc80 <usb_get_dev_data_by_cfg+0xa>
    bc7e:	4770      	bx	lr
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    bc80:	6803      	ldr	r3, [r0, #0]

		if (cfg_cur == cfg) {
    bc82:	685b      	ldr	r3, [r3, #4]
    bc84:	4299      	cmp	r1, r3
    bc86:	d004      	beq.n	bc92 <usb_get_dev_data_by_cfg+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bc88:	1d03      	adds	r3, r0, #4
    bc8a:	d001      	beq.n	bc90 <usb_get_dev_data_by_cfg+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bc8c:	6840      	ldr	r0, [r0, #4]
    bc8e:	e7f3      	b.n	bc78 <usb_get_dev_data_by_cfg+0x2>
		}
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
    bc90:	4618      	mov	r0, r3
}
    bc92:	4770      	bx	lr

0000bc94 <usb_get_dev_data_by_iface>:
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    bc94:	6800      	ldr	r0, [r0, #0]
    bc96:	b168      	cbz	r0, bcb4 <usb_get_dev_data_by_iface+0x20>
    bc98:	3804      	subs	r0, #4
    bc9a:	b900      	cbnz	r0, bc9e <usb_get_dev_data_by_iface+0xa>
    bc9c:	4770      	bx	lr
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    bc9e:	6803      	ldr	r3, [r0, #0]
		const struct usb_if_descriptor *if_desc =
    bca0:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    bca2:	685b      	ldr	r3, [r3, #4]
    bca4:	789b      	ldrb	r3, [r3, #2]
    bca6:	428b      	cmp	r3, r1
    bca8:	d004      	beq.n	bcb4 <usb_get_dev_data_by_iface+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bcaa:	1d03      	adds	r3, r0, #4
    bcac:	d001      	beq.n	bcb2 <usb_get_dev_data_by_iface+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bcae:	6840      	ldr	r0, [r0, #4]
    bcb0:	e7f1      	b.n	bc96 <usb_get_dev_data_by_iface+0x2>
		}
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
    bcb2:	4618      	mov	r0, r3
}
    bcb4:	4770      	bx	lr

0000bcb6 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    bcb6:	b530      	push	{r4, r5, lr}
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    bcb8:	6800      	ldr	r0, [r0, #0]
    bcba:	b198      	cbz	r0, bce4 <usb_get_dev_data_by_ep+0x2e>
    bcbc:	3804      	subs	r0, #4
    bcbe:	b188      	cbz	r0, bce4 <usb_get_dev_data_by_ep+0x2e>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    bcc0:	6803      	ldr	r3, [r0, #0]
    bcc2:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    bcc4:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    bcc6:	7f1d      	ldrb	r5, [r3, #28]
			if (ep_data[i].ep_addr == ep) {
    bcc8:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    bcca:	2300      	movs	r3, #0
    bccc:	b2dc      	uxtb	r4, r3
    bcce:	42a5      	cmp	r5, r4
    bcd0:	d803      	bhi.n	bcda <usb_get_dev_data_by_ep+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bcd2:	1d03      	adds	r3, r0, #4
    bcd4:	d007      	beq.n	bce6 <usb_get_dev_data_by_ep+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bcd6:	6840      	ldr	r0, [r0, #4]
    bcd8:	e7ef      	b.n	bcba <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    bcda:	3301      	adds	r3, #1
    bcdc:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    bce0:	428c      	cmp	r4, r1
    bce2:	d1f3      	bne.n	bccc <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    bce4:	bd30      	pop	{r4, r5, pc}
	return NULL;
    bce6:	4618      	mov	r0, r3
    bce8:	e7fc      	b.n	bce4 <usb_get_dev_data_by_ep+0x2e>

0000bcea <usb_transfer_is_busy>:
{
    bcea:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    bcec:	f7f6 fc60 	bl	25b0 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    bcf0:	b128      	cbz	r0, bcfe <usb_transfer_is_busy+0x14>
    bcf2:	6840      	ldr	r0, [r0, #4]
    bcf4:	f110 0f10 	cmn.w	r0, #16
    bcf8:	bf14      	ite	ne
    bcfa:	2000      	movne	r0, #0
    bcfc:	2001      	moveq	r0, #1
}
    bcfe:	bd08      	pop	{r3, pc}

0000bd00 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    bd00:	1c4b      	adds	r3, r1, #1
    bd02:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    bd04:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    bd06:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    bd08:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    bd0c:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    bd0e:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    bd12:	4770      	bx	lr

0000bd14 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    bd14:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    bd18:	6f80      	ldr	r0, [r0, #120]	; 0x78
    bd1a:	4718      	bx	r3

0000bd1c <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    bd1c:	6903      	ldr	r3, [r0, #16]
    bd1e:	2200      	movs	r2, #0
    bd20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    bd24:	4770      	bx	lr

0000bd26 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    bd26:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    bd28:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
    bd2c:	b108      	cbz	r0, bd32 <cdc_acm_irq_tx_ready+0xc>
		return 1;
    bd2e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    bd32:	4770      	bx	lr

0000bd34 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    bd34:	6903      	ldr	r3, [r0, #16]
    bd36:	2200      	movs	r2, #0
    bd38:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    bd3c:	4770      	bx	lr

0000bd3e <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    bd3e:	6903      	ldr	r3, [r0, #16]
}
    bd40:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    bd44:	4770      	bx	lr

0000bd46 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    bd46:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    bd48:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    bd4c:	b112      	cbz	r2, bd54 <cdc_acm_irq_is_pending+0xe>
    bd4e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    bd52:	b92a      	cbnz	r2, bd60 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    bd54:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    bd58:	b118      	cbz	r0, bd62 <cdc_acm_irq_is_pending+0x1c>
		return 0;
    bd5a:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    bd5e:	4770      	bx	lr
		return 1;
    bd60:	2001      	movs	r0, #1
}
    bd62:	4770      	bx	lr

0000bd64 <cdc_acm_irq_update>:
}
    bd64:	2001      	movs	r0, #1
    bd66:	4770      	bx	lr

0000bd68 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    bd68:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    bd6a:	e9c3 1200 	strd	r1, r2, [r3]
}
    bd6e:	4770      	bx	lr

0000bd70 <cdc_acm_fifo_read>:
{
    bd70:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    bd72:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    bd74:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    bd76:	f7ff ff0f 	bl	bb98 <ring_buf_get>
    bd7a:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    bd7c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    bd7e:	f7ff fe5f 	bl	ba40 <ring_buf_is_empty>
    bd82:	b110      	cbz	r0, bd8a <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    bd84:	2300      	movs	r3, #0
    bd86:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    bd8a:	4620      	mov	r0, r4
    bd8c:	bd38      	pop	{r3, r4, r5, pc}

0000bd8e <cdc_acm_poll_in>:
{
    bd8e:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    bd90:	2201      	movs	r2, #1
    bd92:	f7ff ffed 	bl	bd70 <cdc_acm_fifo_read>
}
    bd96:	3801      	subs	r0, #1
    bd98:	bf18      	it	ne
    bd9a:	f04f 30ff 	movne.w	r0, #4294967295
    bd9e:	bd08      	pop	{r3, pc}

0000bda0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    bda0:	4770      	bx	lr

0000bda2 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    bda2:	b573      	push	{r0, r1, r4, r5, r6, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    bda4:	1e0c      	subs	r4, r1, #0
    bda6:	4605      	mov	r5, r0
    bda8:	9201      	str	r2, [sp, #4]
    bdaa:	461e      	mov	r6, r3
    bdac:	db11      	blt.n	bdd2 <flash_area_read+0x30>
    bdae:	6881      	ldr	r1, [r0, #8]
    bdb0:	18e3      	adds	r3, r4, r3
    bdb2:	428b      	cmp	r3, r1
    bdb4:	d80d      	bhi.n	bdd2 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    bdb6:	68c0      	ldr	r0, [r0, #12]
    bdb8:	f7fc f8a6 	bl	7f08 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    bdbc:	6869      	ldr	r1, [r5, #4]
    bdbe:	4421      	add	r1, r4
    bdc0:	6883      	ldr	r3, [r0, #8]
    bdc2:	9a01      	ldr	r2, [sp, #4]
    bdc4:	681c      	ldr	r4, [r3, #0]
    bdc6:	4633      	mov	r3, r6
    bdc8:	46a4      	mov	ip, r4
}
    bdca:	b002      	add	sp, #8
    bdcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bdd0:	4760      	bx	ip
    bdd2:	f06f 0015 	mvn.w	r0, #21
    bdd6:	b002      	add	sp, #8
    bdd8:	bd70      	pop	{r4, r5, r6, pc}

0000bdda <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    bdda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bdde:	f1b1 0900 	subs.w	r9, r1, #0
    bde2:	4607      	mov	r7, r0
    bde4:	4690      	mov	r8, r2
    bde6:	461e      	mov	r6, r3
    bde8:	db22      	blt.n	be30 <flash_area_write+0x56>
    bdea:	6882      	ldr	r2, [r0, #8]
    bdec:	444b      	add	r3, r9
    bdee:	4293      	cmp	r3, r2
    bdf0:	d81e      	bhi.n	be30 <flash_area_write+0x56>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    bdf2:	68c0      	ldr	r0, [r0, #12]
    bdf4:	f7fc f888 	bl	7f08 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    bdf8:	6879      	ldr	r1, [r7, #4]
    bdfa:	4605      	mov	r5, r0
    bdfc:	4489      	add	r9, r1
	const struct flash_driver_api *api =
    bdfe:	6887      	ldr	r7, [r0, #8]
	if (api->write_protection != NULL) {
    be00:	68fb      	ldr	r3, [r7, #12]
    be02:	b95b      	cbnz	r3, be1c <flash_area_write+0x42>
	rc = api->write(dev, offset, data, len);
    be04:	687c      	ldr	r4, [r7, #4]
    be06:	4633      	mov	r3, r6
    be08:	4642      	mov	r2, r8
    be0a:	4649      	mov	r1, r9
    be0c:	4628      	mov	r0, r5
    be0e:	47a0      	blx	r4
	if (api->write_protection != NULL) {
    be10:	68fb      	ldr	r3, [r7, #12]
	rc = api->write(dev, offset, data, len);
    be12:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    be14:	b943      	cbnz	r3, be28 <flash_area_write+0x4e>

	return rc;
}
    be16:	4620      	mov	r0, r4
    be18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    be1c:	2100      	movs	r1, #0
    be1e:	4798      	blx	r3
		if (rc) {
    be20:	4604      	mov	r4, r0
    be22:	2800      	cmp	r0, #0
    be24:	d0ee      	beq.n	be04 <flash_area_write+0x2a>
    be26:	e7f6      	b.n	be16 <flash_area_write+0x3c>
		(void) api->write_protection(dev, true);
    be28:	2101      	movs	r1, #1
    be2a:	4628      	mov	r0, r5
    be2c:	4798      	blx	r3
    be2e:	e7f2      	b.n	be16 <flash_area_write+0x3c>
		return -EINVAL;
    be30:	f06f 0415 	mvn.w	r4, #21
    be34:	e7ef      	b.n	be16 <flash_area_write+0x3c>

0000be36 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    be36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be3a:	1e0c      	subs	r4, r1, #0
    be3c:	4605      	mov	r5, r0
    be3e:	4617      	mov	r7, r2
    be40:	db25      	blt.n	be8e <flash_area_erase+0x58>
    be42:	18a3      	adds	r3, r4, r2
    be44:	6882      	ldr	r2, [r0, #8]
    be46:	4293      	cmp	r3, r2
    be48:	d821      	bhi.n	be8e <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    be4a:	68c0      	ldr	r0, [r0, #12]
    be4c:	f7fc f85c 	bl	7f08 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    be50:	686d      	ldr	r5, [r5, #4]
    be52:	4606      	mov	r6, r0
    be54:	4425      	add	r5, r4
	const struct flash_driver_api *api =
    be56:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (api->write_protection != NULL) {
    be5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    be5e:	b963      	cbnz	r3, be7a <flash_area_erase+0x44>
	rc = api->erase(dev, offset, size);
    be60:	f8d8 3008 	ldr.w	r3, [r8, #8]
    be64:	463a      	mov	r2, r7
    be66:	4629      	mov	r1, r5
    be68:	4630      	mov	r0, r6
    be6a:	4798      	blx	r3
	if (api->write_protection != NULL) {
    be6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    be70:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    be72:	b943      	cbnz	r3, be86 <flash_area_erase+0x50>

	return rc;
}
    be74:	4620      	mov	r0, r4
    be76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    be7a:	2100      	movs	r1, #0
    be7c:	4798      	blx	r3
		if (rc) {
    be7e:	4604      	mov	r4, r0
    be80:	2800      	cmp	r0, #0
    be82:	d0ed      	beq.n	be60 <flash_area_erase+0x2a>
    be84:	e7f6      	b.n	be74 <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
    be86:	2101      	movs	r1, #1
    be88:	4630      	mov	r0, r6
    be8a:	4798      	blx	r3
    be8c:	e7f2      	b.n	be74 <flash_area_erase+0x3e>
		return -EINVAL;
    be8e:	f06f 0415 	mvn.w	r4, #21
    be92:	e7ef      	b.n	be74 <flash_area_erase+0x3e>

0000be94 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    be94:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    be96:	68c0      	ldr	r0, [r0, #12]
    be98:	f7fc f836 	bl	7f08 <z_impl_device_get_binding>
	return api->get_parameters(dev)->write_block_size;
    be9c:	6883      	ldr	r3, [r0, #8]
    be9e:	691b      	ldr	r3, [r3, #16]
    bea0:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    bea2:	6800      	ldr	r0, [r0, #0]
    bea4:	bd08      	pop	{r3, pc}

0000bea6 <flash_area_get_device>:
	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
    bea6:	68c0      	ldr	r0, [r0, #12]
    bea8:	f7fc b82e 	b.w	7f08 <z_impl_device_get_binding>

0000beac <flash_area_erased_val>:
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    beac:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    beae:	68c0      	ldr	r0, [r0, #12]
    beb0:	f7fc f82a 	bl	7f08 <z_impl_device_get_binding>
	return api->get_parameters(dev);
    beb4:	6883      	ldr	r3, [r0, #8]
    beb6:	691b      	ldr	r3, [r3, #16]
    beb8:	4798      	blx	r3

	return param->erase_value;
}
    beba:	7900      	ldrb	r0, [r0, #4]
    bebc:	bd08      	pop	{r3, pc}

0000bebe <get_sectors_cb>:
{
    bebe:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    bec0:	6802      	ldr	r2, [r0, #0]
    bec2:	684c      	ldr	r4, [r1, #4]
    bec4:	42a2      	cmp	r2, r4
    bec6:	d316      	bcc.n	bef6 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    bec8:	688b      	ldr	r3, [r1, #8]
    beca:	4423      	add	r3, r4
    becc:	429a      	cmp	r2, r3
    bece:	d206      	bcs.n	bede <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    bed0:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    bed4:	42ab      	cmp	r3, r5
    bed6:	d304      	bcc.n	bee2 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    bed8:	f06f 030b 	mvn.w	r3, #11
    bedc:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    bede:	2000      	movs	r0, #0
    bee0:	e00a      	b.n	bef8 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    bee2:	68cd      	ldr	r5, [r1, #12]
    bee4:	1b12      	subs	r2, r2, r4
    bee6:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
    beea:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    beee:	6842      	ldr	r2, [r0, #4]
    bef0:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    bef2:	3301      	adds	r3, #1
    bef4:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    bef6:	2001      	movs	r0, #1
}
    bef8:	bd70      	pop	{r4, r5, r6, pc}

0000befa <z_impl_flash_get_write_block_size>:
{
    befa:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
    befc:	6883      	ldr	r3, [r0, #8]
    befe:	691b      	ldr	r3, [r3, #16]
    bf00:	4798      	blx	r3
}
    bf02:	6800      	ldr	r0, [r0, #0]
    bf04:	bd08      	pop	{r3, pc}

0000bf06 <stream_flash_buffered_write>:
{
    bf06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf0a:	4689      	mov	r9, r1
    bf0c:	4616      	mov	r6, r2
    bf0e:	4698      	mov	r8, r3
	if (!ctx) {
    bf10:	4604      	mov	r4, r0
    bf12:	b398      	cbz	r0, bf7c <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
    bf14:	6882      	ldr	r2, [r0, #8]
    bf16:	6903      	ldr	r3, [r0, #16]
    bf18:	4413      	add	r3, r2
    bf1a:	6982      	ldr	r2, [r0, #24]
    bf1c:	4433      	add	r3, r6
    bf1e:	4293      	cmp	r3, r2
    bf20:	d830      	bhi.n	bf84 <stream_flash_buffered_write+0x7e>
	int processed = 0;
    bf22:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
    bf24:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
    bf28:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
    bf2c:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
    bf2e:	45ba      	cmp	sl, r7
    bf30:	d215      	bcs.n	bf5e <stream_flash_buffered_write+0x58>
	if (processed < len) {
    bf32:	42b5      	cmp	r5, r6
    bf34:	d209      	bcs.n	bf4a <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
    bf36:	6823      	ldr	r3, [r4, #0]
    bf38:	4652      	mov	r2, sl
    bf3a:	4418      	add	r0, r3
    bf3c:	eb09 0105 	add.w	r1, r9, r5
    bf40:	f000 f865 	bl	c00e <memcpy>
		ctx->buf_bytes += len - processed;
    bf44:	68a3      	ldr	r3, [r4, #8]
    bf46:	4453      	add	r3, sl
    bf48:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
    bf4a:	f1b8 0f00 	cmp.w	r8, #0
    bf4e:	d01c      	beq.n	bf8a <stream_flash_buffered_write+0x84>
    bf50:	68a0      	ldr	r0, [r4, #8]
    bf52:	b1a8      	cbz	r0, bf80 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
    bf54:	4620      	mov	r0, r4
}
    bf56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
    bf5a:	f7f7 ba1f 	b.w	339c <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
    bf5e:	6823      	ldr	r3, [r4, #0]
    bf60:	463a      	mov	r2, r7
    bf62:	4418      	add	r0, r3
    bf64:	eb09 0105 	add.w	r1, r9, r5
    bf68:	f000 f851 	bl	c00e <memcpy>
		ctx->buf_bytes = ctx->buf_len;
    bf6c:	6863      	ldr	r3, [r4, #4]
    bf6e:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
    bf70:	4620      	mov	r0, r4
    bf72:	f7f7 fa13 	bl	339c <flash_sync>
		if (rc != 0) {
    bf76:	b918      	cbnz	r0, bf80 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
    bf78:	443d      	add	r5, r7
    bf7a:	e7d3      	b.n	bf24 <stream_flash_buffered_write+0x1e>
		return -EFAULT;
    bf7c:	f06f 000d 	mvn.w	r0, #13
}
    bf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    bf84:	f06f 000b 	mvn.w	r0, #11
    bf88:	e7fa      	b.n	bf80 <stream_flash_buffered_write+0x7a>
    bf8a:	4640      	mov	r0, r8
    bf8c:	e7f8      	b.n	bf80 <stream_flash_buffered_write+0x7a>

0000bf8e <abort_function>:
{
    bf8e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    bf90:	2000      	movs	r0, #0
    bf92:	f7f5 fd31 	bl	19f8 <sys_reboot>

0000bf96 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    bf96:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    bf98:	6800      	ldr	r0, [r0, #0]
    bf9a:	f7f7 bbc7 	b.w	372c <z_arm_fatal_error>

0000bf9e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    bf9e:	2100      	movs	r1, #0
    bfa0:	2001      	movs	r0, #1
    bfa2:	f7f7 bbc3 	b.w	372c <z_arm_fatal_error>

0000bfa6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    bfa6:	b508      	push	{r3, lr}
	handler();
    bfa8:	f7f7 fc70 	bl	388c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    bfac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    bfb0:	f7f7 bdd0 	b.w	3b54 <z_arm_exc_exit>

0000bfb4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    bfb4:	3901      	subs	r1, #1
    bfb6:	4603      	mov	r3, r0
    bfb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    bfbc:	b90a      	cbnz	r2, bfc2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    bfbe:	701a      	strb	r2, [r3, #0]

	return dest;
}
    bfc0:	4770      	bx	lr
		*d = *s;
    bfc2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    bfc6:	e7f7      	b.n	bfb8 <strcpy+0x4>

0000bfc8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    bfc8:	4603      	mov	r3, r0
	size_t n = 0;
    bfca:	2000      	movs	r0, #0

	while (*s != '\0') {
    bfcc:	5c1a      	ldrb	r2, [r3, r0]
    bfce:	b902      	cbnz	r2, bfd2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    bfd0:	4770      	bx	lr
		n++;
    bfd2:	3001      	adds	r0, #1
    bfd4:	e7fa      	b.n	bfcc <strlen+0x4>

0000bfd6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    bfd6:	3801      	subs	r0, #1
    bfd8:	3901      	subs	r1, #1
    bfda:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bfde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    bfe2:	4293      	cmp	r3, r2
    bfe4:	d101      	bne.n	bfea <strcmp+0x14>
    bfe6:	2b00      	cmp	r3, #0
    bfe8:	d1f7      	bne.n	bfda <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    bfea:	1a98      	subs	r0, r3, r2
    bfec:	4770      	bx	lr

0000bfee <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    bfee:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    bff0:	b15a      	cbz	r2, c00a <CONFIG_FLASH_LOAD_SIZE+0xa>
    bff2:	3901      	subs	r1, #1
    bff4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    bff6:	f810 2b01 	ldrb.w	r2, [r0], #1
    bffa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    bffe:	42a0      	cmp	r0, r4
    c000:	d001      	beq.n	c006 <CONFIG_FLASH_LOAD_SIZE+0x6>
    c002:	429a      	cmp	r2, r3
    c004:	d0f7      	beq.n	bff6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    c006:	1ad0      	subs	r0, r2, r3
}
    c008:	bd10      	pop	{r4, pc}
		return 0;
    c00a:	4610      	mov	r0, r2
    c00c:	e7fc      	b.n	c008 <CONFIG_FLASH_LOAD_SIZE+0x8>

0000c00e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    c00e:	b510      	push	{r4, lr}
    c010:	1e43      	subs	r3, r0, #1
    c012:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    c014:	4291      	cmp	r1, r2
    c016:	d100      	bne.n	c01a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    c018:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    c01a:	f811 4b01 	ldrb.w	r4, [r1], #1
    c01e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    c022:	e7f7      	b.n	c014 <memcpy+0x6>

0000c024 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    c024:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    c026:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    c028:	4603      	mov	r3, r0
	while (n > 0) {
    c02a:	4293      	cmp	r3, r2
    c02c:	d100      	bne.n	c030 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    c02e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    c030:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    c034:	e7f9      	b.n	c02a <memset+0x6>

0000c036 <boot_request_upgrade>:
#endif

}

int boot_request_upgrade(int permanent)
{
    c036:	b508      	push	{r3, lr}
#ifdef FLASH_AREA_IMAGE_SECONDARY
	int rc;

	rc = boot_set_pending(permanent);
    c038:	f000 fc49 	bl	c8ce <boot_set_pending>
	if (rc) {
    c03c:	2800      	cmp	r0, #0
		return -EFAULT;
	}
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}
    c03e:	bf18      	it	ne
    c040:	f06f 000d 	mvnne.w	r0, #13
    c044:	bd08      	pop	{r3, pc}

0000c046 <fixed_data_unref>:

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
    c046:	4770      	bx	lr

0000c048 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    c048:	6903      	ldr	r3, [r0, #16]
{
    c04a:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    c04c:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    c050:	2300      	movs	r3, #0
    c052:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    c054:	7f83      	ldrb	r3, [r0, #30]
{
    c056:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    c058:	b113      	cbz	r3, c060 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    c05a:	7a40      	ldrb	r0, [r0, #9]
    c05c:	f000 fd6b 	bl	cb36 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    c060:	2301      	movs	r3, #1
    c062:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    c064:	2300      	movs	r3, #0
    c066:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    c068:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    c06a:	77a3      	strb	r3, [r4, #30]
}
    c06c:	bd10      	pop	{r4, pc}

0000c06e <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    c06e:	f7fc ba21 	b.w	84b4 <z_impl_k_mutex_unlock>

0000c072 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    c072:	f7fc b9a1 	b.w	83b8 <z_impl_k_mutex_lock>

0000c076 <usb_dc_ep_read>:
{
    c076:	b570      	push	{r4, r5, r6, lr}
    c078:	4604      	mov	r4, r0
    c07a:	460e      	mov	r6, r1
    c07c:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    c07e:	f7f8 ff09 	bl	4e94 <usb_dc_ep_read_wait>
	if (ret) {
    c082:	b930      	cbnz	r0, c092 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    c084:	b906      	cbnz	r6, c088 <usb_dc_ep_read+0x12>
    c086:	b125      	cbz	r5, c092 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    c088:	4620      	mov	r0, r4
}
    c08a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    c08e:	f7f8 bf55 	b.w	4f3c <usb_dc_ep_read_continue>
}
    c092:	bd70      	pop	{r4, r5, r6, pc}

0000c094 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    c094:	6902      	ldr	r2, [r0, #16]
    c096:	b2cb      	uxtb	r3, r1
    c098:	210c      	movs	r1, #12
    c09a:	fb03 2101 	mla	r1, r3, r1, r2
    c09e:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    c0a0:	f000 0007 	and.w	r0, r0, #7
    c0a4:	4770      	bx	lr

0000c0a6 <set_off_state>:
	__asm__ volatile(
    c0a6:	f04f 0320 	mov.w	r3, #32
    c0aa:	f3ef 8211 	mrs	r2, BASEPRI
    c0ae:	f383 8812 	msr	BASEPRI_MAX, r3
    c0b2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c0b6:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    c0b8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    c0bc:	d001      	beq.n	c0c2 <set_off_state+0x1c>
    c0be:	428b      	cmp	r3, r1
    c0c0:	d107      	bne.n	c0d2 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c0c2:	2301      	movs	r3, #1
    c0c4:	6003      	str	r3, [r0, #0]
	int err = 0;
    c0c6:	2000      	movs	r0, #0
	__asm__ volatile(
    c0c8:	f382 8811 	msr	BASEPRI, r2
    c0cc:	f3bf 8f6f 	isb	sy
}
    c0d0:	4770      	bx	lr
		err = -EPERM;
    c0d2:	f04f 30ff 	mov.w	r0, #4294967295
    c0d6:	e7f7      	b.n	c0c8 <set_off_state+0x22>

0000c0d8 <set_starting_state>:
{
    c0d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    c0da:	f04f 0320 	mov.w	r3, #32
    c0de:	f3ef 8211 	mrs	r2, BASEPRI
    c0e2:	f383 8812 	msr	BASEPRI_MAX, r3
    c0e6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c0ea:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    c0ec:	f003 0407 	and.w	r4, r3, #7
    c0f0:	2c01      	cmp	r4, #1
    c0f2:	d106      	bne.n	c102 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    c0f4:	6001      	str	r1, [r0, #0]
	int err = 0;
    c0f6:	2000      	movs	r0, #0
	__asm__ volatile(
    c0f8:	f382 8811 	msr	BASEPRI, r2
    c0fc:	f3bf 8f6f 	isb	sy
}
    c100:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    c102:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    c106:	428b      	cmp	r3, r1
		err = -EALREADY;
    c108:	bf14      	ite	ne
    c10a:	f04f 30ff 	movne.w	r0, #4294967295
    c10e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    c112:	e7f1      	b.n	c0f8 <set_starting_state+0x20>

0000c114 <set_on_state>:
	__asm__ volatile(
    c114:	f04f 0320 	mov.w	r3, #32
    c118:	f3ef 8211 	mrs	r2, BASEPRI
    c11c:	f383 8812 	msr	BASEPRI_MAX, r3
    c120:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    c124:	6803      	ldr	r3, [r0, #0]
    c126:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c12a:	f043 0302 	orr.w	r3, r3, #2
    c12e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    c130:	f382 8811 	msr	BASEPRI, r2
    c134:	f3bf 8f6f 	isb	sy
}
    c138:	4770      	bx	lr

0000c13a <onoff_started_callback>:
	return &data->mgr[type];
    c13a:	6900      	ldr	r0, [r0, #16]
{
    c13c:	b410      	push	{r4}
	return &data->mgr[type];
    c13e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    c140:	241c      	movs	r4, #28
    c142:	fb03 0004 	mla	r0, r3, r4, r0
    c146:	2100      	movs	r1, #0
}
    c148:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    c14c:	4710      	bx	r2

0000c14e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    c14e:	2000      	movs	r0, #0
    c150:	f7fa ba34 	b.w	65bc <nrfx_clock_start>

0000c154 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c154:	2000      	movs	r0, #0
    c156:	f7fa ba63 	b.w	6620 <nrfx_clock_stop>

0000c15a <blocking_start_callback>:
{
    c15a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    c15c:	f7fc ba24 	b.w	85a8 <z_impl_k_sem_give>

0000c160 <api_stop>:
{
    c160:	b538      	push	{r3, r4, r5, lr}
    c162:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
    c164:	240c      	movs	r4, #12
    c166:	434c      	muls	r4, r1
{
    c168:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    c16a:	6900      	ldr	r0, [r0, #16]
    c16c:	f104 0340 	add.w	r3, r4, #64	; 0x40
    c170:	2180      	movs	r1, #128	; 0x80
    c172:	4418      	add	r0, r3
    c174:	f7ff ff97 	bl	c0a6 <set_off_state>
	if (err < 0) {
    c178:	2800      	cmp	r0, #0
    c17a:	db04      	blt.n	c186 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    c17c:	6869      	ldr	r1, [r5, #4]
    c17e:	440c      	add	r4, r1
    c180:	6863      	ldr	r3, [r4, #4]
    c182:	4798      	blx	r3
	return 0;
    c184:	2000      	movs	r0, #0
}
    c186:	bd38      	pop	{r3, r4, r5, pc}

0000c188 <api_start>:
{
    c188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c18c:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
    c18e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    c190:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    c192:	434c      	muls	r4, r1
{
    c194:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    c196:	f104 0040 	add.w	r0, r4, #64	; 0x40
    c19a:	2180      	movs	r1, #128	; 0x80
    c19c:	4428      	add	r0, r5
{
    c19e:	4690      	mov	r8, r2
    c1a0:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    c1a2:	f7ff ff99 	bl	c0d8 <set_starting_state>
	if (err < 0) {
    c1a6:	2800      	cmp	r0, #0
    c1a8:	db06      	blt.n	c1b8 <api_start+0x30>
	subdata->cb = cb;
    c1aa:	4425      	add	r5, r4
	subdata->user_data = user_data;
    c1ac:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    c1b0:	6873      	ldr	r3, [r6, #4]
    c1b2:	591b      	ldr	r3, [r3, r4]
    c1b4:	4798      	blx	r3
	return 0;
    c1b6:	2000      	movs	r0, #0
}
    c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c1bc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c1bc:	6843      	ldr	r3, [r0, #4]
    c1be:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    c1c0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    c1c4:	600b      	str	r3, [r1, #0]
}
    c1c6:	2000      	movs	r0, #0
    c1c8:	4770      	bx	lr

0000c1ca <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c1ca:	6843      	ldr	r3, [r0, #4]
    c1cc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    c1ce:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    c1d2:	4042      	eors	r2, r0
    c1d4:	400a      	ands	r2, r1
    c1d6:	4042      	eors	r2, r0
    p_reg->OUT = value;
    c1d8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    c1dc:	2000      	movs	r0, #0
    c1de:	4770      	bx	lr

0000c1e0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c1e0:	6843      	ldr	r3, [r0, #4]
    c1e2:	685b      	ldr	r3, [r3, #4]
}
    c1e4:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    c1e6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    c1ea:	4770      	bx	lr

0000c1ec <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c1ec:	6843      	ldr	r3, [r0, #4]
    c1ee:	685b      	ldr	r3, [r3, #4]
}
    c1f0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    c1f2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    c1f6:	4770      	bx	lr

0000c1f8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c1f8:	6843      	ldr	r3, [r0, #4]
    c1fa:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    c1fc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    c200:	4059      	eors	r1, r3
    p_reg->OUT = value;
    c202:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
    c206:	2000      	movs	r0, #0
    c208:	4770      	bx	lr

0000c20a <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    c20a:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
    c20c:	6858      	ldr	r0, [r3, #4]
{
    c20e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    c210:	b158      	cbz	r0, c22a <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c212:	2400      	movs	r4, #0
    c214:	4281      	cmp	r1, r0
    c216:	d113      	bne.n	c240 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    c218:	6808      	ldr	r0, [r1, #0]
    c21a:	b95c      	cbnz	r4, c234 <gpio_nrfx_manage_callback+0x2a>
    c21c:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    c21e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    c220:	42a1      	cmp	r1, r4
    c222:	d100      	bne.n	c226 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    c224:	6098      	str	r0, [r3, #8]
	parent->next = child;
    c226:	2000      	movs	r0, #0
    c228:	6008      	str	r0, [r1, #0]
	if (set) {
    c22a:	b972      	cbnz	r2, c24a <gpio_nrfx_manage_callback+0x40>
	return 0;
    c22c:	2000      	movs	r0, #0
}
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	4628      	mov	r0, r5
    c232:	e7ef      	b.n	c214 <gpio_nrfx_manage_callback+0xa>
    c234:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    c236:	6898      	ldr	r0, [r3, #8]
    c238:	4281      	cmp	r1, r0
	list->tail = node;
    c23a:	bf08      	it	eq
    c23c:	609c      	streq	r4, [r3, #8]
}
    c23e:	e7f2      	b.n	c226 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c240:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c242:	4604      	mov	r4, r0
    c244:	2d00      	cmp	r5, #0
    c246:	d1f3      	bne.n	c230 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    c248:	b13a      	cbz	r2, c25a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    c24a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    c24c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    c24e:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    c250:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    c252:	2800      	cmp	r0, #0
    c254:	d1ea      	bne.n	c22c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    c256:	6099      	str	r1, [r3, #8]
}
    c258:	e7e9      	b.n	c22e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    c25a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    c25e:	e7e6      	b.n	c22e <gpio_nrfx_manage_callback+0x24>

0000c260 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    c260:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    c262:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c266:	2908      	cmp	r1, #8
    c268:	6e66      	ldr	r6, [r4, #100]	; 0x64
    c26a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    c26c:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c26e:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    c270:	ea4f 2515 	mov.w	r5, r5, lsr #8
    c274:	ea4f 6303 	mov.w	r3, r3, lsl #24
    c278:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    c27c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    c280:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c284:	ea43 0305 	orr.w	r3, r3, r5
    c288:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    c28c:	ea43 0302 	orr.w	r3, r3, r2
    c290:	9300      	str	r3, [sp, #0]
    c292:	6e26      	ldr	r6, [r4, #96]	; 0x60
    c294:	6e25      	ldr	r5, [r4, #96]	; 0x60
    c296:	6e22      	ldr	r2, [r4, #96]	; 0x60
    c298:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    c29a:	ea4f 2415 	mov.w	r4, r5, lsr #8
    c29e:	ea4f 6303 	mov.w	r3, r3, lsl #24
    c2a2:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    c2a6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
    c2aa:	ea43 0304 	orr.w	r3, r3, r4
    c2ae:	ea4f 2402 	mov.w	r4, r2, lsl #8
    c2b2:	bf28      	it	cs
    c2b4:	2108      	movcs	r1, #8
    c2b6:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    c2ba:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    c2bc:	460a      	mov	r2, r1
    c2be:	460c      	mov	r4, r1
    c2c0:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    c2c2:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    c2c4:	f7ff fea3 	bl	c00e <memcpy>

	return length;
}
    c2c8:	4620      	mov	r0, r4
    c2ca:	b002      	add	sp, #8
    c2cc:	bd70      	pop	{r4, r5, r6, pc}

0000c2ce <is_regular_addr_valid>:
{
    c2ce:	b538      	push	{r3, r4, r5, lr}
    c2d0:	4604      	mov	r4, r0
    c2d2:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    c2d4:	f000 fb58 	bl	c988 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    c2d8:	4284      	cmp	r4, r0
    c2da:	d209      	bcs.n	c2f0 <is_regular_addr_valid+0x22>
    c2dc:	2c00      	cmp	r4, #0
    c2de:	db07      	blt.n	c2f0 <is_regular_addr_valid+0x22>
	    addr < 0 ||
    c2e0:	42a8      	cmp	r0, r5
    c2e2:	d305      	bcc.n	c2f0 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    c2e4:	1961      	adds	r1, r4, r5
	    len > flash_size ||
    c2e6:	4281      	cmp	r1, r0
    c2e8:	bf8c      	ite	hi
    c2ea:	2000      	movhi	r0, #0
    c2ec:	2001      	movls	r0, #1
}
    c2ee:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    c2f0:	2000      	movs	r0, #0
    c2f2:	e7fc      	b.n	c2ee <is_regular_addr_valid+0x20>

0000c2f4 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    c2f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c2f8:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
    c2fa:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    c2fc:	2500      	movs	r5, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
    c2fe:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
    c300:	6025      	str	r5, [r4, #0]
{
    c302:	460e      	mov	r6, r1
    c304:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
    c306:	4669      	mov	r1, sp
	info->index = 0U;
    c308:	60a5      	str	r5, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
    c30a:	aa01      	add	r2, sp, #4
    c30c:	4798      	blx	r3

	while (layout_size--) {
    c30e:	e9dd 1c00 	ldrd	r1, ip, [sp]
    c312:	4628      	mov	r0, r5
		info->size = layout->pages_size;
    c314:	f101 0e04 	add.w	lr, r1, #4
	while (layout_size--) {
    c318:	4560      	cmp	r0, ip
    c31a:	d104      	bne.n	c326 <flash_get_page_info+0x32>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    c31c:	f06f 0015 	mvn.w	r0, #21
}
    c320:	b003      	add	sp, #12
    c322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
    c326:	f85e 5030 	ldr.w	r5, [lr, r0, lsl #3]
    c32a:	68a2      	ldr	r2, [r4, #8]
    c32c:	f8d4 9000 	ldr.w	r9, [r4]
    c330:	6065      	str	r5, [r4, #4]
		if (offs == 0) {
    c332:	b986      	cbnz	r6, c356 <flash_get_page_info+0x62>
			index_jmp = index - info->index;
    c334:	1abb      	subs	r3, r7, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    c336:	f851 8030 	ldr.w	r8, [r1, r0, lsl #3]
    c33a:	4543      	cmp	r3, r8
    c33c:	bf28      	it	cs
    c33e:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
    c340:	fb03 9505 	mla	r5, r3, r5, r9
		info->index += index_jmp;
    c344:	441a      	add	r2, r3
		if (index_jmp < layout->pages_count) {
    c346:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
    c348:	6025      	str	r5, [r4, #0]
		info->index += index_jmp;
    c34a:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    c34c:	f100 0001 	add.w	r0, r0, #1
    c350:	d9e2      	bls.n	c318 <flash_get_page_info+0x24>
			return 0;
    c352:	2000      	movs	r0, #0
    c354:	e7e4      	b.n	c320 <flash_get_page_info+0x2c>
			index_jmp = (offs - info->start_offset) / info->size;
    c356:	eba6 0309 	sub.w	r3, r6, r9
    c35a:	fbb3 f3f5 	udiv	r3, r3, r5
    c35e:	e7ea      	b.n	c336 <flash_get_page_info+0x42>

0000c360 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    c360:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    c362:	2200      	movs	r2, #0
    c364:	f7ff bfc6 	b.w	c2f4 <flash_get_page_info>

0000c368 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    c368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    c36c:	6883      	ldr	r3, [r0, #8]
{
    c36e:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
    c370:	695b      	ldr	r3, [r3, #20]
{
    c372:	4688      	mov	r8, r1
    c374:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    c376:	a901      	add	r1, sp, #4
    c378:	aa02      	add	r2, sp, #8
    c37a:	4798      	blx	r3
	off_t off = 0;
    c37c:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    c37e:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    c380:	4625      	mov	r5, r4
    c382:	9b02      	ldr	r3, [sp, #8]
    c384:	42ab      	cmp	r3, r5
    c386:	d802      	bhi.n	c38e <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    c388:	b006      	add	sp, #24
    c38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
    c38e:	9f01      	ldr	r7, [sp, #4]
    c390:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
    c394:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
    c396:	687b      	ldr	r3, [r7, #4]
    c398:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    c39a:	683a      	ldr	r2, [r7, #0]
    c39c:	42b2      	cmp	r2, r6
    c39e:	eb0a 0306 	add.w	r3, sl, r6
    c3a2:	d802      	bhi.n	c3aa <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    c3a4:	3501      	adds	r5, #1
    c3a6:	469a      	mov	sl, r3
    c3a8:	e7eb      	b.n	c382 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    c3aa:	4649      	mov	r1, r9
    c3ac:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    c3ae:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    c3b0:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    c3b2:	47c0      	blx	r8
    c3b4:	2800      	cmp	r0, #0
    c3b6:	d0e7      	beq.n	c388 <flash_page_foreach+0x20>
			off += page_info.size;
    c3b8:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    c3ba:	3601      	adds	r6, #1
			off += page_info.size;
    c3bc:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    c3be:	e7ec      	b.n	c39a <flash_page_foreach+0x32>

0000c3c0 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    c3c0:	6843      	ldr	r3, [r0, #4]
    c3c2:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    c3c4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c3c8:	05d1      	lsls	r1, r2, #23
{
    c3ca:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c3cc:	d518      	bpl.n	c400 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c3ce:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    c3d2:	b1aa      	cbz	r2, c400 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    c3d4:	f04f 0120 	mov.w	r1, #32
    c3d8:	f3ef 8211 	mrs	r2, BASEPRI
    c3dc:	f381 8812 	msr	BASEPRI_MAX, r1
    c3e0:	f3bf 8f6f 	isb	sy
    c3e4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    c3e8:	b131      	cbz	r1, c3f8 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c3ea:	2100      	movs	r1, #0
    c3ec:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    c3f0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c3f4:	2101      	movs	r1, #1
    c3f6:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    c3f8:	f382 8811 	msr	BASEPRI, r2
    c3fc:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c400:	6842      	ldr	r2, [r0, #4]
    c402:	6852      	ldr	r2, [r2, #4]
    c404:	06d2      	lsls	r2, r2, #27
    c406:	d51a      	bpl.n	c43e <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    c408:	f04f 0220 	mov.w	r2, #32
    c40c:	f3ef 8111 	mrs	r1, BASEPRI
    c410:	f382 8812 	msr	BASEPRI_MAX, r2
    c414:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c418:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c41c:	b112      	cbz	r2, c424 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    c41e:	2200      	movs	r2, #0
    c420:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    c424:	6902      	ldr	r2, [r0, #16]
    c426:	68d2      	ldr	r2, [r2, #12]
    c428:	b10a      	cbz	r2, c42e <uarte_nrfx_isr_int+0x6e>
    c42a:	6912      	ldr	r2, [r2, #16]
    c42c:	b91a      	cbnz	r2, c436 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    c42e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    c432:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    c436:	f381 8811 	msr	BASEPRI, r1
    c43a:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    c43e:	6902      	ldr	r2, [r0, #16]
    c440:	68d2      	ldr	r2, [r2, #12]
    c442:	b15a      	cbz	r2, c45c <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c444:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c448:	b159      	cbz	r1, c462 <uarte_nrfx_isr_int+0xa2>
		if (data->int_driven->disable_tx_irq) {
    c44a:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    c44c:	2100      	movs	r1, #0
    c44e:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    c450:	b13c      	cbz	r4, c462 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
    c452:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c456:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    c45a:	7391      	strb	r1, [r2, #14]
}
    c45c:	f85d 4b04 	ldr.w	r4, [sp], #4
    c460:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c462:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    c466:	b121      	cbz	r1, c472 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c468:	2100      	movs	r1, #0
    c46a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    c46e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    c472:	6813      	ldr	r3, [r2, #0]
    c474:	2b00      	cmp	r3, #0
    c476:	d0f1      	beq.n	c45c <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    c478:	6851      	ldr	r1, [r2, #4]
}
    c47a:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
    c47e:	4718      	bx	r3

0000c480 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    c480:	6902      	ldr	r2, [r0, #16]
{
    c482:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    c484:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    c488:	e883 0003 	stmia.w	r3, {r0, r1}
}
    c48c:	2000      	movs	r0, #0
    c48e:	4770      	bx	lr

0000c490 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    c490:	6843      	ldr	r3, [r0, #4]
    c492:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    c494:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    c498:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    c49c:	4770      	bx	lr

0000c49e <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    c49e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    c4a0:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c4a2:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c4a6:	b940      	cbnz	r0, c4ba <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    c4a8:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c4aa:	0792      	lsls	r2, r2, #30
    c4ac:	d406      	bmi.n	c4bc <is_tx_ready+0x1e>
    c4ae:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    c4b2:	3800      	subs	r0, #0
    c4b4:	bf18      	it	ne
    c4b6:	2001      	movne	r0, #1
    c4b8:	4770      	bx	lr
    c4ba:	2001      	movs	r0, #1
}
    c4bc:	4770      	bx	lr

0000c4be <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    c4be:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    c4c0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    c4c2:	681b      	ldr	r3, [r3, #0]
    c4c4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    c4c8:	b148      	cbz	r0, c4de <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    c4ca:	7d52      	ldrb	r2, [r2, #21]
    c4cc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c4ce:	2000      	movs	r0, #0
    c4d0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    c4d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c4d8:	2201      	movs	r2, #1
    c4da:	601a      	str	r2, [r3, #0]
	return 0;
    c4dc:	4770      	bx	lr
		return -1;
    c4de:	f04f 30ff 	mov.w	r0, #4294967295
}
    c4e2:	4770      	bx	lr

0000c4e4 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    c4e4:	2a00      	cmp	r2, #0
    c4e6:	dd0f      	ble.n	c508 <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
    c4e8:	6843      	ldr	r3, [r0, #4]
    c4ea:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c4ec:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    c4f0:	b153      	cbz	r3, c508 <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    c4f2:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c4f4:	2000      	movs	r0, #0
    c4f6:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    c4fa:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    c4fe:	7d5b      	ldrb	r3, [r3, #21]
    c500:	700b      	strb	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c502:	2001      	movs	r0, #1
    c504:	6010      	str	r0, [r2, #0]
}
    c506:	4770      	bx	lr
	int num_rx = 0;
    c508:	2000      	movs	r0, #0
    c50a:	4770      	bx	lr

0000c50c <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    c50c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    c50e:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    c510:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    c512:	f04f 0020 	mov.w	r0, #32
    c516:	f3ef 8311 	mrs	r3, BASEPRI
    c51a:	f380 8812 	msr	BASEPRI_MAX, r0
    c51e:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    c522:	68c9      	ldr	r1, [r1, #12]
    c524:	2000      	movs	r0, #0
    c526:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    c528:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    c52c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    c530:	f383 8811 	msr	BASEPRI, r3
    c534:	f3bf 8f6f 	isb	sy
}
    c538:	4770      	bx	lr

0000c53a <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    c53a:	6903      	ldr	r3, [r0, #16]
    c53c:	68db      	ldr	r3, [r3, #12]
    c53e:	2201      	movs	r2, #1
    c540:	739a      	strb	r2, [r3, #14]
}
    c542:	4770      	bx	lr

0000c544 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    c544:	6903      	ldr	r3, [r0, #16]
    c546:	68db      	ldr	r3, [r3, #12]
    c548:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    c54a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    c54e:	b962      	cbnz	r2, c56a <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    c550:	6842      	ldr	r2, [r0, #4]
    c552:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c554:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    c558:	b140      	cbz	r0, c56c <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    c55a:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    c55e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    c562:	d003      	beq.n	c56c <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    c564:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    c566:	2001      	movs	r0, #1
    c568:	4770      	bx	lr
    c56a:	2000      	movs	r0, #0
}
    c56c:	4770      	bx	lr

0000c56e <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    c56e:	6843      	ldr	r3, [r0, #4]
    c570:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c572:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    c576:	3800      	subs	r0, #0
    c578:	bf18      	it	ne
    c57a:	2001      	movne	r0, #1
    c57c:	4770      	bx	lr

0000c57e <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    c57e:	6843      	ldr	r3, [r0, #4]
    c580:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    c582:	2210      	movs	r2, #16
    c584:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    c588:	4770      	bx	lr

0000c58a <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    c58a:	6843      	ldr	r3, [r0, #4]
    c58c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    c58e:	2210      	movs	r2, #16
    c590:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c594:	4770      	bx	lr

0000c596 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    c596:	6843      	ldr	r3, [r0, #4]
    c598:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    c59a:	f44f 7200 	mov.w	r2, #512	; 0x200
    c59e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    c5a2:	4770      	bx	lr

0000c5a4 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    c5a4:	6843      	ldr	r3, [r0, #4]
    c5a6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    c5a8:	f44f 7200 	mov.w	r2, #512	; 0x200
    c5ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c5b0:	4770      	bx	lr

0000c5b2 <uarte_nrfx_irq_update>:
}
    c5b2:	2001      	movs	r0, #1
    c5b4:	4770      	bx	lr

0000c5b6 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    c5b6:	6903      	ldr	r3, [r0, #16]
    c5b8:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    c5ba:	e9c3 1200 	strd	r1, r2, [r3]
}
    c5be:	4770      	bx	lr

0000c5c0 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    c5c0:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
    c5c2:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    c5c4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    c5c8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c5cc:	2200      	movs	r2, #0
    c5ce:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    c5d2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    c5d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    c5da:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c5de:	6842      	ldr	r2, [r0, #4]
    c5e0:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    c5e2:	bf41      	itttt	mi
    c5e4:	2208      	movmi	r2, #8
    c5e6:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    c5ea:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    c5ee:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c5f2:	2201      	movs	r2, #1
    c5f4:	609a      	str	r2, [r3, #8]
}
    c5f6:	4770      	bx	lr

0000c5f8 <uarte_nrfx_fifo_fill>:
{
    c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    c5fa:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    c5fc:	68f3      	ldr	r3, [r6, #12]
    c5fe:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c600:	f3bf 8f5b 	dmb	ish
    c604:	4294      	cmp	r4, r2
    c606:	bfa8      	it	ge
    c608:	4614      	movge	r4, r2
{
    c60a:	4605      	mov	r5, r0
    c60c:	3310      	adds	r3, #16
    c60e:	2201      	movs	r2, #1
    c610:	e853 0f00 	ldrex	r0, [r3]
    c614:	2800      	cmp	r0, #0
    c616:	d103      	bne.n	c620 <uarte_nrfx_fifo_fill+0x28>
    c618:	e843 2700 	strex	r7, r2, [r3]
    c61c:	2f00      	cmp	r7, #0
    c61e:	d1f7      	bne.n	c610 <uarte_nrfx_fifo_fill+0x18>
    c620:	f3bf 8f5b 	dmb	ish
    c624:	bf0c      	ite	eq
    c626:	4613      	moveq	r3, r2
    c628:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    c62a:	d01d      	beq.n	c668 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    c62c:	461c      	mov	r4, r3
}
    c62e:	4620      	mov	r0, r4
    c630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    c632:	68f2      	ldr	r2, [r6, #12]
    c634:	5cc8      	ldrb	r0, [r1, r3]
    c636:	6892      	ldr	r2, [r2, #8]
    c638:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    c63a:	3301      	adds	r3, #1
    c63c:	42a3      	cmp	r3, r4
    c63e:	dbf8      	blt.n	c632 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    c640:	f04f 0320 	mov.w	r3, #32
    c644:	f3ef 8711 	mrs	r7, BASEPRI
    c648:	f383 8812 	msr	BASEPRI_MAX, r3
    c64c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    c650:	4628      	mov	r0, r5
    c652:	f7ff ff24 	bl	c49e <is_tx_ready>
    c656:	68f3      	ldr	r3, [r6, #12]
    c658:	b940      	cbnz	r0, c66c <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    c65a:	6118      	str	r0, [r3, #16]
		len = 0;
    c65c:	4604      	mov	r4, r0
	__asm__ volatile(
    c65e:	f387 8811 	msr	BASEPRI, r7
    c662:	f3bf 8f6f 	isb	sy
	return len;
    c666:	e7e2      	b.n	c62e <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    c668:	2300      	movs	r3, #0
    c66a:	e7e7      	b.n	c63c <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    c66c:	6899      	ldr	r1, [r3, #8]
    c66e:	4622      	mov	r2, r4
    c670:	4628      	mov	r0, r5
    c672:	f7ff ffa5 	bl	c5c0 <tx_start>
    c676:	e7f2      	b.n	c65e <uarte_nrfx_fifo_fill+0x66>

0000c678 <uarte_nrfx_irq_is_pending>:
{
    c678:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    c67a:	6843      	ldr	r3, [r0, #4]
    c67c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    c67e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    c682:	025b      	lsls	r3, r3, #9
{
    c684:	4604      	mov	r4, r0
		||
    c686:	d405      	bmi.n	c694 <uarte_nrfx_irq_is_pending+0x1c>
    c688:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c68c:	f010 0010 	ands.w	r0, r0, #16
    c690:	d106      	bne.n	c6a0 <uarte_nrfx_irq_is_pending+0x28>
}
    c692:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    c694:	f7ff ff56 	bl	c544 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    c698:	2800      	cmp	r0, #0
    c69a:	d0f5      	beq.n	c688 <uarte_nrfx_irq_is_pending+0x10>
		||
    c69c:	2001      	movs	r0, #1
    c69e:	e7f8      	b.n	c692 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    c6a0:	4620      	mov	r0, r4
    c6a2:	f7ff ff64 	bl	c56e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    c6a6:	3800      	subs	r0, #0
    c6a8:	bf18      	it	ne
    c6aa:	2001      	movne	r0, #1
    c6ac:	e7f1      	b.n	c692 <uarte_nrfx_irq_is_pending+0x1a>

0000c6ae <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    c6ae:	b510      	push	{r4, lr}
    c6b0:	2200      	movs	r2, #0
    c6b2:	4604      	mov	r4, r0
    c6b4:	2101      	movs	r1, #1
    c6b6:	2002      	movs	r0, #2
    c6b8:	f7f7 f8d0 	bl	385c <z_arm_irq_priority_set>
    c6bc:	2002      	movs	r0, #2
    c6be:	f7f7 f89b 	bl	37f8 <arch_irq_enable>
    c6c2:	4620      	mov	r0, r4
    c6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c6c8:	f7f9 ba0e 	b.w	5ae8 <uarte_instance_init.isra.0>

0000c6cc <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    c6cc:	b510      	push	{r4, lr}
    c6ce:	2200      	movs	r2, #0
    c6d0:	4604      	mov	r4, r0
    c6d2:	2101      	movs	r1, #1
    c6d4:	2028      	movs	r0, #40	; 0x28
    c6d6:	f7f7 f8c1 	bl	385c <z_arm_irq_priority_set>
    c6da:	2028      	movs	r0, #40	; 0x28
    c6dc:	f7f7 f88c 	bl	37f8 <arch_irq_enable>
    c6e0:	4620      	mov	r0, r4
    c6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c6e6:	f7f9 b9ff 	b.w	5ae8 <uarte_instance_init.isra.0>

0000c6ea <fprotect_area>:
}
#endif

int fprotect_area(uint32_t start, size_t length)
{
	return fprotect_set_permission(start, length,
    c6ea:	2202      	movs	r2, #2
    c6ec:	f7f9 bcea 	b.w	60c4 <fprotect_set_permission>

0000c6f0 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    c6f0:	f7fc bf2a 	b.w	9548 <nrf_cc3xx_platform_init_no_rng>

0000c6f4 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    c6f4:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    c6f6:	f7f6 ff31 	bl	355c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    c6fa:	f7f6 ffe3 	bl	36c4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    c6fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    c702:	f7fc bf21 	b.w	9548 <nrf_cc3xx_platform_init_no_rng>

0000c706 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    c706:	b538      	push	{r3, r4, r5, lr}
    c708:	460c      	mov	r4, r1
    c70a:	4615      	mov	r5, r2
    c70c:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
    c70e:	f7ff fbcd 	bl	beac <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    c712:	4621      	mov	r1, r4
    c714:	42a9      	cmp	r1, r5
    c716:	d101      	bne.n	c71c <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    c718:	2001      	movs	r0, #1
}
    c71a:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    c71c:	f811 3b01 	ldrb.w	r3, [r1], #1
    c720:	4298      	cmp	r0, r3
    c722:	d0f7      	beq.n	c714 <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    c724:	2000      	movs	r0, #0
    c726:	e7f8      	b.n	c71a <bootutil_buffer_is_erased.part.0+0x14>

0000c728 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    c728:	6880      	ldr	r0, [r0, #8]
}
    c72a:	3828      	subs	r0, #40	; 0x28
    c72c:	4770      	bx	lr

0000c72e <boot_magic_compatible_check>:
    switch (tbl_val) {
    c72e:	2804      	cmp	r0, #4
    c730:	d009      	beq.n	c746 <boot_magic_compatible_check+0x18>
    c732:	2805      	cmp	r0, #5
    c734:	d103      	bne.n	c73e <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    c736:	1e48      	subs	r0, r1, #1
    c738:	bf18      	it	ne
    c73a:	2001      	movne	r0, #1
    c73c:	4770      	bx	lr
        return tbl_val == val;
    c73e:	1a43      	subs	r3, r0, r1
    c740:	4258      	negs	r0, r3
    c742:	4158      	adcs	r0, r3
    c744:	4770      	bx	lr
    switch (tbl_val) {
    c746:	2001      	movs	r0, #1
}
    c748:	4770      	bx	lr

0000c74a <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    c74a:	b111      	cbz	r1, c752 <bootutil_buffer_is_erased+0x8>
    c74c:	b10a      	cbz	r2, c752 <bootutil_buffer_is_erased+0x8>
    c74e:	f7ff bfda 	b.w	c706 <bootutil_buffer_is_erased.part.0>
}
    c752:	2000      	movs	r0, #0
    c754:	4770      	bx	lr

0000c756 <boot_read_flag>:
{
    c756:	b538      	push	{r3, r4, r5, lr}
    c758:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    c75a:	2301      	movs	r3, #1
{
    c75c:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    c75e:	4622      	mov	r2, r4
{
    c760:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    c762:	f7ff fb1e 	bl	bda2 <flash_area_read>
    if (rc < 0) {
    c766:	2800      	cmp	r0, #0
    c768:	db10      	blt.n	c78c <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    c76a:	2201      	movs	r2, #1
    c76c:	4621      	mov	r1, r4
    c76e:	4628      	mov	r0, r5
    c770:	f7ff ffeb 	bl	c74a <bootutil_buffer_is_erased>
    c774:	b118      	cbz	r0, c77e <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    c776:	2303      	movs	r3, #3
    c778:	7023      	strb	r3, [r4, #0]
    return 0;
    c77a:	2000      	movs	r0, #0
}
    c77c:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    c77e:	7823      	ldrb	r3, [r4, #0]
    c780:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
    c782:	bf0c      	ite	eq
    c784:	2301      	moveq	r3, #1
    c786:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    c788:	7023      	strb	r3, [r4, #0]
    c78a:	e7f7      	b.n	c77c <boot_read_flag+0x26>
        return BOOT_EFLASH;
    c78c:	2001      	movs	r0, #1
    c78e:	e7f5      	b.n	c77c <boot_read_flag+0x26>

0000c790 <boot_write_trailer>:
{
    c790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c794:	461d      	mov	r5, r3
    c796:	4606      	mov	r6, r0
    c798:	460f      	mov	r7, r1
    c79a:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    c79c:	f7ff fb7a 	bl	be94 <flash_area_align>
    c7a0:	b2c3      	uxtb	r3, r0
    align = (inlen + align - 1) & ~(align - 1);
    c7a2:	fa55 f480 	uxtab	r4, r5, r0
    c7a6:	3c01      	subs	r4, #1
    c7a8:	425b      	negs	r3, r3
    c7aa:	401c      	ands	r4, r3
    c7ac:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    c7ae:	2c08      	cmp	r4, #8
    c7b0:	d81a      	bhi.n	c7e8 <boot_write_trailer+0x58>
    erased_val = flash_area_erased_val(fap);
    c7b2:	4630      	mov	r0, r6
    c7b4:	f7ff fb7a 	bl	beac <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
    c7b8:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
    c7ba:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    c7bc:	4641      	mov	r1, r8
    c7be:	4668      	mov	r0, sp
    c7c0:	f7ff fc25 	bl	c00e <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    c7c4:	1b62      	subs	r2, r4, r5
    c7c6:	4649      	mov	r1, r9
    c7c8:	eb0d 0005 	add.w	r0, sp, r5
    c7cc:	f7ff fc2a 	bl	c024 <memset>
    rc = flash_area_write(fap, off, buf, align);
    c7d0:	4623      	mov	r3, r4
    c7d2:	466a      	mov	r2, sp
    c7d4:	4639      	mov	r1, r7
    c7d6:	4630      	mov	r0, r6
    c7d8:	f7ff faff 	bl	bdda <flash_area_write>
    if (rc != 0) {
    c7dc:	3800      	subs	r0, #0
    c7de:	bf18      	it	ne
    c7e0:	2001      	movne	r0, #1
}
    c7e2:	b003      	add	sp, #12
    c7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    c7e8:	f04f 30ff 	mov.w	r0, #4294967295
    c7ec:	e7f9      	b.n	c7e2 <boot_write_trailer+0x52>

0000c7ee <boot_write_trailer_flag>:
{
    c7ee:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    c7f0:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    c7f2:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    c7f6:	aa01      	add	r2, sp, #4
    c7f8:	f7ff ffca 	bl	c790 <boot_write_trailer>
}
    c7fc:	b003      	add	sp, #12
    c7fe:	f85d fb04 	ldr.w	pc, [sp], #4

0000c802 <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    c802:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    c804:	2201      	movs	r2, #1
    c806:	3918      	subs	r1, #24
    c808:	f7ff bff1 	b.w	c7ee <boot_write_trailer_flag>

0000c80c <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    c80c:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    c80e:	3a18      	subs	r2, #24
    c810:	f7ff bfa1 	b.w	c756 <boot_read_flag>

0000c814 <boot_read_swap_state_by_id>:
{
    c814:	b513      	push	{r0, r1, r4, lr}
    c816:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    c818:	b2c0      	uxtb	r0, r0
    c81a:	a901      	add	r1, sp, #4
    c81c:	f7f6 fd1c 	bl	3258 <flash_area_open>
    if (rc != 0) {
    c820:	b950      	cbnz	r0, c838 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    c822:	4621      	mov	r1, r4
    c824:	9801      	ldr	r0, [sp, #4]
    c826:	f7f9 fcbb 	bl	61a0 <boot_read_swap_state>
    c82a:	4604      	mov	r4, r0
    flash_area_close(fap);
    c82c:	9801      	ldr	r0, [sp, #4]
    c82e:	f7ff fab7 	bl	bda0 <flash_area_close>
}
    c832:	4620      	mov	r0, r4
    c834:	b002      	add	sp, #8
    c836:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    c838:	2401      	movs	r4, #1
    c83a:	e7fa      	b.n	c832 <boot_read_swap_state_by_id+0x1e>

0000c83c <boot_write_swap_info>:
{
    c83c:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    c83e:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    c842:	6881      	ldr	r1, [r0, #8]
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    c844:	f88d 2007 	strb.w	r2, [sp, #7]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    c848:	2301      	movs	r3, #1
    c84a:	f10d 0207 	add.w	r2, sp, #7
    c84e:	3928      	subs	r1, #40	; 0x28
    c850:	f7ff ff9e 	bl	c790 <boot_write_trailer>
}
    c854:	b003      	add	sp, #12
    c856:	f85d fb04 	ldr.w	pc, [sp], #4

0000c85a <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
    c85a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c85c:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
    c85e:	2005      	movs	r0, #5
    c860:	a901      	add	r1, sp, #4
    c862:	f7f6 fcf9 	bl	3258 <flash_area_open>
    if (rc != 0) {
    c866:	bb80      	cbnz	r0, c8ca <boot_set_pending_multi+0x70>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
    c868:	9801      	ldr	r0, [sp, #4]
    c86a:	a902      	add	r1, sp, #8
    c86c:	f7f9 fc98 	bl	61a0 <boot_read_swap_state>
    if (rc != 0) {
    c870:	4604      	mov	r4, r0
    c872:	b948      	cbnz	r0, c888 <boot_set_pending_multi+0x2e>
        goto done;
    }

    switch (state_secondary_slot.magic) {
    c874:	f89d 5008 	ldrb.w	r5, [sp, #8]
    c878:	9801      	ldr	r0, [sp, #4]
    c87a:	2d02      	cmp	r5, #2
    c87c:	d01f      	beq.n	c8be <boot_set_pending_multi+0x64>
    c87e:	2d03      	cmp	r5, #3
    c880:	d008      	beq.n	c894 <boot_set_pending_multi+0x3a>
    c882:	2d01      	cmp	r5, #1
    c884:	bf18      	it	ne
    c886:	2403      	movne	r4, #3
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
    c888:	9801      	ldr	r0, [sp, #4]
    c88a:	f7ff fa89 	bl	bda0 <flash_area_close>
    return rc;
}
    c88e:	4620      	mov	r0, r4
    c890:	b004      	add	sp, #16
    c892:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
    c894:	f7f9 fc76 	bl	6184 <boot_write_magic>
        if (rc == 0 && permanent) {
    c898:	4604      	mov	r4, r0
    c89a:	2800      	cmp	r0, #0
    c89c:	d1f4      	bne.n	c888 <boot_set_pending_multi+0x2e>
    c89e:	b166      	cbz	r6, c8ba <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
    c8a0:	9801      	ldr	r0, [sp, #4]
    c8a2:	f7ff ffae 	bl	c802 <boot_write_image_ok>
        if (rc == 0) {
    c8a6:	4604      	mov	r4, r0
    c8a8:	2800      	cmp	r0, #0
    c8aa:	d1ed      	bne.n	c888 <boot_set_pending_multi+0x2e>
            rc = boot_write_swap_info(fap, swap_type, 0);
    c8ac:	9801      	ldr	r0, [sp, #4]
    c8ae:	2200      	movs	r2, #0
    c8b0:	4629      	mov	r1, r5
    c8b2:	f7ff ffc3 	bl	c83c <boot_write_swap_info>
    c8b6:	4604      	mov	r4, r0
    c8b8:	e7e6      	b.n	c888 <boot_set_pending_multi+0x2e>
                swap_type = BOOT_SWAP_TYPE_TEST;
    c8ba:	2502      	movs	r5, #2
    c8bc:	e7f6      	b.n	c8ac <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
    c8be:	4621      	mov	r1, r4
    c8c0:	6882      	ldr	r2, [r0, #8]
    c8c2:	f7ff fab8 	bl	be36 <flash_area_erase>
        rc = BOOT_EBADIMAGE;
    c8c6:	2403      	movs	r4, #3
        break;
    c8c8:	e7de      	b.n	c888 <boot_set_pending_multi+0x2e>
        return BOOT_EFLASH;
    c8ca:	2401      	movs	r4, #1
    c8cc:	e7df      	b.n	c88e <boot_set_pending_multi+0x34>

0000c8ce <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
    c8ce:	4601      	mov	r1, r0
    return boot_set_pending_multi(0, permanent);
    c8d0:	2000      	movs	r0, #0
    c8d2:	f7ff bfc2 	b.w	c85a <boot_set_pending_multi>

0000c8d6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    c8d6:	4700      	bx	r0

0000c8d8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    c8d8:	f000 bc19 	b.w	d10e <z_impl_k_busy_wait>

0000c8dc <nrf_gpio_reconfigure>:
{
    c8dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c8de:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c8e0:	a801      	add	r0, sp, #4
{
    c8e2:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    c8e6:	4617      	mov	r7, r2
    c8e8:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c8ea:	f7f9 ff13 	bl	6714 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c8ee:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c8f0:	2f00      	cmp	r7, #0
    c8f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c8f6:	bf14      	ite	ne
    c8f8:	2302      	movne	r3, #2
    c8fa:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    c8fc:	2900      	cmp	r1, #0
    c8fe:	bf18      	it	ne
    c900:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c904:	2d00      	cmp	r5, #0
    c906:	bf14      	ite	ne
    c908:	f04f 0c0c 	movne.w	ip, #12
    c90c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    c910:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c912:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    c916:	bf14      	ite	ne
    c918:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    c91c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    c920:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c922:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c926:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    c92a:	bf14      	ite	ne
    c92c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    c930:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    c934:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    c938:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c93c:	b101      	cbz	r1, c940 <nrf_gpio_reconfigure+0x64>
    c93e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    c940:	b10f      	cbz	r7, c946 <nrf_gpio_reconfigure+0x6a>
    c942:	783f      	ldrb	r7, [r7, #0]
    c944:	007f      	lsls	r7, r7, #1
    c946:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    c948:	b10d      	cbz	r5, c94e <nrf_gpio_reconfigure+0x72>
    c94a:	782d      	ldrb	r5, [r5, #0]
    c94c:	00ad      	lsls	r5, r5, #2
    c94e:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    c950:	b10c      	cbz	r4, c956 <nrf_gpio_reconfigure+0x7a>
    c952:	7822      	ldrb	r2, [r4, #0]
    c954:	0214      	lsls	r4, r2, #8
    c956:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    c958:	b10e      	cbz	r6, c95e <nrf_gpio_reconfigure+0x82>
    c95a:	7836      	ldrb	r6, [r6, #0]
    c95c:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c95e:	432c      	orrs	r4, r5
    c960:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    c962:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    c966:	b003      	add	sp, #12
    c968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c96a <nrf_gpio_cfg_sense_set>:
{
    c96a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    c96c:	f10d 030f 	add.w	r3, sp, #15
    c970:	9301      	str	r3, [sp, #4]
    c972:	2300      	movs	r3, #0
{
    c974:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    c978:	9300      	str	r3, [sp, #0]
    c97a:	461a      	mov	r2, r3
    c97c:	4619      	mov	r1, r3
    c97e:	f7ff ffad 	bl	c8dc <nrf_gpio_reconfigure>
}
    c982:	b005      	add	sp, #20
    c984:	f85d fb04 	ldr.w	pc, [sp], #4

0000c988 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
    c988:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c98c:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
    c98e:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    c990:	4350      	muls	r0, r2
    c992:	4770      	bx	lr

0000c994 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
    c994:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c998:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    c99a:	4770      	bx	lr

0000c99c <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
    c99c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c9a0:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    c9a2:	4770      	bx	lr

0000c9a4 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c9a4:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    c9a8:	681a      	ldr	r2, [r3, #0]
    c9aa:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c9ac:	bf1f      	itttt	ne
    c9ae:	2200      	movne	r2, #0
    c9b0:	601a      	strne	r2, [r3, #0]
    c9b2:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c9b4:	2001      	movne	r0, #1
    c9b6:	bf08      	it	eq
    c9b8:	2000      	moveq	r0, #0
}
    c9ba:	4770      	bx	lr

0000c9bc <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    c9bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c9c0:	f44f 7260 	mov.w	r2, #896	; 0x380
    c9c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    c9c8:	4770      	bx	lr

0000c9ca <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    c9ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c9ce:	f44f 7260 	mov.w	r2, #896	; 0x380
    c9d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c9d6:	4770      	bx	lr

0000c9d8 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    c9d8:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    c9da:	f7fa fa65 	bl	6ea8 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    c9de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    c9e2:	f7f9 be63 	b.w	66ac <nrfx_clock_irq_handler>

0000c9e6 <nrfx_usbd_consumer>:
{
    c9e6:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    c9e8:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    c9ea:	680d      	ldr	r5, [r1, #0]
    c9ec:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    c9ee:	bf97      	itett	ls
    c9f0:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
    c9f4:	2100      	movhi	r1, #0
        size -= data_size;
    c9f6:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    c9f8:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    c9fa:	bf8e      	itee	hi
    c9fc:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    ca00:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    ca02:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    ca04:	429a      	cmp	r2, r3
    ca06:	d103      	bne.n	ca10 <nrfx_usbd_consumer+0x2a>
    ca08:	1e20      	subs	r0, r4, #0
    ca0a:	bf18      	it	ne
    ca0c:	2001      	movne	r0, #1
}
    ca0e:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    ca10:	2000      	movs	r0, #0
    ca12:	e7fc      	b.n	ca0e <nrfx_usbd_consumer+0x28>

0000ca14 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    ca14:	684b      	ldr	r3, [r1, #4]
{
    ca16:	b510      	push	{r4, lr}
    ca18:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    ca1a:	680c      	ldr	r4, [r1, #0]
    ca1c:	bf28      	it	cs
    ca1e:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    ca20:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    ca24:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    ca26:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    ca28:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    ca2a:	441a      	add	r2, r3
}
    ca2c:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    ca2e:	600a      	str	r2, [r1, #0]
}
    ca30:	bf18      	it	ne
    ca32:	2001      	movne	r0, #1
    ca34:	bd10      	pop	{r4, pc}

0000ca36 <nrfx_usbd_feeder_ram_zlp>:
{
    ca36:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    ca38:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    ca3a:	680b      	ldr	r3, [r1, #0]
    ca3c:	42a2      	cmp	r2, r4
    ca3e:	bf28      	it	cs
    ca40:	4622      	movcs	r2, r4
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    ca42:	2a00      	cmp	r2, #0
    ca44:	bf14      	ite	ne
    ca46:	461d      	movne	r5, r3
    ca48:	2500      	moveq	r5, #0
    p_next->size = tx_size;
    ca4a:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    ca4e:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    ca52:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
    ca54:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    ca56:	600a      	str	r2, [r1, #0]
}
    ca58:	bf14      	ite	ne
    ca5a:	2001      	movne	r0, #1
    ca5c:	2000      	moveq	r0, #0
    ca5e:	bd30      	pop	{r4, r5, pc}

0000ca60 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    ca60:	b243      	sxtb	r3, r0
    ca62:	2b00      	cmp	r3, #0
    ca64:	bfb4      	ite	lt
    ca66:	2000      	movlt	r0, #0
    ca68:	2010      	movge	r0, #16
    ca6a:	f003 030f 	and.w	r3, r3, #15
}
    ca6e:	4418      	add	r0, r3
    ca70:	4770      	bx	lr

0000ca72 <ev_started_handler>:
}
    ca72:	4770      	bx	lr

0000ca74 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    ca74:	f7fa bbbc 	b.w	71f0 <nrf_usbd_ep0in_dma_handler>

0000ca78 <nrf_usbd_epin_dma_handler>:
{
    ca78:	b508      	push	{r3, lr}
    ca7a:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
    ca7c:	f7fa fa98 	bl	6fb0 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    ca80:	4608      	mov	r0, r1
    ca82:	f7fa fa87 	bl	6f94 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ca86:	7b83      	ldrb	r3, [r0, #14]
    ca88:	2b03      	cmp	r3, #3
    ca8a:	d10a      	bne.n	caa2 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    ca8c:	4608      	mov	r0, r1
    ca8e:	f7ff ffe7 	bl	ca60 <ep2bit>
    ca92:	2301      	movs	r3, #1
    ca94:	fa03 f000 	lsl.w	r0, r3, r0
    ca98:	43c0      	mvns	r0, r0
}
    ca9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    ca9e:	f7fa bb95 	b.w	71cc <atomic_and.constprop.0>
    else if (p_state->handler.feeder == NULL)
    caa2:	6803      	ldr	r3, [r0, #0]
    caa4:	2b00      	cmp	r3, #0
    caa6:	d0f1      	beq.n	ca8c <nrf_usbd_epin_dma_handler+0x14>
}
    caa8:	bd08      	pop	{r3, pc}

0000caaa <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    caaa:	2087      	movs	r0, #135	; 0x87
    caac:	f7ff bfe4 	b.w	ca78 <nrf_usbd_epin_dma_handler>

0000cab0 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    cab0:	2086      	movs	r0, #134	; 0x86
    cab2:	f7ff bfe1 	b.w	ca78 <nrf_usbd_epin_dma_handler>

0000cab6 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    cab6:	2085      	movs	r0, #133	; 0x85
    cab8:	f7ff bfde 	b.w	ca78 <nrf_usbd_epin_dma_handler>

0000cabc <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    cabc:	2084      	movs	r0, #132	; 0x84
    cabe:	f7ff bfdb 	b.w	ca78 <nrf_usbd_epin_dma_handler>

0000cac2 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    cac2:	2083      	movs	r0, #131	; 0x83
    cac4:	f7ff bfd8 	b.w	ca78 <nrf_usbd_epin_dma_handler>

0000cac8 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    cac8:	2082      	movs	r0, #130	; 0x82
    caca:	f7ff bfd5 	b.w	ca78 <nrf_usbd_epin_dma_handler>

0000cace <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    cace:	2081      	movs	r0, #129	; 0x81
    cad0:	f7ff bfd2 	b.w	ca78 <nrf_usbd_epin_dma_handler>

0000cad4 <nrfx_usbd_ep_max_packet_size_set>:
{
    cad4:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    cad6:	f7fa fa5d 	bl	6f94 <ep_state_access>
    p_state->max_packet_size = size;
    cada:	8181      	strh	r1, [r0, #12]
}
    cadc:	bd08      	pop	{r3, pc}

0000cade <nrfx_usbd_ep_status_get>:
{
    cade:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    cae0:	f7fa fa58 	bl	6f94 <ep_state_access>
	__asm__ volatile(
    cae4:	f04f 0220 	mov.w	r2, #32
    cae8:	f3ef 8311 	mrs	r3, BASEPRI
    caec:	f382 8812 	msr	BASEPRI_MAX, r2
    caf0:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    caf4:	6882      	ldr	r2, [r0, #8]
    caf6:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    caf8:	6802      	ldr	r2, [r0, #0]
    cafa:	b92a      	cbnz	r2, cb08 <nrfx_usbd_ep_status_get+0x2a>
    cafc:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    cafe:	f383 8811 	msr	BASEPRI, r3
    cb02:	f3bf 8f6f 	isb	sy
}
    cb06:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    cb08:	2004      	movs	r0, #4
    cb0a:	e7f8      	b.n	cafe <nrfx_usbd_ep_status_get+0x20>

0000cb0c <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    cb0c:	2007      	movs	r0, #7
    cb0e:	f7fa beab 	b.w	7868 <nrf_usbd_epout_dma_handler>

0000cb12 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    cb12:	2006      	movs	r0, #6
    cb14:	f7fa bea8 	b.w	7868 <nrf_usbd_epout_dma_handler>

0000cb18 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    cb18:	2005      	movs	r0, #5
    cb1a:	f7fa bea5 	b.w	7868 <nrf_usbd_epout_dma_handler>

0000cb1e <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    cb1e:	2004      	movs	r0, #4
    cb20:	f7fa bea2 	b.w	7868 <nrf_usbd_epout_dma_handler>

0000cb24 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    cb24:	2003      	movs	r0, #3
    cb26:	f7fa be9f 	b.w	7868 <nrf_usbd_epout_dma_handler>

0000cb2a <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    cb2a:	2002      	movs	r0, #2
    cb2c:	f7fa be9c 	b.w	7868 <nrf_usbd_epout_dma_handler>

0000cb30 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    cb30:	2001      	movs	r0, #1
    cb32:	f7fa be99 	b.w	7868 <nrf_usbd_epout_dma_handler>

0000cb36 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    cb36:	f7fa bf89 	b.w	7a4c <usbd_ep_abort>

0000cb3a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    cb3a:	f7fb b98f 	b.w	7e5c <_DoInit>

0000cb3e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    cb3e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    cb40:	f7ff fffb 	bl	cb3a <SEGGER_RTT_Init>

	return 0;
}
    cb44:	2000      	movs	r0, #0
    cb46:	bd08      	pop	{r3, pc}

0000cb48 <z_device_state_init>:
}
    cb48:	4770      	bx	lr

0000cb4a <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    cb4a:	b138      	cbz	r0, cb5c <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    cb4c:	68c3      	ldr	r3, [r0, #12]
    cb4e:	8818      	ldrh	r0, [r3, #0]
    cb50:	f3c0 0008 	ubfx	r0, r0, #0, #9
    cb54:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    cb58:	4258      	negs	r0, r3
    cb5a:	4158      	adcs	r0, r3
}
    cb5c:	4770      	bx	lr

0000cb5e <k_heap_init>:
{
    cb5e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    cb60:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    cb64:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    cb68:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    cb6c:	f7fe bf2f 	b.w	b9ce <sys_heap_init>

0000cb70 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb74:	b087      	sub	sp, #28
    cb76:	4604      	mov	r4, r0
    cb78:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    cb7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
    cb7e:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    cb80:	f000 fac9 	bl	d116 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    cb84:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    cb88:	4605      	mov	r5, r0
    cb8a:	4688      	mov	r8, r1
	__asm__ volatile(
    cb8c:	f04f 0320 	mov.w	r3, #32
    cb90:	f3ef 8b11 	mrs	fp, BASEPRI
    cb94:	f383 8812 	msr	BASEPRI_MAX, r3
    cb98:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    cb9c:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    cba0:	463a      	mov	r2, r7
    cba2:	4631      	mov	r1, r6
    cba4:	4620      	mov	r0, r4
    cba6:	f7fe fea9 	bl	b8fc <sys_heap_aligned_alloc>
    cbaa:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
    cbac:	f7fc fb50 	bl	9250 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    cbb0:	9b05      	ldr	r3, [sp, #20]
    cbb2:	b13b      	cbz	r3, cbc4 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    cbb4:	f38b 8811 	msr	BASEPRI, fp
    cbb8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    cbbc:	4618      	mov	r0, r3
    cbbe:	b007      	add	sp, #28
    cbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    cbc4:	1a2a      	subs	r2, r5, r0
    cbc6:	9202      	str	r2, [sp, #8]
    cbc8:	eb68 0201 	sbc.w	r2, r8, r1
    cbcc:	9203      	str	r2, [sp, #12]
    cbce:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    cbd2:	2901      	cmp	r1, #1
    cbd4:	f172 0200 	sbcs.w	r2, r2, #0
    cbd8:	dbec      	blt.n	cbb4 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    cbda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cbde:	4659      	mov	r1, fp
    cbe0:	e9cd 2300 	strd	r2, r3, [sp]
    cbe4:	4648      	mov	r0, r9
    cbe6:	4652      	mov	r2, sl
    cbe8:	f7fb fff6 	bl	8bd8 <z_pend_curr>
	__asm__ volatile(
    cbec:	f04f 0320 	mov.w	r3, #32
    cbf0:	f3ef 8b11 	mrs	fp, BASEPRI
    cbf4:	f383 8812 	msr	BASEPRI_MAX, r3
    cbf8:	f3bf 8f6f 	isb	sy
    cbfc:	e7d0      	b.n	cba0 <k_heap_aligned_alloc+0x30>

0000cbfe <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    cbfe:	b538      	push	{r3, r4, r5, lr}
    cc00:	4604      	mov	r4, r0
    cc02:	f04f 0320 	mov.w	r3, #32
    cc06:	f3ef 8511 	mrs	r5, BASEPRI
    cc0a:	f383 8812 	msr	BASEPRI_MAX, r3
    cc0e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    cc12:	f7fe fe39 	bl	b888 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    cc16:	f104 000c 	add.w	r0, r4, #12
    cc1a:	f000 fa14 	bl	d046 <z_unpend_all>
    cc1e:	b130      	cbz	r0, cc2e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    cc20:	4629      	mov	r1, r5
    cc22:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    cc26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    cc2a:	f7fb be7b 	b.w	8924 <z_reschedule>
	__asm__ volatile(
    cc2e:	f385 8811 	msr	BASEPRI, r5
    cc32:	f3bf 8f6f 	isb	sy
}
    cc36:	bd38      	pop	{r3, r4, r5, pc}

0000cc38 <k_mem_slab_init>:
{
    cc38:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    cc3a:	2400      	movs	r4, #0
    cc3c:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    cc3e:	ea41 0402 	orr.w	r4, r1, r2
    cc42:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    cc46:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    cc4a:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    cc4c:	d10c      	bne.n	cc68 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    cc4e:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    cc50:	42a3      	cmp	r3, r4
    cc52:	d103      	bne.n	cc5c <k_mem_slab_init+0x24>
    cc54:	e9c0 0000 	strd	r0, r0, [r0]
}
    cc58:	2000      	movs	r0, #0
}
    cc5a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    cc5c:	6945      	ldr	r5, [r0, #20]
    cc5e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    cc60:	3401      	adds	r4, #1
		slab->free_list = p;
    cc62:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    cc64:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    cc66:	e7f3      	b.n	cc50 <k_mem_slab_init+0x18>
		return -EINVAL;
    cc68:	f06f 0015 	mvn.w	r0, #21
	return rc;
    cc6c:	e7f5      	b.n	cc5a <k_mem_slab_init+0x22>

0000cc6e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    cc6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc70:	4604      	mov	r4, r0
    cc72:	460d      	mov	r5, r1
	__asm__ volatile(
    cc74:	f04f 0320 	mov.w	r3, #32
    cc78:	f3ef 8611 	mrs	r6, BASEPRI
    cc7c:	f383 8812 	msr	BASEPRI_MAX, r3
    cc80:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    cc84:	6947      	ldr	r7, [r0, #20]
    cc86:	b977      	cbnz	r7, cca6 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    cc88:	f000 f9c5 	bl	d016 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    cc8c:	b158      	cbz	r0, cca6 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    cc8e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    cc90:	6142      	str	r2, [r0, #20]
    cc92:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    cc94:	f000 f94b 	bl	cf2e <z_ready_thread>
			z_reschedule(&slab->lock, key);
    cc98:	4631      	mov	r1, r6
    cc9a:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    cc9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    cca2:	f7fb be3f 	b.w	8924 <z_reschedule>
	**(char ***) mem = slab->free_list;
    cca6:	682b      	ldr	r3, [r5, #0]
    cca8:	6962      	ldr	r2, [r4, #20]
    ccaa:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    ccac:	682b      	ldr	r3, [r5, #0]
    ccae:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    ccb0:	69a3      	ldr	r3, [r4, #24]
    ccb2:	3b01      	subs	r3, #1
    ccb4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    ccb6:	f386 8811 	msr	BASEPRI, r6
    ccba:	f3bf 8f6f 	isb	sy
}
    ccbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ccc0 <k_is_in_isr>:
    ccc0:	f3ef 8005 	mrs	r0, IPSR
}
    ccc4:	3800      	subs	r0, #0
    ccc6:	bf18      	it	ne
    ccc8:	2001      	movne	r0, #1
    ccca:	4770      	bx	lr

0000cccc <z_impl_k_thread_name_set>:
}
    cccc:	f06f 0057 	mvn.w	r0, #87	; 0x57
    ccd0:	4770      	bx	lr

0000ccd2 <k_thread_name_get>:
}
    ccd2:	2000      	movs	r0, #0
    ccd4:	4770      	bx	lr

0000ccd6 <z_impl_k_thread_start>:
	z_sched_start(thread);
    ccd6:	f7fb bf23 	b.w	8b20 <z_sched_start>

0000ccda <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    ccda:	b508      	push	{r3, lr}
	__asm__ volatile(
    ccdc:	f04f 0220 	mov.w	r2, #32
    cce0:	f3ef 8311 	mrs	r3, BASEPRI
    cce4:	f382 8812 	msr	BASEPRI_MAX, r2
    cce8:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
    ccec:	f7f6 fd06 	bl	36fc <arch_cpu_idle>
    ccf0:	e7f4      	b.n	ccdc <idle+0x2>

0000ccf2 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    ccf2:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
    ccf4:	e9c0 3302 	strd	r3, r3, [r0, #8]
    ccf8:	e9c0 0000 	strd	r0, r0, [r0]
}
    ccfc:	4618      	mov	r0, r3
    ccfe:	4770      	bx	lr

0000cd00 <queue_insert>:
{
    cd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd04:	4699      	mov	r9, r3
    cd06:	4604      	mov	r4, r0
    cd08:	f89d 3020 	ldrb.w	r3, [sp, #32]
    cd0c:	460d      	mov	r5, r1
    cd0e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    cd10:	f100 0608 	add.w	r6, r0, #8
    cd14:	f04f 0220 	mov.w	r2, #32
    cd18:	f3ef 8711 	mrs	r7, BASEPRI
    cd1c:	f382 8812 	msr	BASEPRI_MAX, r2
    cd20:	f3bf 8f6f 	isb	sy
	if (is_append) {
    cd24:	b103      	cbz	r3, cd28 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
    cd26:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    cd28:	4630      	mov	r0, r6
    cd2a:	f000 f974 	bl	d016 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    cd2e:	b158      	cbz	r0, cd48 <queue_insert+0x48>
    cd30:	2400      	movs	r4, #0
    cd32:	67c4      	str	r4, [r0, #124]	; 0x7c
    cd34:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    cd38:	f000 f8f9 	bl	cf2e <z_ready_thread>
	z_reschedule(&queue->lock, key);
    cd3c:	4630      	mov	r0, r6
    cd3e:	4639      	mov	r1, r7
    cd40:	f7fb fdf0 	bl	8924 <z_reschedule>
	return 0;
    cd44:	2000      	movs	r0, #0
    cd46:	e00c      	b.n	cd62 <queue_insert+0x62>
	if (alloc) {
    cd48:	f1b9 0f00 	cmp.w	r9, #0
    cd4c:	d01b      	beq.n	cd86 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
    cd4e:	2108      	movs	r1, #8
    cd50:	f7fc fbc0 	bl	94d4 <z_thread_aligned_alloc>
		if (anode == NULL) {
    cd54:	b938      	cbnz	r0, cd66 <queue_insert+0x66>
	__asm__ volatile(
    cd56:	f387 8811 	msr	BASEPRI, r7
    cd5a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    cd5e:	f06f 000b 	mvn.w	r0, #11
}
    cd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    cd66:	2301      	movs	r3, #1
		anode->data = data;
    cd68:	f8c0 8004 	str.w	r8, [r0, #4]
    cd6c:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    cd6e:	6803      	ldr	r3, [r0, #0]
    cd70:	f003 0203 	and.w	r2, r3, #3
    cd74:	b95d      	cbnz	r5, cd8e <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
    cd76:	6823      	ldr	r3, [r4, #0]
    cd78:	4313      	orrs	r3, r2
    cd7a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    cd7c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    cd7e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    cd80:	b973      	cbnz	r3, cda0 <queue_insert+0xa0>
	list->tail = node;
    cd82:	6060      	str	r0, [r4, #4]
}
    cd84:	e00c      	b.n	cda0 <queue_insert+0xa0>
	node->next_and_flags = flags;
    cd86:	f8c8 9000 	str.w	r9, [r8]
}
    cd8a:	4640      	mov	r0, r8
    cd8c:	e7ef      	b.n	cd6e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    cd8e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    cd90:	f033 0303 	bics.w	r3, r3, #3
    cd94:	d110      	bne.n	cdb8 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
    cd96:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    cd98:	6862      	ldr	r2, [r4, #4]
    cd9a:	b93a      	cbnz	r2, cdac <queue_insert+0xac>
	list->head = node;
    cd9c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    cda0:	2104      	movs	r1, #4
    cda2:	f104 0010 	add.w	r0, r4, #16
    cda6:	f000 fb4e 	bl	d446 <z_handle_obj_poll_events>
    cdaa:	e7c7      	b.n	cd3c <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cdac:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    cdae:	f003 0303 	and.w	r3, r3, #3
    cdb2:	4303      	orrs	r3, r0
    cdb4:	6013      	str	r3, [r2, #0]
    cdb6:	e7e4      	b.n	cd82 <queue_insert+0x82>
    cdb8:	4313      	orrs	r3, r2
    cdba:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cdbc:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    cdbe:	f003 0303 	and.w	r3, r3, #3
    cdc2:	4303      	orrs	r3, r0
    cdc4:	602b      	str	r3, [r5, #0]
}
    cdc6:	e7eb      	b.n	cda0 <queue_insert+0xa0>

0000cdc8 <z_queue_node_peek>:
{
    cdc8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    cdca:	4604      	mov	r4, r0
    cdcc:	b130      	cbz	r0, cddc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cdce:	6802      	ldr	r2, [r0, #0]
    cdd0:	0793      	lsls	r3, r2, #30
    cdd2:	d003      	beq.n	cddc <z_queue_node_peek+0x14>
		ret = anode->data;
    cdd4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    cdd6:	b109      	cbz	r1, cddc <z_queue_node_peek+0x14>
			k_free(anode);
    cdd8:	f000 fb4b 	bl	d472 <k_free>
}
    cddc:	4620      	mov	r0, r4
    cdde:	bd10      	pop	{r4, pc}

0000cde0 <k_queue_append>:
{
    cde0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    cde2:	2301      	movs	r3, #1
    cde4:	9300      	str	r3, [sp, #0]
    cde6:	2300      	movs	r3, #0
{
    cde8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    cdea:	4619      	mov	r1, r3
    cdec:	f7ff ff88 	bl	cd00 <queue_insert>
}
    cdf0:	b003      	add	sp, #12
    cdf2:	f85d fb04 	ldr.w	pc, [sp], #4

0000cdf6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    cdf6:	b15a      	cbz	r2, ce10 <z_impl_k_sem_init+0x1a>
    cdf8:	428a      	cmp	r2, r1
    cdfa:	d309      	bcc.n	ce10 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    cdfc:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    ce00:	e9c0 1202 	strd	r1, r2, [r0, #8]
    ce04:	e9c0 0000 	strd	r0, r0, [r0]
    ce08:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    ce0c:	2000      	movs	r0, #0
    ce0e:	4770      	bx	lr
		return -EINVAL;
    ce10:	f06f 0015 	mvn.w	r0, #21
}
    ce14:	4770      	bx	lr

0000ce16 <notify_queue_locked>:
	if (queue != NULL) {
    ce16:	b120      	cbz	r0, ce22 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    ce18:	2200      	movs	r2, #0
    ce1a:	4611      	mov	r1, r2
    ce1c:	30d0      	adds	r0, #208	; 0xd0
    ce1e:	f000 b922 	b.w	d066 <z_sched_wake>
}
    ce22:	4770      	bx	lr

0000ce24 <k_work_init>:
{
    ce24:	b538      	push	{r3, r4, r5, lr}
    ce26:	4604      	mov	r4, r0
    ce28:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ce2a:	2210      	movs	r2, #16
    ce2c:	2100      	movs	r1, #0
    ce2e:	f7ff f8f9 	bl	c024 <memset>
    ce32:	6065      	str	r5, [r4, #4]
}
    ce34:	bd38      	pop	{r3, r4, r5, pc}

0000ce36 <k_work_submit_to_queue>:
{
    ce36:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ce38:	9001      	str	r0, [sp, #4]
    ce3a:	4608      	mov	r0, r1
	__asm__ volatile(
    ce3c:	f04f 0320 	mov.w	r3, #32
    ce40:	f3ef 8511 	mrs	r5, BASEPRI
    ce44:	f383 8812 	msr	BASEPRI_MAX, r3
    ce48:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    ce4c:	a901      	add	r1, sp, #4
    ce4e:	f7fb fc99 	bl	8784 <submit_to_queue_locked>
    ce52:	4604      	mov	r4, r0
	__asm__ volatile(
    ce54:	f385 8811 	msr	BASEPRI, r5
    ce58:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    ce5c:	2800      	cmp	r0, #0
    ce5e:	dd04      	ble.n	ce6a <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    ce60:	f7fc f822 	bl	8ea8 <z_impl_k_is_preempt_thread>
    ce64:	b108      	cbz	r0, ce6a <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    ce66:	f7fb ff71 	bl	8d4c <z_impl_k_yield>
}
    ce6a:	4620      	mov	r0, r4
    ce6c:	b003      	add	sp, #12
    ce6e:	bd30      	pop	{r4, r5, pc}

0000ce70 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    ce70:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    ce74:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ce76:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ce78:	2300      	movs	r3, #0
	node->prev = NULL;
    ce7a:	e9c0 3300 	strd	r3, r3, [r0]
}
    ce7e:	4770      	bx	lr

0000ce80 <unpend_thread_no_timeout>:
{
    ce80:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    ce82:	f7ff fff5 	bl	ce70 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ce86:	7b43      	ldrb	r3, [r0, #13]
    ce88:	f023 0302 	bic.w	r3, r3, #2
    ce8c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    ce8e:	2300      	movs	r3, #0
    ce90:	6083      	str	r3, [r0, #8]
}
    ce92:	bd08      	pop	{r3, pc}

0000ce94 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    ce94:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    ce98:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    ce9c:	4283      	cmp	r3, r0
		return b2 - b1;
    ce9e:	bf14      	ite	ne
    cea0:	1ac0      	subne	r0, r0, r3
	return 0;
    cea2:	2000      	moveq	r0, #0
}
    cea4:	4770      	bx	lr

0000cea6 <z_unpend_thread_no_timeout>:
{
    cea6:	b508      	push	{r3, lr}
	__asm__ volatile(
    cea8:	f04f 0320 	mov.w	r3, #32
    ceac:	f3ef 8111 	mrs	r1, BASEPRI
    ceb0:	f383 8812 	msr	BASEPRI_MAX, r3
    ceb4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    ceb8:	f7ff ffe2 	bl	ce80 <unpend_thread_no_timeout>
	__asm__ volatile(
    cebc:	f381 8811 	msr	BASEPRI, r1
    cec0:	f3bf 8f6f 	isb	sy
}
    cec4:	bd08      	pop	{r3, pc}

0000cec6 <z_unpend_thread>:
{
    cec6:	b510      	push	{r4, lr}
	__asm__ volatile(
    cec8:	f04f 0320 	mov.w	r3, #32
    cecc:	f3ef 8411 	mrs	r4, BASEPRI
    ced0:	f383 8812 	msr	BASEPRI_MAX, r3
    ced4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    ced8:	f7ff ffd2 	bl	ce80 <unpend_thread_no_timeout>
	__asm__ volatile(
    cedc:	f384 8811 	msr	BASEPRI, r4
    cee0:	f3bf 8f6f 	isb	sy
}
    cee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cee8:	3018      	adds	r0, #24
    ceea:	f000 b8d9 	b.w	d0a0 <z_abort_timeout>

0000ceee <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ceee:	4603      	mov	r3, r0
    cef0:	b920      	cbnz	r0, cefc <z_reschedule_irqlock+0xe>
    cef2:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    cef6:	b90a      	cbnz	r2, cefc <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    cef8:	f7f6 bcfa 	b.w	38f0 <arch_swap>
    cefc:	f383 8811 	msr	BASEPRI, r3
    cf00:	f3bf 8f6f 	isb	sy
}
    cf04:	4770      	bx	lr

0000cf06 <z_reschedule_unlocked>:
	__asm__ volatile(
    cf06:	f04f 0320 	mov.w	r3, #32
    cf0a:	f3ef 8011 	mrs	r0, BASEPRI
    cf0e:	f383 8812 	msr	BASEPRI_MAX, r3
    cf12:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    cf16:	f7ff bfea 	b.w	ceee <z_reschedule_irqlock>

0000cf1a <z_priq_dumb_best>:
	return list->head == list;
    cf1a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cf1c:	4298      	cmp	r0, r3
    cf1e:	d004      	beq.n	cf2a <z_priq_dumb_best+0x10>
	if (n != NULL) {
    cf20:	2b00      	cmp	r3, #0
    cf22:	bf38      	it	cc
    cf24:	2300      	movcc	r3, #0
    cf26:	4618      	mov	r0, r3
    cf28:	4770      	bx	lr
	struct k_thread *thread = NULL;
    cf2a:	2000      	movs	r0, #0
}
    cf2c:	4770      	bx	lr

0000cf2e <z_ready_thread>:
{
    cf2e:	b510      	push	{r4, lr}
    cf30:	f04f 0320 	mov.w	r3, #32
    cf34:	f3ef 8411 	mrs	r4, BASEPRI
    cf38:	f383 8812 	msr	BASEPRI_MAX, r3
    cf3c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    cf40:	f7fb fdb6 	bl	8ab0 <ready_thread>
	__asm__ volatile(
    cf44:	f384 8811 	msr	BASEPRI, r4
    cf48:	f3bf 8f6f 	isb	sy
}
    cf4c:	bd10      	pop	{r4, pc}

0000cf4e <z_thread_timeout>:
{
    cf4e:	b510      	push	{r4, lr}
    cf50:	4601      	mov	r1, r0
	__asm__ volatile(
    cf52:	f04f 0320 	mov.w	r3, #32
    cf56:	f3ef 8411 	mrs	r4, BASEPRI
    cf5a:	f383 8812 	msr	BASEPRI_MAX, r3
    cf5e:	f3bf 8f6f 	isb	sy
		if (!killed) {
    cf62:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    cf66:	f013 0f28 	tst.w	r3, #40	; 0x28
    cf6a:	d10d      	bne.n	cf88 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    cf6c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    cf70:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    cf72:	b10b      	cbz	r3, cf78 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    cf74:	f7ff ff84 	bl	ce80 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    cf78:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    cf7c:	f023 0314 	bic.w	r3, r3, #20
    cf80:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    cf84:	f7fb fd94 	bl	8ab0 <ready_thread>
	__asm__ volatile(
    cf88:	f384 8811 	msr	BASEPRI, r4
    cf8c:	f3bf 8f6f 	isb	sy
}
    cf90:	bd10      	pop	{r4, pc}

0000cf92 <add_to_waitq_locked>:
{
    cf92:	b538      	push	{r3, r4, r5, lr}
    cf94:	4604      	mov	r4, r0
    cf96:	460d      	mov	r5, r1
	unready_thread(thread);
    cf98:	f7fb fde0 	bl	8b5c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    cf9c:	7b63      	ldrb	r3, [r4, #13]
    cf9e:	f043 0302 	orr.w	r3, r3, #2
    cfa2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    cfa4:	b1b5      	cbz	r5, cfd4 <add_to_waitq_locked+0x42>
	return list->head == list;
    cfa6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    cfa8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cfaa:	429d      	cmp	r5, r3
    cfac:	bf08      	it	eq
    cfae:	2300      	moveq	r3, #0
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	bf38      	it	cc
    cfb4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cfb6:	b19b      	cbz	r3, cfe0 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    cfb8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    cfbc:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    cfc0:	4291      	cmp	r1, r2
    cfc2:	d008      	beq.n	cfd6 <add_to_waitq_locked+0x44>
		return b2 - b1;
    cfc4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    cfc6:	2a00      	cmp	r2, #0
    cfc8:	dd05      	ble.n	cfd6 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    cfca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    cfcc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    cfd0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    cfd2:	605c      	str	r4, [r3, #4]
}
    cfd4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    cfd6:	686a      	ldr	r2, [r5, #4]
    cfd8:	4293      	cmp	r3, r2
    cfda:	d001      	beq.n	cfe0 <add_to_waitq_locked+0x4e>
    cfdc:	681b      	ldr	r3, [r3, #0]
    cfde:	e7ea      	b.n	cfb6 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    cfe0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    cfe2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    cfe6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    cfe8:	606c      	str	r4, [r5, #4]
    cfea:	e7f3      	b.n	cfd4 <add_to_waitq_locked+0x42>

0000cfec <z_unpend1_no_timeout>:
{
    cfec:	b510      	push	{r4, lr}
	__asm__ volatile(
    cfee:	f04f 0320 	mov.w	r3, #32
    cff2:	f3ef 8411 	mrs	r4, BASEPRI
    cff6:	f383 8812 	msr	BASEPRI_MAX, r3
    cffa:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    cffe:	f7ff ff8c 	bl	cf1a <z_priq_dumb_best>
		if (thread != NULL) {
    d002:	4601      	mov	r1, r0
    d004:	b108      	cbz	r0, d00a <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    d006:	f7ff ff3b 	bl	ce80 <unpend_thread_no_timeout>
	__asm__ volatile(
    d00a:	f384 8811 	msr	BASEPRI, r4
    d00e:	f3bf 8f6f 	isb	sy
}
    d012:	4608      	mov	r0, r1
    d014:	bd10      	pop	{r4, pc}

0000d016 <z_unpend_first_thread>:
{
    d016:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d018:	f04f 0320 	mov.w	r3, #32
    d01c:	f3ef 8511 	mrs	r5, BASEPRI
    d020:	f383 8812 	msr	BASEPRI_MAX, r3
    d024:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    d028:	f7ff ff77 	bl	cf1a <z_priq_dumb_best>
		if (thread != NULL) {
    d02c:	4604      	mov	r4, r0
    d02e:	b120      	cbz	r0, d03a <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    d030:	f7ff ff26 	bl	ce80 <unpend_thread_no_timeout>
    d034:	3018      	adds	r0, #24
    d036:	f000 f833 	bl	d0a0 <z_abort_timeout>
	__asm__ volatile(
    d03a:	f385 8811 	msr	BASEPRI, r5
    d03e:	f3bf 8f6f 	isb	sy
}
    d042:	4620      	mov	r0, r4
    d044:	bd38      	pop	{r3, r4, r5, pc}

0000d046 <z_unpend_all>:
{
    d046:	b538      	push	{r3, r4, r5, lr}
    d048:	4605      	mov	r5, r0
	int need_sched = 0;
    d04a:	2000      	movs	r0, #0
	return list->head == list;
    d04c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d04e:	42a5      	cmp	r5, r4
    d050:	d000      	beq.n	d054 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    d052:	b904      	cbnz	r4, d056 <z_unpend_all+0x10>
}
    d054:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    d056:	4620      	mov	r0, r4
    d058:	f7ff ff35 	bl	cec6 <z_unpend_thread>
		z_ready_thread(thread);
    d05c:	4620      	mov	r0, r4
    d05e:	f7ff ff66 	bl	cf2e <z_ready_thread>
		need_sched = 1;
    d062:	2001      	movs	r0, #1
    d064:	e7f2      	b.n	d04c <z_unpend_all+0x6>

0000d066 <z_sched_wake>:
{
    d066:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d068:	f04f 0320 	mov.w	r3, #32
    d06c:	f3ef 8511 	mrs	r5, BASEPRI
    d070:	f383 8812 	msr	BASEPRI_MAX, r3
    d074:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    d078:	f7ff ff4f 	bl	cf1a <z_priq_dumb_best>
		if (thread != NULL) {
    d07c:	4604      	mov	r4, r0
    d07e:	b150      	cbz	r0, d096 <z_sched_wake+0x30>
    d080:	67c1      	str	r1, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
    d082:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    d084:	f7ff fefc 	bl	ce80 <unpend_thread_no_timeout>
    d088:	3018      	adds	r0, #24
    d08a:	f000 f809 	bl	d0a0 <z_abort_timeout>
			ready_thread(thread);
    d08e:	4620      	mov	r0, r4
    d090:	f7fb fd0e 	bl	8ab0 <ready_thread>
			ret = true;
    d094:	2001      	movs	r0, #1
	__asm__ volatile(
    d096:	f385 8811 	msr	BASEPRI, r5
    d09a:	f3bf 8f6f 	isb	sy
}
    d09e:	bd38      	pop	{r3, r4, r5, pc}

0000d0a0 <z_abort_timeout>:
{
    d0a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    d0a2:	f04f 0220 	mov.w	r2, #32
    d0a6:	f3ef 8411 	mrs	r4, BASEPRI
    d0aa:	f382 8812 	msr	BASEPRI_MAX, r2
    d0ae:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    d0b2:	6803      	ldr	r3, [r0, #0]
    d0b4:	b13b      	cbz	r3, d0c6 <z_abort_timeout+0x26>
			remove_timeout(to);
    d0b6:	f7fb ff8f 	bl	8fd8 <remove_timeout>
			ret = 0;
    d0ba:	2000      	movs	r0, #0
	__asm__ volatile(
    d0bc:	f384 8811 	msr	BASEPRI, r4
    d0c0:	f3bf 8f6f 	isb	sy
}
    d0c4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    d0c6:	f06f 0015 	mvn.w	r0, #21
    d0ca:	e7f7      	b.n	d0bc <z_abort_timeout+0x1c>

0000d0cc <z_set_timeout_expiry>:
{
    d0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d0ce:	4604      	mov	r4, r0
    d0d0:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    d0d2:	f04f 0320 	mov.w	r3, #32
    d0d6:	f3ef 8511 	mrs	r5, BASEPRI
    d0da:	f383 8812 	msr	BASEPRI_MAX, r3
    d0de:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    d0e2:	f7fb ff93 	bl	900c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    d0e6:	2801      	cmp	r0, #1
    d0e8:	dd05      	ble.n	d0f6 <z_set_timeout_expiry+0x2a>
    d0ea:	42a0      	cmp	r0, r4
    d0ec:	9901      	ldr	r1, [sp, #4]
    d0ee:	db02      	blt.n	d0f6 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    d0f0:	4620      	mov	r0, r4
    d0f2:	f7f8 ffad 	bl	6050 <sys_clock_set_timeout>
	__asm__ volatile(
    d0f6:	f385 8811 	msr	BASEPRI, r5
    d0fa:	f3bf 8f6f 	isb	sy
}
    d0fe:	b003      	add	sp, #12
    d100:	bd30      	pop	{r4, r5, pc}

0000d102 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    d102:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    d104:	f7fc f8a4 	bl	9250 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    d108:	bd08      	pop	{r3, pc}

0000d10a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    d10a:	f7fc b8a1 	b.w	9250 <sys_clock_tick_get>

0000d10e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    d10e:	b108      	cbz	r0, d114 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    d110:	f7f7 b8a4 	b.w	425c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    d114:	4770      	bx	lr

0000d116 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    d116:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d118:	1c4b      	adds	r3, r1, #1
    d11a:	bf08      	it	eq
    d11c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    d120:	4604      	mov	r4, r0
    d122:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d124:	d013      	beq.n	d14e <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    d126:	ea54 0105 	orrs.w	r1, r4, r5
    d12a:	d103      	bne.n	d134 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    d12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    d130:	f7fc b88e 	b.w	9250 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    d134:	f06f 0101 	mvn.w	r1, #1
    d138:	1a0a      	subs	r2, r1, r0
    d13a:	f04f 31ff 	mov.w	r1, #4294967295
    d13e:	eb61 0305 	sbc.w	r3, r1, r5
    d142:	2a00      	cmp	r2, #0
    d144:	f173 0100 	sbcs.w	r1, r3, #0
    d148:	db02      	blt.n	d150 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
    d14a:	4610      	mov	r0, r2
    d14c:	4619      	mov	r1, r3
}
    d14e:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
    d150:	f7fc f87e 	bl	9250 <sys_clock_tick_get>
    d154:	2c01      	cmp	r4, #1
    d156:	f175 0300 	sbcs.w	r3, r5, #0
    d15a:	bfbc      	itt	lt
    d15c:	2401      	movlt	r4, #1
    d15e:	2500      	movlt	r5, #0
    d160:	1820      	adds	r0, r4, r0
    d162:	eb45 0101 	adc.w	r1, r5, r1
    d166:	e7f2      	b.n	d14e <sys_clock_timeout_end_calc+0x38>

0000d168 <k_timer_init>:
	timer->status = 0U;
    d168:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    d16a:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    d16e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    d172:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    d176:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    d17a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    d17c:	6343      	str	r3, [r0, #52]	; 0x34
}
    d17e:	4770      	bx	lr

0000d180 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    d180:	b510      	push	{r4, lr}
    d182:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    d184:	f7ff ff8c 	bl	d0a0 <z_abort_timeout>

	if (inactive) {
    d188:	b9b0      	cbnz	r0, d1b8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    d18a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d18c:	b10b      	cbz	r3, d192 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    d18e:	4620      	mov	r0, r4
    d190:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    d192:	f104 0018 	add.w	r0, r4, #24
    d196:	f7ff ff29 	bl	cfec <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    d19a:	b168      	cbz	r0, d1b8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    d19c:	f7ff fec7 	bl	cf2e <z_ready_thread>
	__asm__ volatile(
    d1a0:	f04f 0320 	mov.w	r3, #32
    d1a4:	f3ef 8011 	mrs	r0, BASEPRI
    d1a8:	f383 8812 	msr	BASEPRI_MAX, r3
    d1ac:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    d1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    d1b4:	f7ff be9b 	b.w	ceee <z_reschedule_irqlock>
    d1b8:	bd10      	pop	{r4, pc}

0000d1ba <clear_event_registrations>:
	while (num_events--) {
    d1ba:	2314      	movs	r3, #20
{
    d1bc:	b570      	push	{r4, r5, r6, lr}
    d1be:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
    d1c2:	2400      	movs	r4, #0
    d1c4:	2601      	movs	r6, #1
	while (num_events--) {
    d1c6:	4281      	cmp	r1, r0
    d1c8:	d100      	bne.n	d1cc <clear_event_registrations+0x12>
}
    d1ca:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    d1cc:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
    d1d0:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
    d1d4:	f003 031f 	and.w	r3, r3, #31
    d1d8:	2b08      	cmp	r3, #8
    d1da:	d80d      	bhi.n	d1f8 <clear_event_registrations+0x3e>
    d1dc:	fa06 f303 	lsl.w	r3, r6, r3
    d1e0:	f413 7f8b 	tst.w	r3, #278	; 0x116
    d1e4:	d008      	beq.n	d1f8 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
    d1e6:	f851 3c14 	ldr.w	r3, [r1, #-20]
    d1ea:	b12b      	cbz	r3, d1f8 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
    d1ec:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
    d1f0:	602b      	str	r3, [r5, #0]
	next->prev = prev;
    d1f2:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    d1f4:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
    d1f8:	f382 8811 	msr	BASEPRI, r2
    d1fc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    d200:	f04f 0320 	mov.w	r3, #32
    d204:	f3ef 8211 	mrs	r2, BASEPRI
    d208:	f383 8812 	msr	BASEPRI_MAX, r3
    d20c:	f3bf 8f6f 	isb	sy
    d210:	3914      	subs	r1, #20
    d212:	e7d8      	b.n	d1c6 <clear_event_registrations+0xc>

0000d214 <add_event>:
{
    d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d216:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    d218:	e9d0 2300 	ldrd	r2, r3, [r0]
    d21c:	4290      	cmp	r0, r2
    d21e:	4604      	mov	r4, r0
    d220:	460d      	mov	r5, r1
    d222:	d105      	bne.n	d230 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
    d224:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    d226:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    d22a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    d22c:	6065      	str	r5, [r4, #4]
}
    d22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
    d230:	2b00      	cmp	r3, #0
    d232:	d0f7      	beq.n	d224 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    d234:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    d236:	b100      	cbz	r0, d23a <add_event+0x26>
    d238:	3860      	subs	r0, #96	; 0x60
    d23a:	b107      	cbz	r7, d23e <add_event+0x2a>
    d23c:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    d23e:	4639      	mov	r1, r7
    d240:	f7ff fe28 	bl	ce94 <z_sched_prio_cmp>
	if ((pending == NULL) ||
    d244:	2800      	cmp	r0, #0
    d246:	dced      	bgt.n	d224 <add_event+0x10>
	return list->head == list;
    d248:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d24a:	42b4      	cmp	r4, r6
    d24c:	d0ea      	beq.n	d224 <add_event+0x10>
    d24e:	2e00      	cmp	r6, #0
    d250:	bf38      	it	cc
    d252:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    d254:	2e00      	cmp	r6, #0
    d256:	d0e5      	beq.n	d224 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
    d258:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    d25a:	b101      	cbz	r1, d25e <add_event+0x4a>
    d25c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
    d25e:	4638      	mov	r0, r7
    d260:	f7ff fe18 	bl	ce94 <z_sched_prio_cmp>
    d264:	2800      	cmp	r0, #0
    d266:	dd05      	ble.n	d274 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
    d268:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    d26a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
    d26e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    d270:	6075      	str	r5, [r6, #4]
			return;
    d272:	e7dc      	b.n	d22e <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
    d274:	6863      	ldr	r3, [r4, #4]
    d276:	42b3      	cmp	r3, r6
    d278:	d0d4      	beq.n	d224 <add_event+0x10>
    d27a:	6836      	ldr	r6, [r6, #0]
    d27c:	e7ea      	b.n	d254 <add_event+0x40>

0000d27e <register_events>:
{
    d27e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    d282:	2500      	movs	r5, #0
{
    d284:	468b      	mov	fp, r1
    d286:	4614      	mov	r4, r2
    d288:	461f      	mov	r7, r3
    d28a:	4682      	mov	sl, r0
	int events_registered = 0;
    d28c:	462e      	mov	r6, r5
	event->poller = NULL;
    d28e:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
    d290:	455d      	cmp	r5, fp
    d292:	db02      	blt.n	d29a <register_events+0x1c>
}
    d294:	4630      	mov	r0, r6
    d296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d29a:	f04f 0320 	mov.w	r3, #32
    d29e:	f3ef 8911 	mrs	r9, BASEPRI
    d2a2:	f383 8812 	msr	BASEPRI_MAX, r3
    d2a6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    d2aa:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d2ae:	f003 031f 	and.w	r3, r3, #31
    d2b2:	3b01      	subs	r3, #1
    d2b4:	2b07      	cmp	r3, #7
    d2b6:	d80f      	bhi.n	d2d8 <register_events+0x5a>
    d2b8:	e8df f003 	tbb	[pc, r3]
    d2bc:	0a0e041e 	.word	0x0a0e041e
    d2c0:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
    d2c4:	f8da 3010 	ldr.w	r3, [sl, #16]
    d2c8:	689b      	ldr	r3, [r3, #8]
    d2ca:	b12b      	cbz	r3, d2d8 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
    d2cc:	2302      	movs	r3, #2
    d2ce:	e020      	b.n	d312 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
    d2d0:	f8da 3010 	ldr.w	r3, [sl, #16]
    d2d4:	681b      	ldr	r3, [r3, #0]
    d2d6:	bb8b      	cbnz	r3, d33c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
    d2d8:	bb47      	cbnz	r7, d32c <register_events+0xae>
    d2da:	7823      	ldrb	r3, [r4, #0]
    d2dc:	b333      	cbz	r3, d32c <register_events+0xae>
	switch (event->type) {
    d2de:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d2e2:	f003 031f 	and.w	r3, r3, #31
    d2e6:	3b01      	subs	r3, #1
    d2e8:	2b07      	cmp	r3, #7
    d2ea:	d830      	bhi.n	d34e <register_events+0xd0>
    d2ec:	e8df f003 	tbb	[pc, r3]
    d2f0:	282f2833 	.word	0x282f2833
    d2f4:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
    d2f8:	f8da 3010 	ldr.w	r3, [sl, #16]
    d2fc:	689b      	ldr	r3, [r3, #8]
    d2fe:	2b00      	cmp	r3, #0
    d300:	d0ea      	beq.n	d2d8 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
    d302:	2301      	movs	r3, #1
    d304:	e005      	b.n	d312 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
    d306:	f8da 3010 	ldr.w	r3, [sl, #16]
    d30a:	6a1b      	ldr	r3, [r3, #32]
    d30c:	2b00      	cmp	r3, #0
    d30e:	d0e3      	beq.n	d2d8 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
    d310:	2310      	movs	r3, #16
	event->state |= state;
    d312:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
    d316:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
    d31a:	f3c2 3145 	ubfx	r1, r2, #13, #6
    d31e:	430b      	orrs	r3, r1
    d320:	f363 3252 	bfi	r2, r3, #13, #6
    d324:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
    d328:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    d32c:	f389 8811 	msr	BASEPRI, r9
    d330:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    d334:	3501      	adds	r5, #1
    d336:	f10a 0a14 	add.w	sl, sl, #20
    d33a:	e7a9      	b.n	d290 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    d33c:	2304      	movs	r3, #4
    d33e:	e7e8      	b.n	d312 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
    d340:	f8da 0010 	ldr.w	r0, [sl, #16]
    d344:	4622      	mov	r2, r4
    d346:	4651      	mov	r1, sl
    d348:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
    d34a:	f7ff ff63 	bl	d214 <add_event>
	event->poller = poller;
    d34e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
    d352:	3601      	adds	r6, #1
    d354:	e7ea      	b.n	d32c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
    d356:	f8da 0010 	ldr.w	r0, [sl, #16]
    d35a:	4622      	mov	r2, r4
    d35c:	4651      	mov	r1, sl
    d35e:	e7f4      	b.n	d34a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
    d360:	f8da 0010 	ldr.w	r0, [sl, #16]
    d364:	4622      	mov	r2, r4
    d366:	4651      	mov	r1, sl
    d368:	3024      	adds	r0, #36	; 0x24
    d36a:	e7ee      	b.n	d34a <register_events+0xcc>

0000d36c <signal_poll_event>:
{
    d36c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
    d370:	6884      	ldr	r4, [r0, #8]
{
    d372:	4605      	mov	r5, r0
    d374:	460e      	mov	r6, r1
	if (poller != NULL) {
    d376:	b144      	cbz	r4, d38a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    d378:	7863      	ldrb	r3, [r4, #1]
    d37a:	2b01      	cmp	r3, #1
    d37c:	d139      	bne.n	d3f2 <signal_poll_event+0x86>
	if (!z_is_thread_pending(thread)) {
    d37e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    d382:	f013 0302 	ands.w	r3, r3, #2
    d386:	d10a      	bne.n	d39e <signal_poll_event+0x32>
		poller->is_polling = false;
    d388:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    d38a:	68eb      	ldr	r3, [r5, #12]
    d38c:	f3c3 3145 	ubfx	r1, r3, #13, #6
    d390:	430e      	orrs	r6, r1
	event->poller = NULL;
    d392:	2000      	movs	r0, #0
	event->state |= state;
    d394:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    d398:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    d39a:	60eb      	str	r3, [r5, #12]
	return retcode;
    d39c:	e00d      	b.n	d3ba <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
    d39e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    d3a2:	f04f 31ff 	mov.w	r1, #4294967295
    d3a6:	f06f 0001 	mvn.w	r0, #1
    d3aa:	428b      	cmp	r3, r1
    d3ac:	bf08      	it	eq
    d3ae:	4282      	cmpeq	r2, r0
    d3b0:	d106      	bne.n	d3c0 <signal_poll_event+0x54>
		poller->is_polling = false;
    d3b2:	2300      	movs	r3, #0
    d3b4:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    d3b6:	f06f 000a 	mvn.w	r0, #10
}
    d3ba:	b002      	add	sp, #8
    d3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    d3c0:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
	z_unpend_thread(thread);
    d3c4:	9001      	str	r0, [sp, #4]
    d3c6:	f7ff fd7e 	bl	cec6 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    d3ca:	2e08      	cmp	r6, #8
    d3cc:	bf0c      	ite	eq
    d3ce:	f06f 0303 	mvneq.w	r3, #3
    d3d2:	2300      	movne	r3, #0
    d3d4:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    d3d6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    d3da:	06db      	lsls	r3, r3, #27
    d3dc:	d103      	bne.n	d3e6 <signal_poll_event+0x7a>
	if (!z_is_thread_ready(thread)) {
    d3de:	f854 7c48 	ldr.w	r7, [r4, #-72]
    d3e2:	9801      	ldr	r0, [sp, #4]
    d3e4:	b10f      	cbz	r7, d3ea <signal_poll_event+0x7e>
		poller->is_polling = false;
    d3e6:	2300      	movs	r3, #0
    d3e8:	e7ce      	b.n	d388 <signal_poll_event+0x1c>
	z_ready_thread(thread);
    d3ea:	f7ff fda0 	bl	cf2e <z_ready_thread>
		poller->is_polling = false;
    d3ee:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    d3f0:	e7cb      	b.n	d38a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    d3f2:	2b02      	cmp	r3, #2
    d3f4:	d1f7      	bne.n	d3e6 <signal_poll_event+0x7a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    d3f6:	7823      	ldrb	r3, [r4, #0]
    d3f8:	2b00      	cmp	r3, #0
    d3fa:	d0c6      	beq.n	d38a <signal_poll_event+0x1e>
    d3fc:	f854 7c04 	ldr.w	r7, [r4, #-4]
    d400:	2f00      	cmp	r7, #0
    d402:	d0f4      	beq.n	d3ee <signal_poll_event+0x82>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    d404:	f1a4 0114 	sub.w	r1, r4, #20
		twork->poll_result = 0;
    d408:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    d40c:	f104 0014 	add.w	r0, r4, #20
    d410:	9101      	str	r1, [sp, #4]
    d412:	f7ff fe45 	bl	d0a0 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
    d416:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
    d418:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    d41c:	4638      	mov	r0, r7
    d41e:	f7ff fd0a 	bl	ce36 <k_work_submit_to_queue>
		poller->is_polling = false;
    d422:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    d426:	e7b0      	b.n	d38a <signal_poll_event+0x1e>

0000d428 <k_poll_event_init>:
{
    d428:	b510      	push	{r4, lr}
	event->type = type;
    d42a:	04d2      	lsls	r2, r2, #19
    d42c:	0209      	lsls	r1, r1, #8
    d42e:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
    d432:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
    d436:	430a      	orrs	r2, r1
    d438:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
    d43a:	2400      	movs	r4, #0
	event->type = type;
    d43c:	430a      	orrs	r2, r1
	event->obj = obj;
    d43e:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
    d442:	6084      	str	r4, [r0, #8]
}
    d444:	bd10      	pop	{r4, pc}

0000d446 <z_handle_obj_poll_events>:
{
    d446:	4603      	mov	r3, r0
	return list->head == list;
    d448:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    d44a:	4283      	cmp	r3, r0
    d44c:	d008      	beq.n	d460 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    d44e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    d452:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    d454:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d456:	2300      	movs	r3, #0
	node->prev = NULL;
    d458:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    d45c:	f7ff bf86 	b.w	d36c <signal_poll_event>
}
    d460:	4770      	bx	lr

0000d462 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
    d462:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    d464:	e9c0 0000 	strd	r0, r0, [r0]
    d468:	6083      	str	r3, [r0, #8]
}
    d46a:	4770      	bx	lr

0000d46c <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
    d46c:	2300      	movs	r3, #0
    d46e:	6083      	str	r3, [r0, #8]
}
    d470:	4770      	bx	lr

0000d472 <k_free>:
	if (ptr != NULL) {
    d472:	b120      	cbz	r0, d47e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    d474:	1f01      	subs	r1, r0, #4
    d476:	f850 0c04 	ldr.w	r0, [r0, #-4]
    d47a:	f7ff bbc0 	b.w	cbfe <k_heap_free>
}
    d47e:	4770      	bx	lr

0000d480 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    d480:	4770      	bx	lr

0000d482 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    d482:	4770      	bx	lr

0000d484 <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    d484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d488:	9f06      	ldr	r7, [sp, #24]
    d48a:	4604      	mov	r4, r0
    d48c:	4615      	mov	r5, r2
    d48e:	461e      	mov	r6, r3
    d490:	f7fc fa54 	bl	993c <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    d494:	b938      	cbnz	r0, d4a6 <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    d496:	463b      	mov	r3, r7
    d498:	4632      	mov	r2, r6
    d49a:	4629      	mov	r1, r5
    d49c:	4620      	mov	r0, r4
    d49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d4a2:	f7fc ba71 	b.w	9988 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    d4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d4aa <PkaInitAndMutexLock>:
    d4aa:	460a      	mov	r2, r1
    d4ac:	2100      	movs	r1, #0
    d4ae:	f7fc bcf3 	b.w	9e98 <PkaInitPka>

0000d4b2 <SaSi_PalMemCopy>:
    d4b2:	f7fe bdac 	b.w	c00e <memcpy>

0000d4b6 <SaSi_PalMemSet>:
    d4b6:	f7fe bdb5 	b.w	c024 <memset>

0000d4ba <SaSi_PalMemSetZero>:
    d4ba:	460a      	mov	r2, r1
    d4bc:	2100      	movs	r1, #0
    d4be:	f7fe bdb1 	b.w	c024 <memset>

0000d4c2 <CRYS_COMMON_ReverseMemcpy32>:
    d4c2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    d4c6:	3804      	subs	r0, #4
    d4c8:	428a      	cmp	r2, r1
    d4ca:	d101      	bne.n	d4d0 <CRYS_COMMON_ReverseMemcpy32+0xe>
    d4cc:	2000      	movs	r0, #0
    d4ce:	4770      	bx	lr
    d4d0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    d4d4:	ba1b      	rev	r3, r3
    d4d6:	f840 3f04 	str.w	r3, [r0, #4]!
    d4da:	e7f5      	b.n	d4c8 <CRYS_COMMON_ReverseMemcpy32+0x6>

0000d4dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    d4dc:	f7f8 bf48 	b.w	6370 <SystemInit>
